
Version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8f4  0800513c  0800513c  0000513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001558  08014a30  08014a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f88  08015f88  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08015f88  08015f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f90  08015f90  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f90  08015f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f94  08015f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08015f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be0  200001d8  08016170  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004db8  08016170  00024db8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035a53  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054d0  00000000  00000000  00055c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0005b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0005c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bad4  00000000  00000000  0005db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d763  00000000  00000000  000795ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009717e  00000000  00000000  00096d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012decd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006718  00000000  00000000  0012df20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800513c <__do_global_dtors_aux>:
 800513c:	b510      	push	{r4, lr}
 800513e:	4c05      	ldr	r4, [pc, #20]	; (8005154 <__do_global_dtors_aux+0x18>)
 8005140:	7823      	ldrb	r3, [r4, #0]
 8005142:	b933      	cbnz	r3, 8005152 <__do_global_dtors_aux+0x16>
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <__do_global_dtors_aux+0x1c>)
 8005146:	b113      	cbz	r3, 800514e <__do_global_dtors_aux+0x12>
 8005148:	4804      	ldr	r0, [pc, #16]	; (800515c <__do_global_dtors_aux+0x20>)
 800514a:	f3af 8000 	nop.w
 800514e:	2301      	movs	r3, #1
 8005150:	7023      	strb	r3, [r4, #0]
 8005152:	bd10      	pop	{r4, pc}
 8005154:	200001d8 	.word	0x200001d8
 8005158:	00000000 	.word	0x00000000
 800515c:	08014a18 	.word	0x08014a18

08005160 <frame_dummy>:
 8005160:	b508      	push	{r3, lr}
 8005162:	4b03      	ldr	r3, [pc, #12]	; (8005170 <frame_dummy+0x10>)
 8005164:	b11b      	cbz	r3, 800516e <frame_dummy+0xe>
 8005166:	4903      	ldr	r1, [pc, #12]	; (8005174 <frame_dummy+0x14>)
 8005168:	4803      	ldr	r0, [pc, #12]	; (8005178 <frame_dummy+0x18>)
 800516a:	f3af 8000 	nop.w
 800516e:	bd08      	pop	{r3, pc}
 8005170:	00000000 	.word	0x00000000
 8005174:	200001dc 	.word	0x200001dc
 8005178:	08014a18 	.word	0x08014a18

0800517c <strcmp>:
 800517c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005184:	2a01      	cmp	r2, #1
 8005186:	bf28      	it	cs
 8005188:	429a      	cmpcs	r2, r3
 800518a:	d0f7      	beq.n	800517c <strcmp>
 800518c:	1ad0      	subs	r0, r2, r3
 800518e:	4770      	bx	lr

08005190 <strlen>:
 8005190:	4603      	mov	r3, r0
 8005192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005196:	2a00      	cmp	r2, #0
 8005198:	d1fb      	bne.n	8005192 <strlen+0x2>
 800519a:	1a18      	subs	r0, r3, r0
 800519c:	3801      	subs	r0, #1
 800519e:	4770      	bx	lr

080051a0 <__aeabi_drsub>:
 80051a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80051a4:	e002      	b.n	80051ac <__adddf3>
 80051a6:	bf00      	nop

080051a8 <__aeabi_dsub>:
 80051a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080051ac <__adddf3>:
 80051ac:	b530      	push	{r4, r5, lr}
 80051ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80051b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80051b6:	ea94 0f05 	teq	r4, r5
 80051ba:	bf08      	it	eq
 80051bc:	ea90 0f02 	teqeq	r0, r2
 80051c0:	bf1f      	itttt	ne
 80051c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80051c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80051ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80051ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80051d2:	f000 80e2 	beq.w	800539a <__adddf3+0x1ee>
 80051d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80051da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80051de:	bfb8      	it	lt
 80051e0:	426d      	neglt	r5, r5
 80051e2:	dd0c      	ble.n	80051fe <__adddf3+0x52>
 80051e4:	442c      	add	r4, r5
 80051e6:	ea80 0202 	eor.w	r2, r0, r2
 80051ea:	ea81 0303 	eor.w	r3, r1, r3
 80051ee:	ea82 0000 	eor.w	r0, r2, r0
 80051f2:	ea83 0101 	eor.w	r1, r3, r1
 80051f6:	ea80 0202 	eor.w	r2, r0, r2
 80051fa:	ea81 0303 	eor.w	r3, r1, r3
 80051fe:	2d36      	cmp	r5, #54	; 0x36
 8005200:	bf88      	it	hi
 8005202:	bd30      	pophi	{r4, r5, pc}
 8005204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005208:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800520c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005214:	d002      	beq.n	800521c <__adddf3+0x70>
 8005216:	4240      	negs	r0, r0
 8005218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800521c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005220:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005228:	d002      	beq.n	8005230 <__adddf3+0x84>
 800522a:	4252      	negs	r2, r2
 800522c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005230:	ea94 0f05 	teq	r4, r5
 8005234:	f000 80a7 	beq.w	8005386 <__adddf3+0x1da>
 8005238:	f1a4 0401 	sub.w	r4, r4, #1
 800523c:	f1d5 0e20 	rsbs	lr, r5, #32
 8005240:	db0d      	blt.n	800525e <__adddf3+0xb2>
 8005242:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005246:	fa22 f205 	lsr.w	r2, r2, r5
 800524a:	1880      	adds	r0, r0, r2
 800524c:	f141 0100 	adc.w	r1, r1, #0
 8005250:	fa03 f20e 	lsl.w	r2, r3, lr
 8005254:	1880      	adds	r0, r0, r2
 8005256:	fa43 f305 	asr.w	r3, r3, r5
 800525a:	4159      	adcs	r1, r3
 800525c:	e00e      	b.n	800527c <__adddf3+0xd0>
 800525e:	f1a5 0520 	sub.w	r5, r5, #32
 8005262:	f10e 0e20 	add.w	lr, lr, #32
 8005266:	2a01      	cmp	r2, #1
 8005268:	fa03 fc0e 	lsl.w	ip, r3, lr
 800526c:	bf28      	it	cs
 800526e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005272:	fa43 f305 	asr.w	r3, r3, r5
 8005276:	18c0      	adds	r0, r0, r3
 8005278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800527c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005280:	d507      	bpl.n	8005292 <__adddf3+0xe6>
 8005282:	f04f 0e00 	mov.w	lr, #0
 8005286:	f1dc 0c00 	rsbs	ip, ip, #0
 800528a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800528e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005296:	d31b      	bcc.n	80052d0 <__adddf3+0x124>
 8005298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800529c:	d30c      	bcc.n	80052b8 <__adddf3+0x10c>
 800529e:	0849      	lsrs	r1, r1, #1
 80052a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80052a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80052a8:	f104 0401 	add.w	r4, r4, #1
 80052ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80052b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80052b4:	f080 809a 	bcs.w	80053ec <__adddf3+0x240>
 80052b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80052bc:	bf08      	it	eq
 80052be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80052c2:	f150 0000 	adcs.w	r0, r0, #0
 80052c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80052ca:	ea41 0105 	orr.w	r1, r1, r5
 80052ce:	bd30      	pop	{r4, r5, pc}
 80052d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80052d4:	4140      	adcs	r0, r0
 80052d6:	eb41 0101 	adc.w	r1, r1, r1
 80052da:	3c01      	subs	r4, #1
 80052dc:	bf28      	it	cs
 80052de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80052e2:	d2e9      	bcs.n	80052b8 <__adddf3+0x10c>
 80052e4:	f091 0f00 	teq	r1, #0
 80052e8:	bf04      	itt	eq
 80052ea:	4601      	moveq	r1, r0
 80052ec:	2000      	moveq	r0, #0
 80052ee:	fab1 f381 	clz	r3, r1
 80052f2:	bf08      	it	eq
 80052f4:	3320      	addeq	r3, #32
 80052f6:	f1a3 030b 	sub.w	r3, r3, #11
 80052fa:	f1b3 0220 	subs.w	r2, r3, #32
 80052fe:	da0c      	bge.n	800531a <__adddf3+0x16e>
 8005300:	320c      	adds	r2, #12
 8005302:	dd08      	ble.n	8005316 <__adddf3+0x16a>
 8005304:	f102 0c14 	add.w	ip, r2, #20
 8005308:	f1c2 020c 	rsb	r2, r2, #12
 800530c:	fa01 f00c 	lsl.w	r0, r1, ip
 8005310:	fa21 f102 	lsr.w	r1, r1, r2
 8005314:	e00c      	b.n	8005330 <__adddf3+0x184>
 8005316:	f102 0214 	add.w	r2, r2, #20
 800531a:	bfd8      	it	le
 800531c:	f1c2 0c20 	rsble	ip, r2, #32
 8005320:	fa01 f102 	lsl.w	r1, r1, r2
 8005324:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005328:	bfdc      	itt	le
 800532a:	ea41 010c 	orrle.w	r1, r1, ip
 800532e:	4090      	lslle	r0, r2
 8005330:	1ae4      	subs	r4, r4, r3
 8005332:	bfa2      	ittt	ge
 8005334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005338:	4329      	orrge	r1, r5
 800533a:	bd30      	popge	{r4, r5, pc}
 800533c:	ea6f 0404 	mvn.w	r4, r4
 8005340:	3c1f      	subs	r4, #31
 8005342:	da1c      	bge.n	800537e <__adddf3+0x1d2>
 8005344:	340c      	adds	r4, #12
 8005346:	dc0e      	bgt.n	8005366 <__adddf3+0x1ba>
 8005348:	f104 0414 	add.w	r4, r4, #20
 800534c:	f1c4 0220 	rsb	r2, r4, #32
 8005350:	fa20 f004 	lsr.w	r0, r0, r4
 8005354:	fa01 f302 	lsl.w	r3, r1, r2
 8005358:	ea40 0003 	orr.w	r0, r0, r3
 800535c:	fa21 f304 	lsr.w	r3, r1, r4
 8005360:	ea45 0103 	orr.w	r1, r5, r3
 8005364:	bd30      	pop	{r4, r5, pc}
 8005366:	f1c4 040c 	rsb	r4, r4, #12
 800536a:	f1c4 0220 	rsb	r2, r4, #32
 800536e:	fa20 f002 	lsr.w	r0, r0, r2
 8005372:	fa01 f304 	lsl.w	r3, r1, r4
 8005376:	ea40 0003 	orr.w	r0, r0, r3
 800537a:	4629      	mov	r1, r5
 800537c:	bd30      	pop	{r4, r5, pc}
 800537e:	fa21 f004 	lsr.w	r0, r1, r4
 8005382:	4629      	mov	r1, r5
 8005384:	bd30      	pop	{r4, r5, pc}
 8005386:	f094 0f00 	teq	r4, #0
 800538a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800538e:	bf06      	itte	eq
 8005390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005394:	3401      	addeq	r4, #1
 8005396:	3d01      	subne	r5, #1
 8005398:	e74e      	b.n	8005238 <__adddf3+0x8c>
 800539a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800539e:	bf18      	it	ne
 80053a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80053a4:	d029      	beq.n	80053fa <__adddf3+0x24e>
 80053a6:	ea94 0f05 	teq	r4, r5
 80053aa:	bf08      	it	eq
 80053ac:	ea90 0f02 	teqeq	r0, r2
 80053b0:	d005      	beq.n	80053be <__adddf3+0x212>
 80053b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80053b6:	bf04      	itt	eq
 80053b8:	4619      	moveq	r1, r3
 80053ba:	4610      	moveq	r0, r2
 80053bc:	bd30      	pop	{r4, r5, pc}
 80053be:	ea91 0f03 	teq	r1, r3
 80053c2:	bf1e      	ittt	ne
 80053c4:	2100      	movne	r1, #0
 80053c6:	2000      	movne	r0, #0
 80053c8:	bd30      	popne	{r4, r5, pc}
 80053ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80053ce:	d105      	bne.n	80053dc <__adddf3+0x230>
 80053d0:	0040      	lsls	r0, r0, #1
 80053d2:	4149      	adcs	r1, r1
 80053d4:	bf28      	it	cs
 80053d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80053da:	bd30      	pop	{r4, r5, pc}
 80053dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80053e0:	bf3c      	itt	cc
 80053e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80053e6:	bd30      	popcc	{r4, r5, pc}
 80053e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80053ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80053f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053f4:	f04f 0000 	mov.w	r0, #0
 80053f8:	bd30      	pop	{r4, r5, pc}
 80053fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053fe:	bf1a      	itte	ne
 8005400:	4619      	movne	r1, r3
 8005402:	4610      	movne	r0, r2
 8005404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005408:	bf1c      	itt	ne
 800540a:	460b      	movne	r3, r1
 800540c:	4602      	movne	r2, r0
 800540e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005412:	bf06      	itte	eq
 8005414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005418:	ea91 0f03 	teqeq	r1, r3
 800541c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005420:	bd30      	pop	{r4, r5, pc}
 8005422:	bf00      	nop

08005424 <__aeabi_ui2d>:
 8005424:	f090 0f00 	teq	r0, #0
 8005428:	bf04      	itt	eq
 800542a:	2100      	moveq	r1, #0
 800542c:	4770      	bxeq	lr
 800542e:	b530      	push	{r4, r5, lr}
 8005430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005438:	f04f 0500 	mov.w	r5, #0
 800543c:	f04f 0100 	mov.w	r1, #0
 8005440:	e750      	b.n	80052e4 <__adddf3+0x138>
 8005442:	bf00      	nop

08005444 <__aeabi_i2d>:
 8005444:	f090 0f00 	teq	r0, #0
 8005448:	bf04      	itt	eq
 800544a:	2100      	moveq	r1, #0
 800544c:	4770      	bxeq	lr
 800544e:	b530      	push	{r4, r5, lr}
 8005450:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005454:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800545c:	bf48      	it	mi
 800545e:	4240      	negmi	r0, r0
 8005460:	f04f 0100 	mov.w	r1, #0
 8005464:	e73e      	b.n	80052e4 <__adddf3+0x138>
 8005466:	bf00      	nop

08005468 <__aeabi_f2d>:
 8005468:	0042      	lsls	r2, r0, #1
 800546a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800546e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005472:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005476:	bf1f      	itttt	ne
 8005478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800547c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005484:	4770      	bxne	lr
 8005486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800548a:	bf08      	it	eq
 800548c:	4770      	bxeq	lr
 800548e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005492:	bf04      	itt	eq
 8005494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005498:	4770      	bxeq	lr
 800549a:	b530      	push	{r4, r5, lr}
 800549c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80054a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80054a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80054a8:	e71c      	b.n	80052e4 <__adddf3+0x138>
 80054aa:	bf00      	nop

080054ac <__aeabi_ul2d>:
 80054ac:	ea50 0201 	orrs.w	r2, r0, r1
 80054b0:	bf08      	it	eq
 80054b2:	4770      	bxeq	lr
 80054b4:	b530      	push	{r4, r5, lr}
 80054b6:	f04f 0500 	mov.w	r5, #0
 80054ba:	e00a      	b.n	80054d2 <__aeabi_l2d+0x16>

080054bc <__aeabi_l2d>:
 80054bc:	ea50 0201 	orrs.w	r2, r0, r1
 80054c0:	bf08      	it	eq
 80054c2:	4770      	bxeq	lr
 80054c4:	b530      	push	{r4, r5, lr}
 80054c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80054ca:	d502      	bpl.n	80054d2 <__aeabi_l2d+0x16>
 80054cc:	4240      	negs	r0, r0
 80054ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80054d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80054da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80054de:	f43f aed8 	beq.w	8005292 <__adddf3+0xe6>
 80054e2:	f04f 0203 	mov.w	r2, #3
 80054e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054ea:	bf18      	it	ne
 80054ec:	3203      	addne	r2, #3
 80054ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054f2:	bf18      	it	ne
 80054f4:	3203      	addne	r2, #3
 80054f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054fa:	f1c2 0320 	rsb	r3, r2, #32
 80054fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8005502:	fa20 f002 	lsr.w	r0, r0, r2
 8005506:	fa01 fe03 	lsl.w	lr, r1, r3
 800550a:	ea40 000e 	orr.w	r0, r0, lr
 800550e:	fa21 f102 	lsr.w	r1, r1, r2
 8005512:	4414      	add	r4, r2
 8005514:	e6bd      	b.n	8005292 <__adddf3+0xe6>
 8005516:	bf00      	nop

08005518 <__aeabi_dmul>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800551e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005526:	bf1d      	ittte	ne
 8005528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800552c:	ea94 0f0c 	teqne	r4, ip
 8005530:	ea95 0f0c 	teqne	r5, ip
 8005534:	f000 f8de 	bleq	80056f4 <__aeabi_dmul+0x1dc>
 8005538:	442c      	add	r4, r5
 800553a:	ea81 0603 	eor.w	r6, r1, r3
 800553e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800554a:	bf18      	it	ne
 800554c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005558:	d038      	beq.n	80055cc <__aeabi_dmul+0xb4>
 800555a:	fba0 ce02 	umull	ip, lr, r0, r2
 800555e:	f04f 0500 	mov.w	r5, #0
 8005562:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800556a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800556e:	f04f 0600 	mov.w	r6, #0
 8005572:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005576:	f09c 0f00 	teq	ip, #0
 800557a:	bf18      	it	ne
 800557c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800558c:	d204      	bcs.n	8005598 <__aeabi_dmul+0x80>
 800558e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005592:	416d      	adcs	r5, r5
 8005594:	eb46 0606 	adc.w	r6, r6, r6
 8005598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800559c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80055a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80055a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80055a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80055ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80055b0:	bf88      	it	hi
 80055b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80055b6:	d81e      	bhi.n	80055f6 <__aeabi_dmul+0xde>
 80055b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80055bc:	bf08      	it	eq
 80055be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80055c2:	f150 0000 	adcs.w	r0, r0, #0
 80055c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80055d0:	ea46 0101 	orr.w	r1, r6, r1
 80055d4:	ea40 0002 	orr.w	r0, r0, r2
 80055d8:	ea81 0103 	eor.w	r1, r1, r3
 80055dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80055e0:	bfc2      	ittt	gt
 80055e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80055e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80055ea:	bd70      	popgt	{r4, r5, r6, pc}
 80055ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055f0:	f04f 0e00 	mov.w	lr, #0
 80055f4:	3c01      	subs	r4, #1
 80055f6:	f300 80ab 	bgt.w	8005750 <__aeabi_dmul+0x238>
 80055fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80055fe:	bfde      	ittt	le
 8005600:	2000      	movle	r0, #0
 8005602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005606:	bd70      	pople	{r4, r5, r6, pc}
 8005608:	f1c4 0400 	rsb	r4, r4, #0
 800560c:	3c20      	subs	r4, #32
 800560e:	da35      	bge.n	800567c <__aeabi_dmul+0x164>
 8005610:	340c      	adds	r4, #12
 8005612:	dc1b      	bgt.n	800564c <__aeabi_dmul+0x134>
 8005614:	f104 0414 	add.w	r4, r4, #20
 8005618:	f1c4 0520 	rsb	r5, r4, #32
 800561c:	fa00 f305 	lsl.w	r3, r0, r5
 8005620:	fa20 f004 	lsr.w	r0, r0, r4
 8005624:	fa01 f205 	lsl.w	r2, r1, r5
 8005628:	ea40 0002 	orr.w	r0, r0, r2
 800562c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005638:	fa21 f604 	lsr.w	r6, r1, r4
 800563c:	eb42 0106 	adc.w	r1, r2, r6
 8005640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005644:	bf08      	it	eq
 8005646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	f1c4 040c 	rsb	r4, r4, #12
 8005650:	f1c4 0520 	rsb	r5, r4, #32
 8005654:	fa00 f304 	lsl.w	r3, r0, r4
 8005658:	fa20 f005 	lsr.w	r0, r0, r5
 800565c:	fa01 f204 	lsl.w	r2, r1, r4
 8005660:	ea40 0002 	orr.w	r0, r0, r2
 8005664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800566c:	f141 0100 	adc.w	r1, r1, #0
 8005670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005674:	bf08      	it	eq
 8005676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	f1c4 0520 	rsb	r5, r4, #32
 8005680:	fa00 f205 	lsl.w	r2, r0, r5
 8005684:	ea4e 0e02 	orr.w	lr, lr, r2
 8005688:	fa20 f304 	lsr.w	r3, r0, r4
 800568c:	fa01 f205 	lsl.w	r2, r1, r5
 8005690:	ea43 0302 	orr.w	r3, r3, r2
 8005694:	fa21 f004 	lsr.w	r0, r1, r4
 8005698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800569c:	fa21 f204 	lsr.w	r2, r1, r4
 80056a0:	ea20 0002 	bic.w	r0, r0, r2
 80056a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80056a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80056ac:	bf08      	it	eq
 80056ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f094 0f00 	teq	r4, #0
 80056b8:	d10f      	bne.n	80056da <__aeabi_dmul+0x1c2>
 80056ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80056be:	0040      	lsls	r0, r0, #1
 80056c0:	eb41 0101 	adc.w	r1, r1, r1
 80056c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80056c8:	bf08      	it	eq
 80056ca:	3c01      	subeq	r4, #1
 80056cc:	d0f7      	beq.n	80056be <__aeabi_dmul+0x1a6>
 80056ce:	ea41 0106 	orr.w	r1, r1, r6
 80056d2:	f095 0f00 	teq	r5, #0
 80056d6:	bf18      	it	ne
 80056d8:	4770      	bxne	lr
 80056da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80056de:	0052      	lsls	r2, r2, #1
 80056e0:	eb43 0303 	adc.w	r3, r3, r3
 80056e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80056e8:	bf08      	it	eq
 80056ea:	3d01      	subeq	r5, #1
 80056ec:	d0f7      	beq.n	80056de <__aeabi_dmul+0x1c6>
 80056ee:	ea43 0306 	orr.w	r3, r3, r6
 80056f2:	4770      	bx	lr
 80056f4:	ea94 0f0c 	teq	r4, ip
 80056f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056fc:	bf18      	it	ne
 80056fe:	ea95 0f0c 	teqne	r5, ip
 8005702:	d00c      	beq.n	800571e <__aeabi_dmul+0x206>
 8005704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005708:	bf18      	it	ne
 800570a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800570e:	d1d1      	bne.n	80056b4 <__aeabi_dmul+0x19c>
 8005710:	ea81 0103 	eor.w	r1, r1, r3
 8005714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005718:	f04f 0000 	mov.w	r0, #0
 800571c:	bd70      	pop	{r4, r5, r6, pc}
 800571e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005722:	bf06      	itte	eq
 8005724:	4610      	moveq	r0, r2
 8005726:	4619      	moveq	r1, r3
 8005728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800572c:	d019      	beq.n	8005762 <__aeabi_dmul+0x24a>
 800572e:	ea94 0f0c 	teq	r4, ip
 8005732:	d102      	bne.n	800573a <__aeabi_dmul+0x222>
 8005734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005738:	d113      	bne.n	8005762 <__aeabi_dmul+0x24a>
 800573a:	ea95 0f0c 	teq	r5, ip
 800573e:	d105      	bne.n	800574c <__aeabi_dmul+0x234>
 8005740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005744:	bf1c      	itt	ne
 8005746:	4610      	movne	r0, r2
 8005748:	4619      	movne	r1, r3
 800574a:	d10a      	bne.n	8005762 <__aeabi_dmul+0x24a>
 800574c:	ea81 0103 	eor.w	r1, r1, r3
 8005750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800575c:	f04f 0000 	mov.w	r0, #0
 8005760:	bd70      	pop	{r4, r5, r6, pc}
 8005762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800576a:	bd70      	pop	{r4, r5, r6, pc}

0800576c <__aeabi_ddiv>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800577a:	bf1d      	ittte	ne
 800577c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005780:	ea94 0f0c 	teqne	r4, ip
 8005784:	ea95 0f0c 	teqne	r5, ip
 8005788:	f000 f8a7 	bleq	80058da <__aeabi_ddiv+0x16e>
 800578c:	eba4 0405 	sub.w	r4, r4, r5
 8005790:	ea81 0e03 	eor.w	lr, r1, r3
 8005794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005798:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800579c:	f000 8088 	beq.w	80058b0 <__aeabi_ddiv+0x144>
 80057a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80057a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80057a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80057ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80057b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80057b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80057b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80057bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80057c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80057c4:	429d      	cmp	r5, r3
 80057c6:	bf08      	it	eq
 80057c8:	4296      	cmpeq	r6, r2
 80057ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80057ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80057d2:	d202      	bcs.n	80057da <__aeabi_ddiv+0x6e>
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057da:	1ab6      	subs	r6, r6, r2
 80057dc:	eb65 0503 	sbc.w	r5, r5, r3
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80057e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80057ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80057ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80057f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057f6:	bf22      	ittt	cs
 80057f8:	1ab6      	subcs	r6, r6, r2
 80057fa:	4675      	movcs	r5, lr
 80057fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	ea4f 0232 	mov.w	r2, r2, rrx
 8005806:	ebb6 0e02 	subs.w	lr, r6, r2
 800580a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800580e:	bf22      	ittt	cs
 8005810:	1ab6      	subcs	r6, r6, r2
 8005812:	4675      	movcs	r5, lr
 8005814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	ea4f 0232 	mov.w	r2, r2, rrx
 800581e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005826:	bf22      	ittt	cs
 8005828:	1ab6      	subcs	r6, r6, r2
 800582a:	4675      	movcs	r5, lr
 800582c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	ea4f 0232 	mov.w	r2, r2, rrx
 8005836:	ebb6 0e02 	subs.w	lr, r6, r2
 800583a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800583e:	bf22      	ittt	cs
 8005840:	1ab6      	subcs	r6, r6, r2
 8005842:	4675      	movcs	r5, lr
 8005844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005848:	ea55 0e06 	orrs.w	lr, r5, r6
 800584c:	d018      	beq.n	8005880 <__aeabi_ddiv+0x114>
 800584e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005856:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800585a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800585e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800586a:	d1c0      	bne.n	80057ee <__aeabi_ddiv+0x82>
 800586c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005870:	d10b      	bne.n	800588a <__aeabi_ddiv+0x11e>
 8005872:	ea41 0100 	orr.w	r1, r1, r0
 8005876:	f04f 0000 	mov.w	r0, #0
 800587a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800587e:	e7b6      	b.n	80057ee <__aeabi_ddiv+0x82>
 8005880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005884:	bf04      	itt	eq
 8005886:	4301      	orreq	r1, r0
 8005888:	2000      	moveq	r0, #0
 800588a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800588e:	bf88      	it	hi
 8005890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005894:	f63f aeaf 	bhi.w	80055f6 <__aeabi_dmul+0xde>
 8005898:	ebb5 0c03 	subs.w	ip, r5, r3
 800589c:	bf04      	itt	eq
 800589e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80058a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80058a6:	f150 0000 	adcs.w	r0, r0, #0
 80058aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80058b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80058b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80058bc:	bfc2      	ittt	gt
 80058be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80058c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80058c6:	bd70      	popgt	{r4, r5, r6, pc}
 80058c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80058cc:	f04f 0e00 	mov.w	lr, #0
 80058d0:	3c01      	subs	r4, #1
 80058d2:	e690      	b.n	80055f6 <__aeabi_dmul+0xde>
 80058d4:	ea45 0e06 	orr.w	lr, r5, r6
 80058d8:	e68d      	b.n	80055f6 <__aeabi_dmul+0xde>
 80058da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80058de:	ea94 0f0c 	teq	r4, ip
 80058e2:	bf08      	it	eq
 80058e4:	ea95 0f0c 	teqeq	r5, ip
 80058e8:	f43f af3b 	beq.w	8005762 <__aeabi_dmul+0x24a>
 80058ec:	ea94 0f0c 	teq	r4, ip
 80058f0:	d10a      	bne.n	8005908 <__aeabi_ddiv+0x19c>
 80058f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058f6:	f47f af34 	bne.w	8005762 <__aeabi_dmul+0x24a>
 80058fa:	ea95 0f0c 	teq	r5, ip
 80058fe:	f47f af25 	bne.w	800574c <__aeabi_dmul+0x234>
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	e72c      	b.n	8005762 <__aeabi_dmul+0x24a>
 8005908:	ea95 0f0c 	teq	r5, ip
 800590c:	d106      	bne.n	800591c <__aeabi_ddiv+0x1b0>
 800590e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005912:	f43f aefd 	beq.w	8005710 <__aeabi_dmul+0x1f8>
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	e722      	b.n	8005762 <__aeabi_dmul+0x24a>
 800591c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005920:	bf18      	it	ne
 8005922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005926:	f47f aec5 	bne.w	80056b4 <__aeabi_dmul+0x19c>
 800592a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800592e:	f47f af0d 	bne.w	800574c <__aeabi_dmul+0x234>
 8005932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005936:	f47f aeeb 	bne.w	8005710 <__aeabi_dmul+0x1f8>
 800593a:	e712      	b.n	8005762 <__aeabi_dmul+0x24a>

0800593c <__aeabi_d2iz>:
 800593c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005944:	d215      	bcs.n	8005972 <__aeabi_d2iz+0x36>
 8005946:	d511      	bpl.n	800596c <__aeabi_d2iz+0x30>
 8005948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800594c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005950:	d912      	bls.n	8005978 <__aeabi_d2iz+0x3c>
 8005952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800595a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800595e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005962:	fa23 f002 	lsr.w	r0, r3, r2
 8005966:	bf18      	it	ne
 8005968:	4240      	negne	r0, r0
 800596a:	4770      	bx	lr
 800596c:	f04f 0000 	mov.w	r0, #0
 8005970:	4770      	bx	lr
 8005972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005976:	d105      	bne.n	8005984 <__aeabi_d2iz+0x48>
 8005978:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800597c:	bf08      	it	eq
 800597e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005982:	4770      	bx	lr
 8005984:	f04f 0000 	mov.w	r0, #0
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop

0800598c <__aeabi_uldivmod>:
 800598c:	b953      	cbnz	r3, 80059a4 <__aeabi_uldivmod+0x18>
 800598e:	b94a      	cbnz	r2, 80059a4 <__aeabi_uldivmod+0x18>
 8005990:	2900      	cmp	r1, #0
 8005992:	bf08      	it	eq
 8005994:	2800      	cmpeq	r0, #0
 8005996:	bf1c      	itt	ne
 8005998:	f04f 31ff 	movne.w	r1, #4294967295
 800599c:	f04f 30ff 	movne.w	r0, #4294967295
 80059a0:	f000 b96e 	b.w	8005c80 <__aeabi_idiv0>
 80059a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80059a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80059ac:	f000 f806 	bl	80059bc <__udivmoddi4>
 80059b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80059b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059b8:	b004      	add	sp, #16
 80059ba:	4770      	bx	lr

080059bc <__udivmoddi4>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	9e08      	ldr	r6, [sp, #32]
 80059c2:	460d      	mov	r5, r1
 80059c4:	4604      	mov	r4, r0
 80059c6:	468e      	mov	lr, r1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f040 8083 	bne.w	8005ad4 <__udivmoddi4+0x118>
 80059ce:	428a      	cmp	r2, r1
 80059d0:	4617      	mov	r7, r2
 80059d2:	d947      	bls.n	8005a64 <__udivmoddi4+0xa8>
 80059d4:	fab2 f382 	clz	r3, r2
 80059d8:	b14b      	cbz	r3, 80059ee <__udivmoddi4+0x32>
 80059da:	f1c3 0120 	rsb	r1, r3, #32
 80059de:	fa05 fe03 	lsl.w	lr, r5, r3
 80059e2:	fa20 f101 	lsr.w	r1, r0, r1
 80059e6:	409f      	lsls	r7, r3
 80059e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80059ec:	409c      	lsls	r4, r3
 80059ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80059f2:	fbbe fcf8 	udiv	ip, lr, r8
 80059f6:	fa1f f987 	uxth.w	r9, r7
 80059fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80059fe:	fb0c f009 	mul.w	r0, ip, r9
 8005a02:	0c21      	lsrs	r1, r4, #16
 8005a04:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005a08:	4290      	cmp	r0, r2
 8005a0a:	d90a      	bls.n	8005a22 <__udivmoddi4+0x66>
 8005a0c:	18ba      	adds	r2, r7, r2
 8005a0e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005a12:	f080 8118 	bcs.w	8005c46 <__udivmoddi4+0x28a>
 8005a16:	4290      	cmp	r0, r2
 8005a18:	f240 8115 	bls.w	8005c46 <__udivmoddi4+0x28a>
 8005a1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8005a20:	443a      	add	r2, r7
 8005a22:	1a12      	subs	r2, r2, r0
 8005a24:	fbb2 f0f8 	udiv	r0, r2, r8
 8005a28:	fb08 2210 	mls	r2, r8, r0, r2
 8005a2c:	fb00 f109 	mul.w	r1, r0, r9
 8005a30:	b2a4      	uxth	r4, r4
 8005a32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005a36:	42a1      	cmp	r1, r4
 8005a38:	d909      	bls.n	8005a4e <__udivmoddi4+0x92>
 8005a3a:	193c      	adds	r4, r7, r4
 8005a3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8005a40:	f080 8103 	bcs.w	8005c4a <__udivmoddi4+0x28e>
 8005a44:	42a1      	cmp	r1, r4
 8005a46:	f240 8100 	bls.w	8005c4a <__udivmoddi4+0x28e>
 8005a4a:	3802      	subs	r0, #2
 8005a4c:	443c      	add	r4, r7
 8005a4e:	1a64      	subs	r4, r4, r1
 8005a50:	2100      	movs	r1, #0
 8005a52:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8005a56:	b11e      	cbz	r6, 8005a60 <__udivmoddi4+0xa4>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	40dc      	lsrs	r4, r3
 8005a5c:	e9c6 4200 	strd	r4, r2, [r6]
 8005a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a64:	b902      	cbnz	r2, 8005a68 <__udivmoddi4+0xac>
 8005a66:	deff      	udf	#255	; 0xff
 8005a68:	fab2 f382 	clz	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d14f      	bne.n	8005b10 <__udivmoddi4+0x154>
 8005a70:	1a8d      	subs	r5, r1, r2
 8005a72:	2101      	movs	r1, #1
 8005a74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a78:	fa1f f882 	uxth.w	r8, r2
 8005a7c:	fbb5 fcfe 	udiv	ip, r5, lr
 8005a80:	fb0e 551c 	mls	r5, lr, ip, r5
 8005a84:	fb08 f00c 	mul.w	r0, r8, ip
 8005a88:	0c22      	lsrs	r2, r4, #16
 8005a8a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8005a8e:	42a8      	cmp	r0, r5
 8005a90:	d907      	bls.n	8005aa2 <__udivmoddi4+0xe6>
 8005a92:	197d      	adds	r5, r7, r5
 8005a94:	f10c 32ff 	add.w	r2, ip, #4294967295
 8005a98:	d202      	bcs.n	8005aa0 <__udivmoddi4+0xe4>
 8005a9a:	42a8      	cmp	r0, r5
 8005a9c:	f200 80e9 	bhi.w	8005c72 <__udivmoddi4+0x2b6>
 8005aa0:	4694      	mov	ip, r2
 8005aa2:	1a2d      	subs	r5, r5, r0
 8005aa4:	fbb5 f0fe 	udiv	r0, r5, lr
 8005aa8:	fb0e 5510 	mls	r5, lr, r0, r5
 8005aac:	fb08 f800 	mul.w	r8, r8, r0
 8005ab0:	b2a4      	uxth	r4, r4
 8005ab2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005ab6:	45a0      	cmp	r8, r4
 8005ab8:	d907      	bls.n	8005aca <__udivmoddi4+0x10e>
 8005aba:	193c      	adds	r4, r7, r4
 8005abc:	f100 32ff 	add.w	r2, r0, #4294967295
 8005ac0:	d202      	bcs.n	8005ac8 <__udivmoddi4+0x10c>
 8005ac2:	45a0      	cmp	r8, r4
 8005ac4:	f200 80d9 	bhi.w	8005c7a <__udivmoddi4+0x2be>
 8005ac8:	4610      	mov	r0, r2
 8005aca:	eba4 0408 	sub.w	r4, r4, r8
 8005ace:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8005ad2:	e7c0      	b.n	8005a56 <__udivmoddi4+0x9a>
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	d908      	bls.n	8005aea <__udivmoddi4+0x12e>
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	f000 80b1 	beq.w	8005c40 <__udivmoddi4+0x284>
 8005ade:	2100      	movs	r1, #0
 8005ae0:	e9c6 0500 	strd	r0, r5, [r6]
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aea:	fab3 f183 	clz	r1, r3
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d14b      	bne.n	8005b8a <__udivmoddi4+0x1ce>
 8005af2:	42ab      	cmp	r3, r5
 8005af4:	d302      	bcc.n	8005afc <__udivmoddi4+0x140>
 8005af6:	4282      	cmp	r2, r0
 8005af8:	f200 80b9 	bhi.w	8005c6e <__udivmoddi4+0x2b2>
 8005afc:	1a84      	subs	r4, r0, r2
 8005afe:	eb65 0303 	sbc.w	r3, r5, r3
 8005b02:	2001      	movs	r0, #1
 8005b04:	469e      	mov	lr, r3
 8005b06:	2e00      	cmp	r6, #0
 8005b08:	d0aa      	beq.n	8005a60 <__udivmoddi4+0xa4>
 8005b0a:	e9c6 4e00 	strd	r4, lr, [r6]
 8005b0e:	e7a7      	b.n	8005a60 <__udivmoddi4+0xa4>
 8005b10:	409f      	lsls	r7, r3
 8005b12:	f1c3 0220 	rsb	r2, r3, #32
 8005b16:	40d1      	lsrs	r1, r2
 8005b18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8005b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8005b20:	fa1f f887 	uxth.w	r8, r7
 8005b24:	fb0e 1110 	mls	r1, lr, r0, r1
 8005b28:	fa24 f202 	lsr.w	r2, r4, r2
 8005b2c:	409d      	lsls	r5, r3
 8005b2e:	fb00 fc08 	mul.w	ip, r0, r8
 8005b32:	432a      	orrs	r2, r5
 8005b34:	0c15      	lsrs	r5, r2, #16
 8005b36:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8005b3a:	45ac      	cmp	ip, r5
 8005b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8005b40:	d909      	bls.n	8005b56 <__udivmoddi4+0x19a>
 8005b42:	197d      	adds	r5, r7, r5
 8005b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8005b48:	f080 808f 	bcs.w	8005c6a <__udivmoddi4+0x2ae>
 8005b4c:	45ac      	cmp	ip, r5
 8005b4e:	f240 808c 	bls.w	8005c6a <__udivmoddi4+0x2ae>
 8005b52:	3802      	subs	r0, #2
 8005b54:	443d      	add	r5, r7
 8005b56:	eba5 050c 	sub.w	r5, r5, ip
 8005b5a:	fbb5 f1fe 	udiv	r1, r5, lr
 8005b5e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8005b62:	fb01 f908 	mul.w	r9, r1, r8
 8005b66:	b295      	uxth	r5, r2
 8005b68:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8005b6c:	45a9      	cmp	r9, r5
 8005b6e:	d907      	bls.n	8005b80 <__udivmoddi4+0x1c4>
 8005b70:	197d      	adds	r5, r7, r5
 8005b72:	f101 32ff 	add.w	r2, r1, #4294967295
 8005b76:	d274      	bcs.n	8005c62 <__udivmoddi4+0x2a6>
 8005b78:	45a9      	cmp	r9, r5
 8005b7a:	d972      	bls.n	8005c62 <__udivmoddi4+0x2a6>
 8005b7c:	3902      	subs	r1, #2
 8005b7e:	443d      	add	r5, r7
 8005b80:	eba5 0509 	sub.w	r5, r5, r9
 8005b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b88:	e778      	b.n	8005a7c <__udivmoddi4+0xc0>
 8005b8a:	f1c1 0720 	rsb	r7, r1, #32
 8005b8e:	408b      	lsls	r3, r1
 8005b90:	fa22 fc07 	lsr.w	ip, r2, r7
 8005b94:	ea4c 0c03 	orr.w	ip, ip, r3
 8005b98:	fa25 f407 	lsr.w	r4, r5, r7
 8005b9c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8005ba0:	fbb4 f9fe 	udiv	r9, r4, lr
 8005ba4:	fa1f f88c 	uxth.w	r8, ip
 8005ba8:	fb0e 4419 	mls	r4, lr, r9, r4
 8005bac:	fa20 f307 	lsr.w	r3, r0, r7
 8005bb0:	fb09 fa08 	mul.w	sl, r9, r8
 8005bb4:	408d      	lsls	r5, r1
 8005bb6:	431d      	orrs	r5, r3
 8005bb8:	0c2b      	lsrs	r3, r5, #16
 8005bba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005bbe:	45a2      	cmp	sl, r4
 8005bc0:	fa02 f201 	lsl.w	r2, r2, r1
 8005bc4:	fa00 f301 	lsl.w	r3, r0, r1
 8005bc8:	d909      	bls.n	8005bde <__udivmoddi4+0x222>
 8005bca:	eb1c 0404 	adds.w	r4, ip, r4
 8005bce:	f109 30ff 	add.w	r0, r9, #4294967295
 8005bd2:	d248      	bcs.n	8005c66 <__udivmoddi4+0x2aa>
 8005bd4:	45a2      	cmp	sl, r4
 8005bd6:	d946      	bls.n	8005c66 <__udivmoddi4+0x2aa>
 8005bd8:	f1a9 0902 	sub.w	r9, r9, #2
 8005bdc:	4464      	add	r4, ip
 8005bde:	eba4 040a 	sub.w	r4, r4, sl
 8005be2:	fbb4 f0fe 	udiv	r0, r4, lr
 8005be6:	fb0e 4410 	mls	r4, lr, r0, r4
 8005bea:	fb00 fa08 	mul.w	sl, r0, r8
 8005bee:	b2ad      	uxth	r5, r5
 8005bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8005bf4:	45a2      	cmp	sl, r4
 8005bf6:	d908      	bls.n	8005c0a <__udivmoddi4+0x24e>
 8005bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8005bfc:	f100 35ff 	add.w	r5, r0, #4294967295
 8005c00:	d22d      	bcs.n	8005c5e <__udivmoddi4+0x2a2>
 8005c02:	45a2      	cmp	sl, r4
 8005c04:	d92b      	bls.n	8005c5e <__udivmoddi4+0x2a2>
 8005c06:	3802      	subs	r0, #2
 8005c08:	4464      	add	r4, ip
 8005c0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8005c0e:	fba0 8902 	umull	r8, r9, r0, r2
 8005c12:	eba4 040a 	sub.w	r4, r4, sl
 8005c16:	454c      	cmp	r4, r9
 8005c18:	46c6      	mov	lr, r8
 8005c1a:	464d      	mov	r5, r9
 8005c1c:	d319      	bcc.n	8005c52 <__udivmoddi4+0x296>
 8005c1e:	d016      	beq.n	8005c4e <__udivmoddi4+0x292>
 8005c20:	b15e      	cbz	r6, 8005c3a <__udivmoddi4+0x27e>
 8005c22:	ebb3 020e 	subs.w	r2, r3, lr
 8005c26:	eb64 0405 	sbc.w	r4, r4, r5
 8005c2a:	fa04 f707 	lsl.w	r7, r4, r7
 8005c2e:	fa22 f301 	lsr.w	r3, r2, r1
 8005c32:	431f      	orrs	r7, r3
 8005c34:	40cc      	lsrs	r4, r1
 8005c36:	e9c6 7400 	strd	r7, r4, [r6]
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	4631      	mov	r1, r6
 8005c42:	4630      	mov	r0, r6
 8005c44:	e70c      	b.n	8005a60 <__udivmoddi4+0xa4>
 8005c46:	468c      	mov	ip, r1
 8005c48:	e6eb      	b.n	8005a22 <__udivmoddi4+0x66>
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	e6ff      	b.n	8005a4e <__udivmoddi4+0x92>
 8005c4e:	4543      	cmp	r3, r8
 8005c50:	d2e6      	bcs.n	8005c20 <__udivmoddi4+0x264>
 8005c52:	ebb8 0e02 	subs.w	lr, r8, r2
 8005c56:	eb69 050c 	sbc.w	r5, r9, ip
 8005c5a:	3801      	subs	r0, #1
 8005c5c:	e7e0      	b.n	8005c20 <__udivmoddi4+0x264>
 8005c5e:	4628      	mov	r0, r5
 8005c60:	e7d3      	b.n	8005c0a <__udivmoddi4+0x24e>
 8005c62:	4611      	mov	r1, r2
 8005c64:	e78c      	b.n	8005b80 <__udivmoddi4+0x1c4>
 8005c66:	4681      	mov	r9, r0
 8005c68:	e7b9      	b.n	8005bde <__udivmoddi4+0x222>
 8005c6a:	4608      	mov	r0, r1
 8005c6c:	e773      	b.n	8005b56 <__udivmoddi4+0x19a>
 8005c6e:	4608      	mov	r0, r1
 8005c70:	e749      	b.n	8005b06 <__udivmoddi4+0x14a>
 8005c72:	f1ac 0c02 	sub.w	ip, ip, #2
 8005c76:	443d      	add	r5, r7
 8005c78:	e713      	b.n	8005aa2 <__udivmoddi4+0xe6>
 8005c7a:	3802      	subs	r0, #2
 8005c7c:	443c      	add	r4, r7
 8005c7e:	e724      	b.n	8005aca <__udivmoddi4+0x10e>

08005c80 <__aeabi_idiv0>:
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop

08005c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
   	SCB->VTOR = 0x8005000;
 8005c8a:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <main+0x78>)
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <main+0x7c>)
 8005c8e:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005c90:	b662      	cpsie	i
}
 8005c92:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c94:	f006 fc5c 	bl	800c550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c98:	f000 f846 	bl	8005d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c9c:	f000 fb18 	bl	80062d0 <MX_GPIO_Init>
  MX_ADC_Init();
 8005ca0:	f000 f8ac 	bl	8005dfc <MX_ADC_Init>
  MX_USART1_UART_Init();
 8005ca4:	f000 fa96 	bl	80061d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005ca8:	f000 fabe 	bl	8006228 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005cac:	f000 fae6 	bl	800627c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8005cb0:	f000 fa3a 	bl	8006128 <MX_TIM5_Init>
  MX_RTC_Init();
 8005cb4:	f000 f8fa 	bl	8005eac <MX_RTC_Init>
  MX_TIM2_Init();
 8005cb8:	f000 f94c 	bl	8005f54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005cbc:	f000 f998 	bl	8005ff0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005cc0:	f000 f9e4 	bl	800608c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8005cc4:	2028      	movs	r0, #40	; 0x28
 8005cc6:	f007 fa94 	bl	800d1f2 <HAL_NVIC_DisableIRQ>
  Initialize(&huart1, &huart2, &huart3, &htim2, &htim5, &htim3, &htim4, &hrtc,&hadc);
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <main+0x80>)
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <main+0x84>)
 8005cd0:	9303      	str	r3, [sp, #12]
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <main+0x88>)
 8005cd4:	9302      	str	r3, [sp, #8]
 8005cd6:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <main+0x8c>)
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <main+0x90>)
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <main+0x94>)
 8005ce0:	4a0e      	ldr	r2, [pc, #56]	; (8005d1c <main+0x98>)
 8005ce2:	490f      	ldr	r1, [pc, #60]	; (8005d20 <main+0x9c>)
 8005ce4:	480f      	ldr	r0, [pc, #60]	; (8005d24 <main+0xa0>)
 8005ce6:	f00c facf 	bl	8012288 <Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bootUp();
 8005cea:	f00c fd3d 	bl	8012768 <bootUp>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  robbery();
 8005cee:	f00c fde5 	bl	80128bc <robbery>
	  working();
 8005cf2:	f00c fe4d 	bl	8012990 <working>
	  sleeping();
 8005cf6:	f00c fedf 	bl	8012ab8 <sleeping>
	  robbery();
 8005cfa:	e7f8      	b.n	8005cee <main+0x6a>
 8005cfc:	e000ed00 	.word	0xe000ed00
 8005d00:	08005000 	.word	0x08005000
 8005d04:	200042f0 	.word	0x200042f0
 8005d08:	20003fc4 	.word	0x20003fc4
 8005d0c:	200003c8 	.word	0x200003c8
 8005d10:	20003db0 	.word	0x20003db0
 8005d14:	20003d4c 	.word	0x20003d4c
 8005d18:	2000414c 	.word	0x2000414c
 8005d1c:	2000045c 	.word	0x2000045c
 8005d20:	200041d8 	.word	0x200041d8
 8005d24:	20003e94 	.word	0x20003e94

08005d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b094      	sub	sp, #80	; 0x50
 8005d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d2e:	f107 031c 	add.w	r3, r7, #28
 8005d32:	2234      	movs	r2, #52	; 0x34
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f00c ff20 	bl	8012b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d3c:	f107 0308 	add.w	r3, r7, #8
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d54:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <SystemClock_Config+0xd0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8005d5c:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <SystemClock_Config+0xd0>)
 8005d5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d62:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005d64:	2307      	movs	r3, #7
 8005d66:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d70:	2301      	movs	r3, #1
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005d74:	2310      	movs	r3, #16
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005d82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8005d88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d8e:	f107 031c 	add.w	r3, r7, #28
 8005d92:	4618      	mov	r0, r3
 8005d94:	f008 f866 	bl	800de64 <HAL_RCC_OscConfig>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005d9e:	f000 fc09 	bl	80065b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005da2:	230f      	movs	r3, #15
 8005da4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005da6:	2303      	movs	r3, #3
 8005da8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f008 fb81 	bl	800e4c4 <HAL_RCC_ClockConfig>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8005dc8:	f000 fbf4 	bl	80065b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dd4:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f008 fe2d 	bl	800ea38 <HAL_RCCEx_PeriphCLKConfig>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005de4:	f000 fbe6 	bl	80065b4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8005de8:	f008 fca0 	bl	800e72c <HAL_RCC_EnableCSS>
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8005dec:	f008 fef2 	bl	800ebd4 <HAL_RCCEx_EnableLSECSS>
}
 8005df0:	bf00      	nop
 8005df2:	3750      	adds	r7, #80	; 0x50
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40007000 	.word	0x40007000

08005dfc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005e02:	1d3b      	adds	r3, r7, #4
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005e0c:	4b25      	ldr	r3, [pc, #148]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e0e:	4a26      	ldr	r2, [pc, #152]	; (8005ea8 <MX_ADC_Init+0xac>)
 8005e10:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005e12:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005e18:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e1e:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005e24:	4b1f      	ldr	r3, [pc, #124]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005e2a:	4b1e      	ldr	r3, [pc, #120]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8005e30:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8005e4a:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8005e50:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e58:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005e5e:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005e64:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005e6c:	480d      	ldr	r0, [pc, #52]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e6e:	f006 fc3f 	bl	800c6f0 <HAL_ADC_Init>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8005e78:	f000 fb9c 	bl	80065b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005e80:	2301      	movs	r3, #1
 8005e82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4805      	ldr	r0, [pc, #20]	; (8005ea4 <MX_ADC_Init+0xa8>)
 8005e8e:	f006 fe9d 	bl	800cbcc <HAL_ADC_ConfigChannel>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8005e98:	f000 fb8c 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	200042f0 	.word	0x200042f0
 8005ea8:	40012400 	.word	0x40012400

08005eac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

  //RTC_TimeTypeDef sTime = {0};
  //RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	2228      	movs	r2, #40	; 0x28
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f00c fe5f 	bl	8012b7c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005ec0:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <MX_RTC_Init+0xa0>)
 8005ec2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005ec4:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005eca:	4b1f      	ldr	r3, [pc, #124]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005ecc:	227f      	movs	r2, #127	; 0x7f
 8005ece:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005ed0:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005ed2:	22ff      	movs	r2, #255	; 0xff
 8005ed4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005ee2:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005ee8:	4817      	ldr	r0, [pc, #92]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005eea:	f008 fe7f 	bl	800ebec <HAL_RTC_Init>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8005ef4:	f000 fb5e 	bl	80065b4 <Error_Handler>
  {
    Error_Handler();
  }*/
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8005f10:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <MX_RTC_Init+0xa4>)
 8005f12:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8005f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005f28:	463b      	mov	r3, r7
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4806      	ldr	r0, [pc, #24]	; (8005f48 <MX_RTC_Init+0x9c>)
 8005f30:	f009 f8ea 	bl	800f108 <HAL_RTC_SetAlarm_IT>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8005f3a:	f000 fb3b 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005f3e:	bf00      	nop
 8005f40:	3728      	adds	r7, #40	; 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20003fc4 	.word	0x20003fc4
 8005f4c:	40002800 	.word	0x40002800
 8005f50:	80808000 	.word	0x80808000

08005f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f5a:	f107 0308 	add.w	r3, r7, #8
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	609a      	str	r2, [r3, #8]
 8005f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f68:	463b      	mov	r3, r7
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005f70:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <MX_TIM2_Init+0x98>)
 8005f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <MX_TIM2_Init+0x98>)
 8005f7a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8005f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <MX_TIM2_Init+0x98>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005f86:	4b19      	ldr	r3, [pc, #100]	; (8005fec <MX_TIM2_Init+0x98>)
 8005f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005f8e:	4b17      	ldr	r3, [pc, #92]	; (8005fec <MX_TIM2_Init+0x98>)
 8005f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <MX_TIM2_Init+0x98>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005f9c:	4813      	ldr	r0, [pc, #76]	; (8005fec <MX_TIM2_Init+0x98>)
 8005f9e:	f009 facb 	bl	800f538 <HAL_TIM_Base_Init>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005fa8:	f000 fb04 	bl	80065b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005fb2:	f107 0308 	add.w	r3, r7, #8
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	480c      	ldr	r0, [pc, #48]	; (8005fec <MX_TIM2_Init+0x98>)
 8005fba:	f009 fd19 	bl	800f9f0 <HAL_TIM_ConfigClockSource>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005fc4:	f000 faf6 	bl	80065b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4805      	ldr	r0, [pc, #20]	; (8005fec <MX_TIM2_Init+0x98>)
 8005fd6:	f009 ffef 	bl	800ffb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005fe0:	f000 fae8 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005fe4:	bf00      	nop
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	2000414c 	.word	0x2000414c

08005ff0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ff6:	f107 0308 	add.w	r3, r7, #8
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	609a      	str	r2, [r3, #8]
 8006002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006004:	463b      	mov	r3, r7
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800600c:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <MX_TIM3_Init+0x94>)
 800600e:	4a1e      	ldr	r2, [pc, #120]	; (8006088 <MX_TIM3_Init+0x98>)
 8006010:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <MX_TIM3_Init+0x94>)
 8006014:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8006018:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800601a:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <MX_TIM3_Init+0x94>)
 800601c:	2200      	movs	r2, #0
 800601e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000;
 8006020:	4b18      	ldr	r3, [pc, #96]	; (8006084 <MX_TIM3_Init+0x94>)
 8006022:	f247 5230 	movw	r2, #30000	; 0x7530
 8006026:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006028:	4b16      	ldr	r3, [pc, #88]	; (8006084 <MX_TIM3_Init+0x94>)
 800602a:	2200      	movs	r2, #0
 800602c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800602e:	4b15      	ldr	r3, [pc, #84]	; (8006084 <MX_TIM3_Init+0x94>)
 8006030:	2200      	movs	r2, #0
 8006032:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006034:	4813      	ldr	r0, [pc, #76]	; (8006084 <MX_TIM3_Init+0x94>)
 8006036:	f009 fa7f 	bl	800f538 <HAL_TIM_Base_Init>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006040:	f000 fab8 	bl	80065b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	4619      	mov	r1, r3
 8006050:	480c      	ldr	r0, [pc, #48]	; (8006084 <MX_TIM3_Init+0x94>)
 8006052:	f009 fccd 	bl	800f9f0 <HAL_TIM_ConfigClockSource>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800605c:	f000 faaa 	bl	80065b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006060:	2300      	movs	r3, #0
 8006062:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006064:	2300      	movs	r3, #0
 8006066:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006068:	463b      	mov	r3, r7
 800606a:	4619      	mov	r1, r3
 800606c:	4805      	ldr	r0, [pc, #20]	; (8006084 <MX_TIM3_Init+0x94>)
 800606e:	f009 ffa3 	bl	800ffb8 <HAL_TIMEx_MasterConfigSynchronization>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006078:	f000 fa9c 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800607c:	bf00      	nop
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20003db0 	.word	0x20003db0
 8006088:	40000400 	.word	0x40000400

0800608c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006092:	f107 0308 	add.w	r3, r7, #8
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	605a      	str	r2, [r3, #4]
 800609c:	609a      	str	r2, [r3, #8]
 800609e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060a0:	463b      	mov	r3, r7
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80060a8:	4b1d      	ldr	r3, [pc, #116]	; (8006120 <MX_TIM4_Init+0x94>)
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <MX_TIM4_Init+0x98>)
 80060ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <MX_TIM4_Init+0x94>)
 80060b0:	2218      	movs	r2, #24
 80060b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <MX_TIM4_Init+0x94>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80060ba:	4b19      	ldr	r3, [pc, #100]	; (8006120 <MX_TIM4_Init+0x94>)
 80060bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <MX_TIM4_Init+0x94>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060c8:	4b15      	ldr	r3, [pc, #84]	; (8006120 <MX_TIM4_Init+0x94>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80060ce:	4814      	ldr	r0, [pc, #80]	; (8006120 <MX_TIM4_Init+0x94>)
 80060d0:	f009 fa32 	bl	800f538 <HAL_TIM_Base_Init>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80060da:	f000 fa6b 	bl	80065b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80060e4:	f107 0308 	add.w	r3, r7, #8
 80060e8:	4619      	mov	r1, r3
 80060ea:	480d      	ldr	r0, [pc, #52]	; (8006120 <MX_TIM4_Init+0x94>)
 80060ec:	f009 fc80 	bl	800f9f0 <HAL_TIM_ConfigClockSource>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80060f6:	f000 fa5d 	bl	80065b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060fa:	2300      	movs	r3, #0
 80060fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060fe:	2300      	movs	r3, #0
 8006100:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006102:	463b      	mov	r3, r7
 8006104:	4619      	mov	r1, r3
 8006106:	4806      	ldr	r0, [pc, #24]	; (8006120 <MX_TIM4_Init+0x94>)
 8006108:	f009 ff56 	bl	800ffb8 <HAL_TIMEx_MasterConfigSynchronization>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8006112:	f000 fa4f 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006116:	bf00      	nop
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200003c8 	.word	0x200003c8
 8006124:	40000800 	.word	0x40000800

08006128 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800612e:	f107 0310 	add.w	r3, r7, #16
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006138:	463b      	mov	r3, r7
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	605a      	str	r2, [r3, #4]
 8006140:	609a      	str	r2, [r3, #8]
 8006142:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006144:	4b21      	ldr	r3, [pc, #132]	; (80061cc <MX_TIM5_Init+0xa4>)
 8006146:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <MX_TIM5_Init+0xa8>)
 8006148:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24;
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <MX_TIM5_Init+0xa4>)
 800614c:	2218      	movs	r2, #24
 800614e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006150:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <MX_TIM5_Init+0xa4>)
 8006152:	2200      	movs	r2, #0
 8006154:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 366;
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <MX_TIM5_Init+0xa4>)
 8006158:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800615c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800615e:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <MX_TIM5_Init+0xa4>)
 8006160:	2200      	movs	r2, #0
 8006162:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006164:	4b19      	ldr	r3, [pc, #100]	; (80061cc <MX_TIM5_Init+0xa4>)
 8006166:	2200      	movs	r2, #0
 8006168:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800616a:	4818      	ldr	r0, [pc, #96]	; (80061cc <MX_TIM5_Init+0xa4>)
 800616c:	f009 fa6e 	bl	800f64c <HAL_TIM_PWM_Init>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8006176:	f000 fa1d 	bl	80065b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006182:	f107 0310 	add.w	r3, r7, #16
 8006186:	4619      	mov	r1, r3
 8006188:	4810      	ldr	r0, [pc, #64]	; (80061cc <MX_TIM5_Init+0xa4>)
 800618a:	f009 ff15 	bl	800ffb8 <HAL_TIMEx_MasterConfigSynchronization>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8006194:	f000 fa0e 	bl	80065b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006198:	2360      	movs	r3, #96	; 0x60
 800619a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80061a8:	463b      	mov	r3, r7
 80061aa:	2204      	movs	r2, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4807      	ldr	r0, [pc, #28]	; (80061cc <MX_TIM5_Init+0xa4>)
 80061b0:	f009 fb60 	bl	800f874 <HAL_TIM_PWM_ConfigChannel>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80061ba:	f000 f9fb 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80061be:	4803      	ldr	r0, [pc, #12]	; (80061cc <MX_TIM5_Init+0xa4>)
 80061c0:	f000 faea 	bl	8006798 <HAL_TIM_MspPostInit>

}
 80061c4:	bf00      	nop
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20003d4c 	.word	0x20003d4c
 80061d0:	40000c00 	.word	0x40000c00

080061d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 80061da:	4a12      	ldr	r2, [pc, #72]	; (8006224 <MX_USART1_UART_Init+0x50>)
 80061dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80061de:	4b10      	ldr	r3, [pc, #64]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 80061e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80061e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 80061fa:	220c      	movs	r2, #12
 80061fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061fe:	4b08      	ldr	r3, [pc, #32]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 8006200:	2200      	movs	r2, #0
 8006202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 8006206:	2200      	movs	r2, #0
 8006208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800620a:	4805      	ldr	r0, [pc, #20]	; (8006220 <MX_USART1_UART_Init+0x4c>)
 800620c:	f009 ff32 	bl	8010074 <HAL_UART_Init>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006216:	f000 f9cd 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20003e94 	.word	0x20003e94
 8006224:	40013800 	.word	0x40013800

08006228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800622c:	4b11      	ldr	r3, [pc, #68]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 800622e:	4a12      	ldr	r2, [pc, #72]	; (8006278 <MX_USART2_UART_Init+0x50>)
 8006230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006232:	4b10      	ldr	r3, [pc, #64]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 8006234:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800623a:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 800623c:	2200      	movs	r2, #0
 800623e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006240:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 8006242:	2200      	movs	r2, #0
 8006244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 8006248:	2200      	movs	r2, #0
 800624a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 800624e:	220c      	movs	r2, #12
 8006250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 8006254:	2200      	movs	r2, #0
 8006256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 800625a:	2200      	movs	r2, #0
 800625c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800625e:	4805      	ldr	r0, [pc, #20]	; (8006274 <MX_USART2_UART_Init+0x4c>)
 8006260:	f009 ff08 	bl	8010074 <HAL_UART_Init>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800626a:	f000 f9a3 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	200041d8 	.word	0x200041d8
 8006278:	40004400 	.word	0x40004400

0800627c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006280:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 8006282:	4a12      	ldr	r2, [pc, #72]	; (80062cc <MX_USART3_UART_Init+0x50>)
 8006284:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 8006288:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800628c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800628e:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 8006290:	2200      	movs	r2, #0
 8006292:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 8006296:	2200      	movs	r2, #0
 8006298:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800629a:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 800629c:	2200      	movs	r2, #0
 800629e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80062a0:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 80062a2:	220c      	movs	r2, #12
 80062a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80062b2:	4805      	ldr	r0, [pc, #20]	; (80062c8 <MX_USART3_UART_Init+0x4c>)
 80062b4:	f009 fede 	bl	8010074 <HAL_UART_Init>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80062be:	f000 f979 	bl	80065b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80062c2:	bf00      	nop
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000045c 	.word	0x2000045c
 80062cc:	40004800 	.word	0x40004800

080062d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d6:	f107 0314 	add.w	r3, r7, #20
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	609a      	str	r2, [r3, #8]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062e6:	4b66      	ldr	r3, [pc, #408]	; (8006480 <MX_GPIO_Init+0x1b0>)
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4a65      	ldr	r2, [pc, #404]	; (8006480 <MX_GPIO_Init+0x1b0>)
 80062ec:	f043 0304 	orr.w	r3, r3, #4
 80062f0:	61d3      	str	r3, [r2, #28]
 80062f2:	4b63      	ldr	r3, [pc, #396]	; (8006480 <MX_GPIO_Init+0x1b0>)
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80062fe:	4b60      	ldr	r3, [pc, #384]	; (8006480 <MX_GPIO_Init+0x1b0>)
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	4a5f      	ldr	r2, [pc, #380]	; (8006480 <MX_GPIO_Init+0x1b0>)
 8006304:	f043 0320 	orr.w	r3, r3, #32
 8006308:	61d3      	str	r3, [r2, #28]
 800630a:	4b5d      	ldr	r3, [pc, #372]	; (8006480 <MX_GPIO_Init+0x1b0>)
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006316:	4b5a      	ldr	r3, [pc, #360]	; (8006480 <MX_GPIO_Init+0x1b0>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4a59      	ldr	r2, [pc, #356]	; (8006480 <MX_GPIO_Init+0x1b0>)
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	61d3      	str	r3, [r2, #28]
 8006322:	4b57      	ldr	r3, [pc, #348]	; (8006480 <MX_GPIO_Init+0x1b0>)
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800632e:	4b54      	ldr	r3, [pc, #336]	; (8006480 <MX_GPIO_Init+0x1b0>)
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	4a53      	ldr	r2, [pc, #332]	; (8006480 <MX_GPIO_Init+0x1b0>)
 8006334:	f043 0302 	orr.w	r3, r3, #2
 8006338:	61d3      	str	r3, [r2, #28]
 800633a:	4b51      	ldr	r3, [pc, #324]	; (8006480 <MX_GPIO_Init+0x1b0>)
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	607b      	str	r3, [r7, #4]
 8006344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(debug_GPIO_Port, debug_Pin, GPIO_PIN_SET);
 8006346:	2201      	movs	r2, #1
 8006348:	2104      	movs	r1, #4
 800634a:	484e      	ldr	r0, [pc, #312]	; (8006484 <MX_GPIO_Init+0x1b4>)
 800634c:	f007 fca3 	bl	800dc96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, onsol_Pin|onv_Pin, GPIO_PIN_SET);
 8006350:	2201      	movs	r2, #1
 8006352:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8006356:	484c      	ldr	r0, [pc, #304]	; (8006488 <MX_GPIO_Init+0x1b8>)
 8006358:	f007 fc9d 	bl	800dc96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, onc_Pin|onb_Pin|pwrs_Pin|gnde_Pin, GPIO_PIN_RESET);
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006362:	4849      	ldr	r0, [pc, #292]	; (8006488 <MX_GPIO_Init+0x1b8>)
 8006364:	f007 fc97 	bl	800dc96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_Pin|l3_Pin|l2_Pin, GPIO_PIN_RESET);
 8006368:	2200      	movs	r2, #0
 800636a:	21e0      	movs	r1, #224	; 0xe0
 800636c:	4845      	ldr	r0, [pc, #276]	; (8006484 <MX_GPIO_Init+0x1b4>)
 800636e:	f007 fc92 	bl	800dc96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ON_Pin */
  GPIO_InitStruct.Pin = ON_Pin;
 8006372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800637c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800637e:	2301      	movs	r3, #1
 8006380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_GPIO_Port, &GPIO_InitStruct);
 8006382:	f107 0314 	add.w	r3, r7, #20
 8006386:	4619      	mov	r1, r3
 8006388:	483f      	ldr	r0, [pc, #252]	; (8006488 <MX_GPIO_Init+0x1b8>)
 800638a:	f007 fa0d 	bl	800d7a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON1_Pin */
  GPIO_InitStruct.Pin = ON1_Pin;
 800638e:	2301      	movs	r3, #1
 8006390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006392:	2300      	movs	r3, #0
 8006394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006396:	2301      	movs	r3, #1
 8006398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON1_GPIO_Port, &GPIO_InitStruct);
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	4619      	mov	r1, r3
 80063a0:	483a      	ldr	r0, [pc, #232]	; (800648c <MX_GPIO_Init+0x1bc>)
 80063a2:	f007 fa01 	bl	800d7a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : status_Pin */
  GPIO_InitStruct.Pin = status_Pin;
 80063a6:	2302      	movs	r3, #2
 80063a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(status_GPIO_Port, &GPIO_InitStruct);
 80063b2:	f107 0314 	add.w	r3, r7, #20
 80063b6:	4619      	mov	r1, r3
 80063b8:	4832      	ldr	r0, [pc, #200]	; (8006484 <MX_GPIO_Init+0x1b4>)
 80063ba:	f007 f9f5 	bl	800d7a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : debug_Pin RE_Pin l3_Pin l2_Pin */
  GPIO_InitStruct.Pin = debug_Pin|RE_Pin|l3_Pin|l2_Pin;
 80063be:	23e4      	movs	r3, #228	; 0xe4
 80063c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ca:	2300      	movs	r3, #0
 80063cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	4619      	mov	r1, r3
 80063d4:	482b      	ldr	r0, [pc, #172]	; (8006484 <MX_GPIO_Init+0x1b4>)
 80063d6:	f007 f9e7 	bl	800d7a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : _1pps_Pin */
  GPIO_InitStruct.Pin = _1pps_Pin;
 80063da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80063e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80063e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(_1pps_GPIO_Port, &GPIO_InitStruct);
 80063ea:	f107 0314 	add.w	r3, r7, #20
 80063ee:	4619      	mov	r1, r3
 80063f0:	4824      	ldr	r0, [pc, #144]	; (8006484 <MX_GPIO_Init+0x1b4>)
 80063f2:	f007 f9d9 	bl	800d7a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pg_Pin */
  GPIO_InitStruct.Pin = pg_Pin;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006400:	2301      	movs	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pg_GPIO_Port, &GPIO_InitStruct);
 8006404:	f107 0314 	add.w	r3, r7, #20
 8006408:	4619      	mov	r1, r3
 800640a:	481e      	ldr	r0, [pc, #120]	; (8006484 <MX_GPIO_Init+0x1b4>)
 800640c:	f007 f9cc 	bl	800d7a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : onsol_Pin */
  GPIO_InitStruct.Pin = onsol_Pin;
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006414:	2301      	movs	r3, #1
 8006416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006418:	2301      	movs	r3, #1
 800641a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800641c:	2300      	movs	r3, #0
 800641e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(onsol_GPIO_Port, &GPIO_InitStruct);
 8006420:	f107 0314 	add.w	r3, r7, #20
 8006424:	4619      	mov	r1, r3
 8006426:	4818      	ldr	r0, [pc, #96]	; (8006488 <MX_GPIO_Init+0x1b8>)
 8006428:	f007 f9be 	bl	800d7a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : onc_Pin onb_Pin gnde_Pin onv_Pin */
  GPIO_InitStruct.Pin = onc_Pin|onb_Pin|gnde_Pin|onv_Pin;
 800642c:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8006430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006432:	2301      	movs	r3, #1
 8006434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800643e:	f107 0314 	add.w	r3, r7, #20
 8006442:	4619      	mov	r1, r3
 8006444:	4810      	ldr	r0, [pc, #64]	; (8006488 <MX_GPIO_Init+0x1b8>)
 8006446:	f007 f9af 	bl	800d7a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pwrs_Pin */
  GPIO_InitStruct.Pin = pwrs_Pin;
 800644a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800644e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006450:	2301      	movs	r3, #1
 8006452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006454:	2302      	movs	r3, #2
 8006456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006458:	2300      	movs	r3, #0
 800645a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pwrs_GPIO_Port, &GPIO_InitStruct);
 800645c:	f107 0314 	add.w	r3, r7, #20
 8006460:	4619      	mov	r1, r3
 8006462:	4809      	ldr	r0, [pc, #36]	; (8006488 <MX_GPIO_Init+0x1b8>)
 8006464:	f007 f9a0 	bl	800d7a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006468:	2200      	movs	r2, #0
 800646a:	2100      	movs	r1, #0
 800646c:	2028      	movs	r0, #40	; 0x28
 800646e:	f006 fe96 	bl	800d19e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006472:	2028      	movs	r0, #40	; 0x28
 8006474:	f006 feaf 	bl	800d1d6 <HAL_NVIC_EnableIRQ>

}
 8006478:	bf00      	nop
 800647a:	3728      	adds	r7, #40	; 0x28
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40023800 	.word	0x40023800
 8006484:	40020400 	.word	0x40020400
 8006488:	40020800 	.word	0x40020800
 800648c:	40020000 	.word	0x40020000

08006490 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	sleepCounter++;
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <HAL_RTC_AlarmAEventCallback+0x24>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <HAL_RTC_AlarmAEventCallback+0x24>)
 80064a0:	6013      	str	r3, [r2, #0]
	checksleepCount = 1;
 80064a2:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <HAL_RTC_AlarmAEventCallback+0x28>)
 80064a4:	2201      	movs	r2, #1
 80064a6:	601a      	str	r2, [r3, #0]
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	200040d8 	.word	0x200040d8
 80064b8:	20003df0 	.word	0x20003df0

080064bc <sleep>:

void sleep(){
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
	__HAL_RTC_ALARMA_ENABLE(rtc);
 80064c0:	4b13      	ldr	r3, [pc, #76]	; (8006510 <sleep+0x54>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	4b11      	ldr	r3, [pc, #68]	; (8006510 <sleep+0x54>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d2:	609a      	str	r2, [r3, #8]
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80064d4:	2028      	movs	r0, #40	; 0x28
 80064d6:	f006 fe7e 	bl	800d1d6 <HAL_NVIC_EnableIRQ>
	HAL_UART_DeInit(&huart1);
 80064da:	480e      	ldr	r0, [pc, #56]	; (8006514 <sleep+0x58>)
 80064dc:	f009 fe17 	bl	801010e <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart2);
 80064e0:	480d      	ldr	r0, [pc, #52]	; (8006518 <sleep+0x5c>)
 80064e2:	f009 fe14 	bl	801010e <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart3);
 80064e6:	480d      	ldr	r0, [pc, #52]	; (800651c <sleep+0x60>)
 80064e8:	f009 fe11 	bl	801010e <HAL_UART_DeInit>
	HAL_UART_AbortReceive_IT(&huart1);
 80064ec:	4809      	ldr	r0, [pc, #36]	; (8006514 <sleep+0x58>)
 80064ee:	f009 ff43 	bl	8010378 <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortReceive_IT(&huart2);
 80064f2:	4809      	ldr	r0, [pc, #36]	; (8006518 <sleep+0x5c>)
 80064f4:	f009 ff40 	bl	8010378 <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortReceive_IT(&huart3);
 80064f8:	4808      	ldr	r0, [pc, #32]	; (800651c <sleep+0x60>)
 80064fa:	f009 ff3d 	bl	8010378 <HAL_UART_AbortReceive_IT>
	HAL_SuspendTick();
 80064fe:	f006 f8db 	bl	800c6b8 <HAL_SuspendTick>
	//HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006502:	2101      	movs	r1, #1
 8006504:	2001      	movs	r0, #1
 8006506:	f007 fbf7 	bl	800dcf8 <HAL_PWR_EnterSTOPMode>
}
 800650a:	bf00      	nop
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20004584 	.word	0x20004584
 8006514:	20003e94 	.word	0x20003e94
 8006518:	200041d8 	.word	0x200041d8
 800651c:	2000045c 	.word	0x2000045c

08006520 <wakeUp>:
void wakeUp(){
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
	HAL_ResumeTick();
 8006524:	f006 f8d6 	bl	800c6d4 <HAL_ResumeTick>
	SystemClock_Config();
 8006528:	f7ff fbfe 	bl	8005d28 <SystemClock_Config>
	HAL_UART_Init(&huart3);
 800652c:	4813      	ldr	r0, [pc, #76]	; (800657c <wakeUp+0x5c>)
 800652e:	f009 fda1 	bl	8010074 <HAL_UART_Init>
	HAL_UART_Init(&huart2);
 8006532:	4813      	ldr	r0, [pc, #76]	; (8006580 <wakeUp+0x60>)
 8006534:	f009 fd9e 	bl	8010074 <HAL_UART_Init>
	HAL_UART_Init(&huart1);
 8006538:	4812      	ldr	r0, [pc, #72]	; (8006584 <wakeUp+0x64>)
 800653a:	f009 fd9b 	bl	8010074 <HAL_UART_Init>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800653e:	2201      	movs	r2, #1
 8006540:	4911      	ldr	r1, [pc, #68]	; (8006588 <wakeUp+0x68>)
 8006542:	4810      	ldr	r0, [pc, #64]	; (8006584 <wakeUp+0x64>)
 8006544:	f009 fee8 	bl	8010318 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8006548:	2201      	movs	r2, #1
 800654a:	490f      	ldr	r1, [pc, #60]	; (8006588 <wakeUp+0x68>)
 800654c:	480c      	ldr	r0, [pc, #48]	; (8006580 <wakeUp+0x60>)
 800654e:	f009 fee3 	bl	8010318 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8006552:	2201      	movs	r2, #1
 8006554:	490c      	ldr	r1, [pc, #48]	; (8006588 <wakeUp+0x68>)
 8006556:	4809      	ldr	r0, [pc, #36]	; (800657c <wakeUp+0x5c>)
 8006558:	f009 fede 	bl	8010318 <HAL_UART_Receive_IT>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800655c:	2028      	movs	r0, #40	; 0x28
 800655e:	f006 fe48 	bl	800d1f2 <HAL_NVIC_DisableIRQ>
	__HAL_RTC_ALARMA_DISABLE(rtc);
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <wakeUp+0x6c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	4b08      	ldr	r3, [pc, #32]	; (800658c <wakeUp+0x6c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006574:	609a      	str	r2, [r3, #8]
}
 8006576:	bf00      	nop
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	2000045c 	.word	0x2000045c
 8006580:	200041d8 	.word	0x200041d8
 8006584:	20003e94 	.word	0x20003e94
 8006588:	20004d58 	.word	0x20004d58
 800658c:	20004584 	.word	0x20004584

08006590 <usart3Init>:
void usart3Init(){
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
	  MX_USART3_UART_Init();
 8006594:	f7ff fe72 	bl	800627c <MX_USART3_UART_Init>
	  HAL_UART_Receive_IT(uartSensor, &rx_data, 1);
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <usart3Init+0x1c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2201      	movs	r2, #1
 800659e:	4904      	ldr	r1, [pc, #16]	; (80065b0 <usart3Init+0x20>)
 80065a0:	4618      	mov	r0, r3
 80065a2:	f009 feb9 	bl	8010318 <HAL_UART_Receive_IT>
}
 80065a6:	bf00      	nop
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200044a8 	.word	0x200044a8
 80065b0:	20004d58 	.word	0x20004d58

080065b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065b8:	b672      	cpsid	i
}
 80065ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80065bc:	e7fe      	b.n	80065bc <Error_Handler+0x8>
	...

080065c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80065c6:	4b14      	ldr	r3, [pc, #80]	; (8006618 <HAL_MspInit+0x58>)
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4a13      	ldr	r2, [pc, #76]	; (8006618 <HAL_MspInit+0x58>)
 80065cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	6253      	str	r3, [r2, #36]	; 0x24
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <HAL_MspInit+0x58>)
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065de:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <HAL_MspInit+0x58>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	4a0d      	ldr	r2, [pc, #52]	; (8006618 <HAL_MspInit+0x58>)
 80065e4:	f043 0301 	orr.w	r3, r3, #1
 80065e8:	6213      	str	r3, [r2, #32]
 80065ea:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <HAL_MspInit+0x58>)
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <HAL_MspInit+0x58>)
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	4a07      	ldr	r2, [pc, #28]	; (8006618 <HAL_MspInit+0x58>)
 80065fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006600:	6253      	str	r3, [r2, #36]	; 0x24
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <HAL_MspInit+0x58>)
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660a:	607b      	str	r3, [r7, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr
 8006618:	40023800 	.word	0x40023800

0800661c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	; 0x28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a15      	ldr	r2, [pc, #84]	; (8006690 <HAL_ADC_MspInit+0x74>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d123      	bne.n	8006686 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800663e:	4b15      	ldr	r3, [pc, #84]	; (8006694 <HAL_ADC_MspInit+0x78>)
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	4a14      	ldr	r2, [pc, #80]	; (8006694 <HAL_ADC_MspInit+0x78>)
 8006644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006648:	6213      	str	r3, [r2, #32]
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <HAL_ADC_MspInit+0x78>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006656:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <HAL_ADC_MspInit+0x78>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	4a0e      	ldr	r2, [pc, #56]	; (8006694 <HAL_ADC_MspInit+0x78>)
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	61d3      	str	r3, [r2, #28]
 8006662:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <HAL_ADC_MspInit+0x78>)
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800666e:	2301      	movs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006672:	2303      	movs	r3, #3
 8006674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	4619      	mov	r1, r3
 8006680:	4805      	ldr	r0, [pc, #20]	; (8006698 <HAL_ADC_MspInit+0x7c>)
 8006682:	f007 f891 	bl	800d7a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006686:	bf00      	nop
 8006688:	3728      	adds	r7, #40	; 0x28
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40012400 	.word	0x40012400
 8006694:	40023800 	.word	0x40023800
 8006698:	40020400 	.word	0x40020400

0800669c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a08      	ldr	r2, [pc, #32]	; (80066cc <HAL_RTC_MspInit+0x30>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d10a      	bne.n	80066c4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80066ae:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <HAL_RTC_MspInit+0x34>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80066b4:	2200      	movs	r2, #0
 80066b6:	2100      	movs	r1, #0
 80066b8:	2029      	movs	r0, #41	; 0x29
 80066ba:	f006 fd70 	bl	800d19e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80066be:	2029      	movs	r0, #41	; 0x29
 80066c0:	f006 fd89 	bl	800d1d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40002800 	.word	0x40002800
 80066d0:	424706d8 	.word	0x424706d8

080066d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e4:	d10c      	bne.n	8006700 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	4a19      	ldr	r2, [pc, #100]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	6253      	str	r3, [r2, #36]	; 0x24
 80066f2:	4b17      	ldr	r3, [pc, #92]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80066fe:	e022      	b.n	8006746 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a13      	ldr	r2, [pc, #76]	; (8006754 <HAL_TIM_Base_MspInit+0x80>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d10c      	bne.n	8006724 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	4a10      	ldr	r2, [pc, #64]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 8006710:	f043 0302 	orr.w	r3, r3, #2
 8006714:	6253      	str	r3, [r2, #36]	; 0x24
 8006716:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	693b      	ldr	r3, [r7, #16]
}
 8006722:	e010      	b.n	8006746 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a0b      	ldr	r2, [pc, #44]	; (8006758 <HAL_TIM_Base_MspInit+0x84>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10b      	bne.n	8006746 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800672e:	4b08      	ldr	r3, [pc, #32]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	4a07      	ldr	r2, [pc, #28]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 8006734:	f043 0304 	orr.w	r3, r3, #4
 8006738:	6253      	str	r3, [r2, #36]	; 0x24
 800673a:	4b05      	ldr	r3, [pc, #20]	; (8006750 <HAL_TIM_Base_MspInit+0x7c>)
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr
 8006750:	40023800 	.word	0x40023800
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800

0800675c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <HAL_TIM_PWM_MspInit+0x34>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10b      	bne.n	8006786 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800676e:	4b09      	ldr	r3, [pc, #36]	; (8006794 <HAL_TIM_PWM_MspInit+0x38>)
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	4a08      	ldr	r2, [pc, #32]	; (8006794 <HAL_TIM_PWM_MspInit+0x38>)
 8006774:	f043 0308 	orr.w	r3, r3, #8
 8006778:	6253      	str	r3, [r2, #36]	; 0x24
 800677a:	4b06      	ldr	r3, [pc, #24]	; (8006794 <HAL_TIM_PWM_MspInit+0x38>)
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40023800 	.word	0x40023800

08006798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a0:	f107 030c 	add.w	r3, r7, #12
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	605a      	str	r2, [r3, #4]
 80067aa:	609a      	str	r2, [r3, #8]
 80067ac:	60da      	str	r2, [r3, #12]
 80067ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a11      	ldr	r2, [pc, #68]	; (80067fc <HAL_TIM_MspPostInit+0x64>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d11b      	bne.n	80067f2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <HAL_TIM_MspPostInit+0x68>)
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	4a10      	ldr	r2, [pc, #64]	; (8006800 <HAL_TIM_MspPostInit+0x68>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	61d3      	str	r3, [r2, #28]
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <HAL_TIM_MspPostInit+0x68>)
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	60bb      	str	r3, [r7, #8]
 80067d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80067d2:	2302      	movs	r3, #2
 80067d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d6:	2302      	movs	r3, #2
 80067d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067de:	2300      	movs	r3, #0
 80067e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80067e2:	2302      	movs	r3, #2
 80067e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	4619      	mov	r1, r3
 80067ec:	4805      	ldr	r0, [pc, #20]	; (8006804 <HAL_TIM_MspPostInit+0x6c>)
 80067ee:	f006 ffdb 	bl	800d7a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80067f2:	bf00      	nop
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40000c00 	.word	0x40000c00
 8006800:	40023800 	.word	0x40023800
 8006804:	40020000 	.word	0x40020000

08006808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	; 0x38
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	605a      	str	r2, [r3, #4]
 800681a:	609a      	str	r2, [r3, #8]
 800681c:	60da      	str	r2, [r3, #12]
 800681e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a52      	ldr	r2, [pc, #328]	; (8006970 <HAL_UART_MspInit+0x168>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d131      	bne.n	800688e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800682a:	4b52      	ldr	r3, [pc, #328]	; (8006974 <HAL_UART_MspInit+0x16c>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	4a51      	ldr	r2, [pc, #324]	; (8006974 <HAL_UART_MspInit+0x16c>)
 8006830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006834:	6213      	str	r3, [r2, #32]
 8006836:	4b4f      	ldr	r3, [pc, #316]	; (8006974 <HAL_UART_MspInit+0x16c>)
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683e:	623b      	str	r3, [r7, #32]
 8006840:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006842:	4b4c      	ldr	r3, [pc, #304]	; (8006974 <HAL_UART_MspInit+0x16c>)
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	4a4b      	ldr	r2, [pc, #300]	; (8006974 <HAL_UART_MspInit+0x16c>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	61d3      	str	r3, [r2, #28]
 800684e:	4b49      	ldr	r3, [pc, #292]	; (8006974 <HAL_UART_MspInit+0x16c>)
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800685a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006860:	2302      	movs	r3, #2
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006864:	2300      	movs	r3, #0
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006868:	2303      	movs	r3, #3
 800686a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800686c:	2307      	movs	r3, #7
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006874:	4619      	mov	r1, r3
 8006876:	4840      	ldr	r0, [pc, #256]	; (8006978 <HAL_UART_MspInit+0x170>)
 8006878:	f006 ff96 	bl	800d7a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800687c:	2200      	movs	r2, #0
 800687e:	2100      	movs	r1, #0
 8006880:	2025      	movs	r0, #37	; 0x25
 8006882:	f006 fc8c 	bl	800d19e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006886:	2025      	movs	r0, #37	; 0x25
 8006888:	f006 fca5 	bl	800d1d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800688c:	e06b      	b.n	8006966 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a3a      	ldr	r2, [pc, #232]	; (800697c <HAL_UART_MspInit+0x174>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d130      	bne.n	80068fa <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006898:	4b36      	ldr	r3, [pc, #216]	; (8006974 <HAL_UART_MspInit+0x16c>)
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	4a35      	ldr	r2, [pc, #212]	; (8006974 <HAL_UART_MspInit+0x16c>)
 800689e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068a2:	6253      	str	r3, [r2, #36]	; 0x24
 80068a4:	4b33      	ldr	r3, [pc, #204]	; (8006974 <HAL_UART_MspInit+0x16c>)
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068b0:	4b30      	ldr	r3, [pc, #192]	; (8006974 <HAL_UART_MspInit+0x16c>)
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	4a2f      	ldr	r2, [pc, #188]	; (8006974 <HAL_UART_MspInit+0x16c>)
 80068b6:	f043 0301 	orr.w	r3, r3, #1
 80068ba:	61d3      	str	r3, [r2, #28]
 80068bc:	4b2d      	ldr	r3, [pc, #180]	; (8006974 <HAL_UART_MspInit+0x16c>)
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80068c8:	230c      	movs	r3, #12
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068cc:	2302      	movs	r3, #2
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d4:	2303      	movs	r3, #3
 80068d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80068d8:	2307      	movs	r3, #7
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e0:	4619      	mov	r1, r3
 80068e2:	4825      	ldr	r0, [pc, #148]	; (8006978 <HAL_UART_MspInit+0x170>)
 80068e4:	f006 ff60 	bl	800d7a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80068e8:	2200      	movs	r2, #0
 80068ea:	2100      	movs	r1, #0
 80068ec:	2026      	movs	r0, #38	; 0x26
 80068ee:	f006 fc56 	bl	800d19e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068f2:	2026      	movs	r0, #38	; 0x26
 80068f4:	f006 fc6f 	bl	800d1d6 <HAL_NVIC_EnableIRQ>
}
 80068f8:	e035      	b.n	8006966 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART3)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a20      	ldr	r2, [pc, #128]	; (8006980 <HAL_UART_MspInit+0x178>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d130      	bne.n	8006966 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006904:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <HAL_UART_MspInit+0x16c>)
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <HAL_UART_MspInit+0x16c>)
 800690a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800690e:	6253      	str	r3, [r2, #36]	; 0x24
 8006910:	4b18      	ldr	r3, [pc, #96]	; (8006974 <HAL_UART_MspInit+0x16c>)
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800691c:	4b15      	ldr	r3, [pc, #84]	; (8006974 <HAL_UART_MspInit+0x16c>)
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	4a14      	ldr	r2, [pc, #80]	; (8006974 <HAL_UART_MspInit+0x16c>)
 8006922:	f043 0302 	orr.w	r3, r3, #2
 8006926:	61d3      	str	r3, [r2, #28]
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <HAL_UART_MspInit+0x16c>)
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006934:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693a:	2302      	movs	r3, #2
 800693c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006942:	2303      	movs	r3, #3
 8006944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006946:	2307      	movs	r3, #7
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800694a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800694e:	4619      	mov	r1, r3
 8006950:	480c      	ldr	r0, [pc, #48]	; (8006984 <HAL_UART_MspInit+0x17c>)
 8006952:	f006 ff29 	bl	800d7a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006956:	2200      	movs	r2, #0
 8006958:	2100      	movs	r1, #0
 800695a:	2027      	movs	r0, #39	; 0x27
 800695c:	f006 fc1f 	bl	800d19e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006960:	2027      	movs	r0, #39	; 0x27
 8006962:	f006 fc38 	bl	800d1d6 <HAL_NVIC_EnableIRQ>
}
 8006966:	bf00      	nop
 8006968:	3738      	adds	r7, #56	; 0x38
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40013800 	.word	0x40013800
 8006974:	40023800 	.word	0x40023800
 8006978:	40020000 	.word	0x40020000
 800697c:	40004400 	.word	0x40004400
 8006980:	40004800 	.word	0x40004800
 8006984:	40020400 	.word	0x40020400

08006988 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <HAL_UART_MspDeInit+0x84>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10e      	bne.n	80069b8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800699a:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <HAL_UART_MspDeInit+0x88>)
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <HAL_UART_MspDeInit+0x88>)
 80069a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a4:	6213      	str	r3, [r2, #32]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80069a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80069aa:	481a      	ldr	r0, [pc, #104]	; (8006a14 <HAL_UART_MspDeInit+0x8c>)
 80069ac:	f007 f87c 	bl	800daa8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80069b0:	2025      	movs	r0, #37	; 0x25
 80069b2:	f006 fc1e 	bl	800d1f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80069b6:	e025      	b.n	8006a04 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <HAL_UART_MspDeInit+0x90>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10d      	bne.n	80069de <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80069c2:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <HAL_UART_MspDeInit+0x88>)
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <HAL_UART_MspDeInit+0x88>)
 80069c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069cc:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80069ce:	210c      	movs	r1, #12
 80069d0:	4810      	ldr	r0, [pc, #64]	; (8006a14 <HAL_UART_MspDeInit+0x8c>)
 80069d2:	f007 f869 	bl	800daa8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80069d6:	2026      	movs	r0, #38	; 0x26
 80069d8:	f006 fc0b 	bl	800d1f2 <HAL_NVIC_DisableIRQ>
}
 80069dc:	e012      	b.n	8006a04 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART3)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a0e      	ldr	r2, [pc, #56]	; (8006a1c <HAL_UART_MspDeInit+0x94>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10d      	bne.n	8006a04 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART3_CLK_DISABLE();
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_UART_MspDeInit+0x88>)
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	4a08      	ldr	r2, [pc, #32]	; (8006a10 <HAL_UART_MspDeInit+0x88>)
 80069ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069f2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80069f4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80069f8:	4809      	ldr	r0, [pc, #36]	; (8006a20 <HAL_UART_MspDeInit+0x98>)
 80069fa:	f007 f855 	bl	800daa8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80069fe:	2027      	movs	r0, #39	; 0x27
 8006a00:	f006 fbf7 	bl	800d1f2 <HAL_NVIC_DisableIRQ>
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40013800 	.word	0x40013800
 8006a10:	40023800 	.word	0x40023800
 8006a14:	40020000 	.word	0x40020000
 8006a18:	40004400 	.word	0x40004400
 8006a1c:	40004800 	.word	0x40004800
 8006a20:	40020400 	.word	0x40020400

08006a24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006a28:	f3bf 8f4f 	dsb	sy
}
 8006a2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <__NVIC_SystemReset+0x24>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006a36:	4904      	ldr	r1, [pc, #16]	; (8006a48 <__NVIC_SystemReset+0x24>)
 8006a38:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <__NVIC_SystemReset+0x28>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a3e:	f3bf 8f4f 	dsb	sy
}
 8006a42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <__NVIC_SystemReset+0x20>
 8006a48:	e000ed00 	.word	0xe000ed00
 8006a4c:	05fa0004 	.word	0x05fa0004

08006a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006a54:	f007 ff76 	bl	800e944 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006a58:	e7fe      	b.n	8006a58 <NMI_Handler+0x8>

08006a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8006a5e:	f7ff ffe1 	bl	8006a24 <__NVIC_SystemReset>

08006a62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a62:	b480      	push	{r7}
 8006a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a66:	e7fe      	b.n	8006a66 <MemManage_Handler+0x4>

08006a68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a6c:	e7fe      	b.n	8006a6c <BusFault_Handler+0x4>

08006a6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a72:	e7fe      	b.n	8006a72 <UsageFault_Handler+0x4>

08006a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006a78:	bf00      	nop
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a90:	bf00      	nop
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a9c:	f005 fdce 	bl	800c63c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006aa0:	bf00      	nop
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006aa8:	4802      	ldr	r0, [pc, #8]	; (8006ab4 <USART1_IRQHandler+0x10>)
 8006aaa:	f009 fccf 	bl	801044c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006aae:	bf00      	nop
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20003e94 	.word	0x20003e94

08006ab8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006abc:	4802      	ldr	r0, [pc, #8]	; (8006ac8 <USART2_IRQHandler+0x10>)
 8006abe:	f009 fcc5 	bl	801044c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006ac2:	bf00      	nop
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200041d8 	.word	0x200041d8

08006acc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006ad0:	4802      	ldr	r0, [pc, #8]	; (8006adc <USART3_IRQHandler+0x10>)
 8006ad2:	f009 fcbb 	bl	801044c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	2000045c 	.word	0x2000045c

08006ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(_1pps_Pin);
 8006ae4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ae8:	f007 f8ee 	bl	800dcc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ON_Pin);
 8006aec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006af0:	f007 f8ea 	bl	800dcc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006afc:	4802      	ldr	r0, [pc, #8]	; (8006b08 <RTC_Alarm_IRQHandler+0x10>)
 8006afe:	f008 fc3b 	bl	800f378 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8006b02:	bf00      	nop
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20003fc4 	.word	0x20003fc4

08006b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
	return 1;
 8006b10:	2301      	movs	r3, #1
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr

08006b1a <_kill>:

int _kill(int pid, int sig)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006b24:	f00b ffd8 	bl	8012ad8 <__errno>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2216      	movs	r2, #22
 8006b2c:	601a      	str	r2, [r3, #0]
	return -1;
 8006b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <_exit>:

void _exit (int status)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006b42:	f04f 31ff 	mov.w	r1, #4294967295
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ffe7 	bl	8006b1a <_kill>
	while (1) {}		/* Make sure we hang here */
 8006b4c:	e7fe      	b.n	8006b4c <_exit+0x12>

08006b4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b086      	sub	sp, #24
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e00a      	b.n	8006b76 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006b60:	f3af 8000 	nop.w
 8006b64:	4601      	mov	r1, r0
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	60ba      	str	r2, [r7, #8]
 8006b6c:	b2ca      	uxtb	r2, r1
 8006b6e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	3301      	adds	r3, #1
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	dbf0      	blt.n	8006b60 <_read+0x12>
	}

return len;
 8006b7e:	687b      	ldr	r3, [r7, #4]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e009      	b.n	8006bae <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	60ba      	str	r2, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	3301      	adds	r3, #1
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	dbf1      	blt.n	8006b9a <_write+0x12>
	}
	return len;
 8006bb6:	687b      	ldr	r3, [r7, #4]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <_close>:

int _close(int file)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
	return -1;
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr

08006bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006be6:	605a      	str	r2, [r3, #4]
	return 0;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <_isatty>:

int _isatty(int file)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	return 1;
 8006bfc:	2301      	movs	r3, #1
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
	return 0;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr

08006c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c28:	4a14      	ldr	r2, [pc, #80]	; (8006c7c <_sbrk+0x5c>)
 8006c2a:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <_sbrk+0x60>)
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c34:	4b13      	ldr	r3, [pc, #76]	; (8006c84 <_sbrk+0x64>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c3c:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <_sbrk+0x64>)
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <_sbrk+0x68>)
 8006c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <_sbrk+0x64>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d207      	bcs.n	8006c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c50:	f00b ff42 	bl	8012ad8 <__errno>
 8006c54:	4603      	mov	r3, r0
 8006c56:	220c      	movs	r2, #12
 8006c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	e009      	b.n	8006c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <_sbrk+0x64>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <_sbrk+0x64>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	4a05      	ldr	r2, [pc, #20]	; (8006c84 <_sbrk+0x64>)
 8006c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c72:	68fb      	ldr	r3, [r7, #12]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20008000 	.word	0x20008000
 8006c80:	00000400 	.word	0x00000400
 8006c84:	200001f4 	.word	0x200001f4
 8006c88:	20004db8 	.word	0x20004db8

08006c8c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c90:	bf00      	nop
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c98:	480c      	ldr	r0, [pc, #48]	; (8006ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006c9a:	490d      	ldr	r1, [pc, #52]	; (8006cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006c9c:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ca0:	e002      	b.n	8006ca8 <LoopCopyDataInit>

08006ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ca6:	3304      	adds	r3, #4

08006ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cac:	d3f9      	bcc.n	8006ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cae:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006cb0:	4c0a      	ldr	r4, [pc, #40]	; (8006cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8006cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cb4:	e001      	b.n	8006cba <LoopFillZerobss>

08006cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006cb8:	3204      	adds	r2, #4

08006cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006cbc:	d3fb      	bcc.n	8006cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006cbe:	f7ff ffe5 	bl	8006c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cc2:	f00b ff0f 	bl	8012ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006cc6:	f7fe ffdd 	bl	8005c84 <main>
  bx lr
 8006cca:	4770      	bx	lr
  ldr r0, =_sdata
 8006ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006cd0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006cd4:	08015f98 	.word	0x08015f98
  ldr r2, =_sbss
 8006cd8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006cdc:	20004db8 	.word	0x20004db8

08006ce0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ce0:	e7fe      	b.n	8006ce0 <ADC1_IRQHandler>
	...

08006ce4 <__NVIC_SystemReset>:
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006ce8:	f3bf 8f4f 	dsb	sy
}
 8006cec:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <__NVIC_SystemReset+0x24>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006cf6:	4904      	ldr	r1, [pc, #16]	; (8006d08 <__NVIC_SystemReset+0x24>)
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <__NVIC_SystemReset+0x28>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006cfe:	f3bf 8f4f 	dsb	sy
}
 8006d02:	bf00      	nop
    __NOP();
 8006d04:	bf00      	nop
 8006d06:	e7fd      	b.n	8006d04 <__NVIC_SystemReset+0x20>
 8006d08:	e000ed00 	.word	0xe000ed00
 8006d0c:	05fa0004 	.word	0x05fa0004

08006d10 <BTPowerOn>:
uint8_t* BL9 = (uint8_t*)"END#\r\n";
uint8_t* BL10 = (uint8_t*)"AT+BTSCAN=1,10\r\n";

int rx_c = 0;

void BTPowerOn(){
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
	getIMEI();
 8006d14:	f00b f800 	bl	8011d18 <getIMEI>
	txr(uartModem, BL0);
 8006d18:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <BTPowerOn+0x64>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <BTPowerOn+0x68>)
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	4611      	mov	r1, r2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f00b fcd0 	bl	80126c8 <txr>
	txr(uartModem, IMEI);
 8006d28:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <BTPowerOn+0x64>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4913      	ldr	r1, [pc, #76]	; (8006d7c <BTPowerOn+0x6c>)
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f00b fcca 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"\r\n");
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <BTPowerOn+0x64>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4911      	ldr	r1, [pc, #68]	; (8006d80 <BTPowerOn+0x70>)
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f00b fcc4 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8006d40:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <BTPowerOn+0x64>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a0f      	ldr	r2, [pc, #60]	; (8006d84 <BTPowerOn+0x74>)
 8006d46:	6811      	ldr	r1, [r2, #0]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f00b fc92 	bl	8012674 <rxr>
	txr(uartModem, BL1);
 8006d50:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <BTPowerOn+0x64>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a0c      	ldr	r2, [pc, #48]	; (8006d88 <BTPowerOn+0x78>)
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f00b fcb4 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 5);
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <BTPowerOn+0x64>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a07      	ldr	r2, [pc, #28]	; (8006d84 <BTPowerOn+0x74>)
 8006d66:	6811      	ldr	r1, [r2, #0]
 8006d68:	2205      	movs	r2, #5
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f00b fc82 	bl	8012674 <rxr>
	//tx(uartDebug, (uint8_t*)"BT_POWER_ON\r\n");
}
 8006d70:	bf00      	nop
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20004d5c 	.word	0x20004d5c
 8006d78:	2000003c 	.word	0x2000003c
 8006d7c:	20003d9c 	.word	0x20003d9c
 8006d80:	08014b88 	.word	0x08014b88
 8006d84:	20000118 	.word	0x20000118
 8006d88:	20000040 	.word	0x20000040

08006d8c <BTPowerOff>:

void BTPowerOff(){
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
	txr(uartModem, (uint8_t*)"AT+BTPOWER=0\r\n");
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <BTPowerOff+0x24>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4907      	ldr	r1, [pc, #28]	; (8006db4 <BTPowerOff+0x28>)
 8006d96:	4618      	mov	r0, r3
 8006d98:	f00b fc96 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 5);
 8006d9c:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <BTPowerOff+0x24>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <BTPowerOff+0x2c>)
 8006da2:	6811      	ldr	r1, [r2, #0]
 8006da4:	2205      	movs	r2, #5
 8006da6:	4618      	mov	r0, r3
 8006da8:	f00b fc64 	bl	8012674 <rxr>
	//tx(uartDebug, (uint8_t*)"BT_POWER_OFF\r\n");
}
 8006dac:	bf00      	nop
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20004d5c 	.word	0x20004d5c
 8006db4:	08014b8c 	.word	0x08014b8c
 8006db8:	20000118 	.word	0x20000118

08006dbc <bluetoothMode>:

void bluetoothMode(int timeout){
 8006dbc:	b590      	push	{r4, r7, lr}
 8006dbe:	b0a7      	sub	sp, #156	; 0x9c
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	int bt_timeout=0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int connected = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint8_t* oldFileName;
	uint8_t oldFileNameFirmware[100];
	sim868Off();
 8006dd0:	f00a fe4c 	bl	8011a6c <sim868Off>
	HAL_Delay(1000);
 8006dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dd8:	f005 fc4c 	bl	800c674 <HAL_Delay>
	sim868On();
 8006ddc:	f00a fe10 	bl	8011a00 <sim868On>
	REGESTRATION = sim868Init();
 8006de0:	f00a fe9e 	bl	8011b20 <sim868Init>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <bluetoothMode+0x78>)
 8006de8:	6013      	str	r3, [r2, #0]
	BTPowerOn();
 8006dea:	f7ff ff91 	bl	8006d10 <BTPowerOn>
	while(bt_timeout < timeout || connected == 1){
 8006dee:	f000 be1f 	b.w	8007a30 <bluetoothMode+0xc74>
		tx(uartModem, (uint8_t*)"AT+BTSTATUS?\r\n");
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <bluetoothMode+0x7c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4911      	ldr	r1, [pc, #68]	; (8006e3c <bluetoothMode+0x80>)
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f00b fb6f 	bl	80124dc <tx>
		rx(uartModem, SIMR, 2);
 8006dfe:	4b0e      	ldr	r3, [pc, #56]	; (8006e38 <bluetoothMode+0x7c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a0f      	ldr	r2, [pc, #60]	; (8006e40 <bluetoothMode+0x84>)
 8006e04:	6811      	ldr	r1, [r2, #0]
 8006e06:	2202      	movs	r2, #2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f00b fb99 	bl	8012540 <rx>
		if(strstr((char*)rx_buf,"SPP\"\r\n") == NULL){
 8006e0e:	490d      	ldr	r1, [pc, #52]	; (8006e44 <bluetoothMode+0x88>)
 8006e10:	480d      	ldr	r0, [pc, #52]	; (8006e48 <bluetoothMode+0x8c>)
 8006e12:	f00b ff7f 	bl	8012d14 <strstr>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d117      	bne.n	8006e4c <bluetoothMode+0x90>
			//tx(uartDebug, (uint8_t*)"BT_DISCONNECTED\r\n");
			if(connected == 1){
 8006e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d116      	bne.n	8006e52 <bluetoothMode+0x96>
				connected = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				bt_timeout = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e30:	e00f      	b.n	8006e52 <bluetoothMode+0x96>
 8006e32:	bf00      	nop
 8006e34:	20000158 	.word	0x20000158
 8006e38:	20004d5c 	.word	0x20004d5c
 8006e3c:	08014b38 	.word	0x08014b38
 8006e40:	20000118 	.word	0x20000118
 8006e44:	08014b9c 	.word	0x08014b9c
 8006e48:	20004588 	.word	0x20004588
			}
		}
		else{
			connected = 1;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		}
		if(bt_timeout++%6 == 0 && connected == 0){
 8006e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e56:	1c53      	adds	r3, r2, #1
 8006e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e5c:	4bb3      	ldr	r3, [pc, #716]	; (800712c <bluetoothMode+0x370>)
 8006e5e:	fb83 3102 	smull	r3, r1, r3, r2
 8006e62:	17d3      	asrs	r3, r2, #31
 8006e64:	1ac9      	subs	r1, r1, r3
 8006e66:	460b      	mov	r3, r1
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	440b      	add	r3, r1
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	1ad1      	subs	r1, r2, r3
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d105      	bne.n	8006e80 <bluetoothMode+0xc4>
 8006e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <bluetoothMode+0xc4>
			buzzOn();
 8006e7c:	f00b fbe6 	bl	801264c <buzzOn>
		}
		rx(uartModem, (uint8_t*)"#$%", 1);
 8006e80:	4bab      	ldr	r3, [pc, #684]	; (8007130 <bluetoothMode+0x374>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	49ab      	ldr	r1, [pc, #684]	; (8007134 <bluetoothMode+0x378>)
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f00b fb59 	bl	8012540 <rx>
		buzzOff();
 8006e8e:	f00b fbe7 	bl	8012660 <buzzOff>
		if(strstr((char*)rx_buf,(char*)BLR1) != NULL){
 8006e92:	4ba9      	ldr	r3, [pc, #676]	; (8007138 <bluetoothMode+0x37c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	48a8      	ldr	r0, [pc, #672]	; (800713c <bluetoothMode+0x380>)
 8006e9a:	f00b ff3b 	bl	8012d14 <strstr>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00f      	beq.n	8006ec4 <bluetoothMode+0x108>
			tx(uartModem, BL2);
 8006ea4:	4ba2      	ldr	r3, [pc, #648]	; (8007130 <bluetoothMode+0x374>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4aa5      	ldr	r2, [pc, #660]	; (8007140 <bluetoothMode+0x384>)
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f00b fb14 	bl	80124dc <tx>
			rx(uartModem, SIMR, 10);
 8006eb4:	4b9e      	ldr	r3, [pc, #632]	; (8007130 <bluetoothMode+0x374>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4aa2      	ldr	r2, [pc, #648]	; (8007144 <bluetoothMode+0x388>)
 8006eba:	6811      	ldr	r1, [r2, #0]
 8006ebc:	220a      	movs	r2, #10
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f00b fb3e 	bl	8012540 <rx>
			//tx(uartDebug, (uint8_t*)"BT_PAIRED\r\n");
		}

		if(strstr((char*)rx_buf,(char*)BLR2) != NULL){
 8006ec4:	4ba0      	ldr	r3, [pc, #640]	; (8007148 <bluetoothMode+0x38c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	489c      	ldr	r0, [pc, #624]	; (800713c <bluetoothMode+0x380>)
 8006ecc:	f00b ff22 	bl	8012d14 <strstr>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00f      	beq.n	8006ef6 <bluetoothMode+0x13a>
			tx(uartModem, BL3);
 8006ed6:	4b96      	ldr	r3, [pc, #600]	; (8007130 <bluetoothMode+0x374>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a9c      	ldr	r2, [pc, #624]	; (800714c <bluetoothMode+0x390>)
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f00b fafb 	bl	80124dc <tx>
			rx(uartModem, SIMR, 10);
 8006ee6:	4b92      	ldr	r3, [pc, #584]	; (8007130 <bluetoothMode+0x374>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a96      	ldr	r2, [pc, #600]	; (8007144 <bluetoothMode+0x388>)
 8006eec:	6811      	ldr	r1, [r2, #0]
 8006eee:	220a      	movs	r2, #10
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f00b fb25 	bl	8012540 <rx>
		}

		if(strstr((char*)rx_buf,(char*)BLR12) != NULL && strstr((char*)rx_buf,"config") != NULL){
 8006ef6:	4b96      	ldr	r3, [pc, #600]	; (8007150 <bluetoothMode+0x394>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	488f      	ldr	r0, [pc, #572]	; (800713c <bluetoothMode+0x380>)
 8006efe:	f00b ff09 	bl	8012d14 <strstr>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d06e      	beq.n	8006fe6 <bluetoothMode+0x22a>
 8006f08:	4992      	ldr	r1, [pc, #584]	; (8007154 <bluetoothMode+0x398>)
 8006f0a:	488c      	ldr	r0, [pc, #560]	; (800713c <bluetoothMode+0x380>)
 8006f0c:	f00b ff02 	bl	8012d14 <strstr>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d067      	beq.n	8006fe6 <bluetoothMode+0x22a>
			strtok((char*)rx_buf,"\"");
 8006f16:	4990      	ldr	r1, [pc, #576]	; (8007158 <bluetoothMode+0x39c>)
 8006f18:	4888      	ldr	r0, [pc, #544]	; (800713c <bluetoothMode+0x380>)
 8006f1a:	f00b ff13 	bl	8012d44 <strtok>
			strtok((char*)NULL,"\"");
 8006f1e:	498e      	ldr	r1, [pc, #568]	; (8007158 <bluetoothMode+0x39c>)
 8006f20:	2000      	movs	r0, #0
 8006f22:	f00b ff0f 	bl	8012d44 <strtok>
			strtok((char*)NULL,"\"");
 8006f26:	498c      	ldr	r1, [pc, #560]	; (8007158 <bluetoothMode+0x39c>)
 8006f28:	2000      	movs	r0, #0
 8006f2a:	f00b ff0b 	bl	8012d44 <strtok>
			oldFileName = (uint8_t*)strtok(NULL,"\"");
 8006f2e:	498a      	ldr	r1, [pc, #552]	; (8007158 <bluetoothMode+0x39c>)
 8006f30:	2000      	movs	r0, #0
 8006f32:	f00b ff07 	bl	8012d44 <strtok>
 8006f36:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			tx(uartModem, BL8);
 8006f3a:	4b7d      	ldr	r3, [pc, #500]	; (8007130 <bluetoothMode+0x374>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a87      	ldr	r2, [pc, #540]	; (800715c <bluetoothMode+0x3a0>)
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f00b fac9 	bl	80124dc <tx>
			rx(uartModem, BLR13, 160);
 8006f4a:	4b79      	ldr	r3, [pc, #484]	; (8007130 <bluetoothMode+0x374>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a84      	ldr	r2, [pc, #528]	; (8007160 <bluetoothMode+0x3a4>)
 8006f50:	6811      	ldr	r1, [r2, #0]
 8006f52:	22a0      	movs	r2, #160	; 0xa0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f00b faf3 	bl	8012540 <rx>
			if(strcmp((char*)oldFileName,(char*)"config.txt") != 0){
 8006f5a:	4982      	ldr	r1, [pc, #520]	; (8007164 <bluetoothMode+0x3a8>)
 8006f5c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006f60:	f7fe f90c 	bl	800517c <strcmp>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d038      	beq.n	8006fdc <bluetoothMode+0x220>
				txr(uartModem, (uint8_t*)"AT+FSDEL=D:\\BtReceived\\config.txt");
 8006f6a:	4b71      	ldr	r3, [pc, #452]	; (8007130 <bluetoothMode+0x374>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	497e      	ldr	r1, [pc, #504]	; (8007168 <bluetoothMode+0x3ac>)
 8006f70:	4618      	mov	r0, r3
 8006f72:	f00b fba9 	bl	80126c8 <txr>
				txr(uartModem, SIMN);
 8006f76:	4b6e      	ldr	r3, [pc, #440]	; (8007130 <bluetoothMode+0x374>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a7c      	ldr	r2, [pc, #496]	; (800716c <bluetoothMode+0x3b0>)
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f00b fba1 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 5);
 8006f86:	4b6a      	ldr	r3, [pc, #424]	; (8007130 <bluetoothMode+0x374>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a6e      	ldr	r2, [pc, #440]	; (8007144 <bluetoothMode+0x388>)
 8006f8c:	6811      	ldr	r1, [r2, #0]
 8006f8e:	2205      	movs	r2, #5
 8006f90:	4618      	mov	r0, r3
 8006f92:	f00b fb6f 	bl	8012674 <rxr>
				txr(uartModem, (uint8_t*)"AT+FSRENAME=D:\\BtReceived\\");
 8006f96:	4b66      	ldr	r3, [pc, #408]	; (8007130 <bluetoothMode+0x374>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4975      	ldr	r1, [pc, #468]	; (8007170 <bluetoothMode+0x3b4>)
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f00b fb93 	bl	80126c8 <txr>
				txr(uartModem, oldFileName);
 8006fa2:	4b63      	ldr	r3, [pc, #396]	; (8007130 <bluetoothMode+0x374>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006faa:	4618      	mov	r0, r3
 8006fac:	f00b fb8c 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)",D:\\BtReceived\\config.txt");
 8006fb0:	4b5f      	ldr	r3, [pc, #380]	; (8007130 <bluetoothMode+0x374>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	496f      	ldr	r1, [pc, #444]	; (8007174 <bluetoothMode+0x3b8>)
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f00b fb86 	bl	80126c8 <txr>
				txr(uartModem, SIMN);
 8006fbc:	4b5c      	ldr	r3, [pc, #368]	; (8007130 <bluetoothMode+0x374>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6a      	ldr	r2, [pc, #424]	; (800716c <bluetoothMode+0x3b0>)
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f00b fb7e 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 8006fcc:	4b58      	ldr	r3, [pc, #352]	; (8007130 <bluetoothMode+0x374>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a5c      	ldr	r2, [pc, #368]	; (8007144 <bluetoothMode+0x388>)
 8006fd2:	6811      	ldr	r1, [r2, #0]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f00b fb4c 	bl	8012674 <rxr>
			}
			updateConfig(0);
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f003 f8c5 	bl	800a16c <updateConfig>
			getSleepParametrs();
 8006fe2:	f00b f875 	bl	80120d0 <getSleepParametrs>
		}

		if(strstr((char*)rx_buf,(char*)BLR12) != NULL && strstr((char*)rx_buf,"table") != NULL){
 8006fe6:	4b5a      	ldr	r3, [pc, #360]	; (8007150 <bluetoothMode+0x394>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4619      	mov	r1, r3
 8006fec:	4853      	ldr	r0, [pc, #332]	; (800713c <bluetoothMode+0x380>)
 8006fee:	f00b fe91 	bl	8012d14 <strstr>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d06c      	beq.n	80070d2 <bluetoothMode+0x316>
 8006ff8:	495f      	ldr	r1, [pc, #380]	; (8007178 <bluetoothMode+0x3bc>)
 8006ffa:	4850      	ldr	r0, [pc, #320]	; (800713c <bluetoothMode+0x380>)
 8006ffc:	f00b fe8a 	bl	8012d14 <strstr>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d065      	beq.n	80070d2 <bluetoothMode+0x316>
			strtok((char*)rx_buf,"\"");
 8007006:	4954      	ldr	r1, [pc, #336]	; (8007158 <bluetoothMode+0x39c>)
 8007008:	484c      	ldr	r0, [pc, #304]	; (800713c <bluetoothMode+0x380>)
 800700a:	f00b fe9b 	bl	8012d44 <strtok>
			strtok((char*)NULL,"\"");
 800700e:	4952      	ldr	r1, [pc, #328]	; (8007158 <bluetoothMode+0x39c>)
 8007010:	2000      	movs	r0, #0
 8007012:	f00b fe97 	bl	8012d44 <strtok>
			strtok((char*)NULL,"\"");
 8007016:	4950      	ldr	r1, [pc, #320]	; (8007158 <bluetoothMode+0x39c>)
 8007018:	2000      	movs	r0, #0
 800701a:	f00b fe93 	bl	8012d44 <strtok>
			oldFileName = (uint8_t*)strtok(NULL,"\"");
 800701e:	494e      	ldr	r1, [pc, #312]	; (8007158 <bluetoothMode+0x39c>)
 8007020:	2000      	movs	r0, #0
 8007022:	f00b fe8f 	bl	8012d44 <strtok>
 8007026:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			tx(uartModem, BL8);
 800702a:	4b41      	ldr	r3, [pc, #260]	; (8007130 <bluetoothMode+0x374>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a4b      	ldr	r2, [pc, #300]	; (800715c <bluetoothMode+0x3a0>)
 8007030:	6812      	ldr	r2, [r2, #0]
 8007032:	4611      	mov	r1, r2
 8007034:	4618      	mov	r0, r3
 8007036:	f00b fa51 	bl	80124dc <tx>
			rx(uartModem, BLR13, 160);
 800703a:	4b3d      	ldr	r3, [pc, #244]	; (8007130 <bluetoothMode+0x374>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a48      	ldr	r2, [pc, #288]	; (8007160 <bluetoothMode+0x3a4>)
 8007040:	6811      	ldr	r1, [r2, #0]
 8007042:	22a0      	movs	r2, #160	; 0xa0
 8007044:	4618      	mov	r0, r3
 8007046:	f00b fa7b 	bl	8012540 <rx>
			if(strcmp((char*)oldFileName,(char*)"table.txt") != 0){
 800704a:	494c      	ldr	r1, [pc, #304]	; (800717c <bluetoothMode+0x3c0>)
 800704c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007050:	f7fe f894 	bl	800517c <strcmp>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d038      	beq.n	80070cc <bluetoothMode+0x310>
				txr(uartModem, (uint8_t*)"AT+FSDEL=D:\\BtReceived\\table.txt");
 800705a:	4b35      	ldr	r3, [pc, #212]	; (8007130 <bluetoothMode+0x374>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4948      	ldr	r1, [pc, #288]	; (8007180 <bluetoothMode+0x3c4>)
 8007060:	4618      	mov	r0, r3
 8007062:	f00b fb31 	bl	80126c8 <txr>
				txr(uartModem, SIMN);
 8007066:	4b32      	ldr	r3, [pc, #200]	; (8007130 <bluetoothMode+0x374>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a40      	ldr	r2, [pc, #256]	; (800716c <bluetoothMode+0x3b0>)
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	4611      	mov	r1, r2
 8007070:	4618      	mov	r0, r3
 8007072:	f00b fb29 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 5);
 8007076:	4b2e      	ldr	r3, [pc, #184]	; (8007130 <bluetoothMode+0x374>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a32      	ldr	r2, [pc, #200]	; (8007144 <bluetoothMode+0x388>)
 800707c:	6811      	ldr	r1, [r2, #0]
 800707e:	2205      	movs	r2, #5
 8007080:	4618      	mov	r0, r3
 8007082:	f00b faf7 	bl	8012674 <rxr>
				txr(uartModem, (uint8_t*)"AT+FSRENAME=D:\\BtReceived\\");
 8007086:	4b2a      	ldr	r3, [pc, #168]	; (8007130 <bluetoothMode+0x374>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4939      	ldr	r1, [pc, #228]	; (8007170 <bluetoothMode+0x3b4>)
 800708c:	4618      	mov	r0, r3
 800708e:	f00b fb1b 	bl	80126c8 <txr>
				txr(uartModem, oldFileName);
 8007092:	4b27      	ldr	r3, [pc, #156]	; (8007130 <bluetoothMode+0x374>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800709a:	4618      	mov	r0, r3
 800709c:	f00b fb14 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)",D:\\BtReceived\\table.txt");
 80070a0:	4b23      	ldr	r3, [pc, #140]	; (8007130 <bluetoothMode+0x374>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4937      	ldr	r1, [pc, #220]	; (8007184 <bluetoothMode+0x3c8>)
 80070a6:	4618      	mov	r0, r3
 80070a8:	f00b fb0e 	bl	80126c8 <txr>
				txr(uartModem, SIMN);
 80070ac:	4b20      	ldr	r3, [pc, #128]	; (8007130 <bluetoothMode+0x374>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a2e      	ldr	r2, [pc, #184]	; (800716c <bluetoothMode+0x3b0>)
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f00b fb06 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 5);
 80070bc:	4b1c      	ldr	r3, [pc, #112]	; (8007130 <bluetoothMode+0x374>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a20      	ldr	r2, [pc, #128]	; (8007144 <bluetoothMode+0x388>)
 80070c2:	6811      	ldr	r1, [r2, #0]
 80070c4:	2205      	movs	r2, #5
 80070c6:	4618      	mov	r0, r3
 80070c8:	f00b fad4 	bl	8012674 <rxr>
			}
			updateTable(0);
 80070cc:	2000      	movs	r0, #0
 80070ce:	f003 f85a 	bl	800a186 <updateTable>
		}

		if(strstr((char*)rx_buf,(char*)BLR12) != NULL && strstr((char*)rx_buf,"log") != NULL){
 80070d2:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <bluetoothMode+0x394>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4619      	mov	r1, r3
 80070d8:	4818      	ldr	r0, [pc, #96]	; (800713c <bluetoothMode+0x380>)
 80070da:	f00b fe1b 	bl	8012d14 <strstr>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d059      	beq.n	8007198 <bluetoothMode+0x3dc>
 80070e4:	4928      	ldr	r1, [pc, #160]	; (8007188 <bluetoothMode+0x3cc>)
 80070e6:	4815      	ldr	r0, [pc, #84]	; (800713c <bluetoothMode+0x380>)
 80070e8:	f00b fe14 	bl	8012d14 <strstr>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d052      	beq.n	8007198 <bluetoothMode+0x3dc>
			strtok((char*)rx_buf,"\"");
 80070f2:	4919      	ldr	r1, [pc, #100]	; (8007158 <bluetoothMode+0x39c>)
 80070f4:	4811      	ldr	r0, [pc, #68]	; (800713c <bluetoothMode+0x380>)
 80070f6:	f00b fe25 	bl	8012d44 <strtok>
			strtok((char*)NULL,"\"");
 80070fa:	4917      	ldr	r1, [pc, #92]	; (8007158 <bluetoothMode+0x39c>)
 80070fc:	2000      	movs	r0, #0
 80070fe:	f00b fe21 	bl	8012d44 <strtok>
			strtok((char*)NULL,"\"");
 8007102:	4915      	ldr	r1, [pc, #84]	; (8007158 <bluetoothMode+0x39c>)
 8007104:	2000      	movs	r0, #0
 8007106:	f00b fe1d 	bl	8012d44 <strtok>
			oldFileName = (uint8_t*)strtok(NULL,"\"");
 800710a:	4913      	ldr	r1, [pc, #76]	; (8007158 <bluetoothMode+0x39c>)
 800710c:	2000      	movs	r0, #0
 800710e:	f00b fe19 	bl	8012d44 <strtok>
 8007112:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			tx(uartModem, BL8);
 8007116:	4b06      	ldr	r3, [pc, #24]	; (8007130 <bluetoothMode+0x374>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a10      	ldr	r2, [pc, #64]	; (800715c <bluetoothMode+0x3a0>)
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f00b f9db 	bl	80124dc <tx>
			rx(uartModem, BLR13, 160);
 8007126:	4b02      	ldr	r3, [pc, #8]	; (8007130 <bluetoothMode+0x374>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	e02f      	b.n	800718c <bluetoothMode+0x3d0>
 800712c:	2aaaaaab 	.word	0x2aaaaaab
 8007130:	20004d5c 	.word	0x20004d5c
 8007134:	08014ba4 	.word	0x08014ba4
 8007138:	2000000c 	.word	0x2000000c
 800713c:	20004588 	.word	0x20004588
 8007140:	20000044 	.word	0x20000044
 8007144:	20000118 	.word	0x20000118
 8007148:	20000010 	.word	0x20000010
 800714c:	20000048 	.word	0x20000048
 8007150:	20000034 	.word	0x20000034
 8007154:	08014ba8 	.word	0x08014ba8
 8007158:	08014bb0 	.word	0x08014bb0
 800715c:	20000058 	.word	0x20000058
 8007160:	20000038 	.word	0x20000038
 8007164:	08014bb4 	.word	0x08014bb4
 8007168:	08014bc0 	.word	0x08014bc0
 800716c:	20000134 	.word	0x20000134
 8007170:	08014be4 	.word	0x08014be4
 8007174:	08014c00 	.word	0x08014c00
 8007178:	08014c1c 	.word	0x08014c1c
 800717c:	08014c24 	.word	0x08014c24
 8007180:	08014c30 	.word	0x08014c30
 8007184:	08014c54 	.word	0x08014c54
 8007188:	08014c70 	.word	0x08014c70
 800718c:	4a4c      	ldr	r2, [pc, #304]	; (80072c0 <bluetoothMode+0x504>)
 800718e:	6811      	ldr	r1, [r2, #0]
 8007190:	22a0      	movs	r2, #160	; 0xa0
 8007192:	4618      	mov	r0, r3
 8007194:	f00b f9d4 	bl	8012540 <rx>
		}

		if(strstr((char*)rx_buf,(char*)BLR12) != NULL && strstr((char*)rx_buf,".hex") != NULL){
 8007198:	4b4a      	ldr	r3, [pc, #296]	; (80072c4 <bluetoothMode+0x508>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	484a      	ldr	r0, [pc, #296]	; (80072c8 <bluetoothMode+0x50c>)
 80071a0:	f00b fdb8 	bl	8012d14 <strstr>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80a8 	beq.w	80072fc <bluetoothMode+0x540>
 80071ac:	4947      	ldr	r1, [pc, #284]	; (80072cc <bluetoothMode+0x510>)
 80071ae:	4846      	ldr	r0, [pc, #280]	; (80072c8 <bluetoothMode+0x50c>)
 80071b0:	f00b fdb0 	bl	8012d14 <strstr>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 80a0 	beq.w	80072fc <bluetoothMode+0x540>
			strtok((char*)rx_buf,"\"");
 80071bc:	4944      	ldr	r1, [pc, #272]	; (80072d0 <bluetoothMode+0x514>)
 80071be:	4842      	ldr	r0, [pc, #264]	; (80072c8 <bluetoothMode+0x50c>)
 80071c0:	f00b fdc0 	bl	8012d44 <strtok>
			strtok((char*)NULL,"\"");
 80071c4:	4942      	ldr	r1, [pc, #264]	; (80072d0 <bluetoothMode+0x514>)
 80071c6:	2000      	movs	r0, #0
 80071c8:	f00b fdbc 	bl	8012d44 <strtok>
			strtok((char*)NULL,"\"");
 80071cc:	4940      	ldr	r1, [pc, #256]	; (80072d0 <bluetoothMode+0x514>)
 80071ce:	2000      	movs	r0, #0
 80071d0:	f00b fdb8 	bl	8012d44 <strtok>
			oldFileName = (uint8_t*)strtok(NULL,"\"");
 80071d4:	493e      	ldr	r1, [pc, #248]	; (80072d0 <bluetoothMode+0x514>)
 80071d6:	2000      	movs	r0, #0
 80071d8:	f00b fdb4 	bl	8012d44 <strtok>
 80071dc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			tx(uartModem, BL8);
 80071e0:	4b3c      	ldr	r3, [pc, #240]	; (80072d4 <bluetoothMode+0x518>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a3c      	ldr	r2, [pc, #240]	; (80072d8 <bluetoothMode+0x51c>)
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f00b f976 	bl	80124dc <tx>
			rx(uartModem, BLR13, 160);
 80071f0:	4b38      	ldr	r3, [pc, #224]	; (80072d4 <bluetoothMode+0x518>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a32      	ldr	r2, [pc, #200]	; (80072c0 <bluetoothMode+0x504>)
 80071f6:	6811      	ldr	r1, [r2, #0]
 80071f8:	22a0      	movs	r2, #160	; 0xa0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f00b f9a0 	bl	8012540 <rx>

			//tx(uartDebug, (uint8_t*)"FIRMWARE_UPDATE\r\n");
			strcpy((char*)oldFileNameFirmware,"D:\\BtReceived\\");
 8007200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007204:	4a35      	ldr	r2, [pc, #212]	; (80072dc <bluetoothMode+0x520>)
 8007206:	461c      	mov	r4, r3
 8007208:	4613      	mov	r3, r2
 800720a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800720c:	c407      	stmia	r4!, {r0, r1, r2}
 800720e:	8023      	strh	r3, [r4, #0]
 8007210:	3402      	adds	r4, #2
 8007212:	0c1b      	lsrs	r3, r3, #16
 8007214:	7023      	strb	r3, [r4, #0]
			strcat((char*)oldFileNameFirmware,(char*)oldFileName);
 8007216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800721a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800721e:	4618      	mov	r0, r3
 8007220:	f00b fd43 	bl	8012caa <strcat>
			strcat((char*)oldFileNameFirmware,"#");
 8007224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd ffb1 	bl	8005190 <strlen>
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007236:	4413      	add	r3, r2
 8007238:	4929      	ldr	r1, [pc, #164]	; (80072e0 <bluetoothMode+0x524>)
 800723a:	461a      	mov	r2, r3
 800723c:	460b      	mov	r3, r1
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	8013      	strh	r3, [r2, #0]
			strcpy((char*)fs_buf,(char*)oldFileNameFirmware);
 8007242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007246:	4619      	mov	r1, r3
 8007248:	4826      	ldr	r0, [pc, #152]	; (80072e4 <bluetoothMode+0x528>)
 800724a:	f00b fd4a 	bl	8012ce2 <strcpy>
			fsWrite((uint8_t*)"C:\\fw.cfg");
 800724e:	4826      	ldr	r0, [pc, #152]	; (80072e8 <bluetoothMode+0x52c>)
 8007250:	f001 fc34 	bl	8008abc <fsWrite>
			//tx(uartDebug, (uint8_t*)"JUMPING_BOOTLOADER\r\n");
			sim868Off();
 8007254:	f00a fc0a 	bl	8011a6c <sim868Off>
			HAL_FLASHEx_DATAEEPROM_Unlock();
 8007258:	f006 f93a 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080100, 0xFEEDC0DE);
 800725c:	4a23      	ldr	r2, [pc, #140]	; (80072ec <bluetoothMode+0x530>)
 800725e:	4924      	ldr	r1, [pc, #144]	; (80072f0 <bluetoothMode+0x534>)
 8007260:	2002      	movs	r0, #2
 8007262:	f006 f961 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
			HAL_FLASHEx_DATAEEPROM_Lock();
 8007266:	f006 f94f 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
			HAL_Delay(1000);
 800726a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800726e:	f005 fa01 	bl	800c674 <HAL_Delay>
			HAL_UART_AbortReceive_IT(uartModem);
 8007272:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <bluetoothMode+0x518>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f009 f87e 	bl	8010378 <HAL_UART_AbortReceive_IT>
			HAL_UART_AbortReceive_IT(uartDebug);
 800727c:	4b1d      	ldr	r3, [pc, #116]	; (80072f4 <bluetoothMode+0x538>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f009 f879 	bl	8010378 <HAL_UART_AbortReceive_IT>
			HAL_UART_AbortReceive_IT(uartSensor);
 8007286:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <bluetoothMode+0x53c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f009 f874 	bl	8010378 <HAL_UART_AbortReceive_IT>
			HAL_UART_DeInit(uartModem);
 8007290:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <bluetoothMode+0x518>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f008 ff3a 	bl	801010e <HAL_UART_DeInit>
			HAL_UART_DeInit(uartDebug);
 800729a:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <bluetoothMode+0x538>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f008 ff35 	bl	801010e <HAL_UART_DeInit>
			HAL_UART_DeInit(uartSensor);
 80072a4:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <bluetoothMode+0x53c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f008 ff30 	bl	801010e <HAL_UART_DeInit>
			HAL_RCC_DeInit();
 80072ae:	f006 fd4f 	bl	800dd50 <HAL_RCC_DeInit>
			HAL_DeInit();
 80072b2:	f005 f965 	bl	800c580 <HAL_DeInit>
			HAL_Delay(100);
 80072b6:	2064      	movs	r0, #100	; 0x64
 80072b8:	f005 f9dc 	bl	800c674 <HAL_Delay>
			NVIC_SystemReset();
 80072bc:	f7ff fd12 	bl	8006ce4 <__NVIC_SystemReset>
 80072c0:	20000038 	.word	0x20000038
 80072c4:	20000034 	.word	0x20000034
 80072c8:	20004588 	.word	0x20004588
 80072cc:	08014c74 	.word	0x08014c74
 80072d0:	08014bb0 	.word	0x08014bb0
 80072d4:	20004d5c 	.word	0x20004d5c
 80072d8:	20000058 	.word	0x20000058
 80072dc:	08014c7c 	.word	0x08014c7c
 80072e0:	08014c8c 	.word	0x08014c8c
 80072e4:	200015e8 	.word	0x200015e8
 80072e8:	08014c90 	.word	0x08014c90
 80072ec:	feedc0de 	.word	0xfeedc0de
 80072f0:	08080100 	.word	0x08080100
 80072f4:	200044a4 	.word	0x200044a4
 80072f8:	200044a8 	.word	0x200044a8
		}


		if(strstr((char*)rx_buf,(char*)BLR3) != NULL){
 80072fc:	4bad      	ldr	r3, [pc, #692]	; (80075b4 <bluetoothMode+0x7f8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4619      	mov	r1, r3
 8007302:	48ad      	ldr	r0, [pc, #692]	; (80075b8 <bluetoothMode+0x7fc>)
 8007304:	f00b fd06 	bl	8012d14 <strstr>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8390 	beq.w	8007a30 <bluetoothMode+0xc74>
			if(strstr((char*)rx_buf,(char*)BLR7) != NULL){
 8007310:	4baa      	ldr	r3, [pc, #680]	; (80075bc <bluetoothMode+0x800>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4619      	mov	r1, r3
 8007316:	48a8      	ldr	r0, [pc, #672]	; (80075b8 <bluetoothMode+0x7fc>)
 8007318:	f00b fcfc 	bl	8012d14 <strstr>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d024      	beq.n	800736c <bluetoothMode+0x5b0>
				if(1){//strstr((char*)rx_buf,(char*)DEVICEPASSWORD) != NULL
					txr(uartModem, BL5);
 8007322:	4ba7      	ldr	r3, [pc, #668]	; (80075c0 <bluetoothMode+0x804>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4aa7      	ldr	r2, [pc, #668]	; (80075c4 <bluetoothMode+0x808>)
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	4611      	mov	r1, r2
 800732c:	4618      	mov	r0, r3
 800732e:	f00b f9cb 	bl	80126c8 <txr>
					rx(uartModem, (uint8_t*)"> ", 1);
 8007332:	4ba3      	ldr	r3, [pc, #652]	; (80075c0 <bluetoothMode+0x804>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2201      	movs	r2, #1
 8007338:	49a3      	ldr	r1, [pc, #652]	; (80075c8 <bluetoothMode+0x80c>)
 800733a:	4618      	mov	r0, r3
 800733c:	f00b f900 	bl	8012540 <rx>
					txr(uartModem, (uint8_t*)"AOK#");
 8007340:	4b9f      	ldr	r3, [pc, #636]	; (80075c0 <bluetoothMode+0x804>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	49a1      	ldr	r1, [pc, #644]	; (80075cc <bluetoothMode+0x810>)
 8007346:	4618      	mov	r0, r3
 8007348:	f00b f9be 	bl	80126c8 <txr>
					txr(uartModem, BLR4);
 800734c:	4b9c      	ldr	r3, [pc, #624]	; (80075c0 <bluetoothMode+0x804>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a9f      	ldr	r2, [pc, #636]	; (80075d0 <bluetoothMode+0x814>)
 8007352:	6812      	ldr	r2, [r2, #0]
 8007354:	4611      	mov	r1, r2
 8007356:	4618      	mov	r0, r3
 8007358:	f00b f9b6 	bl	80126c8 <txr>
					rx(uartModem, SIMR, 2);
 800735c:	4b98      	ldr	r3, [pc, #608]	; (80075c0 <bluetoothMode+0x804>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a9c      	ldr	r2, [pc, #624]	; (80075d4 <bluetoothMode+0x818>)
 8007362:	6811      	ldr	r1, [r2, #0]
 8007364:	2202      	movs	r2, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f00b f8ea 	bl	8012540 <rx>
					txr(uartModem, (uint8_t*)"AERROR#");
					txr(uartModem, BLR4);
					rx(uartModem, SIMR, 2);
				}
			}
			if(strstr((char*)rx_buf,(char*)BLR5) != NULL){
 800736c:	4b9a      	ldr	r3, [pc, #616]	; (80075d8 <bluetoothMode+0x81c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4619      	mov	r1, r3
 8007372:	4891      	ldr	r0, [pc, #580]	; (80075b8 <bluetoothMode+0x7fc>)
 8007374:	f00b fcce 	bl	8012d14 <strstr>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <bluetoothMode+0x5d2>
				HAL_Delay(2000);
 800737e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007382:	f005 f977 	bl	800c674 <HAL_Delay>
				measureAll();
 8007386:	f009 fcf7 	bl	8010d78 <measureAll>
				sendSpp();
 800738a:	f000 fb73 	bl	8007a74 <sendSpp>
			}
			if(strstr((char*)rx_buf,(char*)BLR9) != NULL){//setting
 800738e:	4b93      	ldr	r3, [pc, #588]	; (80075dc <bluetoothMode+0x820>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4619      	mov	r1, r3
 8007394:	4888      	ldr	r0, [pc, #544]	; (80075b8 <bluetoothMode+0x7fc>)
 8007396:	f00b fcbd 	bl	8012d14 <strstr>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d075      	beq.n	800748c <bluetoothMode+0x6d0>
				updateConnectedDeviceID();
 80073a0:	f001 f920 	bl	80085e4 <updateConnectedDeviceID>
				txr(uartModem, BL5);
 80073a4:	4b86      	ldr	r3, [pc, #536]	; (80075c0 <bluetoothMode+0x804>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a86      	ldr	r2, [pc, #536]	; (80075c4 <bluetoothMode+0x808>)
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f00b f98a 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 80073b4:	4b82      	ldr	r3, [pc, #520]	; (80075c0 <bluetoothMode+0x804>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2201      	movs	r2, #1
 80073ba:	4983      	ldr	r1, [pc, #524]	; (80075c8 <bluetoothMode+0x80c>)
 80073bc:	4618      	mov	r0, r3
 80073be:	f00b f8bf 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 80073c2:	4b7f      	ldr	r3, [pc, #508]	; (80075c0 <bluetoothMode+0x804>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4981      	ldr	r1, [pc, #516]	; (80075cc <bluetoothMode+0x810>)
 80073c8:	4618      	mov	r0, r3
 80073ca:	f00b f97d 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 80073ce:	4b7c      	ldr	r3, [pc, #496]	; (80075c0 <bluetoothMode+0x804>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a7f      	ldr	r2, [pc, #508]	; (80075d0 <bluetoothMode+0x814>)
 80073d4:	6812      	ldr	r2, [r2, #0]
 80073d6:	4611      	mov	r1, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f00b f975 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 80073de:	4b78      	ldr	r3, [pc, #480]	; (80075c0 <bluetoothMode+0x804>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a7c      	ldr	r2, [pc, #496]	; (80075d4 <bluetoothMode+0x818>)
 80073e4:	6811      	ldr	r1, [r2, #0]
 80073e6:	2202      	movs	r2, #2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f00b f8a9 	bl	8012540 <rx>

				txr(uartModem, BL7);
 80073ee:	4b74      	ldr	r3, [pc, #464]	; (80075c0 <bluetoothMode+0x804>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a7b      	ldr	r2, [pc, #492]	; (80075e0 <bluetoothMode+0x824>)
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	4611      	mov	r1, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	f00b f965 	bl	80126c8 <txr>
				txr(uartModem, PDID);
 80073fe:	4b70      	ldr	r3, [pc, #448]	; (80075c0 <bluetoothMode+0x804>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4978      	ldr	r1, [pc, #480]	; (80075e4 <bluetoothMode+0x828>)
 8007404:	4618      	mov	r0, r3
 8007406:	f00b f95f 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)",");
 800740a:	4b6d      	ldr	r3, [pc, #436]	; (80075c0 <bluetoothMode+0x804>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4976      	ldr	r1, [pc, #472]	; (80075e8 <bluetoothMode+0x82c>)
 8007410:	4618      	mov	r0, r3
 8007412:	f00b f959 	bl	80126c8 <txr>
				txr(uartModem, PATHC);
 8007416:	4b6a      	ldr	r3, [pc, #424]	; (80075c0 <bluetoothMode+0x804>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a74      	ldr	r2, [pc, #464]	; (80075ec <bluetoothMode+0x830>)
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	4611      	mov	r1, r2
 8007420:	4618      	mov	r0, r3
 8007422:	f00b f951 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\r\n");
 8007426:	4b66      	ldr	r3, [pc, #408]	; (80075c0 <bluetoothMode+0x804>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4971      	ldr	r1, [pc, #452]	; (80075f0 <bluetoothMode+0x834>)
 800742c:	4618      	mov	r0, r3
 800742e:	f00b f94b 	bl	80126c8 <txr>
				rx(uartModem, BLR8, 160);
 8007432:	4b63      	ldr	r3, [pc, #396]	; (80075c0 <bluetoothMode+0x804>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a6f      	ldr	r2, [pc, #444]	; (80075f4 <bluetoothMode+0x838>)
 8007438:	6811      	ldr	r1, [r2, #0]
 800743a:	22a0      	movs	r2, #160	; 0xa0
 800743c:	4618      	mov	r0, r3
 800743e:	f00b f87f 	bl	8012540 <rx>

				txr(uartModem, BL5);
 8007442:	4b5f      	ldr	r3, [pc, #380]	; (80075c0 <bluetoothMode+0x804>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a5f      	ldr	r2, [pc, #380]	; (80075c4 <bluetoothMode+0x808>)
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	4611      	mov	r1, r2
 800744c:	4618      	mov	r0, r3
 800744e:	f00b f93b 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 8007452:	4b5b      	ldr	r3, [pc, #364]	; (80075c0 <bluetoothMode+0x804>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2201      	movs	r2, #1
 8007458:	495b      	ldr	r1, [pc, #364]	; (80075c8 <bluetoothMode+0x80c>)
 800745a:	4618      	mov	r0, r3
 800745c:	f00b f870 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 8007460:	4b57      	ldr	r3, [pc, #348]	; (80075c0 <bluetoothMode+0x804>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4959      	ldr	r1, [pc, #356]	; (80075cc <bluetoothMode+0x810>)
 8007466:	4618      	mov	r0, r3
 8007468:	f00b f92e 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 800746c:	4b54      	ldr	r3, [pc, #336]	; (80075c0 <bluetoothMode+0x804>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a57      	ldr	r2, [pc, #348]	; (80075d0 <bluetoothMode+0x814>)
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	4611      	mov	r1, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f00b f926 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 800747c:	4b50      	ldr	r3, [pc, #320]	; (80075c0 <bluetoothMode+0x804>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a54      	ldr	r2, [pc, #336]	; (80075d4 <bluetoothMode+0x818>)
 8007482:	6811      	ldr	r1, [r2, #0]
 8007484:	2202      	movs	r2, #2
 8007486:	4618      	mov	r0, r3
 8007488:	f00b f85a 	bl	8012540 <rx>
			}

			if(strstr((char*)rx_buf,(char*)BLR10) != NULL){//table
 800748c:	4b5a      	ldr	r3, [pc, #360]	; (80075f8 <bluetoothMode+0x83c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4619      	mov	r1, r3
 8007492:	4849      	ldr	r0, [pc, #292]	; (80075b8 <bluetoothMode+0x7fc>)
 8007494:	f00b fc3e 	bl	8012d14 <strstr>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d075      	beq.n	800758a <bluetoothMode+0x7ce>
				updateConnectedDeviceID();
 800749e:	f001 f8a1 	bl	80085e4 <updateConnectedDeviceID>
				txr(uartModem, BL5);
 80074a2:	4b47      	ldr	r3, [pc, #284]	; (80075c0 <bluetoothMode+0x804>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a47      	ldr	r2, [pc, #284]	; (80075c4 <bluetoothMode+0x808>)
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f00b f90b 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 80074b2:	4b43      	ldr	r3, [pc, #268]	; (80075c0 <bluetoothMode+0x804>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2201      	movs	r2, #1
 80074b8:	4943      	ldr	r1, [pc, #268]	; (80075c8 <bluetoothMode+0x80c>)
 80074ba:	4618      	mov	r0, r3
 80074bc:	f00b f840 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 80074c0:	4b3f      	ldr	r3, [pc, #252]	; (80075c0 <bluetoothMode+0x804>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4941      	ldr	r1, [pc, #260]	; (80075cc <bluetoothMode+0x810>)
 80074c6:	4618      	mov	r0, r3
 80074c8:	f00b f8fe 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 80074cc:	4b3c      	ldr	r3, [pc, #240]	; (80075c0 <bluetoothMode+0x804>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a3f      	ldr	r2, [pc, #252]	; (80075d0 <bluetoothMode+0x814>)
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f00b f8f6 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 80074dc:	4b38      	ldr	r3, [pc, #224]	; (80075c0 <bluetoothMode+0x804>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a3c      	ldr	r2, [pc, #240]	; (80075d4 <bluetoothMode+0x818>)
 80074e2:	6811      	ldr	r1, [r2, #0]
 80074e4:	2202      	movs	r2, #2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f00b f82a 	bl	8012540 <rx>

				txr(uartModem, BL7);
 80074ec:	4b34      	ldr	r3, [pc, #208]	; (80075c0 <bluetoothMode+0x804>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a3b      	ldr	r2, [pc, #236]	; (80075e0 <bluetoothMode+0x824>)
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	4611      	mov	r1, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f00b f8e6 	bl	80126c8 <txr>
				txr(uartModem, PDID);
 80074fc:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <bluetoothMode+0x804>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4938      	ldr	r1, [pc, #224]	; (80075e4 <bluetoothMode+0x828>)
 8007502:	4618      	mov	r0, r3
 8007504:	f00b f8e0 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)",");
 8007508:	4b2d      	ldr	r3, [pc, #180]	; (80075c0 <bluetoothMode+0x804>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4936      	ldr	r1, [pc, #216]	; (80075e8 <bluetoothMode+0x82c>)
 800750e:	4618      	mov	r0, r3
 8007510:	f00b f8da 	bl	80126c8 <txr>
				txr(uartModem, PATHT);
 8007514:	4b2a      	ldr	r3, [pc, #168]	; (80075c0 <bluetoothMode+0x804>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a38      	ldr	r2, [pc, #224]	; (80075fc <bluetoothMode+0x840>)
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	4611      	mov	r1, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f00b f8d2 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\r\n");
 8007524:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <bluetoothMode+0x804>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4931      	ldr	r1, [pc, #196]	; (80075f0 <bluetoothMode+0x834>)
 800752a:	4618      	mov	r0, r3
 800752c:	f00b f8cc 	bl	80126c8 <txr>
				rx(uartModem, BLR8, 160);
 8007530:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <bluetoothMode+0x804>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a2f      	ldr	r2, [pc, #188]	; (80075f4 <bluetoothMode+0x838>)
 8007536:	6811      	ldr	r1, [r2, #0]
 8007538:	22a0      	movs	r2, #160	; 0xa0
 800753a:	4618      	mov	r0, r3
 800753c:	f00b f800 	bl	8012540 <rx>

				txr(uartModem, BL5);
 8007540:	4b1f      	ldr	r3, [pc, #124]	; (80075c0 <bluetoothMode+0x804>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <bluetoothMode+0x808>)
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f00b f8bc 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 8007550:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <bluetoothMode+0x804>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2201      	movs	r2, #1
 8007556:	491c      	ldr	r1, [pc, #112]	; (80075c8 <bluetoothMode+0x80c>)
 8007558:	4618      	mov	r0, r3
 800755a:	f00a fff1 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 800755e:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <bluetoothMode+0x804>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	491a      	ldr	r1, [pc, #104]	; (80075cc <bluetoothMode+0x810>)
 8007564:	4618      	mov	r0, r3
 8007566:	f00b f8af 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <bluetoothMode+0x804>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a18      	ldr	r2, [pc, #96]	; (80075d0 <bluetoothMode+0x814>)
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	4611      	mov	r1, r2
 8007574:	4618      	mov	r0, r3
 8007576:	f00b f8a7 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 800757a:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <bluetoothMode+0x804>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <bluetoothMode+0x818>)
 8007580:	6811      	ldr	r1, [r2, #0]
 8007582:	2202      	movs	r2, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f00a ffdb 	bl	8012540 <rx>
			}

			if(strstr((char*)rx_buf,(char*)BLR11) != NULL){//log
 800758a:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <bluetoothMode+0x844>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4619      	mov	r1, r3
 8007590:	4809      	ldr	r0, [pc, #36]	; (80075b8 <bluetoothMode+0x7fc>)
 8007592:	f00b fbbf 	bl	8012d14 <strstr>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80a0 	beq.w	80076de <bluetoothMode+0x922>
				updateConnectedDeviceID();
 800759e:	f001 f821 	bl	80085e4 <updateConnectedDeviceID>
				txr(uartModem, BL5);
 80075a2:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <bluetoothMode+0x804>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a07      	ldr	r2, [pc, #28]	; (80075c4 <bluetoothMode+0x808>)
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f00b f88b 	bl	80126c8 <txr>
 80075b2:	e027      	b.n	8007604 <bluetoothMode+0x848>
 80075b4:	20000014 	.word	0x20000014
 80075b8:	20004588 	.word	0x20004588
 80075bc:	20000020 	.word	0x20000020
 80075c0:	20004d5c 	.word	0x20004d5c
 80075c4:	2000004c 	.word	0x2000004c
 80075c8:	08014c9c 	.word	0x08014c9c
 80075cc:	08014ca0 	.word	0x08014ca0
 80075d0:	20000018 	.word	0x20000018
 80075d4:	20000118 	.word	0x20000118
 80075d8:	2000001c 	.word	0x2000001c
 80075dc:	20000028 	.word	0x20000028
 80075e0:	20000054 	.word	0x20000054
 80075e4:	20003fa8 	.word	0x20003fa8
 80075e8:	08014ca8 	.word	0x08014ca8
 80075ec:	200000a8 	.word	0x200000a8
 80075f0:	08014b88 	.word	0x08014b88
 80075f4:	20000024 	.word	0x20000024
 80075f8:	2000002c 	.word	0x2000002c
 80075fc:	200000ac 	.word	0x200000ac
 8007600:	20000030 	.word	0x20000030
				rx(uartModem, (uint8_t*)"> ", 1);
 8007604:	4bae      	ldr	r3, [pc, #696]	; (80078c0 <bluetoothMode+0xb04>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2201      	movs	r2, #1
 800760a:	49ae      	ldr	r1, [pc, #696]	; (80078c4 <bluetoothMode+0xb08>)
 800760c:	4618      	mov	r0, r3
 800760e:	f00a ff97 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 8007612:	4bab      	ldr	r3, [pc, #684]	; (80078c0 <bluetoothMode+0xb04>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	49ac      	ldr	r1, [pc, #688]	; (80078c8 <bluetoothMode+0xb0c>)
 8007618:	4618      	mov	r0, r3
 800761a:	f00b f855 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 800761e:	4ba8      	ldr	r3, [pc, #672]	; (80078c0 <bluetoothMode+0xb04>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4aaa      	ldr	r2, [pc, #680]	; (80078cc <bluetoothMode+0xb10>)
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	4611      	mov	r1, r2
 8007628:	4618      	mov	r0, r3
 800762a:	f00b f84d 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 800762e:	4ba4      	ldr	r3, [pc, #656]	; (80078c0 <bluetoothMode+0xb04>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4aa7      	ldr	r2, [pc, #668]	; (80078d0 <bluetoothMode+0xb14>)
 8007634:	6811      	ldr	r1, [r2, #0]
 8007636:	2202      	movs	r2, #2
 8007638:	4618      	mov	r0, r3
 800763a:	f00a ff81 	bl	8012540 <rx>

				txr(uartModem, BL7);
 800763e:	4ba0      	ldr	r3, [pc, #640]	; (80078c0 <bluetoothMode+0xb04>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4aa4      	ldr	r2, [pc, #656]	; (80078d4 <bluetoothMode+0xb18>)
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f00b f83d 	bl	80126c8 <txr>
				txr(uartModem, PDID);
 800764e:	4b9c      	ldr	r3, [pc, #624]	; (80078c0 <bluetoothMode+0xb04>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	49a1      	ldr	r1, [pc, #644]	; (80078d8 <bluetoothMode+0xb1c>)
 8007654:	4618      	mov	r0, r3
 8007656:	f00b f837 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)",");
 800765a:	4b99      	ldr	r3, [pc, #612]	; (80078c0 <bluetoothMode+0xb04>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	499f      	ldr	r1, [pc, #636]	; (80078dc <bluetoothMode+0xb20>)
 8007660:	4618      	mov	r0, r3
 8007662:	f00b f831 	bl	80126c8 <txr>
				txr(uartModem, PATHL);
 8007666:	4b96      	ldr	r3, [pc, #600]	; (80078c0 <bluetoothMode+0xb04>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a9d      	ldr	r2, [pc, #628]	; (80078e0 <bluetoothMode+0xb24>)
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f00b f829 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\r\n");
 8007676:	4b92      	ldr	r3, [pc, #584]	; (80078c0 <bluetoothMode+0xb04>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	499a      	ldr	r1, [pc, #616]	; (80078e4 <bluetoothMode+0xb28>)
 800767c:	4618      	mov	r0, r3
 800767e:	f00b f823 	bl	80126c8 <txr>
				rx(uartModem, BLR8, 300);
 8007682:	4b8f      	ldr	r3, [pc, #572]	; (80078c0 <bluetoothMode+0xb04>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a98      	ldr	r2, [pc, #608]	; (80078e8 <bluetoothMode+0xb2c>)
 8007688:	6811      	ldr	r1, [r2, #0]
 800768a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800768e:	4618      	mov	r0, r3
 8007690:	f00a ff56 	bl	8012540 <rx>

				txr(uartModem, BL5);
 8007694:	4b8a      	ldr	r3, [pc, #552]	; (80078c0 <bluetoothMode+0xb04>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a94      	ldr	r2, [pc, #592]	; (80078ec <bluetoothMode+0xb30>)
 800769a:	6812      	ldr	r2, [r2, #0]
 800769c:	4611      	mov	r1, r2
 800769e:	4618      	mov	r0, r3
 80076a0:	f00b f812 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 80076a4:	4b86      	ldr	r3, [pc, #536]	; (80078c0 <bluetoothMode+0xb04>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2201      	movs	r2, #1
 80076aa:	4986      	ldr	r1, [pc, #536]	; (80078c4 <bluetoothMode+0xb08>)
 80076ac:	4618      	mov	r0, r3
 80076ae:	f00a ff47 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 80076b2:	4b83      	ldr	r3, [pc, #524]	; (80078c0 <bluetoothMode+0xb04>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4984      	ldr	r1, [pc, #528]	; (80078c8 <bluetoothMode+0xb0c>)
 80076b8:	4618      	mov	r0, r3
 80076ba:	f00b f805 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 80076be:	4b80      	ldr	r3, [pc, #512]	; (80078c0 <bluetoothMode+0xb04>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a82      	ldr	r2, [pc, #520]	; (80078cc <bluetoothMode+0xb10>)
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f00a fffd 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 80076ce:	4b7c      	ldr	r3, [pc, #496]	; (80078c0 <bluetoothMode+0xb04>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a7f      	ldr	r2, [pc, #508]	; (80078d0 <bluetoothMode+0xb14>)
 80076d4:	6811      	ldr	r1, [r2, #0]
 80076d6:	2202      	movs	r2, #2
 80076d8:	4618      	mov	r0, r3
 80076da:	f00a ff31 	bl	8012540 <rx>
			}
			if(strstr((char*)rx_buf,"CALL=") != NULL){
 80076de:	4984      	ldr	r1, [pc, #528]	; (80078f0 <bluetoothMode+0xb34>)
 80076e0:	4884      	ldr	r0, [pc, #528]	; (80078f4 <bluetoothMode+0xb38>)
 80076e2:	f00b fb17 	bl	8012d14 <strstr>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d038      	beq.n	800775e <bluetoothMode+0x9a2>
				uint8_t callNum[15];
				strtok((char*)rx_buf,"=");
 80076ec:	4982      	ldr	r1, [pc, #520]	; (80078f8 <bluetoothMode+0xb3c>)
 80076ee:	4881      	ldr	r0, [pc, #516]	; (80078f4 <bluetoothMode+0xb38>)
 80076f0:	f00b fb28 	bl	8012d44 <strtok>
				strcpy((char*)callNum,strtok(NULL,"#"));
 80076f4:	4981      	ldr	r1, [pc, #516]	; (80078fc <bluetoothMode+0xb40>)
 80076f6:	2000      	movs	r0, #0
 80076f8:	f00b fb24 	bl	8012d44 <strtok>
 80076fc:	4602      	mov	r2, r0
 80076fe:	f107 0318 	add.w	r3, r7, #24
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f00b faec 	bl	8012ce2 <strcpy>
				call(callNum);
 800770a:	f107 0318 	add.w	r3, r7, #24
 800770e:	4618      	mov	r0, r3
 8007710:	f001 f84a 	bl	80087a8 <call>

				txr(uartModem, BL5);
 8007714:	4b6a      	ldr	r3, [pc, #424]	; (80078c0 <bluetoothMode+0xb04>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a74      	ldr	r2, [pc, #464]	; (80078ec <bluetoothMode+0xb30>)
 800771a:	6812      	ldr	r2, [r2, #0]
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f00a ffd2 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 8007724:	4b66      	ldr	r3, [pc, #408]	; (80078c0 <bluetoothMode+0xb04>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2201      	movs	r2, #1
 800772a:	4966      	ldr	r1, [pc, #408]	; (80078c4 <bluetoothMode+0xb08>)
 800772c:	4618      	mov	r0, r3
 800772e:	f00a ff07 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 8007732:	4b63      	ldr	r3, [pc, #396]	; (80078c0 <bluetoothMode+0xb04>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4964      	ldr	r1, [pc, #400]	; (80078c8 <bluetoothMode+0xb0c>)
 8007738:	4618      	mov	r0, r3
 800773a:	f00a ffc5 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 800773e:	4b60      	ldr	r3, [pc, #384]	; (80078c0 <bluetoothMode+0xb04>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a62      	ldr	r2, [pc, #392]	; (80078cc <bluetoothMode+0xb10>)
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f00a ffbd 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 800774e:	4b5c      	ldr	r3, [pc, #368]	; (80078c0 <bluetoothMode+0xb04>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a5f      	ldr	r2, [pc, #380]	; (80078d0 <bluetoothMode+0xb14>)
 8007754:	6811      	ldr	r1, [r2, #0]
 8007756:	2202      	movs	r2, #2
 8007758:	4618      	mov	r0, r3
 800775a:	f00a fef1 	bl	8012540 <rx>
			}
			if(strstr((char*)rx_buf,"SETH=") != NULL){
 800775e:	4968      	ldr	r1, [pc, #416]	; (8007900 <bluetoothMode+0xb44>)
 8007760:	4864      	ldr	r0, [pc, #400]	; (80078f4 <bluetoothMode+0xb38>)
 8007762:	f00b fad7 	bl	8012d14 <strstr>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d033      	beq.n	80077d4 <bluetoothMode+0xa18>
				strtok((char*)rx_buf,"=");
 800776c:	4962      	ldr	r1, [pc, #392]	; (80078f8 <bluetoothMode+0xb3c>)
 800776e:	4861      	ldr	r0, [pc, #388]	; (80078f4 <bluetoothMode+0xb38>)
 8007770:	f00b fae8 	bl	8012d44 <strtok>
				strcpy((char*)SETH,strtok(NULL,"#"));
 8007774:	4961      	ldr	r1, [pc, #388]	; (80078fc <bluetoothMode+0xb40>)
 8007776:	2000      	movs	r0, #0
 8007778:	f00b fae4 	bl	8012d44 <strtok>
 800777c:	4603      	mov	r3, r0
 800777e:	4619      	mov	r1, r3
 8007780:	4860      	ldr	r0, [pc, #384]	; (8007904 <bluetoothMode+0xb48>)
 8007782:	f00b faae 	bl	8012ce2 <strcpy>
				setHeight();
 8007786:	f009 fb09 	bl	8010d9c <setHeight>

				txr(uartModem, BL5);
 800778a:	4b4d      	ldr	r3, [pc, #308]	; (80078c0 <bluetoothMode+0xb04>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a57      	ldr	r2, [pc, #348]	; (80078ec <bluetoothMode+0xb30>)
 8007790:	6812      	ldr	r2, [r2, #0]
 8007792:	4611      	mov	r1, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f00a ff97 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 800779a:	4b49      	ldr	r3, [pc, #292]	; (80078c0 <bluetoothMode+0xb04>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2201      	movs	r2, #1
 80077a0:	4948      	ldr	r1, [pc, #288]	; (80078c4 <bluetoothMode+0xb08>)
 80077a2:	4618      	mov	r0, r3
 80077a4:	f00a fecc 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 80077a8:	4b45      	ldr	r3, [pc, #276]	; (80078c0 <bluetoothMode+0xb04>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4946      	ldr	r1, [pc, #280]	; (80078c8 <bluetoothMode+0xb0c>)
 80077ae:	4618      	mov	r0, r3
 80077b0:	f00a ff8a 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 80077b4:	4b42      	ldr	r3, [pc, #264]	; (80078c0 <bluetoothMode+0xb04>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a44      	ldr	r2, [pc, #272]	; (80078cc <bluetoothMode+0xb10>)
 80077ba:	6812      	ldr	r2, [r2, #0]
 80077bc:	4611      	mov	r1, r2
 80077be:	4618      	mov	r0, r3
 80077c0:	f00a ff82 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 80077c4:	4b3e      	ldr	r3, [pc, #248]	; (80078c0 <bluetoothMode+0xb04>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a41      	ldr	r2, [pc, #260]	; (80078d0 <bluetoothMode+0xb14>)
 80077ca:	6811      	ldr	r1, [r2, #0]
 80077cc:	2202      	movs	r2, #2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f00a feb6 	bl	8012540 <rx>
			}
			if(strstr((char*)rx_buf,"INFO=") != NULL){
 80077d4:	494c      	ldr	r1, [pc, #304]	; (8007908 <bluetoothMode+0xb4c>)
 80077d6:	4847      	ldr	r0, [pc, #284]	; (80078f4 <bluetoothMode+0xb38>)
 80077d8:	f00b fa9c 	bl	8012d14 <strstr>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d065      	beq.n	80078ae <bluetoothMode+0xaf2>
				uint8_t BNMEA[10];
				strtok((char*)rx_buf,"=");
 80077e2:	4945      	ldr	r1, [pc, #276]	; (80078f8 <bluetoothMode+0xb3c>)
 80077e4:	4843      	ldr	r0, [pc, #268]	; (80078f4 <bluetoothMode+0xb38>)
 80077e6:	f00b faad 	bl	8012d44 <strtok>
				strcpy((char*)BNMEA,strtok(NULL,"#"));
 80077ea:	4944      	ldr	r1, [pc, #272]	; (80078fc <bluetoothMode+0xb40>)
 80077ec:	2000      	movs	r0, #0
 80077ee:	f00b faa9 	bl	8012d44 <strtok>
 80077f2:	4602      	mov	r2, r0
 80077f4:	f107 030c 	add.w	r3, r7, #12
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f00b fa71 	bl	8012ce2 <strcpy>
				NMEA(atoi((char*)BNMEA));
 8007800:	f107 030c 	add.w	r3, r7, #12
 8007804:	4618      	mov	r0, r3
 8007806:	f00b f95f 	bl	8012ac8 <atoi>
 800780a:	4603      	mov	r3, r0
 800780c:	4618      	mov	r0, r3
 800780e:	f002 fdc7 	bl	800a3a0 <NMEA>
				mqttDisconnect();
 8007812:	f003 f969 	bl	800aae8 <mqttDisconnect>
				dataDisconnect();
 8007816:	f002 ff9b 	bl	800a750 <dataDisconnect>

				txr(uartModem, BL5);
 800781a:	4b29      	ldr	r3, [pc, #164]	; (80078c0 <bluetoothMode+0xb04>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a33      	ldr	r2, [pc, #204]	; (80078ec <bluetoothMode+0xb30>)
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	4611      	mov	r1, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f00a ff4f 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 800782a:	4b25      	ldr	r3, [pc, #148]	; (80078c0 <bluetoothMode+0xb04>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2201      	movs	r2, #1
 8007830:	4924      	ldr	r1, [pc, #144]	; (80078c4 <bluetoothMode+0xb08>)
 8007832:	4618      	mov	r0, r3
 8007834:	f00a fe84 	bl	8012540 <rx>
				txr(uartModem, LOCK);
 8007838:	4b21      	ldr	r3, [pc, #132]	; (80078c0 <bluetoothMode+0xb04>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4933      	ldr	r1, [pc, #204]	; (800790c <bluetoothMode+0xb50>)
 800783e:	4618      	mov	r0, r3
 8007840:	f00a ff42 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 8007844:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <bluetoothMode+0xb04>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a20      	ldr	r2, [pc, #128]	; (80078cc <bluetoothMode+0xb10>)
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	4611      	mov	r1, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f00a ff3a 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 8007854:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <bluetoothMode+0xb04>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a1d      	ldr	r2, [pc, #116]	; (80078d0 <bluetoothMode+0xb14>)
 800785a:	6811      	ldr	r1, [r2, #0]
 800785c:	2202      	movs	r2, #2
 800785e:	4618      	mov	r0, r3
 8007860:	f00a fe6e 	bl	8012540 <rx>

				txr(uartModem, BL5);
 8007864:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <bluetoothMode+0xb04>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a20      	ldr	r2, [pc, #128]	; (80078ec <bluetoothMode+0xb30>)
 800786a:	6812      	ldr	r2, [r2, #0]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f00a ff2a 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 8007874:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <bluetoothMode+0xb04>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2201      	movs	r2, #1
 800787a:	4912      	ldr	r1, [pc, #72]	; (80078c4 <bluetoothMode+0xb08>)
 800787c:	4618      	mov	r0, r3
 800787e:	f00a fe5f 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 8007882:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <bluetoothMode+0xb04>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4910      	ldr	r1, [pc, #64]	; (80078c8 <bluetoothMode+0xb0c>)
 8007888:	4618      	mov	r0, r3
 800788a:	f00a ff1d 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <bluetoothMode+0xb04>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a0e      	ldr	r2, [pc, #56]	; (80078cc <bluetoothMode+0xb10>)
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f00a ff15 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 800789e:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <bluetoothMode+0xb04>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <bluetoothMode+0xb14>)
 80078a4:	6811      	ldr	r1, [r2, #0]
 80078a6:	2202      	movs	r2, #2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f00a fe49 	bl	8012540 <rx>
			}
			if(strstr((char*)rx_buf,"SENDDATA") != NULL){
 80078ae:	4918      	ldr	r1, [pc, #96]	; (8007910 <bluetoothMode+0xb54>)
 80078b0:	4810      	ldr	r0, [pc, #64]	; (80078f4 <bluetoothMode+0xb38>)
 80078b2:	f00b fa2f 	bl	8012d14 <strstr>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d05d      	beq.n	8007978 <bluetoothMode+0xbbc>
 80078bc:	e02a      	b.n	8007914 <bluetoothMode+0xb58>
 80078be:	bf00      	nop
 80078c0:	20004d5c 	.word	0x20004d5c
 80078c4:	08014c9c 	.word	0x08014c9c
 80078c8:	08014ca0 	.word	0x08014ca0
 80078cc:	20000018 	.word	0x20000018
 80078d0:	20000118 	.word	0x20000118
 80078d4:	20000054 	.word	0x20000054
 80078d8:	20003fa8 	.word	0x20003fa8
 80078dc:	08014ca8 	.word	0x08014ca8
 80078e0:	200000b8 	.word	0x200000b8
 80078e4:	08014b88 	.word	0x08014b88
 80078e8:	20000024 	.word	0x20000024
 80078ec:	2000004c 	.word	0x2000004c
 80078f0:	08014cac 	.word	0x08014cac
 80078f4:	20004588 	.word	0x20004588
 80078f8:	08014cb4 	.word	0x08014cb4
 80078fc:	08014c8c 	.word	0x08014c8c
 8007900:	08014cb8 	.word	0x08014cb8
 8007904:	200002a0 	.word	0x200002a0
 8007908:	08014cc0 	.word	0x08014cc0
 800790c:	200002cc 	.word	0x200002cc
 8007910:	08014cc8 	.word	0x08014cc8
				measureAll();
 8007914:	f009 fa30 	bl	8010d78 <measureAll>
				dataConnect();
 8007918:	f002 fdbc 	bl	800a494 <dataConnect>
				mqttConnect();
 800791c:	f002 ff6e 	bl	800a7fc <mqttConnect>
				mqttSend(1);
 8007920:	2001      	movs	r0, #1
 8007922:	f003 f949 	bl	800abb8 <mqttSend>
				mqttDisconnect();
 8007926:	f003 f8df 	bl	800aae8 <mqttDisconnect>
				dataDisconnect();
 800792a:	f002 ff11 	bl	800a750 <dataDisconnect>

				txr(uartModem, BL5);
 800792e:	4b48      	ldr	r3, [pc, #288]	; (8007a50 <bluetoothMode+0xc94>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a48      	ldr	r2, [pc, #288]	; (8007a54 <bluetoothMode+0xc98>)
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	4611      	mov	r1, r2
 8007938:	4618      	mov	r0, r3
 800793a:	f00a fec5 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 800793e:	4b44      	ldr	r3, [pc, #272]	; (8007a50 <bluetoothMode+0xc94>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2201      	movs	r2, #1
 8007944:	4944      	ldr	r1, [pc, #272]	; (8007a58 <bluetoothMode+0xc9c>)
 8007946:	4618      	mov	r0, r3
 8007948:	f00a fdfa 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 800794c:	4b40      	ldr	r3, [pc, #256]	; (8007a50 <bluetoothMode+0xc94>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4942      	ldr	r1, [pc, #264]	; (8007a5c <bluetoothMode+0xca0>)
 8007952:	4618      	mov	r0, r3
 8007954:	f00a feb8 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 8007958:	4b3d      	ldr	r3, [pc, #244]	; (8007a50 <bluetoothMode+0xc94>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a40      	ldr	r2, [pc, #256]	; (8007a60 <bluetoothMode+0xca4>)
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f00a feb0 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 8007968:	4b39      	ldr	r3, [pc, #228]	; (8007a50 <bluetoothMode+0xc94>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a3d      	ldr	r2, [pc, #244]	; (8007a64 <bluetoothMode+0xca8>)
 800796e:	6811      	ldr	r1, [r2, #0]
 8007970:	2202      	movs	r2, #2
 8007972:	4618      	mov	r0, r3
 8007974:	f00a fde4 	bl	8012540 <rx>
			}
			if(strstr((char*)rx_buf,"SENSORON") != NULL){
 8007978:	493b      	ldr	r1, [pc, #236]	; (8007a68 <bluetoothMode+0xcac>)
 800797a:	483c      	ldr	r0, [pc, #240]	; (8007a6c <bluetoothMode+0xcb0>)
 800797c:	f00b f9ca 	bl	8012d14 <strstr>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d026      	beq.n	80079d4 <bluetoothMode+0xc18>
				sensorOn();
 8007986:	f00a f8a7 	bl	8011ad8 <sensorOn>
				txr(uartModem, BL5);
 800798a:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <bluetoothMode+0xc94>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a31      	ldr	r2, [pc, #196]	; (8007a54 <bluetoothMode+0xc98>)
 8007990:	6812      	ldr	r2, [r2, #0]
 8007992:	4611      	mov	r1, r2
 8007994:	4618      	mov	r0, r3
 8007996:	f00a fe97 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 800799a:	4b2d      	ldr	r3, [pc, #180]	; (8007a50 <bluetoothMode+0xc94>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2201      	movs	r2, #1
 80079a0:	492d      	ldr	r1, [pc, #180]	; (8007a58 <bluetoothMode+0xc9c>)
 80079a2:	4618      	mov	r0, r3
 80079a4:	f00a fdcc 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 80079a8:	4b29      	ldr	r3, [pc, #164]	; (8007a50 <bluetoothMode+0xc94>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	492b      	ldr	r1, [pc, #172]	; (8007a5c <bluetoothMode+0xca0>)
 80079ae:	4618      	mov	r0, r3
 80079b0:	f00a fe8a 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 80079b4:	4b26      	ldr	r3, [pc, #152]	; (8007a50 <bluetoothMode+0xc94>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a29      	ldr	r2, [pc, #164]	; (8007a60 <bluetoothMode+0xca4>)
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f00a fe82 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 80079c4:	4b22      	ldr	r3, [pc, #136]	; (8007a50 <bluetoothMode+0xc94>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a26      	ldr	r2, [pc, #152]	; (8007a64 <bluetoothMode+0xca8>)
 80079ca:	6811      	ldr	r1, [r2, #0]
 80079cc:	2202      	movs	r2, #2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f00a fdb6 	bl	8012540 <rx>
			}
			if(strstr((char*)rx_buf,"SENSOROFF") != NULL){
 80079d4:	4926      	ldr	r1, [pc, #152]	; (8007a70 <bluetoothMode+0xcb4>)
 80079d6:	4825      	ldr	r0, [pc, #148]	; (8007a6c <bluetoothMode+0xcb0>)
 80079d8:	f00b f99c 	bl	8012d14 <strstr>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d026      	beq.n	8007a30 <bluetoothMode+0xc74>
				sensorOff();
 80079e2:	f00a f885 	bl	8011af0 <sensorOff>
				txr(uartModem, BL5);
 80079e6:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <bluetoothMode+0xc94>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <bluetoothMode+0xc98>)
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f00a fe69 	bl	80126c8 <txr>
				rx(uartModem, (uint8_t*)"> ", 1);
 80079f6:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <bluetoothMode+0xc94>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2201      	movs	r2, #1
 80079fc:	4916      	ldr	r1, [pc, #88]	; (8007a58 <bluetoothMode+0xc9c>)
 80079fe:	4618      	mov	r0, r3
 8007a00:	f00a fd9e 	bl	8012540 <rx>
				txr(uartModem, (uint8_t*)"AOK#");
 8007a04:	4b12      	ldr	r3, [pc, #72]	; (8007a50 <bluetoothMode+0xc94>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4914      	ldr	r1, [pc, #80]	; (8007a5c <bluetoothMode+0xca0>)
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f00a fe5c 	bl	80126c8 <txr>
				txr(uartModem, BLR4);
 8007a10:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <bluetoothMode+0xc94>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a12      	ldr	r2, [pc, #72]	; (8007a60 <bluetoothMode+0xca4>)
 8007a16:	6812      	ldr	r2, [r2, #0]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f00a fe54 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 2);
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <bluetoothMode+0xc94>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a0f      	ldr	r2, [pc, #60]	; (8007a64 <bluetoothMode+0xca8>)
 8007a26:	6811      	ldr	r1, [r2, #0]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f00a fd88 	bl	8012540 <rx>
	while(bt_timeout < timeout || connected == 1){
 8007a30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	f6ff a9db 	blt.w	8006df2 <bluetoothMode+0x36>
 8007a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	f43f a9d6 	beq.w	8006df2 <bluetoothMode+0x36>
			}
		}
	}
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	379c      	adds	r7, #156	; 0x9c
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd90      	pop	{r4, r7, pc}
 8007a50:	20004d5c 	.word	0x20004d5c
 8007a54:	2000004c 	.word	0x2000004c
 8007a58:	08014c9c 	.word	0x08014c9c
 8007a5c:	08014ca0 	.word	0x08014ca0
 8007a60:	20000018 	.word	0x20000018
 8007a64:	20000118 	.word	0x20000118
 8007a68:	08014cd4 	.word	0x08014cd4
 8007a6c:	20004588 	.word	0x20004588
 8007a70:	08014ce0 	.word	0x08014ce0

08007a74 <sendSpp>:

void sendSpp(){
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
	txr(uartModem, BL5);
 8007a78:	4bac      	ldr	r3, [pc, #688]	; (8007d2c <sendSpp+0x2b8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4aac      	ldr	r2, [pc, #688]	; (8007d30 <sendSpp+0x2bc>)
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f00a fe20 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007a88:	4ba8      	ldr	r3, [pc, #672]	; (8007d2c <sendSpp+0x2b8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	49a9      	ldr	r1, [pc, #676]	; (8007d34 <sendSpp+0x2c0>)
 8007a90:	4618      	mov	r0, r3
 8007a92:	f00a fd55 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ASATH=");
 8007a96:	4ba5      	ldr	r3, [pc, #660]	; (8007d2c <sendSpp+0x2b8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	49a7      	ldr	r1, [pc, #668]	; (8007d38 <sendSpp+0x2c4>)
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f00a fe13 	bl	80126c8 <txr>
	txr(uartModem, SATH);
 8007aa2:	4ba2      	ldr	r3, [pc, #648]	; (8007d2c <sendSpp+0x2b8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	49a5      	ldr	r1, [pc, #660]	; (8007d3c <sendSpp+0x2c8>)
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f00a fe0d 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007aae:	4b9f      	ldr	r3, [pc, #636]	; (8007d2c <sendSpp+0x2b8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	49a3      	ldr	r1, [pc, #652]	; (8007d40 <sendSpp+0x2cc>)
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f00a fe07 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007aba:	4b9c      	ldr	r3, [pc, #624]	; (8007d2c <sendSpp+0x2b8>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4aa1      	ldr	r2, [pc, #644]	; (8007d44 <sendSpp+0x2d0>)
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f00a fdff 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007aca:	4b98      	ldr	r3, [pc, #608]	; (8007d2c <sendSpp+0x2b8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a9e      	ldr	r2, [pc, #632]	; (8007d48 <sendSpp+0x2d4>)
 8007ad0:	6811      	ldr	r1, [r2, #0]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f00a fd33 	bl	8012540 <rx>
	HAL_Delay(50);
 8007ada:	2032      	movs	r0, #50	; 0x32
 8007adc:	f004 fdca 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007ae0:	4b92      	ldr	r3, [pc, #584]	; (8007d2c <sendSpp+0x2b8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a92      	ldr	r2, [pc, #584]	; (8007d30 <sendSpp+0x2bc>)
 8007ae6:	6812      	ldr	r2, [r2, #0]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f00a fdec 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007af0:	4b8e      	ldr	r3, [pc, #568]	; (8007d2c <sendSpp+0x2b8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2201      	movs	r2, #1
 8007af6:	498f      	ldr	r1, [pc, #572]	; (8007d34 <sendSpp+0x2c0>)
 8007af8:	4618      	mov	r0, r3
 8007afa:	f00a fd21 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ADIST=");
 8007afe:	4b8b      	ldr	r3, [pc, #556]	; (8007d2c <sendSpp+0x2b8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4992      	ldr	r1, [pc, #584]	; (8007d4c <sendSpp+0x2d8>)
 8007b04:	4618      	mov	r0, r3
 8007b06:	f00a fddf 	bl	80126c8 <txr>
	txr(uartModem, DIST);
 8007b0a:	4b88      	ldr	r3, [pc, #544]	; (8007d2c <sendSpp+0x2b8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4990      	ldr	r1, [pc, #576]	; (8007d50 <sendSpp+0x2dc>)
 8007b10:	4618      	mov	r0, r3
 8007b12:	f00a fdd9 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007b16:	4b85      	ldr	r3, [pc, #532]	; (8007d2c <sendSpp+0x2b8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4989      	ldr	r1, [pc, #548]	; (8007d40 <sendSpp+0x2cc>)
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f00a fdd3 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007b22:	4b82      	ldr	r3, [pc, #520]	; (8007d2c <sendSpp+0x2b8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a87      	ldr	r2, [pc, #540]	; (8007d44 <sendSpp+0x2d0>)
 8007b28:	6812      	ldr	r2, [r2, #0]
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f00a fdcb 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007b32:	4b7e      	ldr	r3, [pc, #504]	; (8007d2c <sendSpp+0x2b8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a84      	ldr	r2, [pc, #528]	; (8007d48 <sendSpp+0x2d4>)
 8007b38:	6811      	ldr	r1, [r2, #0]
 8007b3a:	2204      	movs	r2, #4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f00a fcff 	bl	8012540 <rx>
	HAL_Delay(50);
 8007b42:	2032      	movs	r0, #50	; 0x32
 8007b44:	f004 fd96 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007b48:	4b78      	ldr	r3, [pc, #480]	; (8007d2c <sendSpp+0x2b8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a78      	ldr	r2, [pc, #480]	; (8007d30 <sendSpp+0x2bc>)
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f00a fdb8 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007b58:	4b74      	ldr	r3, [pc, #464]	; (8007d2c <sendSpp+0x2b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	4975      	ldr	r1, [pc, #468]	; (8007d34 <sendSpp+0x2c0>)
 8007b60:	4618      	mov	r0, r3
 8007b62:	f00a fced 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ASARF=");
 8007b66:	4b71      	ldr	r3, [pc, #452]	; (8007d2c <sendSpp+0x2b8>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	497a      	ldr	r1, [pc, #488]	; (8007d54 <sendSpp+0x2e0>)
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f00a fdab 	bl	80126c8 <txr>
	txr(uartModem, SARF);
 8007b72:	4b6e      	ldr	r3, [pc, #440]	; (8007d2c <sendSpp+0x2b8>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4978      	ldr	r1, [pc, #480]	; (8007d58 <sendSpp+0x2e4>)
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f00a fda5 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007b7e:	4b6b      	ldr	r3, [pc, #428]	; (8007d2c <sendSpp+0x2b8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	496f      	ldr	r1, [pc, #444]	; (8007d40 <sendSpp+0x2cc>)
 8007b84:	4618      	mov	r0, r3
 8007b86:	f00a fd9f 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007b8a:	4b68      	ldr	r3, [pc, #416]	; (8007d2c <sendSpp+0x2b8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a6d      	ldr	r2, [pc, #436]	; (8007d44 <sendSpp+0x2d0>)
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f00a fd97 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007b9a:	4b64      	ldr	r3, [pc, #400]	; (8007d2c <sendSpp+0x2b8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a6a      	ldr	r2, [pc, #424]	; (8007d48 <sendSpp+0x2d4>)
 8007ba0:	6811      	ldr	r1, [r2, #0]
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f00a fccb 	bl	8012540 <rx>
	HAL_Delay(50);
 8007baa:	2032      	movs	r0, #50	; 0x32
 8007bac:	f004 fd62 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007bb0:	4b5e      	ldr	r3, [pc, #376]	; (8007d2c <sendSpp+0x2b8>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a5e      	ldr	r2, [pc, #376]	; (8007d30 <sendSpp+0x2bc>)
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f00a fd84 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007bc0:	4b5a      	ldr	r3, [pc, #360]	; (8007d2c <sendSpp+0x2b8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	495b      	ldr	r1, [pc, #364]	; (8007d34 <sendSpp+0x2c0>)
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f00a fcb9 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ACORRECTION=");
 8007bce:	4b57      	ldr	r3, [pc, #348]	; (8007d2c <sendSpp+0x2b8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4962      	ldr	r1, [pc, #392]	; (8007d5c <sendSpp+0x2e8>)
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f00a fd77 	bl	80126c8 <txr>
	txr(uartModem, COR);
 8007bda:	4b54      	ldr	r3, [pc, #336]	; (8007d2c <sendSpp+0x2b8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4960      	ldr	r1, [pc, #384]	; (8007d60 <sendSpp+0x2ec>)
 8007be0:	4618      	mov	r0, r3
 8007be2:	f00a fd71 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007be6:	4b51      	ldr	r3, [pc, #324]	; (8007d2c <sendSpp+0x2b8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4955      	ldr	r1, [pc, #340]	; (8007d40 <sendSpp+0x2cc>)
 8007bec:	4618      	mov	r0, r3
 8007bee:	f00a fd6b 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007bf2:	4b4e      	ldr	r3, [pc, #312]	; (8007d2c <sendSpp+0x2b8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a53      	ldr	r2, [pc, #332]	; (8007d44 <sendSpp+0x2d0>)
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f00a fd63 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007c02:	4b4a      	ldr	r3, [pc, #296]	; (8007d2c <sendSpp+0x2b8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a50      	ldr	r2, [pc, #320]	; (8007d48 <sendSpp+0x2d4>)
 8007c08:	6811      	ldr	r1, [r2, #0]
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f00a fc97 	bl	8012540 <rx>
	HAL_Delay(50);
 8007c12:	2032      	movs	r0, #50	; 0x32
 8007c14:	f004 fd2e 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007c18:	4b44      	ldr	r3, [pc, #272]	; (8007d2c <sendSpp+0x2b8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a44      	ldr	r2, [pc, #272]	; (8007d30 <sendSpp+0x2bc>)
 8007c1e:	6812      	ldr	r2, [r2, #0]
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f00a fd50 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007c28:	4b40      	ldr	r3, [pc, #256]	; (8007d2c <sendSpp+0x2b8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	4941      	ldr	r1, [pc, #260]	; (8007d34 <sendSpp+0x2c0>)
 8007c30:	4618      	mov	r0, r3
 8007c32:	f00a fc85 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ALOCK=");
 8007c36:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <sendSpp+0x2b8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	494a      	ldr	r1, [pc, #296]	; (8007d64 <sendSpp+0x2f0>)
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f00a fd43 	bl	80126c8 <txr>
	txr(uartModem, LOCK);
 8007c42:	4b3a      	ldr	r3, [pc, #232]	; (8007d2c <sendSpp+0x2b8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4948      	ldr	r1, [pc, #288]	; (8007d68 <sendSpp+0x2f4>)
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f00a fd3d 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"GLOCK=");
 8007c4e:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <sendSpp+0x2b8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4946      	ldr	r1, [pc, #280]	; (8007d6c <sendSpp+0x2f8>)
 8007c54:	4618      	mov	r0, r3
 8007c56:	f00a fd37 	bl	80126c8 <txr>
	txr(uartModem, GSMLOCK);
 8007c5a:	4b34      	ldr	r3, [pc, #208]	; (8007d2c <sendSpp+0x2b8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4944      	ldr	r1, [pc, #272]	; (8007d70 <sendSpp+0x2fc>)
 8007c60:	4618      	mov	r0, r3
 8007c62:	f00a fd31 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007c66:	4b31      	ldr	r3, [pc, #196]	; (8007d2c <sendSpp+0x2b8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4935      	ldr	r1, [pc, #212]	; (8007d40 <sendSpp+0x2cc>)
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f00a fd2b 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007c72:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <sendSpp+0x2b8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a33      	ldr	r2, [pc, #204]	; (8007d44 <sendSpp+0x2d0>)
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f00a fd23 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007c82:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <sendSpp+0x2b8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a30      	ldr	r2, [pc, #192]	; (8007d48 <sendSpp+0x2d4>)
 8007c88:	6811      	ldr	r1, [r2, #0]
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f00a fc57 	bl	8012540 <rx>
	HAL_Delay(50);
 8007c92:	2032      	movs	r0, #50	; 0x32
 8007c94:	f004 fcee 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007c98:	4b24      	ldr	r3, [pc, #144]	; (8007d2c <sendSpp+0x2b8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a24      	ldr	r2, [pc, #144]	; (8007d30 <sendSpp+0x2bc>)
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f00a fd10 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007ca8:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <sendSpp+0x2b8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2201      	movs	r2, #1
 8007cae:	4921      	ldr	r1, [pc, #132]	; (8007d34 <sendSpp+0x2c0>)
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f00a fc45 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ATEMP=");
 8007cb6:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <sendSpp+0x2b8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	492e      	ldr	r1, [pc, #184]	; (8007d74 <sendSpp+0x300>)
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f00a fd03 	bl	80126c8 <txr>
	txr(uartModem, TEMP);
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <sendSpp+0x2b8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	492c      	ldr	r1, [pc, #176]	; (8007d78 <sendSpp+0x304>)
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f00a fcfd 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007cce:	4b17      	ldr	r3, [pc, #92]	; (8007d2c <sendSpp+0x2b8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	491b      	ldr	r1, [pc, #108]	; (8007d40 <sendSpp+0x2cc>)
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f00a fcf7 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007cda:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <sendSpp+0x2b8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <sendSpp+0x2d0>)
 8007ce0:	6812      	ldr	r2, [r2, #0]
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f00a fcef 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007cea:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <sendSpp+0x2b8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a16      	ldr	r2, [pc, #88]	; (8007d48 <sendSpp+0x2d4>)
 8007cf0:	6811      	ldr	r1, [r2, #0]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f00a fc23 	bl	8012540 <rx>
	HAL_Delay(50);
 8007cfa:	2032      	movs	r0, #50	; 0x32
 8007cfc:	f004 fcba 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <sendSpp+0x2b8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a0a      	ldr	r2, [pc, #40]	; (8007d30 <sendSpp+0x2bc>)
 8007d06:	6812      	ldr	r2, [r2, #0]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f00a fcdc 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007d10:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <sendSpp+0x2b8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2201      	movs	r2, #1
 8007d16:	4907      	ldr	r1, [pc, #28]	; (8007d34 <sendSpp+0x2c0>)
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f00a fc11 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ABAT=");
 8007d1e:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <sendSpp+0x2b8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4916      	ldr	r1, [pc, #88]	; (8007d7c <sendSpp+0x308>)
 8007d24:	4618      	mov	r0, r3
 8007d26:	f00a fccf 	bl	80126c8 <txr>
 8007d2a:	e029      	b.n	8007d80 <sendSpp+0x30c>
 8007d2c:	20004d5c 	.word	0x20004d5c
 8007d30:	2000004c 	.word	0x2000004c
 8007d34:	08014c9c 	.word	0x08014c9c
 8007d38:	08014cec 	.word	0x08014cec
 8007d3c:	20003cf8 	.word	0x20003cf8
 8007d40:	08014c8c 	.word	0x08014c8c
 8007d44:	20000018 	.word	0x20000018
 8007d48:	20000118 	.word	0x20000118
 8007d4c:	08014cf4 	.word	0x08014cf4
 8007d50:	20003e14 	.word	0x20003e14
 8007d54:	08014cfc 	.word	0x08014cfc
 8007d58:	20000398 	.word	0x20000398
 8007d5c:	08014d04 	.word	0x08014d04
 8007d60:	20004428 	.word	0x20004428
 8007d64:	08014d14 	.word	0x08014d14
 8007d68:	200002cc 	.word	0x200002cc
 8007d6c:	08014d1c 	.word	0x08014d1c
 8007d70:	20000518 	.word	0x20000518
 8007d74:	08014d24 	.word	0x08014d24
 8007d78:	20003df4 	.word	0x20003df4
 8007d7c:	08014d2c 	.word	0x08014d2c
	txr(uartModem, BAT);
 8007d80:	4bac      	ldr	r3, [pc, #688]	; (8008034 <sendSpp+0x5c0>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	49ac      	ldr	r1, [pc, #688]	; (8008038 <sendSpp+0x5c4>)
 8007d86:	4618      	mov	r0, r3
 8007d88:	f00a fc9e 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007d8c:	4ba9      	ldr	r3, [pc, #676]	; (8008034 <sendSpp+0x5c0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	49aa      	ldr	r1, [pc, #680]	; (800803c <sendSpp+0x5c8>)
 8007d92:	4618      	mov	r0, r3
 8007d94:	f00a fc98 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007d98:	4ba6      	ldr	r3, [pc, #664]	; (8008034 <sendSpp+0x5c0>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4aa8      	ldr	r2, [pc, #672]	; (8008040 <sendSpp+0x5cc>)
 8007d9e:	6812      	ldr	r2, [r2, #0]
 8007da0:	4611      	mov	r1, r2
 8007da2:	4618      	mov	r0, r3
 8007da4:	f00a fc90 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007da8:	4ba2      	ldr	r3, [pc, #648]	; (8008034 <sendSpp+0x5c0>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4aa5      	ldr	r2, [pc, #660]	; (8008044 <sendSpp+0x5d0>)
 8007dae:	6811      	ldr	r1, [r2, #0]
 8007db0:	2204      	movs	r2, #4
 8007db2:	4618      	mov	r0, r3
 8007db4:	f00a fbc4 	bl	8012540 <rx>
	HAL_Delay(50);
 8007db8:	2032      	movs	r0, #50	; 0x32
 8007dba:	f004 fc5b 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007dbe:	4b9d      	ldr	r3, [pc, #628]	; (8008034 <sendSpp+0x5c0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4aa1      	ldr	r2, [pc, #644]	; (8008048 <sendSpp+0x5d4>)
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f00a fc7d 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007dce:	4b99      	ldr	r3, [pc, #612]	; (8008034 <sendSpp+0x5c0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	499d      	ldr	r1, [pc, #628]	; (800804c <sendSpp+0x5d8>)
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f00a fbb2 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ASIG=");
 8007ddc:	4b95      	ldr	r3, [pc, #596]	; (8008034 <sendSpp+0x5c0>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	499b      	ldr	r1, [pc, #620]	; (8008050 <sendSpp+0x5dc>)
 8007de2:	4618      	mov	r0, r3
 8007de4:	f00a fc70 	bl	80126c8 <txr>
	txr(uartModem, SIG);
 8007de8:	4b92      	ldr	r3, [pc, #584]	; (8008034 <sendSpp+0x5c0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4999      	ldr	r1, [pc, #612]	; (8008054 <sendSpp+0x5e0>)
 8007dee:	4618      	mov	r0, r3
 8007df0:	f00a fc6a 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007df4:	4b8f      	ldr	r3, [pc, #572]	; (8008034 <sendSpp+0x5c0>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4990      	ldr	r1, [pc, #576]	; (800803c <sendSpp+0x5c8>)
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f00a fc64 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007e00:	4b8c      	ldr	r3, [pc, #560]	; (8008034 <sendSpp+0x5c0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a8e      	ldr	r2, [pc, #568]	; (8008040 <sendSpp+0x5cc>)
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f00a fc5c 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007e10:	4b88      	ldr	r3, [pc, #544]	; (8008034 <sendSpp+0x5c0>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a8b      	ldr	r2, [pc, #556]	; (8008044 <sendSpp+0x5d0>)
 8007e16:	6811      	ldr	r1, [r2, #0]
 8007e18:	2204      	movs	r2, #4
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f00a fb90 	bl	8012540 <rx>
	HAL_Delay(50);
 8007e20:	2032      	movs	r0, #50	; 0x32
 8007e22:	f004 fc27 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007e26:	4b83      	ldr	r3, [pc, #524]	; (8008034 <sendSpp+0x5c0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a87      	ldr	r2, [pc, #540]	; (8008048 <sendSpp+0x5d4>)
 8007e2c:	6812      	ldr	r2, [r2, #0]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f00a fc49 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007e36:	4b7f      	ldr	r3, [pc, #508]	; (8008034 <sendSpp+0x5c0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	4983      	ldr	r1, [pc, #524]	; (800804c <sendSpp+0x5d8>)
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f00a fb7e 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"AMSATH=");
 8007e44:	4b7b      	ldr	r3, [pc, #492]	; (8008034 <sendSpp+0x5c0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4983      	ldr	r1, [pc, #524]	; (8008058 <sendSpp+0x5e4>)
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f00a fc3c 	bl	80126c8 <txr>
	txr(uartModem, MSATH);
 8007e50:	4b78      	ldr	r3, [pc, #480]	; (8008034 <sendSpp+0x5c0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4981      	ldr	r1, [pc, #516]	; (800805c <sendSpp+0x5e8>)
 8007e56:	4618      	mov	r0, r3
 8007e58:	f00a fc36 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007e5c:	4b75      	ldr	r3, [pc, #468]	; (8008034 <sendSpp+0x5c0>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4976      	ldr	r1, [pc, #472]	; (800803c <sendSpp+0x5c8>)
 8007e62:	4618      	mov	r0, r3
 8007e64:	f00a fc30 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007e68:	4b72      	ldr	r3, [pc, #456]	; (8008034 <sendSpp+0x5c0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a74      	ldr	r2, [pc, #464]	; (8008040 <sendSpp+0x5cc>)
 8007e6e:	6812      	ldr	r2, [r2, #0]
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f00a fc28 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007e78:	4b6e      	ldr	r3, [pc, #440]	; (8008034 <sendSpp+0x5c0>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a71      	ldr	r2, [pc, #452]	; (8008044 <sendSpp+0x5d0>)
 8007e7e:	6811      	ldr	r1, [r2, #0]
 8007e80:	2204      	movs	r2, #4
 8007e82:	4618      	mov	r0, r3
 8007e84:	f00a fb5c 	bl	8012540 <rx>
	HAL_Delay(50);
 8007e88:	2032      	movs	r0, #50	; 0x32
 8007e8a:	f004 fbf3 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007e8e:	4b69      	ldr	r3, [pc, #420]	; (8008034 <sendSpp+0x5c0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a6d      	ldr	r2, [pc, #436]	; (8008048 <sendSpp+0x5d4>)
 8007e94:	6812      	ldr	r2, [r2, #0]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f00a fc15 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007e9e:	4b65      	ldr	r3, [pc, #404]	; (8008034 <sendSpp+0x5c0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4969      	ldr	r1, [pc, #420]	; (800804c <sendSpp+0x5d8>)
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f00a fb4a 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"AMCON=");
 8007eac:	4b61      	ldr	r3, [pc, #388]	; (8008034 <sendSpp+0x5c0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	496b      	ldr	r1, [pc, #428]	; (8008060 <sendSpp+0x5ec>)
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f00a fc08 	bl	80126c8 <txr>
	txr(uartModem, MCON);
 8007eb8:	4b5e      	ldr	r3, [pc, #376]	; (8008034 <sendSpp+0x5c0>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4969      	ldr	r1, [pc, #420]	; (8008064 <sendSpp+0x5f0>)
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f00a fc02 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007ec4:	4b5b      	ldr	r3, [pc, #364]	; (8008034 <sendSpp+0x5c0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	495c      	ldr	r1, [pc, #368]	; (800803c <sendSpp+0x5c8>)
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f00a fbfc 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007ed0:	4b58      	ldr	r3, [pc, #352]	; (8008034 <sendSpp+0x5c0>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a5a      	ldr	r2, [pc, #360]	; (8008040 <sendSpp+0x5cc>)
 8007ed6:	6812      	ldr	r2, [r2, #0]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f00a fbf4 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007ee0:	4b54      	ldr	r3, [pc, #336]	; (8008034 <sendSpp+0x5c0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a57      	ldr	r2, [pc, #348]	; (8008044 <sendSpp+0x5d0>)
 8007ee6:	6811      	ldr	r1, [r2, #0]
 8007ee8:	2204      	movs	r2, #4
 8007eea:	4618      	mov	r0, r3
 8007eec:	f00a fb28 	bl	8012540 <rx>
	HAL_Delay(50);
 8007ef0:	2032      	movs	r0, #50	; 0x32
 8007ef2:	f004 fbbf 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007ef6:	4b4f      	ldr	r3, [pc, #316]	; (8008034 <sendSpp+0x5c0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a53      	ldr	r2, [pc, #332]	; (8008048 <sendSpp+0x5d4>)
 8007efc:	6812      	ldr	r2, [r2, #0]
 8007efe:	4611      	mov	r1, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f00a fbe1 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007f06:	4b4b      	ldr	r3, [pc, #300]	; (8008034 <sendSpp+0x5c0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	494f      	ldr	r1, [pc, #316]	; (800804c <sendSpp+0x5d8>)
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f00a fb16 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"AMTEMP=");
 8007f14:	4b47      	ldr	r3, [pc, #284]	; (8008034 <sendSpp+0x5c0>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4953      	ldr	r1, [pc, #332]	; (8008068 <sendSpp+0x5f4>)
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f00a fbd4 	bl	80126c8 <txr>
	txr(uartModem, MTEMP);
 8007f20:	4b44      	ldr	r3, [pc, #272]	; (8008034 <sendSpp+0x5c0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4951      	ldr	r1, [pc, #324]	; (800806c <sendSpp+0x5f8>)
 8007f26:	4618      	mov	r0, r3
 8007f28:	f00a fbce 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007f2c:	4b41      	ldr	r3, [pc, #260]	; (8008034 <sendSpp+0x5c0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4942      	ldr	r1, [pc, #264]	; (800803c <sendSpp+0x5c8>)
 8007f32:	4618      	mov	r0, r3
 8007f34:	f00a fbc8 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007f38:	4b3e      	ldr	r3, [pc, #248]	; (8008034 <sendSpp+0x5c0>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a40      	ldr	r2, [pc, #256]	; (8008040 <sendSpp+0x5cc>)
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f00a fbc0 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007f48:	4b3a      	ldr	r3, [pc, #232]	; (8008034 <sendSpp+0x5c0>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a3d      	ldr	r2, [pc, #244]	; (8008044 <sendSpp+0x5d0>)
 8007f4e:	6811      	ldr	r1, [r2, #0]
 8007f50:	2204      	movs	r2, #4
 8007f52:	4618      	mov	r0, r3
 8007f54:	f00a faf4 	bl	8012540 <rx>
	HAL_Delay(50);
 8007f58:	2032      	movs	r0, #50	; 0x32
 8007f5a:	f004 fb8b 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007f5e:	4b35      	ldr	r3, [pc, #212]	; (8008034 <sendSpp+0x5c0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a39      	ldr	r2, [pc, #228]	; (8008048 <sendSpp+0x5d4>)
 8007f64:	6812      	ldr	r2, [r2, #0]
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f00a fbad 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007f6e:	4b31      	ldr	r3, [pc, #196]	; (8008034 <sendSpp+0x5c0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2201      	movs	r2, #1
 8007f74:	4935      	ldr	r1, [pc, #212]	; (800804c <sendSpp+0x5d8>)
 8007f76:	4618      	mov	r0, r3
 8007f78:	f00a fae2 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"APG=");
 8007f7c:	4b2d      	ldr	r3, [pc, #180]	; (8008034 <sendSpp+0x5c0>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	493b      	ldr	r1, [pc, #236]	; (8008070 <sendSpp+0x5fc>)
 8007f82:	4618      	mov	r0, r3
 8007f84:	f00a fba0 	bl	80126c8 <txr>
	txr(uartModem, PG);
 8007f88:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <sendSpp+0x5c0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4939      	ldr	r1, [pc, #228]	; (8008074 <sendSpp+0x600>)
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f00a fb9a 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007f94:	4b27      	ldr	r3, [pc, #156]	; (8008034 <sendSpp+0x5c0>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4928      	ldr	r1, [pc, #160]	; (800803c <sendSpp+0x5c8>)
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f00a fb94 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8007fa0:	4b24      	ldr	r3, [pc, #144]	; (8008034 <sendSpp+0x5c0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a26      	ldr	r2, [pc, #152]	; (8008040 <sendSpp+0x5cc>)
 8007fa6:	6812      	ldr	r2, [r2, #0]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f00a fb8c 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8007fb0:	4b20      	ldr	r3, [pc, #128]	; (8008034 <sendSpp+0x5c0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a23      	ldr	r2, [pc, #140]	; (8008044 <sendSpp+0x5d0>)
 8007fb6:	6811      	ldr	r1, [r2, #0]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f00a fac0 	bl	8012540 <rx>
	HAL_Delay(50);
 8007fc0:	2032      	movs	r0, #50	; 0x32
 8007fc2:	f004 fb57 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8007fc6:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <sendSpp+0x5c0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a1f      	ldr	r2, [pc, #124]	; (8008048 <sendSpp+0x5d4>)
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f00a fb79 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8007fd6:	4b17      	ldr	r3, [pc, #92]	; (8008034 <sendSpp+0x5c0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	491b      	ldr	r1, [pc, #108]	; (800804c <sendSpp+0x5d8>)
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f00a faae 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ANAME1=");
 8007fe4:	4b13      	ldr	r3, [pc, #76]	; (8008034 <sendSpp+0x5c0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4923      	ldr	r1, [pc, #140]	; (8008078 <sendSpp+0x604>)
 8007fea:	4618      	mov	r0, r3
 8007fec:	f00a fb6c 	bl	80126c8 <txr>
	txr(uartModem, NAME1);
 8007ff0:	4b10      	ldr	r3, [pc, #64]	; (8008034 <sendSpp+0x5c0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4921      	ldr	r1, [pc, #132]	; (800807c <sendSpp+0x608>)
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f00a fb66 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <sendSpp+0x5c0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	490e      	ldr	r1, [pc, #56]	; (800803c <sendSpp+0x5c8>)
 8008002:	4618      	mov	r0, r3
 8008004:	f00a fb60 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <sendSpp+0x5c0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a0c      	ldr	r2, [pc, #48]	; (8008040 <sendSpp+0x5cc>)
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f00a fb58 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8008018:	4b06      	ldr	r3, [pc, #24]	; (8008034 <sendSpp+0x5c0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a09      	ldr	r2, [pc, #36]	; (8008044 <sendSpp+0x5d0>)
 800801e:	6811      	ldr	r1, [r2, #0]
 8008020:	2204      	movs	r2, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f00a fa8c 	bl	8012540 <rx>
	HAL_Delay(50);
 8008028:	2032      	movs	r0, #50	; 0x32
 800802a:	f004 fb23 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 800802e:	4b01      	ldr	r3, [pc, #4]	; (8008034 <sendSpp+0x5c0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	e025      	b.n	8008080 <sendSpp+0x60c>
 8008034:	20004d5c 	.word	0x20004d5c
 8008038:	20000290 	.word	0x20000290
 800803c:	08014c8c 	.word	0x08014c8c
 8008040:	20000018 	.word	0x20000018
 8008044:	20000118 	.word	0x20000118
 8008048:	2000004c 	.word	0x2000004c
 800804c:	08014c9c 	.word	0x08014c9c
 8008050:	08014d34 	.word	0x08014d34
 8008054:	200041cc 	.word	0x200041cc
 8008058:	08014d3c 	.word	0x08014d3c
 800805c:	200002b8 	.word	0x200002b8
 8008060:	08014d44 	.word	0x08014d44
 8008064:	20004418 	.word	0x20004418
 8008068:	08014d4c 	.word	0x08014d4c
 800806c:	200002ac 	.word	0x200002ac
 8008070:	08014d54 	.word	0x08014d54
 8008074:	2000440c 	.word	0x2000440c
 8008078:	08014d5c 	.word	0x08014d5c
 800807c:	2000418c 	.word	0x2000418c
 8008080:	4aad      	ldr	r2, [pc, #692]	; (8008338 <sendSpp+0x8c4>)
 8008082:	6812      	ldr	r2, [r2, #0]
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f00a fb1e 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 800808c:	4bab      	ldr	r3, [pc, #684]	; (800833c <sendSpp+0x8c8>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2201      	movs	r2, #1
 8008092:	49ab      	ldr	r1, [pc, #684]	; (8008340 <sendSpp+0x8cc>)
 8008094:	4618      	mov	r0, r3
 8008096:	f00a fa53 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ANAME2=");
 800809a:	4ba8      	ldr	r3, [pc, #672]	; (800833c <sendSpp+0x8c8>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	49a9      	ldr	r1, [pc, #676]	; (8008344 <sendSpp+0x8d0>)
 80080a0:	4618      	mov	r0, r3
 80080a2:	f00a fb11 	bl	80126c8 <txr>
	txr(uartModem, NAME2);
 80080a6:	4ba5      	ldr	r3, [pc, #660]	; (800833c <sendSpp+0x8c8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	49a7      	ldr	r1, [pc, #668]	; (8008348 <sendSpp+0x8d4>)
 80080ac:	4618      	mov	r0, r3
 80080ae:	f00a fb0b 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 80080b2:	4ba2      	ldr	r3, [pc, #648]	; (800833c <sendSpp+0x8c8>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	49a5      	ldr	r1, [pc, #660]	; (800834c <sendSpp+0x8d8>)
 80080b8:	4618      	mov	r0, r3
 80080ba:	f00a fb05 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 80080be:	4b9f      	ldr	r3, [pc, #636]	; (800833c <sendSpp+0x8c8>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4aa3      	ldr	r2, [pc, #652]	; (8008350 <sendSpp+0x8dc>)
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f00a fafd 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 80080ce:	4b9b      	ldr	r3, [pc, #620]	; (800833c <sendSpp+0x8c8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4aa0      	ldr	r2, [pc, #640]	; (8008354 <sendSpp+0x8e0>)
 80080d4:	6811      	ldr	r1, [r2, #0]
 80080d6:	2204      	movs	r2, #4
 80080d8:	4618      	mov	r0, r3
 80080da:	f00a fa31 	bl	8012540 <rx>
	HAL_Delay(50);
 80080de:	2032      	movs	r0, #50	; 0x32
 80080e0:	f004 fac8 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 80080e4:	4b95      	ldr	r3, [pc, #596]	; (800833c <sendSpp+0x8c8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a93      	ldr	r2, [pc, #588]	; (8008338 <sendSpp+0x8c4>)
 80080ea:	6812      	ldr	r2, [r2, #0]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f00a faea 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 80080f4:	4b91      	ldr	r3, [pc, #580]	; (800833c <sendSpp+0x8c8>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2201      	movs	r2, #1
 80080fa:	4991      	ldr	r1, [pc, #580]	; (8008340 <sendSpp+0x8cc>)
 80080fc:	4618      	mov	r0, r3
 80080fe:	f00a fa1f 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ANAME3=");
 8008102:	4b8e      	ldr	r3, [pc, #568]	; (800833c <sendSpp+0x8c8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4994      	ldr	r1, [pc, #592]	; (8008358 <sendSpp+0x8e4>)
 8008108:	4618      	mov	r0, r3
 800810a:	f00a fadd 	bl	80126c8 <txr>
	txr(uartModem, NAME3);
 800810e:	4b8b      	ldr	r3, [pc, #556]	; (800833c <sendSpp+0x8c8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4992      	ldr	r1, [pc, #584]	; (800835c <sendSpp+0x8e8>)
 8008114:	4618      	mov	r0, r3
 8008116:	f00a fad7 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 800811a:	4b88      	ldr	r3, [pc, #544]	; (800833c <sendSpp+0x8c8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	498b      	ldr	r1, [pc, #556]	; (800834c <sendSpp+0x8d8>)
 8008120:	4618      	mov	r0, r3
 8008122:	f00a fad1 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8008126:	4b85      	ldr	r3, [pc, #532]	; (800833c <sendSpp+0x8c8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a89      	ldr	r2, [pc, #548]	; (8008350 <sendSpp+0x8dc>)
 800812c:	6812      	ldr	r2, [r2, #0]
 800812e:	4611      	mov	r1, r2
 8008130:	4618      	mov	r0, r3
 8008132:	f00a fac9 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8008136:	4b81      	ldr	r3, [pc, #516]	; (800833c <sendSpp+0x8c8>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a86      	ldr	r2, [pc, #536]	; (8008354 <sendSpp+0x8e0>)
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	2204      	movs	r2, #4
 8008140:	4618      	mov	r0, r3
 8008142:	f00a f9fd 	bl	8012540 <rx>
	HAL_Delay(50);
 8008146:	2032      	movs	r0, #50	; 0x32
 8008148:	f004 fa94 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 800814c:	4b7b      	ldr	r3, [pc, #492]	; (800833c <sendSpp+0x8c8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a79      	ldr	r2, [pc, #484]	; (8008338 <sendSpp+0x8c4>)
 8008152:	6812      	ldr	r2, [r2, #0]
 8008154:	4611      	mov	r1, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f00a fab6 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 800815c:	4b77      	ldr	r3, [pc, #476]	; (800833c <sendSpp+0x8c8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2201      	movs	r2, #1
 8008162:	4977      	ldr	r1, [pc, #476]	; (8008340 <sendSpp+0x8cc>)
 8008164:	4618      	mov	r0, r3
 8008166:	f00a f9eb 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ATIME=");
 800816a:	4b74      	ldr	r3, [pc, #464]	; (800833c <sendSpp+0x8c8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	497c      	ldr	r1, [pc, #496]	; (8008360 <sendSpp+0x8ec>)
 8008170:	4618      	mov	r0, r3
 8008172:	f00a faa9 	bl	80126c8 <txr>
	txr(uartModem, TIME);
 8008176:	4b71      	ldr	r3, [pc, #452]	; (800833c <sendSpp+0x8c8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	497a      	ldr	r1, [pc, #488]	; (8008364 <sendSpp+0x8f0>)
 800817c:	4618      	mov	r0, r3
 800817e:	f00a faa3 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8008182:	4b6e      	ldr	r3, [pc, #440]	; (800833c <sendSpp+0x8c8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4971      	ldr	r1, [pc, #452]	; (800834c <sendSpp+0x8d8>)
 8008188:	4618      	mov	r0, r3
 800818a:	f00a fa9d 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 800818e:	4b6b      	ldr	r3, [pc, #428]	; (800833c <sendSpp+0x8c8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a6f      	ldr	r2, [pc, #444]	; (8008350 <sendSpp+0x8dc>)
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	4611      	mov	r1, r2
 8008198:	4618      	mov	r0, r3
 800819a:	f00a fa95 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 800819e:	4b67      	ldr	r3, [pc, #412]	; (800833c <sendSpp+0x8c8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a6c      	ldr	r2, [pc, #432]	; (8008354 <sendSpp+0x8e0>)
 80081a4:	6811      	ldr	r1, [r2, #0]
 80081a6:	2204      	movs	r2, #4
 80081a8:	4618      	mov	r0, r3
 80081aa:	f00a f9c9 	bl	8012540 <rx>
	HAL_Delay(50);
 80081ae:	2032      	movs	r0, #50	; 0x32
 80081b0:	f004 fa60 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 80081b4:	4b61      	ldr	r3, [pc, #388]	; (800833c <sendSpp+0x8c8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a5f      	ldr	r2, [pc, #380]	; (8008338 <sendSpp+0x8c4>)
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f00a fa82 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 80081c4:	4b5d      	ldr	r3, [pc, #372]	; (800833c <sendSpp+0x8c8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2201      	movs	r2, #1
 80081ca:	495d      	ldr	r1, [pc, #372]	; (8008340 <sendSpp+0x8cc>)
 80081cc:	4618      	mov	r0, r3
 80081ce:	f00a f9b7 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"APNUM=");
 80081d2:	4b5a      	ldr	r3, [pc, #360]	; (800833c <sendSpp+0x8c8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4964      	ldr	r1, [pc, #400]	; (8008368 <sendSpp+0x8f4>)
 80081d8:	4618      	mov	r0, r3
 80081da:	f00a fa75 	bl	80126c8 <txr>
	txr(uartModem, PNUM);
 80081de:	4b57      	ldr	r3, [pc, #348]	; (800833c <sendSpp+0x8c8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4962      	ldr	r1, [pc, #392]	; (800836c <sendSpp+0x8f8>)
 80081e4:	4618      	mov	r0, r3
 80081e6:	f00a fa6f 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 80081ea:	4b54      	ldr	r3, [pc, #336]	; (800833c <sendSpp+0x8c8>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4957      	ldr	r1, [pc, #348]	; (800834c <sendSpp+0x8d8>)
 80081f0:	4618      	mov	r0, r3
 80081f2:	f00a fa69 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 80081f6:	4b51      	ldr	r3, [pc, #324]	; (800833c <sendSpp+0x8c8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a55      	ldr	r2, [pc, #340]	; (8008350 <sendSpp+0x8dc>)
 80081fc:	6812      	ldr	r2, [r2, #0]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f00a fa61 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8008206:	4b4d      	ldr	r3, [pc, #308]	; (800833c <sendSpp+0x8c8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a52      	ldr	r2, [pc, #328]	; (8008354 <sendSpp+0x8e0>)
 800820c:	6811      	ldr	r1, [r2, #0]
 800820e:	2204      	movs	r2, #4
 8008210:	4618      	mov	r0, r3
 8008212:	f00a f995 	bl	8012540 <rx>
	HAL_Delay(50);
 8008216:	2032      	movs	r0, #50	; 0x32
 8008218:	f004 fa2c 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 800821c:	4b47      	ldr	r3, [pc, #284]	; (800833c <sendSpp+0x8c8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a45      	ldr	r2, [pc, #276]	; (8008338 <sendSpp+0x8c4>)
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f00a fa4e 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 800822c:	4b43      	ldr	r3, [pc, #268]	; (800833c <sendSpp+0x8c8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2201      	movs	r2, #1
 8008232:	4943      	ldr	r1, [pc, #268]	; (8008340 <sendSpp+0x8cc>)
 8008234:	4618      	mov	r0, r3
 8008236:	f00a f983 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"AIMEI=");
 800823a:	4b40      	ldr	r3, [pc, #256]	; (800833c <sendSpp+0x8c8>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	494c      	ldr	r1, [pc, #304]	; (8008370 <sendSpp+0x8fc>)
 8008240:	4618      	mov	r0, r3
 8008242:	f00a fa41 	bl	80126c8 <txr>
	txr(uartModem, IMEI);
 8008246:	4b3d      	ldr	r3, [pc, #244]	; (800833c <sendSpp+0x8c8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	494a      	ldr	r1, [pc, #296]	; (8008374 <sendSpp+0x900>)
 800824c:	4618      	mov	r0, r3
 800824e:	f00a fa3b 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8008252:	4b3a      	ldr	r3, [pc, #232]	; (800833c <sendSpp+0x8c8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	493d      	ldr	r1, [pc, #244]	; (800834c <sendSpp+0x8d8>)
 8008258:	4618      	mov	r0, r3
 800825a:	f00a fa35 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 800825e:	4b37      	ldr	r3, [pc, #220]	; (800833c <sendSpp+0x8c8>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a3b      	ldr	r2, [pc, #236]	; (8008350 <sendSpp+0x8dc>)
 8008264:	6812      	ldr	r2, [r2, #0]
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f00a fa2d 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 800826e:	4b33      	ldr	r3, [pc, #204]	; (800833c <sendSpp+0x8c8>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a38      	ldr	r2, [pc, #224]	; (8008354 <sendSpp+0x8e0>)
 8008274:	6811      	ldr	r1, [r2, #0]
 8008276:	2204      	movs	r2, #4
 8008278:	4618      	mov	r0, r3
 800827a:	f00a f961 	bl	8012540 <rx>
	HAL_Delay(50);
 800827e:	2032      	movs	r0, #50	; 0x32
 8008280:	f004 f9f8 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8008284:	4b2d      	ldr	r3, [pc, #180]	; (800833c <sendSpp+0x8c8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a2b      	ldr	r2, [pc, #172]	; (8008338 <sendSpp+0x8c4>)
 800828a:	6812      	ldr	r2, [r2, #0]
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f00a fa1a 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8008294:	4b29      	ldr	r3, [pc, #164]	; (800833c <sendSpp+0x8c8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2201      	movs	r2, #1
 800829a:	4929      	ldr	r1, [pc, #164]	; (8008340 <sendSpp+0x8cc>)
 800829c:	4618      	mov	r0, r3
 800829e:	f00a f94f 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"AID=");
 80082a2:	4b26      	ldr	r3, [pc, #152]	; (800833c <sendSpp+0x8c8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4934      	ldr	r1, [pc, #208]	; (8008378 <sendSpp+0x904>)
 80082a8:	4618      	mov	r0, r3
 80082aa:	f00a fa0d 	bl	80126c8 <txr>
	txr(uartModem, ID);
 80082ae:	4b23      	ldr	r3, [pc, #140]	; (800833c <sendSpp+0x8c8>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4932      	ldr	r1, [pc, #200]	; (800837c <sendSpp+0x908>)
 80082b4:	4618      	mov	r0, r3
 80082b6:	f00a fa07 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 80082ba:	4b20      	ldr	r3, [pc, #128]	; (800833c <sendSpp+0x8c8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4923      	ldr	r1, [pc, #140]	; (800834c <sendSpp+0x8d8>)
 80082c0:	4618      	mov	r0, r3
 80082c2:	f00a fa01 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 80082c6:	4b1d      	ldr	r3, [pc, #116]	; (800833c <sendSpp+0x8c8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a21      	ldr	r2, [pc, #132]	; (8008350 <sendSpp+0x8dc>)
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f00a f9f9 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 80082d6:	4b19      	ldr	r3, [pc, #100]	; (800833c <sendSpp+0x8c8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1e      	ldr	r2, [pc, #120]	; (8008354 <sendSpp+0x8e0>)
 80082dc:	6811      	ldr	r1, [r2, #0]
 80082de:	2204      	movs	r2, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f00a f92d 	bl	8012540 <rx>
	HAL_Delay(50);
 80082e6:	2032      	movs	r0, #50	; 0x32
 80082e8:	f004 f9c4 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 80082ec:	4b13      	ldr	r3, [pc, #76]	; (800833c <sendSpp+0x8c8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a11      	ldr	r2, [pc, #68]	; (8008338 <sendSpp+0x8c4>)
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	4611      	mov	r1, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f00a f9e6 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 80082fc:	4b0f      	ldr	r3, [pc, #60]	; (800833c <sendSpp+0x8c8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2201      	movs	r2, #1
 8008302:	490f      	ldr	r1, [pc, #60]	; (8008340 <sendSpp+0x8cc>)
 8008304:	4618      	mov	r0, r3
 8008306:	f00a f91b 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"AFV=");
 800830a:	4b0c      	ldr	r3, [pc, #48]	; (800833c <sendSpp+0x8c8>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	491c      	ldr	r1, [pc, #112]	; (8008380 <sendSpp+0x90c>)
 8008310:	4618      	mov	r0, r3
 8008312:	f00a f9d9 	bl	80126c8 <txr>
	txr(uartModem, FW);
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <sendSpp+0x8c8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <sendSpp+0x910>)
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f00a f9d1 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8008326:	4b05      	ldr	r3, [pc, #20]	; (800833c <sendSpp+0x8c8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4908      	ldr	r1, [pc, #32]	; (800834c <sendSpp+0x8d8>)
 800832c:	4618      	mov	r0, r3
 800832e:	f00a f9cb 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 8008332:	4b02      	ldr	r3, [pc, #8]	; (800833c <sendSpp+0x8c8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	e027      	b.n	8008388 <sendSpp+0x914>
 8008338:	2000004c 	.word	0x2000004c
 800833c:	20004d5c 	.word	0x20004d5c
 8008340:	08014c9c 	.word	0x08014c9c
 8008344:	08014d64 	.word	0x08014d64
 8008348:	20003d04 	.word	0x20003d04
 800834c:	08014c8c 	.word	0x08014c8c
 8008350:	20000018 	.word	0x20000018
 8008354:	20000118 	.word	0x20000118
 8008358:	08014d6c 	.word	0x08014d6c
 800835c:	2000041c 	.word	0x2000041c
 8008360:	08014d74 	.word	0x08014d74
 8008364:	20000268 	.word	0x20000268
 8008368:	08014d7c 	.word	0x08014d7c
 800836c:	20004348 	.word	0x20004348
 8008370:	08014d84 	.word	0x08014d84
 8008374:	20003d9c 	.word	0x20003d9c
 8008378:	08014d8c 	.word	0x08014d8c
 800837c:	200004b0 	.word	0x200004b0
 8008380:	08014d94 	.word	0x08014d94
 8008384:	20000000 	.word	0x20000000
 8008388:	4a87      	ldr	r2, [pc, #540]	; (80085a8 <sendSpp+0xb34>)
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f00a f99a 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8008394:	4b85      	ldr	r3, [pc, #532]	; (80085ac <sendSpp+0xb38>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a85      	ldr	r2, [pc, #532]	; (80085b0 <sendSpp+0xb3c>)
 800839a:	6811      	ldr	r1, [r2, #0]
 800839c:	2204      	movs	r2, #4
 800839e:	4618      	mov	r0, r3
 80083a0:	f00a f8ce 	bl	8012540 <rx>
	HAL_Delay(50);
 80083a4:	2032      	movs	r0, #50	; 0x32
 80083a6:	f004 f965 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 80083aa:	4b80      	ldr	r3, [pc, #512]	; (80085ac <sendSpp+0xb38>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a81      	ldr	r2, [pc, #516]	; (80085b4 <sendSpp+0xb40>)
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f00a f987 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 80083ba:	4b7c      	ldr	r3, [pc, #496]	; (80085ac <sendSpp+0xb38>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2201      	movs	r2, #1
 80083c0:	497d      	ldr	r1, [pc, #500]	; (80085b8 <sendSpp+0xb44>)
 80083c2:	4618      	mov	r0, r3
 80083c4:	f00a f8bc 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ABV=");
 80083c8:	4b78      	ldr	r3, [pc, #480]	; (80085ac <sendSpp+0xb38>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	497b      	ldr	r1, [pc, #492]	; (80085bc <sendSpp+0xb48>)
 80083ce:	4618      	mov	r0, r3
 80083d0:	f00a f97a 	bl	80126c8 <txr>
	txr(uartModem, BW);
 80083d4:	4b75      	ldr	r3, [pc, #468]	; (80085ac <sendSpp+0xb38>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a79      	ldr	r2, [pc, #484]	; (80085c0 <sendSpp+0xb4c>)
 80083da:	6812      	ldr	r2, [r2, #0]
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f00a f972 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 80083e4:	4b71      	ldr	r3, [pc, #452]	; (80085ac <sendSpp+0xb38>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4976      	ldr	r1, [pc, #472]	; (80085c4 <sendSpp+0xb50>)
 80083ea:	4618      	mov	r0, r3
 80083ec:	f00a f96c 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 80083f0:	4b6e      	ldr	r3, [pc, #440]	; (80085ac <sendSpp+0xb38>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a6c      	ldr	r2, [pc, #432]	; (80085a8 <sendSpp+0xb34>)
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	4611      	mov	r1, r2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f00a f964 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 8008400:	4b6a      	ldr	r3, [pc, #424]	; (80085ac <sendSpp+0xb38>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a6a      	ldr	r2, [pc, #424]	; (80085b0 <sendSpp+0xb3c>)
 8008406:	6811      	ldr	r1, [r2, #0]
 8008408:	2204      	movs	r2, #4
 800840a:	4618      	mov	r0, r3
 800840c:	f00a f898 	bl	8012540 <rx>
	HAL_Delay(50);
 8008410:	2032      	movs	r0, #50	; 0x32
 8008412:	f004 f92f 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8008416:	4b65      	ldr	r3, [pc, #404]	; (80085ac <sendSpp+0xb38>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a66      	ldr	r2, [pc, #408]	; (80085b4 <sendSpp+0xb40>)
 800841c:	6812      	ldr	r2, [r2, #0]
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f00a f951 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8008426:	4b61      	ldr	r3, [pc, #388]	; (80085ac <sendSpp+0xb38>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2201      	movs	r2, #1
 800842c:	4962      	ldr	r1, [pc, #392]	; (80085b8 <sendSpp+0xb44>)
 800842e:	4618      	mov	r0, r3
 8008430:	f00a f886 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"AMV=");
 8008434:	4b5d      	ldr	r3, [pc, #372]	; (80085ac <sendSpp+0xb38>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4963      	ldr	r1, [pc, #396]	; (80085c8 <sendSpp+0xb54>)
 800843a:	4618      	mov	r0, r3
 800843c:	f00a f944 	bl	80126c8 <txr>
	MV[0] = '1';
 8008440:	4b62      	ldr	r3, [pc, #392]	; (80085cc <sendSpp+0xb58>)
 8008442:	2231      	movs	r2, #49	; 0x31
 8008444:	701a      	strb	r2, [r3, #0]
	txr(uartModem, MV);
 8008446:	4b59      	ldr	r3, [pc, #356]	; (80085ac <sendSpp+0xb38>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4960      	ldr	r1, [pc, #384]	; (80085cc <sendSpp+0xb58>)
 800844c:	4618      	mov	r0, r3
 800844e:	f00a f93b 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8008452:	4b56      	ldr	r3, [pc, #344]	; (80085ac <sendSpp+0xb38>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	495b      	ldr	r1, [pc, #364]	; (80085c4 <sendSpp+0xb50>)
 8008458:	4618      	mov	r0, r3
 800845a:	f00a f935 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 800845e:	4b53      	ldr	r3, [pc, #332]	; (80085ac <sendSpp+0xb38>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a51      	ldr	r2, [pc, #324]	; (80085a8 <sendSpp+0xb34>)
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f00a f92d 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 800846e:	4b4f      	ldr	r3, [pc, #316]	; (80085ac <sendSpp+0xb38>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a4f      	ldr	r2, [pc, #316]	; (80085b0 <sendSpp+0xb3c>)
 8008474:	6811      	ldr	r1, [r2, #0]
 8008476:	2204      	movs	r2, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f00a f861 	bl	8012540 <rx>
	HAL_Delay(50);
 800847e:	2032      	movs	r0, #50	; 0x32
 8008480:	f004 f8f8 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8008484:	4b49      	ldr	r3, [pc, #292]	; (80085ac <sendSpp+0xb38>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a4a      	ldr	r2, [pc, #296]	; (80085b4 <sendSpp+0xb40>)
 800848a:	6812      	ldr	r2, [r2, #0]
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f00a f91a 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8008494:	4b45      	ldr	r3, [pc, #276]	; (80085ac <sendSpp+0xb38>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2201      	movs	r2, #1
 800849a:	4947      	ldr	r1, [pc, #284]	; (80085b8 <sendSpp+0xb44>)
 800849c:	4618      	mov	r0, r3
 800849e:	f00a f84f 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ABTRSSI=");
 80084a2:	4b42      	ldr	r3, [pc, #264]	; (80085ac <sendSpp+0xb38>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	494a      	ldr	r1, [pc, #296]	; (80085d0 <sendSpp+0xb5c>)
 80084a8:	4618      	mov	r0, r3
 80084aa:	f00a f90d 	bl	80126c8 <txr>
	txr(uartModem, BTRSSI);
 80084ae:	4b3f      	ldr	r3, [pc, #252]	; (80085ac <sendSpp+0xb38>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4948      	ldr	r1, [pc, #288]	; (80085d4 <sendSpp+0xb60>)
 80084b4:	4618      	mov	r0, r3
 80084b6:	f00a f907 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 80084ba:	4b3c      	ldr	r3, [pc, #240]	; (80085ac <sendSpp+0xb38>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4941      	ldr	r1, [pc, #260]	; (80085c4 <sendSpp+0xb50>)
 80084c0:	4618      	mov	r0, r3
 80084c2:	f00a f901 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 80084c6:	4b39      	ldr	r3, [pc, #228]	; (80085ac <sendSpp+0xb38>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a37      	ldr	r2, [pc, #220]	; (80085a8 <sendSpp+0xb34>)
 80084cc:	6812      	ldr	r2, [r2, #0]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f00a f8f9 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 80084d6:	4b35      	ldr	r3, [pc, #212]	; (80085ac <sendSpp+0xb38>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a35      	ldr	r2, [pc, #212]	; (80085b0 <sendSpp+0xb3c>)
 80084dc:	6811      	ldr	r1, [r2, #0]
 80084de:	2204      	movs	r2, #4
 80084e0:	4618      	mov	r0, r3
 80084e2:	f00a f82d 	bl	8012540 <rx>
	HAL_Delay(50);
 80084e6:	2032      	movs	r0, #50	; 0x32
 80084e8:	f004 f8c4 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 80084ec:	4b2f      	ldr	r3, [pc, #188]	; (80085ac <sendSpp+0xb38>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a30      	ldr	r2, [pc, #192]	; (80085b4 <sendSpp+0xb40>)
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f00a f8e6 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 80084fc:	4b2b      	ldr	r3, [pc, #172]	; (80085ac <sendSpp+0xb38>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2201      	movs	r2, #1
 8008502:	492d      	ldr	r1, [pc, #180]	; (80085b8 <sendSpp+0xb44>)
 8008504:	4618      	mov	r0, r3
 8008506:	f00a f81b 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"ASESNORTYPE=");
 800850a:	4b28      	ldr	r3, [pc, #160]	; (80085ac <sendSpp+0xb38>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4932      	ldr	r1, [pc, #200]	; (80085d8 <sendSpp+0xb64>)
 8008510:	4618      	mov	r0, r3
 8008512:	f00a f8d9 	bl	80126c8 <txr>
	txr(uartModem, SENSORTYPE);
 8008516:	4b25      	ldr	r3, [pc, #148]	; (80085ac <sendSpp+0xb38>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4930      	ldr	r1, [pc, #192]	; (80085dc <sendSpp+0xb68>)
 800851c:	4618      	mov	r0, r3
 800851e:	f00a f8d3 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"#");
 8008522:	4b22      	ldr	r3, [pc, #136]	; (80085ac <sendSpp+0xb38>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4927      	ldr	r1, [pc, #156]	; (80085c4 <sendSpp+0xb50>)
 8008528:	4618      	mov	r0, r3
 800852a:	f00a f8cd 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 800852e:	4b1f      	ldr	r3, [pc, #124]	; (80085ac <sendSpp+0xb38>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1d      	ldr	r2, [pc, #116]	; (80085a8 <sendSpp+0xb34>)
 8008534:	6812      	ldr	r2, [r2, #0]
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f00a f8c5 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 800853e:	4b1b      	ldr	r3, [pc, #108]	; (80085ac <sendSpp+0xb38>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a1b      	ldr	r2, [pc, #108]	; (80085b0 <sendSpp+0xb3c>)
 8008544:	6811      	ldr	r1, [r2, #0]
 8008546:	2204      	movs	r2, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f009 fff9 	bl	8012540 <rx>
	HAL_Delay(50);
 800854e:	2032      	movs	r0, #50	; 0x32
 8008550:	f004 f890 	bl	800c674 <HAL_Delay>

	txr(uartModem, BL5);
 8008554:	4b15      	ldr	r3, [pc, #84]	; (80085ac <sendSpp+0xb38>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a16      	ldr	r2, [pc, #88]	; (80085b4 <sendSpp+0xb40>)
 800855a:	6812      	ldr	r2, [r2, #0]
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f00a f8b2 	bl	80126c8 <txr>
	rx(uartModem, (uint8_t*)"> ", 1);
 8008564:	4b11      	ldr	r3, [pc, #68]	; (80085ac <sendSpp+0xb38>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2201      	movs	r2, #1
 800856a:	4913      	ldr	r1, [pc, #76]	; (80085b8 <sendSpp+0xb44>)
 800856c:	4618      	mov	r0, r3
 800856e:	f009 ffe7 	bl	8012540 <rx>
	txr(uartModem, (uint8_t*)"END#");
 8008572:	4b0e      	ldr	r3, [pc, #56]	; (80085ac <sendSpp+0xb38>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	491a      	ldr	r1, [pc, #104]	; (80085e0 <sendSpp+0xb6c>)
 8008578:	4618      	mov	r0, r3
 800857a:	f00a f8a5 	bl	80126c8 <txr>
	txr(uartModem, BLR4);
 800857e:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <sendSpp+0xb38>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a09      	ldr	r2, [pc, #36]	; (80085a8 <sendSpp+0xb34>)
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	4611      	mov	r1, r2
 8008588:	4618      	mov	r0, r3
 800858a:	f00a f89d 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 4);
 800858e:	4b07      	ldr	r3, [pc, #28]	; (80085ac <sendSpp+0xb38>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a07      	ldr	r2, [pc, #28]	; (80085b0 <sendSpp+0xb3c>)
 8008594:	6811      	ldr	r1, [r2, #0]
 8008596:	2204      	movs	r2, #4
 8008598:	4618      	mov	r0, r3
 800859a:	f009 ffd1 	bl	8012540 <rx>
	HAL_Delay(50);
 800859e:	2032      	movs	r0, #50	; 0x32
 80085a0:	f004 f868 	bl	800c674 <HAL_Delay>
}
 80085a4:	bf00      	nop
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000018 	.word	0x20000018
 80085ac:	20004d5c 	.word	0x20004d5c
 80085b0:	20000118 	.word	0x20000118
 80085b4:	2000004c 	.word	0x2000004c
 80085b8:	08014c9c 	.word	0x08014c9c
 80085bc:	08014d9c 	.word	0x08014d9c
 80085c0:	20000004 	.word	0x20000004
 80085c4:	08014c8c 	.word	0x08014c8c
 80085c8:	08014da4 	.word	0x08014da4
 80085cc:	20004370 	.word	0x20004370
 80085d0:	08014dac 	.word	0x08014dac
 80085d4:	200004a0 	.word	0x200004a0
 80085d8:	08014db8 	.word	0x08014db8
 80085dc:	200040f8 	.word	0x200040f8
 80085e0:	08014dc8 	.word	0x08014dc8

080085e4 <updateConnectedDeviceID>:

int updateConnectedDeviceID(){
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08a      	sub	sp, #40	; 0x28
 80085e8:	af00      	add	r7, sp, #0
	txr(uartModem, BL6);
 80085ea:	4b42      	ldr	r3, [pc, #264]	; (80086f4 <updateConnectedDeviceID+0x110>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a42      	ldr	r2, [pc, #264]	; (80086f8 <updateConnectedDeviceID+0x114>)
 80085f0:	6812      	ldr	r2, [r2, #0]
 80085f2:	4611      	mov	r1, r2
 80085f4:	4618      	mov	r0, r3
 80085f6:	f00a f867 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 80085fa:	4b3e      	ldr	r3, [pc, #248]	; (80086f4 <updateConnectedDeviceID+0x110>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a3f      	ldr	r2, [pc, #252]	; (80086fc <updateConnectedDeviceID+0x118>)
 8008600:	6811      	ldr	r1, [r2, #0]
 8008602:	2201      	movs	r2, #1
 8008604:	4618      	mov	r0, r3
 8008606:	f00a f835 	bl	8012674 <rxr>
	uint8_t btdeviceAdress[30];
	uint8_t* btConnections = (uint8_t*)strtok((char*)rx_buf,"\r\n");
 800860a:	493d      	ldr	r1, [pc, #244]	; (8008700 <updateConnectedDeviceID+0x11c>)
 800860c:	483d      	ldr	r0, [pc, #244]	; (8008704 <updateConnectedDeviceID+0x120>)
 800860e:	f00a fb99 	bl	8012d44 <strtok>
 8008612:	6278      	str	r0, [r7, #36]	; 0x24
	while(btConnections != NULL){
 8008614:	e066      	b.n	80086e4 <updateConnectedDeviceID+0x100>
		if(strstr((char*)btConnections,"SPP") != NULL){
 8008616:	493c      	ldr	r1, [pc, #240]	; (8008708 <updateConnectedDeviceID+0x124>)
 8008618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800861a:	f00a fb7b 	bl	8012d14 <strstr>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d05a      	beq.n	80086da <updateConnectedDeviceID+0xf6>
			strtok((char*)btConnections," ");
 8008624:	4939      	ldr	r1, [pc, #228]	; (800870c <updateConnectedDeviceID+0x128>)
 8008626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008628:	f00a fb8c 	bl	8012d44 <strtok>
			strcpy((char*)CDID,strtok(NULL,","));
 800862c:	4938      	ldr	r1, [pc, #224]	; (8008710 <updateConnectedDeviceID+0x12c>)
 800862e:	2000      	movs	r0, #0
 8008630:	f00a fb88 	bl	8012d44 <strtok>
 8008634:	4603      	mov	r3, r0
 8008636:	4619      	mov	r1, r3
 8008638:	4836      	ldr	r0, [pc, #216]	; (8008714 <updateConnectedDeviceID+0x130>)
 800863a:	f00a fb52 	bl	8012ce2 <strcpy>
			strtok(NULL,"\",");
 800863e:	4936      	ldr	r1, [pc, #216]	; (8008718 <updateConnectedDeviceID+0x134>)
 8008640:	2000      	movs	r0, #0
 8008642:	f00a fb7f 	bl	8012d44 <strtok>
			strcpy((char*)btdeviceAdress,strtok(NULL,","));
 8008646:	4932      	ldr	r1, [pc, #200]	; (8008710 <updateConnectedDeviceID+0x12c>)
 8008648:	2000      	movs	r0, #0
 800864a:	f00a fb7b 	bl	8012d44 <strtok>
 800864e:	4602      	mov	r2, r0
 8008650:	1d3b      	adds	r3, r7, #4
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f00a fb44 	bl	8012ce2 <strcpy>
			txr(uartModem, BL6);
 800865a:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <updateConnectedDeviceID+0x110>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a26      	ldr	r2, [pc, #152]	; (80086f8 <updateConnectedDeviceID+0x114>)
 8008660:	6812      	ldr	r2, [r2, #0]
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f00a f82f 	bl	80126c8 <txr>
			rxr(uartModem, SIMR, 1);
 800866a:	4b22      	ldr	r3, [pc, #136]	; (80086f4 <updateConnectedDeviceID+0x110>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a23      	ldr	r2, [pc, #140]	; (80086fc <updateConnectedDeviceID+0x118>)
 8008670:	6811      	ldr	r1, [r2, #0]
 8008672:	2201      	movs	r2, #1
 8008674:	4618      	mov	r0, r3
 8008676:	f009 fffd 	bl	8012674 <rxr>
			btConnections = (uint8_t*)strtok((char*)rx_buf,"\r\n");
 800867a:	4921      	ldr	r1, [pc, #132]	; (8008700 <updateConnectedDeviceID+0x11c>)
 800867c:	4821      	ldr	r0, [pc, #132]	; (8008704 <updateConnectedDeviceID+0x120>)
 800867e:	f00a fb61 	bl	8012d44 <strtok>
 8008682:	6278      	str	r0, [r7, #36]	; 0x24
			while(btConnections != NULL){
 8008684:	e026      	b.n	80086d4 <updateConnectedDeviceID+0xf0>
				if(strstr((char*)btConnections,(char*)btdeviceAdress) !=  NULL && strstr((char*)btConnections,"P: ") !=  NULL){
 8008686:	1d3b      	adds	r3, r7, #4
 8008688:	4619      	mov	r1, r3
 800868a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800868c:	f00a fb42 	bl	8012d14 <strstr>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d019      	beq.n	80086ca <updateConnectedDeviceID+0xe6>
 8008696:	4921      	ldr	r1, [pc, #132]	; (800871c <updateConnectedDeviceID+0x138>)
 8008698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800869a:	f00a fb3b 	bl	8012d14 <strstr>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d012      	beq.n	80086ca <updateConnectedDeviceID+0xe6>
					strtok((char*)btConnections," ");
 80086a4:	4919      	ldr	r1, [pc, #100]	; (800870c <updateConnectedDeviceID+0x128>)
 80086a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086a8:	f00a fb4c 	bl	8012d44 <strtok>
					strcpy((char*)PDID,strtok(NULL,","));
 80086ac:	4918      	ldr	r1, [pc, #96]	; (8008710 <updateConnectedDeviceID+0x12c>)
 80086ae:	2000      	movs	r0, #0
 80086b0:	f00a fb48 	bl	8012d44 <strtok>
 80086b4:	4603      	mov	r3, r0
 80086b6:	4619      	mov	r1, r3
 80086b8:	4819      	ldr	r0, [pc, #100]	; (8008720 <updateConnectedDeviceID+0x13c>)
 80086ba:	f00a fb12 	bl	8012ce2 <strcpy>
					strtok(NULL,"\",");
 80086be:	4916      	ldr	r1, [pc, #88]	; (8008718 <updateConnectedDeviceID+0x134>)
 80086c0:	2000      	movs	r0, #0
 80086c2:	f00a fb3f 	bl	8012d44 <strtok>
					return 1;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e010      	b.n	80086ec <updateConnectedDeviceID+0x108>
				}
				btConnections = (uint8_t*)strtok(NULL,"\r\n");
 80086ca:	490d      	ldr	r1, [pc, #52]	; (8008700 <updateConnectedDeviceID+0x11c>)
 80086cc:	2000      	movs	r0, #0
 80086ce:	f00a fb39 	bl	8012d44 <strtok>
 80086d2:	6278      	str	r0, [r7, #36]	; 0x24
			while(btConnections != NULL){
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1d5      	bne.n	8008686 <updateConnectedDeviceID+0xa2>
			}
		}
		btConnections = (uint8_t*)strtok(NULL,"\r\n");
 80086da:	4909      	ldr	r1, [pc, #36]	; (8008700 <updateConnectedDeviceID+0x11c>)
 80086dc:	2000      	movs	r0, #0
 80086de:	f00a fb31 	bl	8012d44 <strtok>
 80086e2:	6278      	str	r0, [r7, #36]	; 0x24
	while(btConnections != NULL){
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d195      	bne.n	8008616 <updateConnectedDeviceID+0x32>
	}
	return 0;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3728      	adds	r7, #40	; 0x28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20004d5c 	.word	0x20004d5c
 80086f8:	20000050 	.word	0x20000050
 80086fc:	20000118 	.word	0x20000118
 8008700:	08014b88 	.word	0x08014b88
 8008704:	20004588 	.word	0x20004588
 8008708:	08014dd0 	.word	0x08014dd0
 800870c:	08014dd4 	.word	0x08014dd4
 8008710:	08014ca8 	.word	0x08014ca8
 8008714:	20003ed8 	.word	0x20003ed8
 8008718:	08014dd8 	.word	0x08014dd8
 800871c:	08014ddc 	.word	0x08014ddc
 8008720:	20003fa8 	.word	0x20003fa8

08008724 <getBTRSII>:

void getBTRSII(){
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
	updateConnectedDeviceID();
 8008728:	f7ff ff5c 	bl	80085e4 <updateConnectedDeviceID>
	txr(uartModem, (uint8_t*)"AT+BTRSSI=");
 800872c:	4b15      	ldr	r3, [pc, #84]	; (8008784 <getBTRSII+0x60>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4915      	ldr	r1, [pc, #84]	; (8008788 <getBTRSII+0x64>)
 8008732:	4618      	mov	r0, r3
 8008734:	f009 ffc8 	bl	80126c8 <txr>
	txr(uartModem, CDID);
 8008738:	4b12      	ldr	r3, [pc, #72]	; (8008784 <getBTRSII+0x60>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4913      	ldr	r1, [pc, #76]	; (800878c <getBTRSII+0x68>)
 800873e:	4618      	mov	r0, r3
 8008740:	f009 ffc2 	bl	80126c8 <txr>
	txr(uartModem, SIMN);
 8008744:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <getBTRSII+0x60>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a11      	ldr	r2, [pc, #68]	; (8008790 <getBTRSII+0x6c>)
 800874a:	6812      	ldr	r2, [r2, #0]
 800874c:	4611      	mov	r1, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f009 ffba 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 2);
 8008754:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <getBTRSII+0x60>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a0e      	ldr	r2, [pc, #56]	; (8008794 <getBTRSII+0x70>)
 800875a:	6811      	ldr	r1, [r2, #0]
 800875c:	2202      	movs	r2, #2
 800875e:	4618      	mov	r0, r3
 8008760:	f009 feee 	bl	8012540 <rx>
	strtok((char*)rx_buf," ");
 8008764:	490c      	ldr	r1, [pc, #48]	; (8008798 <getBTRSII+0x74>)
 8008766:	480d      	ldr	r0, [pc, #52]	; (800879c <getBTRSII+0x78>)
 8008768:	f00a faec 	bl	8012d44 <strtok>
	strcpy((char*)BTRSSI,strtok(NULL,"\r\n"));
 800876c:	490c      	ldr	r1, [pc, #48]	; (80087a0 <getBTRSII+0x7c>)
 800876e:	2000      	movs	r0, #0
 8008770:	f00a fae8 	bl	8012d44 <strtok>
 8008774:	4603      	mov	r3, r0
 8008776:	4619      	mov	r1, r3
 8008778:	480a      	ldr	r0, [pc, #40]	; (80087a4 <getBTRSII+0x80>)
 800877a:	f00a fab2 	bl	8012ce2 <strcpy>
}
 800877e:	bf00      	nop
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20004d5c 	.word	0x20004d5c
 8008788:	08014de0 	.word	0x08014de0
 800878c:	20003ed8 	.word	0x20003ed8
 8008790:	20000134 	.word	0x20000134
 8008794:	20000118 	.word	0x20000118
 8008798:	08014dd4 	.word	0x08014dd4
 800879c:	20004588 	.word	0x20004588
 80087a0:	08014b88 	.word	0x08014b88
 80087a4:	200004a0 	.word	0x200004a0

080087a8 <call>:

void call(uint8_t* num){
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
	txr(uartModem, (uint8_t*)"ATD");
 80087b0:	4b16      	ldr	r3, [pc, #88]	; (800880c <call+0x64>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4916      	ldr	r1, [pc, #88]	; (8008810 <call+0x68>)
 80087b6:	4618      	mov	r0, r3
 80087b8:	f009 ff86 	bl	80126c8 <txr>
	txr(uartModem, num);
 80087bc:	4b13      	ldr	r3, [pc, #76]	; (800880c <call+0x64>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f009 ff80 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)";");
 80087c8:	4b10      	ldr	r3, [pc, #64]	; (800880c <call+0x64>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4911      	ldr	r1, [pc, #68]	; (8008814 <call+0x6c>)
 80087ce:	4618      	mov	r0, r3
 80087d0:	f009 ff7a 	bl	80126c8 <txr>
	txr(uartModem, SIMN);
 80087d4:	4b0d      	ldr	r3, [pc, #52]	; (800880c <call+0x64>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a0f      	ldr	r2, [pc, #60]	; (8008818 <call+0x70>)
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f009 ff72 	bl	80126c8 <txr>
	rx(uartModem, SIMR, 5);
 80087e4:	4b09      	ldr	r3, [pc, #36]	; (800880c <call+0x64>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a0c      	ldr	r2, [pc, #48]	; (800881c <call+0x74>)
 80087ea:	6811      	ldr	r1, [r2, #0]
 80087ec:	2205      	movs	r2, #5
 80087ee:	4618      	mov	r0, r3
 80087f0:	f009 fea6 	bl	8012540 <rx>
	rx(uartModem, SIMN, 20);
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <call+0x64>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a07      	ldr	r2, [pc, #28]	; (8008818 <call+0x70>)
 80087fa:	6811      	ldr	r1, [r2, #0]
 80087fc:	2214      	movs	r2, #20
 80087fe:	4618      	mov	r0, r3
 8008800:	f009 fe9e 	bl	8012540 <rx>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20004d5c 	.word	0x20004d5c
 8008810:	08014dec 	.word	0x08014dec
 8008814:	08014df0 	.word	0x08014df0
 8008818:	20000134 	.word	0x20000134
 800881c:	20000118 	.word	0x20000118

08008820 <getTime>:

#include "clock.h"
#include "uart.h"
#include <stdio.h>

void getTime(){
 8008820:	b5b0      	push	{r4, r5, r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af04      	add	r7, sp, #16
	HAL_RTC_GetTime(rtc, &t, RTC_FORMAT_BIN);
 8008826:	4b16      	ldr	r3, [pc, #88]	; (8008880 <getTime+0x60>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	4915      	ldr	r1, [pc, #84]	; (8008884 <getTime+0x64>)
 800882e:	4618      	mov	r0, r3
 8008830:	f006 fb21 	bl	800ee76 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(rtc, &d, RTC_FORMAT_BIN);
 8008834:	4b12      	ldr	r3, [pc, #72]	; (8008880 <getTime+0x60>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2200      	movs	r2, #0
 800883a:	4913      	ldr	r1, [pc, #76]	; (8008888 <getTime+0x68>)
 800883c:	4618      	mov	r0, r3
 800883e:	f006 fc15 	bl	800f06c <HAL_RTC_GetDate>
	sprintf((char*)TIME, "%d/%02d/%02d,%02d:%02d:%02d+00", d.Year,d.Month,d.Date,t.Hours,t.Minutes,t.Seconds);
 8008842:	4b11      	ldr	r3, [pc, #68]	; (8008888 <getTime+0x68>)
 8008844:	78db      	ldrb	r3, [r3, #3]
 8008846:	461c      	mov	r4, r3
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <getTime+0x68>)
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	461d      	mov	r5, r3
 800884e:	4b0e      	ldr	r3, [pc, #56]	; (8008888 <getTime+0x68>)
 8008850:	789b      	ldrb	r3, [r3, #2]
 8008852:	461a      	mov	r2, r3
 8008854:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <getTime+0x64>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	4619      	mov	r1, r3
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <getTime+0x64>)
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	4618      	mov	r0, r3
 8008860:	4b08      	ldr	r3, [pc, #32]	; (8008884 <getTime+0x64>)
 8008862:	789b      	ldrb	r3, [r3, #2]
 8008864:	9303      	str	r3, [sp, #12]
 8008866:	9002      	str	r0, [sp, #8]
 8008868:	9101      	str	r1, [sp, #4]
 800886a:	9200      	str	r2, [sp, #0]
 800886c:	462b      	mov	r3, r5
 800886e:	4622      	mov	r2, r4
 8008870:	4906      	ldr	r1, [pc, #24]	; (800888c <getTime+0x6c>)
 8008872:	4807      	ldr	r0, [pc, #28]	; (8008890 <getTime+0x70>)
 8008874:	f00a f98a 	bl	8012b8c <siprintf>
}
 8008878:	bf00      	nop
 800887a:	46bd      	mov	sp, r7
 800887c:	bdb0      	pop	{r4, r5, r7, pc}
 800887e:	bf00      	nop
 8008880:	20004584 	.word	0x20004584
 8008884:	20000254 	.word	0x20000254
 8008888:	200040dc 	.word	0x200040dc
 800888c:	08014df4 	.word	0x08014df4
 8008890:	20000268 	.word	0x20000268

08008894 <setTime>:
void setTime(){
 8008894:	b580      	push	{r7, lr}
 8008896:	b08a      	sub	sp, #40	; 0x28
 8008898:	af04      	add	r7, sp, #16
	//21/06/28,20:04:21+00
	int a1,a2,a3,a4,a5,a6;
	sscanf((char*)TIME,"%d/%d/%d,%d:%d:%d",&a1,&a2,&a3,&a4,&a5,&a6);
 800889a:	f107 0110 	add.w	r1, r7, #16
 800889e:	f107 0214 	add.w	r2, r7, #20
 80088a2:	463b      	mov	r3, r7
 80088a4:	9303      	str	r3, [sp, #12]
 80088a6:	1d3b      	adds	r3, r7, #4
 80088a8:	9302      	str	r3, [sp, #8]
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	f107 030c 	add.w	r3, r7, #12
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	460b      	mov	r3, r1
 80088b8:	4916      	ldr	r1, [pc, #88]	; (8008914 <setTime+0x80>)
 80088ba:	4817      	ldr	r0, [pc, #92]	; (8008918 <setTime+0x84>)
 80088bc:	f00a f986 	bl	8012bcc <siscanf>
	d.Year = (uint8_t)a1;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	4b15      	ldr	r3, [pc, #84]	; (800891c <setTime+0x88>)
 80088c6:	70da      	strb	r2, [r3, #3]
	d.Month = (uint8_t)a2;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	4b13      	ldr	r3, [pc, #76]	; (800891c <setTime+0x88>)
 80088ce:	705a      	strb	r2, [r3, #1]
	d.Date = (uint8_t)a3;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <setTime+0x88>)
 80088d6:	709a      	strb	r2, [r3, #2]
	t.Hours = (uint8_t)a4;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	4b10      	ldr	r3, [pc, #64]	; (8008920 <setTime+0x8c>)
 80088de:	701a      	strb	r2, [r3, #0]
	t.Minutes = (uint8_t)a5;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	4b0e      	ldr	r3, [pc, #56]	; (8008920 <setTime+0x8c>)
 80088e6:	705a      	strb	r2, [r3, #1]
	t.Seconds = (uint8_t)a6;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <setTime+0x8c>)
 80088ee:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(rtc, &t, RTC_FORMAT_BIN);
 80088f0:	4b0c      	ldr	r3, [pc, #48]	; (8008924 <setTime+0x90>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2200      	movs	r2, #0
 80088f6:	490a      	ldr	r1, [pc, #40]	; (8008920 <setTime+0x8c>)
 80088f8:	4618      	mov	r0, r3
 80088fa:	f006 fa08 	bl	800ed0e <HAL_RTC_SetTime>
	HAL_RTC_SetDate(rtc, &d, RTC_FORMAT_BIN);
 80088fe:	4b09      	ldr	r3, [pc, #36]	; (8008924 <setTime+0x90>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	4905      	ldr	r1, [pc, #20]	; (800891c <setTime+0x88>)
 8008906:	4618      	mov	r0, r3
 8008908:	f006 fb12 	bl	800ef30 <HAL_RTC_SetDate>
}
 800890c:	bf00      	nop
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	08014e14 	.word	0x08014e14
 8008918:	20000268 	.word	0x20000268
 800891c:	200040dc 	.word	0x200040dc
 8008920:	20000254 	.word	0x20000254
 8008924:	20004584 	.word	0x20004584

08008928 <fsCreate>:
uint8_t* FSMODE = (uint8_t*)"0";
uint8_t* FSSIZE = (uint8_t*)"10240";
uint8_t* FSPOSITION = (uint8_t*)"0";
uint8_t* FSINPUTTIME = (uint8_t*)"10";

void fsCreate(uint8_t* path){
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
	txr(uartModem, (uint8_t*)"AT+FSCREATE=");
 8008930:	4b0e      	ldr	r3, [pc, #56]	; (800896c <fsCreate+0x44>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	490e      	ldr	r1, [pc, #56]	; (8008970 <fsCreate+0x48>)
 8008936:	4618      	mov	r0, r3
 8008938:	f009 fec6 	bl	80126c8 <txr>
	txr(uartModem, path);
 800893c:	4b0b      	ldr	r3, [pc, #44]	; (800896c <fsCreate+0x44>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4618      	mov	r0, r3
 8008944:	f009 fec0 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"\r\n");
 8008948:	4b08      	ldr	r3, [pc, #32]	; (800896c <fsCreate+0x44>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4909      	ldr	r1, [pc, #36]	; (8008974 <fsCreate+0x4c>)
 800894e:	4618      	mov	r0, r3
 8008950:	f009 feba 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 5);
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <fsCreate+0x44>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a07      	ldr	r2, [pc, #28]	; (8008978 <fsCreate+0x50>)
 800895a:	6811      	ldr	r1, [r2, #0]
 800895c:	2205      	movs	r2, #5
 800895e:	4618      	mov	r0, r3
 8008960:	f009 fe88 	bl	8012674 <rxr>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20004d5c 	.word	0x20004d5c
 8008970:	08014e2c 	.word	0x08014e2c
 8008974:	08014e64 	.word	0x08014e64
 8008978:	20000118 	.word	0x20000118

0800897c <fsRead>:
int fsRead(uint8_t* path){
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	int fp = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	61fb      	str	r3, [r7, #28]
	uint8_t fp_p[10];
	uint8_t* rxb_p;
	itoa(fp,(char*)fp_p,10);
 8008988:	f107 030c 	add.w	r3, r7, #12
 800898c:	220a      	movs	r2, #10
 800898e:	4619      	mov	r1, r3
 8008990:	69f8      	ldr	r0, [r7, #28]
 8008992:	f00a f8e3 	bl	8012b5c <itoa>
	strcpy((char*)fs_buf,"");
 8008996:	4b40      	ldr	r3, [pc, #256]	; (8008a98 <fsRead+0x11c>)
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
	txr(uartModem, (uint8_t*)"AT+FSREAD=");
 800899c:	4b3f      	ldr	r3, [pc, #252]	; (8008a9c <fsRead+0x120>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	493f      	ldr	r1, [pc, #252]	; (8008aa0 <fsRead+0x124>)
 80089a2:	4618      	mov	r0, r3
 80089a4:	f009 fe90 	bl	80126c8 <txr>
	txr(uartModem, path);
 80089a8:	4b3c      	ldr	r3, [pc, #240]	; (8008a9c <fsRead+0x120>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f009 fe8a 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)",1,50,");
 80089b4:	4b39      	ldr	r3, [pc, #228]	; (8008a9c <fsRead+0x120>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	493a      	ldr	r1, [pc, #232]	; (8008aa4 <fsRead+0x128>)
 80089ba:	4618      	mov	r0, r3
 80089bc:	f009 fe84 	bl	80126c8 <txr>
	txr(uartModem, fp_p);
 80089c0:	4b36      	ldr	r3, [pc, #216]	; (8008a9c <fsRead+0x120>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f107 020c 	add.w	r2, r7, #12
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f009 fe7c 	bl	80126c8 <txr>
	txr(uartModem, SIMN);
 80089d0:	4b32      	ldr	r3, [pc, #200]	; (8008a9c <fsRead+0x120>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a34      	ldr	r2, [pc, #208]	; (8008aa8 <fsRead+0x12c>)
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f009 fe74 	bl	80126c8 <txr>
	if(rx(uartModem, SIMR, 1) == UART_TIMEOUT){
 80089e0:	4b2e      	ldr	r3, [pc, #184]	; (8008a9c <fsRead+0x120>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a31      	ldr	r2, [pc, #196]	; (8008aac <fsRead+0x130>)
 80089e6:	6811      	ldr	r1, [r2, #0]
 80089e8:	2201      	movs	r2, #1
 80089ea:	4618      	mov	r0, r3
 80089ec:	f009 fda8 	bl	8012540 <rx>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b33      	cmp	r3, #51	; 0x33
 80089f4:	d144      	bne.n	8008a80 <fsRead+0x104>
		return 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	e04a      	b.n	8008a90 <fsRead+0x114>
	}
	while(strstr((char*)rx_buf,"ERROR") == NULL){
		rxb_p = &rx_buf[2];
 80089fa:	4b2d      	ldr	r3, [pc, #180]	; (8008ab0 <fsRead+0x134>)
 80089fc:	61bb      	str	r3, [r7, #24]
		rxb_p[strlen((char*)rxb_p)-6]='\0';
 80089fe:	69b8      	ldr	r0, [r7, #24]
 8008a00:	f7fc fbc6 	bl	8005190 <strlen>
 8008a04:	4603      	mov	r3, r0
 8008a06:	3b06      	subs	r3, #6
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	701a      	strb	r2, [r3, #0]
		strcat((char*)fs_buf,(char*)rxb_p);
 8008a10:	69b9      	ldr	r1, [r7, #24]
 8008a12:	4821      	ldr	r0, [pc, #132]	; (8008a98 <fsRead+0x11c>)
 8008a14:	f00a f949 	bl	8012caa <strcat>
		fp+=50;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	3332      	adds	r3, #50	; 0x32
 8008a1c:	61fb      	str	r3, [r7, #28]
		itoa(fp,(char*)fp_p,10);
 8008a1e:	f107 030c 	add.w	r3, r7, #12
 8008a22:	220a      	movs	r2, #10
 8008a24:	4619      	mov	r1, r3
 8008a26:	69f8      	ldr	r0, [r7, #28]
 8008a28:	f00a f898 	bl	8012b5c <itoa>
		txr(uartModem, (uint8_t*)"AT+FSREAD=");
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <fsRead+0x120>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	491b      	ldr	r1, [pc, #108]	; (8008aa0 <fsRead+0x124>)
 8008a32:	4618      	mov	r0, r3
 8008a34:	f009 fe48 	bl	80126c8 <txr>
		txr(uartModem, path);
 8008a38:	4b18      	ldr	r3, [pc, #96]	; (8008a9c <fsRead+0x120>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f009 fe42 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)",1,50,");
 8008a44:	4b15      	ldr	r3, [pc, #84]	; (8008a9c <fsRead+0x120>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4916      	ldr	r1, [pc, #88]	; (8008aa4 <fsRead+0x128>)
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f009 fe3c 	bl	80126c8 <txr>
		txr(uartModem, fp_p);
 8008a50:	4b12      	ldr	r3, [pc, #72]	; (8008a9c <fsRead+0x120>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f107 020c 	add.w	r2, r7, #12
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f009 fe34 	bl	80126c8 <txr>
		txr(uartModem, SIMN);
 8008a60:	4b0e      	ldr	r3, [pc, #56]	; (8008a9c <fsRead+0x120>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a10      	ldr	r2, [pc, #64]	; (8008aa8 <fsRead+0x12c>)
 8008a66:	6812      	ldr	r2, [r2, #0]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f009 fe2c 	bl	80126c8 <txr>
		rx(uartModem, SIMR, 1);
 8008a70:	4b0a      	ldr	r3, [pc, #40]	; (8008a9c <fsRead+0x120>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a0d      	ldr	r2, [pc, #52]	; (8008aac <fsRead+0x130>)
 8008a76:	6811      	ldr	r1, [r2, #0]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f009 fd60 	bl	8012540 <rx>
	while(strstr((char*)rx_buf,"ERROR") == NULL){
 8008a80:	490c      	ldr	r1, [pc, #48]	; (8008ab4 <fsRead+0x138>)
 8008a82:	480d      	ldr	r0, [pc, #52]	; (8008ab8 <fsRead+0x13c>)
 8008a84:	f00a f946 	bl	8012d14 <strstr>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0b5      	beq.n	80089fa <fsRead+0x7e>
	}
	return 1;
 8008a8e:	2301      	movs	r3, #1
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3720      	adds	r7, #32
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	200015e8 	.word	0x200015e8
 8008a9c:	20004d5c 	.word	0x20004d5c
 8008aa0:	08014e3c 	.word	0x08014e3c
 8008aa4:	08014e68 	.word	0x08014e68
 8008aa8:	20000134 	.word	0x20000134
 8008aac:	20000118 	.word	0x20000118
 8008ab0:	2000458a 	.word	0x2000458a
 8008ab4:	08014e70 	.word	0x08014e70
 8008ab8:	20004588 	.word	0x20004588

08008abc <fsWrite>:
void fsWrite(uint8_t* path){
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
	fsCreate(path);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff ff2f 	bl	8008928 <fsCreate>
	uint8_t fileSizeBuf[5];
	itoa(strlen((char*)fs_buf),(char*)fileSizeBuf,10);
 8008aca:	4835      	ldr	r0, [pc, #212]	; (8008ba0 <fsWrite+0xe4>)
 8008acc:	f7fc fb60 	bl	8005190 <strlen>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f107 0308 	add.w	r3, r7, #8
 8008ad8:	220a      	movs	r2, #10
 8008ada:	4619      	mov	r1, r3
 8008adc:	f00a f83e 	bl	8012b5c <itoa>
	txr(uartModem, FS3);
 8008ae0:	4b30      	ldr	r3, [pc, #192]	; (8008ba4 <fsWrite+0xe8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a30      	ldr	r2, [pc, #192]	; (8008ba8 <fsWrite+0xec>)
 8008ae6:	6812      	ldr	r2, [r2, #0]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f009 fdec 	bl	80126c8 <txr>
	txr(uartModem, path);
 8008af0:	4b2c      	ldr	r3, [pc, #176]	; (8008ba4 <fsWrite+0xe8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f009 fde6 	bl	80126c8 <txr>
	txr(uartModem, SIMV);
 8008afc:	4b29      	ldr	r3, [pc, #164]	; (8008ba4 <fsWrite+0xe8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a2a      	ldr	r2, [pc, #168]	; (8008bac <fsWrite+0xf0>)
 8008b02:	6812      	ldr	r2, [r2, #0]
 8008b04:	4611      	mov	r1, r2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f009 fdde 	bl	80126c8 <txr>
	txr(uartModem, FSMODE);
 8008b0c:	4b25      	ldr	r3, [pc, #148]	; (8008ba4 <fsWrite+0xe8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a27      	ldr	r2, [pc, #156]	; (8008bb0 <fsWrite+0xf4>)
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	4611      	mov	r1, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f009 fdd6 	bl	80126c8 <txr>
	txr(uartModem, SIMV);
 8008b1c:	4b21      	ldr	r3, [pc, #132]	; (8008ba4 <fsWrite+0xe8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a22      	ldr	r2, [pc, #136]	; (8008bac <fsWrite+0xf0>)
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f009 fdce 	bl	80126c8 <txr>
	txr(uartModem, fileSizeBuf);
 8008b2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <fsWrite+0xe8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f107 0208 	add.w	r2, r7, #8
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f009 fdc6 	bl	80126c8 <txr>
	txr(uartModem, SIMV);
 8008b3c:	4b19      	ldr	r3, [pc, #100]	; (8008ba4 <fsWrite+0xe8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a1a      	ldr	r2, [pc, #104]	; (8008bac <fsWrite+0xf0>)
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f009 fdbe 	bl	80126c8 <txr>
	txr(uartModem, FSINPUTTIME);
 8008b4c:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <fsWrite+0xe8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a18      	ldr	r2, [pc, #96]	; (8008bb4 <fsWrite+0xf8>)
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f009 fdb6 	bl	80126c8 <txr>
	txr(uartModem, SIMN);
 8008b5c:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <fsWrite+0xe8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <fsWrite+0xfc>)
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	4611      	mov	r1, r2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f009 fdae 	bl	80126c8 <txr>
	rxr(uartModem, FSN, 5);
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <fsWrite+0xe8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a12      	ldr	r2, [pc, #72]	; (8008bbc <fsWrite+0x100>)
 8008b72:	6811      	ldr	r1, [r2, #0]
 8008b74:	2205      	movs	r2, #5
 8008b76:	4618      	mov	r0, r3
 8008b78:	f009 fd7c 	bl	8012674 <rxr>
	tx(uartModem, fs_buf);
 8008b7c:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <fsWrite+0xe8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <fsWrite+0xe4>)
 8008b82:	4618      	mov	r0, r3
 8008b84:	f009 fcaa 	bl	80124dc <tx>
	rxr(uartModem, SIMR, 5);
 8008b88:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <fsWrite+0xe8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a0c      	ldr	r2, [pc, #48]	; (8008bc0 <fsWrite+0x104>)
 8008b8e:	6811      	ldr	r1, [r2, #0]
 8008b90:	2205      	movs	r2, #5
 8008b92:	4618      	mov	r0, r3
 8008b94:	f009 fd6e 	bl	8012674 <rxr>
}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	200015e8 	.word	0x200015e8
 8008ba4:	20004d5c 	.word	0x20004d5c
 8008ba8:	20000060 	.word	0x20000060
 8008bac:	20000138 	.word	0x20000138
 8008bb0:	20000064 	.word	0x20000064
 8008bb4:	20000068 	.word	0x20000068
 8008bb8:	20000134 	.word	0x20000134
 8008bbc:	2000005c 	.word	0x2000005c
 8008bc0:	20000118 	.word	0x20000118

08008bc4 <fsAdd>:
int fsAdd(uint8_t* path,uint8_t* data,int filesize){
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
	uint8_t fileSizeBuf[5];
	itoa(filesize,(char*)fileSizeBuf,10);
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	220a      	movs	r2, #10
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f009 ffbf 	bl	8012b5c <itoa>
	txr(uartModem, FS3);
 8008bde:	4b34      	ldr	r3, [pc, #208]	; (8008cb0 <fsAdd+0xec>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a34      	ldr	r2, [pc, #208]	; (8008cb4 <fsAdd+0xf0>)
 8008be4:	6812      	ldr	r2, [r2, #0]
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f009 fd6d 	bl	80126c8 <txr>
	txr(uartModem, path);
 8008bee:	4b30      	ldr	r3, [pc, #192]	; (8008cb0 <fsAdd+0xec>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68f9      	ldr	r1, [r7, #12]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f009 fd67 	bl	80126c8 <txr>
	txr(uartModem, SIMV);
 8008bfa:	4b2d      	ldr	r3, [pc, #180]	; (8008cb0 <fsAdd+0xec>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a2e      	ldr	r2, [pc, #184]	; (8008cb8 <fsAdd+0xf4>)
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	4611      	mov	r1, r2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f009 fd5f 	bl	80126c8 <txr>
	txr(uartModem, (uint8_t*)"1");
 8008c0a:	4b29      	ldr	r3, [pc, #164]	; (8008cb0 <fsAdd+0xec>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	492b      	ldr	r1, [pc, #172]	; (8008cbc <fsAdd+0xf8>)
 8008c10:	4618      	mov	r0, r3
 8008c12:	f009 fd59 	bl	80126c8 <txr>
	txr(uartModem, SIMV);
 8008c16:	4b26      	ldr	r3, [pc, #152]	; (8008cb0 <fsAdd+0xec>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a27      	ldr	r2, [pc, #156]	; (8008cb8 <fsAdd+0xf4>)
 8008c1c:	6812      	ldr	r2, [r2, #0]
 8008c1e:	4611      	mov	r1, r2
 8008c20:	4618      	mov	r0, r3
 8008c22:	f009 fd51 	bl	80126c8 <txr>
	txr(uartModem, fileSizeBuf);
 8008c26:	4b22      	ldr	r3, [pc, #136]	; (8008cb0 <fsAdd+0xec>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f107 0210 	add.w	r2, r7, #16
 8008c2e:	4611      	mov	r1, r2
 8008c30:	4618      	mov	r0, r3
 8008c32:	f009 fd49 	bl	80126c8 <txr>
	txr(uartModem, SIMV);
 8008c36:	4b1e      	ldr	r3, [pc, #120]	; (8008cb0 <fsAdd+0xec>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a1f      	ldr	r2, [pc, #124]	; (8008cb8 <fsAdd+0xf4>)
 8008c3c:	6812      	ldr	r2, [r2, #0]
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f009 fd41 	bl	80126c8 <txr>
	txr(uartModem, FSINPUTTIME);
 8008c46:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <fsAdd+0xec>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1d      	ldr	r2, [pc, #116]	; (8008cc0 <fsAdd+0xfc>)
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f009 fd39 	bl	80126c8 <txr>
	txr(uartModem, SIMN);
 8008c56:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <fsAdd+0xec>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <fsAdd+0x100>)
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f009 fd31 	bl	80126c8 <txr>
	if(rx(uartModem, FSN, 5) == UART_TIMEOUT){
 8008c66:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <fsAdd+0xec>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <fsAdd+0x104>)
 8008c6c:	6811      	ldr	r1, [r2, #0]
 8008c6e:	2205      	movs	r2, #5
 8008c70:	4618      	mov	r0, r3
 8008c72:	f009 fc65 	bl	8012540 <rx>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b33      	cmp	r3, #51	; 0x33
 8008c7a:	d101      	bne.n	8008c80 <fsAdd+0xbc>
		return 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e013      	b.n	8008ca8 <fsAdd+0xe4>
	}
	tx(uartModem, data);
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <fsAdd+0xec>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f009 fc28 	bl	80124dc <tx>
	if(rx(uartModem, SIMR, 11) == UART_TIMEOUT){
 8008c8c:	4b08      	ldr	r3, [pc, #32]	; (8008cb0 <fsAdd+0xec>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a0e      	ldr	r2, [pc, #56]	; (8008ccc <fsAdd+0x108>)
 8008c92:	6811      	ldr	r1, [r2, #0]
 8008c94:	220b      	movs	r2, #11
 8008c96:	4618      	mov	r0, r3
 8008c98:	f009 fc52 	bl	8012540 <rx>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b33      	cmp	r3, #51	; 0x33
 8008ca0:	d101      	bne.n	8008ca6 <fsAdd+0xe2>
		return 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <fsAdd+0xe4>
	}
	return 1;
 8008ca6:	2301      	movs	r3, #1
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20004d5c 	.word	0x20004d5c
 8008cb4:	20000060 	.word	0x20000060
 8008cb8:	20000138 	.word	0x20000138
 8008cbc:	08014e78 	.word	0x08014e78
 8008cc0:	20000068 	.word	0x20000068
 8008cc4:	20000134 	.word	0x20000134
 8008cc8:	2000005c 	.word	0x2000005c
 8008ccc:	20000118 	.word	0x20000118

08008cd0 <__NVIC_SystemReset>:
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008cd4:	f3bf 8f4f 	dsb	sy
}
 8008cd8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008cda:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <__NVIC_SystemReset+0x24>)
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008ce2:	4904      	ldr	r1, [pc, #16]	; (8008cf4 <__NVIC_SystemReset+0x24>)
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <__NVIC_SystemReset+0x28>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008cea:	f3bf 8f4f 	dsb	sy
}
 8008cee:	bf00      	nop
    __NOP();
 8008cf0:	bf00      	nop
 8008cf2:	e7fd      	b.n	8008cf0 <__NVIC_SystemReset+0x20>
 8008cf4:	e000ed00 	.word	0xe000ed00
 8008cf8:	05fa0004 	.word	0x05fa0004

08008cfc <ftpList>:
uint8_t* FTP11 = (uint8_t*)"AT+FTPGETNAME=\"";
uint8_t* FTP13 = (uint8_t*)"AT+FTPGETTOFS=1,\"config.txt\",3,59\r\n";
uint8_t* FTP14 = (uint8_t*)"AT+FTPGETTOFS=1,\"table.txt\",5,59\r\n";
uint8_t* FTP15 = (uint8_t*)"AT+FTPGETTOFS=1,\"firmware.hex\",30,59\r\n";

int ftpList(){
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
	if(CONNECTION == CONNECTED){
 8008d00:	4b4b      	ldr	r3, [pc, #300]	; (8008e30 <ftpList+0x134>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b38      	cmp	r3, #56	; 0x38
 8008d06:	f040 8090 	bne.w	8008e2a <ftpList+0x12e>
		txr(uartModem, FTP8);
 8008d0a:	4b4a      	ldr	r3, [pc, #296]	; (8008e34 <ftpList+0x138>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a4a      	ldr	r2, [pc, #296]	; (8008e38 <ftpList+0x13c>)
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	4611      	mov	r1, r2
 8008d14:	4618      	mov	r0, r3
 8008d16:	f009 fcd7 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"/SSS2/");
 8008d1a:	4b46      	ldr	r3, [pc, #280]	; (8008e34 <ftpList+0x138>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4947      	ldr	r1, [pc, #284]	; (8008e3c <ftpList+0x140>)
 8008d20:	4618      	mov	r0, r3
 8008d22:	f009 fcd1 	bl	80126c8 <txr>
		txr(uartModem, IMEI);
 8008d26:	4b43      	ldr	r3, [pc, #268]	; (8008e34 <ftpList+0x138>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4945      	ldr	r1, [pc, #276]	; (8008e40 <ftpList+0x144>)
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f009 fccb 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"/\"\r\n");
 8008d32:	4b40      	ldr	r3, [pc, #256]	; (8008e34 <ftpList+0x138>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4943      	ldr	r1, [pc, #268]	; (8008e44 <ftpList+0x148>)
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f009 fcc5 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 8008d3e:	4b3d      	ldr	r3, [pc, #244]	; (8008e34 <ftpList+0x138>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a41      	ldr	r2, [pc, #260]	; (8008e48 <ftpList+0x14c>)
 8008d44:	6811      	ldr	r1, [r2, #0]
 8008d46:	2201      	movs	r2, #1
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f009 fc93 	bl	8012674 <rxr>

		txr(uartModem, FTP7);
 8008d4e:	4b39      	ldr	r3, [pc, #228]	; (8008e34 <ftpList+0x138>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a3e      	ldr	r2, [pc, #248]	; (8008e4c <ftpList+0x150>)
 8008d54:	6812      	ldr	r2, [r2, #0]
 8008d56:	4611      	mov	r1, r2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f009 fcb5 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 8008d5e:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <ftpList+0x138>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a39      	ldr	r2, [pc, #228]	; (8008e48 <ftpList+0x14c>)
 8008d64:	6811      	ldr	r1, [r2, #0]
 8008d66:	2201      	movs	r2, #1
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f009 fc83 	bl	8012674 <rxr>

		txr(uartModem, FTP9);
 8008d6e:	4b31      	ldr	r3, [pc, #196]	; (8008e34 <ftpList+0x138>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a37      	ldr	r2, [pc, #220]	; (8008e50 <ftpList+0x154>)
 8008d74:	6812      	ldr	r2, [r2, #0]
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f009 fca5 	bl	80126c8 <txr>
		if(rx(uartModem, FTPR1, 50)==UART_TIMEOUT){
 8008d7e:	4b2d      	ldr	r3, [pc, #180]	; (8008e34 <ftpList+0x138>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a34      	ldr	r2, [pc, #208]	; (8008e54 <ftpList+0x158>)
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	2232      	movs	r2, #50	; 0x32
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f009 fbd9 	bl	8012540 <rx>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b33      	cmp	r3, #51	; 0x33
 8008d92:	d101      	bne.n	8008d98 <ftpList+0x9c>
			return 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	e049      	b.n	8008e2c <ftpList+0x130>
		}
		HAL_Delay(1000);
 8008d98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d9c:	f003 fc6a 	bl	800c674 <HAL_Delay>
		txr(uartModem, FTP10);
 8008da0:	4b24      	ldr	r3, [pc, #144]	; (8008e34 <ftpList+0x138>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a2c      	ldr	r2, [pc, #176]	; (8008e58 <ftpList+0x15c>)
 8008da6:	6812      	ldr	r2, [r2, #0]
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f009 fc8c 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 5);
 8008db0:	4b20      	ldr	r3, [pc, #128]	; (8008e34 <ftpList+0x138>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a24      	ldr	r2, [pc, #144]	; (8008e48 <ftpList+0x14c>)
 8008db6:	6811      	ldr	r1, [r2, #0]
 8008db8:	2205      	movs	r2, #5
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f009 fc5a 	bl	8012674 <rxr>
		strcpy((char*)fs_buf,(char*)rx_buf);
 8008dc0:	4926      	ldr	r1, [pc, #152]	; (8008e5c <ftpList+0x160>)
 8008dc2:	4827      	ldr	r0, [pc, #156]	; (8008e60 <ftpList+0x164>)
 8008dc4:	f009 ff8d 	bl	8012ce2 <strcpy>
		rx(uartModem, SIMN, 60);
 8008dc8:	4b1a      	ldr	r3, [pc, #104]	; (8008e34 <ftpList+0x138>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a25      	ldr	r2, [pc, #148]	; (8008e64 <ftpList+0x168>)
 8008dce:	6811      	ldr	r1, [r2, #0]
 8008dd0:	223c      	movs	r2, #60	; 0x3c
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f009 fbb4 	bl	8012540 <rx>
		newConfig = 0;
 8008dd8:	4b23      	ldr	r3, [pc, #140]	; (8008e68 <ftpList+0x16c>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
		newTable = 0;
 8008dde:	4b23      	ldr	r3, [pc, #140]	; (8008e6c <ftpList+0x170>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
		newFirmware = 0;
 8008de4:	4b22      	ldr	r3, [pc, #136]	; (8008e70 <ftpList+0x174>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
		//tx(uartDebug, (uint8_t*)"FTPLISTED\r\n");
		if(strstr((char*)fs_buf,"config.txt") != NULL){
 8008dea:	4922      	ldr	r1, [pc, #136]	; (8008e74 <ftpList+0x178>)
 8008dec:	481c      	ldr	r0, [pc, #112]	; (8008e60 <ftpList+0x164>)
 8008dee:	f009 ff91 	bl	8012d14 <strstr>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <ftpList+0x102>
			//tx(uartDebug, (uint8_t*)"NEW_CONFIG\r\n");
			newConfig=1;
 8008df8:	4b1b      	ldr	r3, [pc, #108]	; (8008e68 <ftpList+0x16c>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]
		}
		if(strstr((char*)fs_buf,"table.txt") != NULL){
 8008dfe:	491e      	ldr	r1, [pc, #120]	; (8008e78 <ftpList+0x17c>)
 8008e00:	4817      	ldr	r0, [pc, #92]	; (8008e60 <ftpList+0x164>)
 8008e02:	f009 ff87 	bl	8012d14 <strstr>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <ftpList+0x116>
			//tx(uartDebug, (uint8_t*)"NEW_TABLE\r\n");
			newTable = 1;
 8008e0c:	4b17      	ldr	r3, [pc, #92]	; (8008e6c <ftpList+0x170>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
		}
		if(strstr((char*)fs_buf,"firmware.hex") != NULL){
 8008e12:	491a      	ldr	r1, [pc, #104]	; (8008e7c <ftpList+0x180>)
 8008e14:	4812      	ldr	r0, [pc, #72]	; (8008e60 <ftpList+0x164>)
 8008e16:	f009 ff7d 	bl	8012d14 <strstr>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <ftpList+0x12a>
			//tx(uartDebug, (uint8_t*)"NEW_FIRMWARE\r\n");
			newFirmware = 1;
 8008e20:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <ftpList+0x174>)
 8008e22:	2201      	movs	r2, #1
 8008e24:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <ftpList+0x130>
	}
	return 0;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	2000015c 	.word	0x2000015c
 8008e34:	20004d5c 	.word	0x20004d5c
 8008e38:	20000090 	.word	0x20000090
 8008e3c:	08014fd8 	.word	0x08014fd8
 8008e40:	20003d9c 	.word	0x20003d9c
 8008e44:	08014fe0 	.word	0x08014fe0
 8008e48:	20000118 	.word	0x20000118
 8008e4c:	2000008c 	.word	0x2000008c
 8008e50:	20000094 	.word	0x20000094
 8008e54:	2000006c 	.word	0x2000006c
 8008e58:	20000098 	.word	0x20000098
 8008e5c:	20004588 	.word	0x20004588
 8008e60:	200015e8 	.word	0x200015e8
 8008e64:	20000134 	.word	0x20000134
 8008e68:	20004128 	.word	0x20004128
 8008e6c:	200004ac 	.word	0x200004ac
 8008e70:	20003fa4 	.word	0x20003fa4
 8008e74:	08014fe8 	.word	0x08014fe8
 8008e78:	08014ff4 	.word	0x08014ff4
 8008e7c:	08015000 	.word	0x08015000

08008e80 <ftpSetParam>:
void ftpSetParam(){
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
	txr(uartModem, FTP1);
 8008e84:	4b44      	ldr	r3, [pc, #272]	; (8008f98 <ftpSetParam+0x118>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a44      	ldr	r2, [pc, #272]	; (8008f9c <ftpSetParam+0x11c>)
 8008e8a:	6812      	ldr	r2, [r2, #0]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f009 fc1a 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8008e94:	4b40      	ldr	r3, [pc, #256]	; (8008f98 <ftpSetParam+0x118>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a41      	ldr	r2, [pc, #260]	; (8008fa0 <ftpSetParam+0x120>)
 8008e9a:	6811      	ldr	r1, [r2, #0]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f009 fbe8 	bl	8012674 <rxr>

	txr(uartModem, FTP2);
 8008ea4:	4b3c      	ldr	r3, [pc, #240]	; (8008f98 <ftpSetParam+0x118>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a3e      	ldr	r2, [pc, #248]	; (8008fa4 <ftpSetParam+0x124>)
 8008eaa:	6812      	ldr	r2, [r2, #0]
 8008eac:	4611      	mov	r1, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f009 fc0a 	bl	80126c8 <txr>
	txr(uartModem, FTPIP);
 8008eb4:	4b38      	ldr	r3, [pc, #224]	; (8008f98 <ftpSetParam+0x118>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	493b      	ldr	r1, [pc, #236]	; (8008fa8 <ftpSetParam+0x128>)
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f009 fc04 	bl	80126c8 <txr>
	txr(uartModem, FTP6);
 8008ec0:	4b35      	ldr	r3, [pc, #212]	; (8008f98 <ftpSetParam+0x118>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a39      	ldr	r2, [pc, #228]	; (8008fac <ftpSetParam+0x12c>)
 8008ec6:	6812      	ldr	r2, [r2, #0]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f009 fbfc 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8008ed0:	4b31      	ldr	r3, [pc, #196]	; (8008f98 <ftpSetParam+0x118>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a32      	ldr	r2, [pc, #200]	; (8008fa0 <ftpSetParam+0x120>)
 8008ed6:	6811      	ldr	r1, [r2, #0]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	4618      	mov	r0, r3
 8008edc:	f009 fbca 	bl	8012674 <rxr>

	txr(uartModem, FTP3);
 8008ee0:	4b2d      	ldr	r3, [pc, #180]	; (8008f98 <ftpSetParam+0x118>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a32      	ldr	r2, [pc, #200]	; (8008fb0 <ftpSetParam+0x130>)
 8008ee6:	6812      	ldr	r2, [r2, #0]
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f009 fbec 	bl	80126c8 <txr>
	txr(uartModem, FTPPORT);
 8008ef0:	4b29      	ldr	r3, [pc, #164]	; (8008f98 <ftpSetParam+0x118>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	492f      	ldr	r1, [pc, #188]	; (8008fb4 <ftpSetParam+0x134>)
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f009 fbe6 	bl	80126c8 <txr>
	txr(uartModem, FTP6);
 8008efc:	4b26      	ldr	r3, [pc, #152]	; (8008f98 <ftpSetParam+0x118>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a2a      	ldr	r2, [pc, #168]	; (8008fac <ftpSetParam+0x12c>)
 8008f02:	6812      	ldr	r2, [r2, #0]
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f009 fbde 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8008f0c:	4b22      	ldr	r3, [pc, #136]	; (8008f98 <ftpSetParam+0x118>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a23      	ldr	r2, [pc, #140]	; (8008fa0 <ftpSetParam+0x120>)
 8008f12:	6811      	ldr	r1, [r2, #0]
 8008f14:	2201      	movs	r2, #1
 8008f16:	4618      	mov	r0, r3
 8008f18:	f009 fbac 	bl	8012674 <rxr>

	txr(uartModem, FTP4);
 8008f1c:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <ftpSetParam+0x118>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a25      	ldr	r2, [pc, #148]	; (8008fb8 <ftpSetParam+0x138>)
 8008f22:	6812      	ldr	r2, [r2, #0]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f009 fbce 	bl	80126c8 <txr>
	txr(uartModem, FTPUSERNAME);
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <ftpSetParam+0x118>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4922      	ldr	r1, [pc, #136]	; (8008fbc <ftpSetParam+0x13c>)
 8008f32:	4618      	mov	r0, r3
 8008f34:	f009 fbc8 	bl	80126c8 <txr>
	txr(uartModem, FTP6);
 8008f38:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <ftpSetParam+0x118>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <ftpSetParam+0x12c>)
 8008f3e:	6812      	ldr	r2, [r2, #0]
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f009 fbc0 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8008f48:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <ftpSetParam+0x118>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a14      	ldr	r2, [pc, #80]	; (8008fa0 <ftpSetParam+0x120>)
 8008f4e:	6811      	ldr	r1, [r2, #0]
 8008f50:	2201      	movs	r2, #1
 8008f52:	4618      	mov	r0, r3
 8008f54:	f009 fb8e 	bl	8012674 <rxr>

	txr(uartModem, FTP5);
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <ftpSetParam+0x118>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a18      	ldr	r2, [pc, #96]	; (8008fc0 <ftpSetParam+0x140>)
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	4611      	mov	r1, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f009 fbb0 	bl	80126c8 <txr>
	txr(uartModem, FTPPASSWORD);
 8008f68:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <ftpSetParam+0x118>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4915      	ldr	r1, [pc, #84]	; (8008fc4 <ftpSetParam+0x144>)
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f009 fbaa 	bl	80126c8 <txr>
	txr(uartModem, FTP6);
 8008f74:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <ftpSetParam+0x118>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a0c      	ldr	r2, [pc, #48]	; (8008fac <ftpSetParam+0x12c>)
 8008f7a:	6812      	ldr	r2, [r2, #0]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f009 fba2 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8008f84:	4b04      	ldr	r3, [pc, #16]	; (8008f98 <ftpSetParam+0x118>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a05      	ldr	r2, [pc, #20]	; (8008fa0 <ftpSetParam+0x120>)
 8008f8a:	6811      	ldr	r1, [r2, #0]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f009 fb70 	bl	8012674 <rxr>
}
 8008f94:	bf00      	nop
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20004d5c 	.word	0x20004d5c
 8008f9c:	20000074 	.word	0x20000074
 8008fa0:	20000118 	.word	0x20000118
 8008fa4:	20000078 	.word	0x20000078
 8008fa8:	20003e00 	.word	0x20003e00
 8008fac:	20000088 	.word	0x20000088
 8008fb0:	2000007c 	.word	0x2000007c
 8008fb4:	20000450 	.word	0x20000450
 8008fb8:	20000080 	.word	0x20000080
 8008fbc:	200040b4 	.word	0x200040b4
 8008fc0:	20000084 	.word	0x20000084
 8008fc4:	200003b4 	.word	0x200003b4

08008fc8 <ftpGet>:
void ftpGet(){
 8008fc8:	b5b0      	push	{r4, r5, r7, lr}
 8008fca:	af00      	add	r7, sp, #0
	ftpList();
 8008fcc:	f7ff fe96 	bl	8008cfc <ftpList>
	if(newConfig == 1){
 8008fd0:	4b93      	ldr	r3, [pc, #588]	; (8009220 <ftpGet+0x258>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d149      	bne.n	800906c <ftpGet+0xa4>
		txr(uartModem, (uint8_t*)"AT+FTPGETNAME=\"config.txt\"\r\n");
 8008fd8:	4b92      	ldr	r3, [pc, #584]	; (8009224 <ftpGet+0x25c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4992      	ldr	r1, [pc, #584]	; (8009228 <ftpGet+0x260>)
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f009 fb72 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 8008fe4:	4b8f      	ldr	r3, [pc, #572]	; (8009224 <ftpGet+0x25c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a90      	ldr	r2, [pc, #576]	; (800922c <ftpGet+0x264>)
 8008fea:	6811      	ldr	r1, [r2, #0]
 8008fec:	2201      	movs	r2, #1
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f009 fb40 	bl	8012674 <rxr>
		txr(uartModem, FTP13);
 8008ff4:	4b8b      	ldr	r3, [pc, #556]	; (8009224 <ftpGet+0x25c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a8d      	ldr	r2, [pc, #564]	; (8009230 <ftpGet+0x268>)
 8008ffa:	6812      	ldr	r2, [r2, #0]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f009 fb62 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 8009004:	4b87      	ldr	r3, [pc, #540]	; (8009224 <ftpGet+0x25c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a88      	ldr	r2, [pc, #544]	; (800922c <ftpGet+0x264>)
 800900a:	6811      	ldr	r1, [r2, #0]
 800900c:	2201      	movs	r2, #1
 800900e:	4618      	mov	r0, r3
 8009010:	f009 fb30 	bl	8012674 <rxr>
		if(rx(uartModem, FTPR3, 300) == UART_OK){
 8009014:	4b83      	ldr	r3, [pc, #524]	; (8009224 <ftpGet+0x25c>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a86      	ldr	r2, [pc, #536]	; (8009234 <ftpGet+0x26c>)
 800901a:	6811      	ldr	r1, [r2, #0]
 800901c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009020:	4618      	mov	r0, r3
 8009022:	f009 fa8d 	bl	8012540 <rx>
 8009026:	4603      	mov	r3, r0
 8009028:	2b32      	cmp	r3, #50	; 0x32
 800902a:	d11f      	bne.n	800906c <ftpGet+0xa4>
			txr(uartModem, (uint8_t*)"AT+FTPDELE\r\n");
 800902c:	4b7d      	ldr	r3, [pc, #500]	; (8009224 <ftpGet+0x25c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4981      	ldr	r1, [pc, #516]	; (8009238 <ftpGet+0x270>)
 8009032:	4618      	mov	r0, r3
 8009034:	f009 fb48 	bl	80126c8 <txr>
			rxr(uartModem, SIMR, 1);
 8009038:	4b7a      	ldr	r3, [pc, #488]	; (8009224 <ftpGet+0x25c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a7b      	ldr	r2, [pc, #492]	; (800922c <ftpGet+0x264>)
 800903e:	6811      	ldr	r1, [r2, #0]
 8009040:	2201      	movs	r2, #1
 8009042:	4618      	mov	r0, r3
 8009044:	f009 fb16 	bl	8012674 <rxr>
			rx(uartModem, (uint8_t*)"+FTPDELE: 1,0\r\n", 30);
 8009048:	4b76      	ldr	r3, [pc, #472]	; (8009224 <ftpGet+0x25c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	221e      	movs	r2, #30
 800904e:	497b      	ldr	r1, [pc, #492]	; (800923c <ftpGet+0x274>)
 8009050:	4618      	mov	r0, r3
 8009052:	f009 fa75 	bl	8012540 <rx>
			fsRead((uint8_t*)"D:\\FTP\\config.txt");
 8009056:	487a      	ldr	r0, [pc, #488]	; (8009240 <ftpGet+0x278>)
 8009058:	f7ff fc90 	bl	800897c <fsRead>
			fsWrite(PATHC);
 800905c:	4b79      	ldr	r3, [pc, #484]	; (8009244 <ftpGet+0x27c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fd2b 	bl	8008abc <fsWrite>
			//tx(uartDebug, (uint8_t*)"CONFIG_UPDATE\r\n");
			updateConfig(1);
 8009066:	2001      	movs	r0, #1
 8009068:	f001 f880 	bl	800a16c <updateConfig>
		}
	}
	if(newTable == 1){
 800906c:	4b76      	ldr	r3, [pc, #472]	; (8009248 <ftpGet+0x280>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d149      	bne.n	8009108 <ftpGet+0x140>
		txr(uartModem, (uint8_t*)"AT+FTPGETNAME=\"table.txt\"\r\n");
 8009074:	4b6b      	ldr	r3, [pc, #428]	; (8009224 <ftpGet+0x25c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4974      	ldr	r1, [pc, #464]	; (800924c <ftpGet+0x284>)
 800907a:	4618      	mov	r0, r3
 800907c:	f009 fb24 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 8009080:	4b68      	ldr	r3, [pc, #416]	; (8009224 <ftpGet+0x25c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a69      	ldr	r2, [pc, #420]	; (800922c <ftpGet+0x264>)
 8009086:	6811      	ldr	r1, [r2, #0]
 8009088:	2201      	movs	r2, #1
 800908a:	4618      	mov	r0, r3
 800908c:	f009 faf2 	bl	8012674 <rxr>
		txr(uartModem, FTP14);
 8009090:	4b64      	ldr	r3, [pc, #400]	; (8009224 <ftpGet+0x25c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a6e      	ldr	r2, [pc, #440]	; (8009250 <ftpGet+0x288>)
 8009096:	6812      	ldr	r2, [r2, #0]
 8009098:	4611      	mov	r1, r2
 800909a:	4618      	mov	r0, r3
 800909c:	f009 fb14 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 80090a0:	4b60      	ldr	r3, [pc, #384]	; (8009224 <ftpGet+0x25c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a61      	ldr	r2, [pc, #388]	; (800922c <ftpGet+0x264>)
 80090a6:	6811      	ldr	r1, [r2, #0]
 80090a8:	2201      	movs	r2, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	f009 fae2 	bl	8012674 <rxr>
		if(rx(uartModem, FTPR3, 400) == UART_OK){
 80090b0:	4b5c      	ldr	r3, [pc, #368]	; (8009224 <ftpGet+0x25c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a5f      	ldr	r2, [pc, #380]	; (8009234 <ftpGet+0x26c>)
 80090b6:	6811      	ldr	r1, [r2, #0]
 80090b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80090bc:	4618      	mov	r0, r3
 80090be:	f009 fa3f 	bl	8012540 <rx>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b32      	cmp	r3, #50	; 0x32
 80090c6:	d11f      	bne.n	8009108 <ftpGet+0x140>
			txr(uartModem, (uint8_t*)"AT+FTPDELE\r\n");
 80090c8:	4b56      	ldr	r3, [pc, #344]	; (8009224 <ftpGet+0x25c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	495a      	ldr	r1, [pc, #360]	; (8009238 <ftpGet+0x270>)
 80090ce:	4618      	mov	r0, r3
 80090d0:	f009 fafa 	bl	80126c8 <txr>
			rxr(uartModem, SIMR, 1);
 80090d4:	4b53      	ldr	r3, [pc, #332]	; (8009224 <ftpGet+0x25c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a54      	ldr	r2, [pc, #336]	; (800922c <ftpGet+0x264>)
 80090da:	6811      	ldr	r1, [r2, #0]
 80090dc:	2201      	movs	r2, #1
 80090de:	4618      	mov	r0, r3
 80090e0:	f009 fac8 	bl	8012674 <rxr>
			rx(uartModem, (uint8_t*)"+FTPDELE: 1,0\r\n", 30);
 80090e4:	4b4f      	ldr	r3, [pc, #316]	; (8009224 <ftpGet+0x25c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	221e      	movs	r2, #30
 80090ea:	4954      	ldr	r1, [pc, #336]	; (800923c <ftpGet+0x274>)
 80090ec:	4618      	mov	r0, r3
 80090ee:	f009 fa27 	bl	8012540 <rx>
			fsRead((uint8_t*)"D:\\FTP\\config.txt");
 80090f2:	4853      	ldr	r0, [pc, #332]	; (8009240 <ftpGet+0x278>)
 80090f4:	f7ff fc42 	bl	800897c <fsRead>
			fsWrite(PATHC);
 80090f8:	4b52      	ldr	r3, [pc, #328]	; (8009244 <ftpGet+0x27c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff fcdd 	bl	8008abc <fsWrite>
			//tx(uartDebug, (uint8_t*)"TABLE_UPDATE\r\n");
			updateTable(1);
 8009102:	2001      	movs	r0, #1
 8009104:	f001 f83f 	bl	800a186 <updateTable>
		}
	}
	if(newFirmware == 1){
 8009108:	4b52      	ldr	r3, [pc, #328]	; (8009254 <ftpGet+0x28c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b01      	cmp	r3, #1
 800910e:	f040 8085 	bne.w	800921c <ftpGet+0x254>
		txr(uartModem, (uint8_t*)"AT+FTPGETNAME=\"firmware.hex\"\r\n");
 8009112:	4b44      	ldr	r3, [pc, #272]	; (8009224 <ftpGet+0x25c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4950      	ldr	r1, [pc, #320]	; (8009258 <ftpGet+0x290>)
 8009118:	4618      	mov	r0, r3
 800911a:	f009 fad5 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 800911e:	4b41      	ldr	r3, [pc, #260]	; (8009224 <ftpGet+0x25c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a42      	ldr	r2, [pc, #264]	; (800922c <ftpGet+0x264>)
 8009124:	6811      	ldr	r1, [r2, #0]
 8009126:	2201      	movs	r2, #1
 8009128:	4618      	mov	r0, r3
 800912a:	f009 faa3 	bl	8012674 <rxr>
		txr(uartModem, FTP15);
 800912e:	4b3d      	ldr	r3, [pc, #244]	; (8009224 <ftpGet+0x25c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a4a      	ldr	r2, [pc, #296]	; (800925c <ftpGet+0x294>)
 8009134:	6812      	ldr	r2, [r2, #0]
 8009136:	4611      	mov	r1, r2
 8009138:	4618      	mov	r0, r3
 800913a:	f009 fac5 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 800913e:	4b39      	ldr	r3, [pc, #228]	; (8009224 <ftpGet+0x25c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a3a      	ldr	r2, [pc, #232]	; (800922c <ftpGet+0x264>)
 8009144:	6811      	ldr	r1, [r2, #0]
 8009146:	2201      	movs	r2, #1
 8009148:	4618      	mov	r0, r3
 800914a:	f009 fa93 	bl	8012674 <rxr>
		if(rx(uartModem, FTPR3, 2000) == UART_OK){
 800914e:	4b35      	ldr	r3, [pc, #212]	; (8009224 <ftpGet+0x25c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a38      	ldr	r2, [pc, #224]	; (8009234 <ftpGet+0x26c>)
 8009154:	6811      	ldr	r1, [r2, #0]
 8009156:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800915a:	4618      	mov	r0, r3
 800915c:	f009 f9f0 	bl	8012540 <rx>
 8009160:	4603      	mov	r3, r0
 8009162:	2b32      	cmp	r3, #50	; 0x32
 8009164:	d15a      	bne.n	800921c <ftpGet+0x254>
			txr(uartModem, (uint8_t*)"AT+FTPDELE\r\n");
 8009166:	4b2f      	ldr	r3, [pc, #188]	; (8009224 <ftpGet+0x25c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4933      	ldr	r1, [pc, #204]	; (8009238 <ftpGet+0x270>)
 800916c:	4618      	mov	r0, r3
 800916e:	f009 faab 	bl	80126c8 <txr>
			rxr(uartModem, SIMR, 1);
 8009172:	4b2c      	ldr	r3, [pc, #176]	; (8009224 <ftpGet+0x25c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a2d      	ldr	r2, [pc, #180]	; (800922c <ftpGet+0x264>)
 8009178:	6811      	ldr	r1, [r2, #0]
 800917a:	2201      	movs	r2, #1
 800917c:	4618      	mov	r0, r3
 800917e:	f009 fa79 	bl	8012674 <rxr>
			rx(uartModem, (uint8_t*)"+FTPDELE: 1,0\r\n", 30);
 8009182:	4b28      	ldr	r3, [pc, #160]	; (8009224 <ftpGet+0x25c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	221e      	movs	r2, #30
 8009188:	492c      	ldr	r1, [pc, #176]	; (800923c <ftpGet+0x274>)
 800918a:	4618      	mov	r0, r3
 800918c:	f009 f9d8 	bl	8012540 <rx>
			//tx(uartDebug, (uint8_t*)"FIRMWARE_UPDATE\r\n");
			strcpy((char*)fs_buf,"D:\\FTP\\firmware.hex#");
 8009190:	4a33      	ldr	r2, [pc, #204]	; (8009260 <ftpGet+0x298>)
 8009192:	4b34      	ldr	r3, [pc, #208]	; (8009264 <ftpGet+0x29c>)
 8009194:	4615      	mov	r5, r2
 8009196:	461c      	mov	r4, r3
 8009198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800919a:	6028      	str	r0, [r5, #0]
 800919c:	6069      	str	r1, [r5, #4]
 800919e:	60aa      	str	r2, [r5, #8]
 80091a0:	60eb      	str	r3, [r5, #12]
 80091a2:	6820      	ldr	r0, [r4, #0]
 80091a4:	6128      	str	r0, [r5, #16]
 80091a6:	7923      	ldrb	r3, [r4, #4]
 80091a8:	752b      	strb	r3, [r5, #20]
			fsWrite((uint8_t*)"C:\\fw.cfg");
 80091aa:	482f      	ldr	r0, [pc, #188]	; (8009268 <ftpGet+0x2a0>)
 80091ac:	f7ff fc86 	bl	8008abc <fsWrite>
			//tx(uartDebug, (uint8_t*)"JUMPING_BOOTLOADER\r\n");
			sim868Off();
 80091b0:	f008 fc5c 	bl	8011a6c <sim868Off>
			HAL_FLASHEx_DATAEEPROM_Unlock();
 80091b4:	f004 f98c 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080100, 0xFEEDC0DE);
 80091b8:	4a2c      	ldr	r2, [pc, #176]	; (800926c <ftpGet+0x2a4>)
 80091ba:	492d      	ldr	r1, [pc, #180]	; (8009270 <ftpGet+0x2a8>)
 80091bc:	2002      	movs	r0, #2
 80091be:	f004 f9b3 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
			HAL_FLASHEx_DATAEEPROM_Lock();
 80091c2:	f004 f9a1 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
			HAL_Delay(1000);
 80091c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091ca:	f003 fa53 	bl	800c674 <HAL_Delay>
			HAL_UART_AbortReceive_IT(uartModem);
 80091ce:	4b15      	ldr	r3, [pc, #84]	; (8009224 <ftpGet+0x25c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f007 f8d0 	bl	8010378 <HAL_UART_AbortReceive_IT>
			HAL_UART_AbortReceive_IT(uartDebug);
 80091d8:	4b26      	ldr	r3, [pc, #152]	; (8009274 <ftpGet+0x2ac>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4618      	mov	r0, r3
 80091de:	f007 f8cb 	bl	8010378 <HAL_UART_AbortReceive_IT>
			HAL_UART_AbortReceive_IT(uartSensor);
 80091e2:	4b25      	ldr	r3, [pc, #148]	; (8009278 <ftpGet+0x2b0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f007 f8c6 	bl	8010378 <HAL_UART_AbortReceive_IT>
			HAL_UART_DeInit(uartModem);
 80091ec:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <ftpGet+0x25c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f006 ff8c 	bl	801010e <HAL_UART_DeInit>
			HAL_UART_DeInit(uartDebug);
 80091f6:	4b1f      	ldr	r3, [pc, #124]	; (8009274 <ftpGet+0x2ac>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f006 ff87 	bl	801010e <HAL_UART_DeInit>
			HAL_UART_DeInit(uartSensor);
 8009200:	4b1d      	ldr	r3, [pc, #116]	; (8009278 <ftpGet+0x2b0>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f006 ff82 	bl	801010e <HAL_UART_DeInit>
			HAL_RCC_DeInit();
 800920a:	f004 fda1 	bl	800dd50 <HAL_RCC_DeInit>
			HAL_DeInit();
 800920e:	f003 f9b7 	bl	800c580 <HAL_DeInit>
			HAL_Delay(100);
 8009212:	2064      	movs	r0, #100	; 0x64
 8009214:	f003 fa2e 	bl	800c674 <HAL_Delay>
			NVIC_SystemReset();
 8009218:	f7ff fd5a 	bl	8008cd0 <__NVIC_SystemReset>
		}
	}
}
 800921c:	bf00      	nop
 800921e:	bdb0      	pop	{r4, r5, r7, pc}
 8009220:	20004128 	.word	0x20004128
 8009224:	20004d5c 	.word	0x20004d5c
 8009228:	08015010 	.word	0x08015010
 800922c:	20000118 	.word	0x20000118
 8009230:	2000009c 	.word	0x2000009c
 8009234:	20000070 	.word	0x20000070
 8009238:	08015030 	.word	0x08015030
 800923c:	08015040 	.word	0x08015040
 8009240:	08015050 	.word	0x08015050
 8009244:	200000a8 	.word	0x200000a8
 8009248:	200004ac 	.word	0x200004ac
 800924c:	08015064 	.word	0x08015064
 8009250:	200000a0 	.word	0x200000a0
 8009254:	20003fa4 	.word	0x20003fa4
 8009258:	08015080 	.word	0x08015080
 800925c:	200000a4 	.word	0x200000a4
 8009260:	200015e8 	.word	0x200015e8
 8009264:	080150a0 	.word	0x080150a0
 8009268:	080150b8 	.word	0x080150b8
 800926c:	feedc0de 	.word	0xfeedc0de
 8009270:	08080100 	.word	0x08080100
 8009274:	200044a4 	.word	0x200044a4
 8009278:	200044a8 	.word	0x200044a8

0800927c <removeBoot>:
	if(strstr((char*)rx_buf,":00000001FF") != NULL){
		return 1;
	}
	return 0;
}
void removeBoot(){
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
	if(*(uint32_t*)0x08080100 == 0xFEEDC0DE){
 8009280:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <removeBoot+0x3c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a0d      	ldr	r2, [pc, #52]	; (80092bc <removeBoot+0x40>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d113      	bne.n	80092b2 <removeBoot+0x36>
		  HAL_FLASHEx_DATAEEPROM_Unlock();
 800928a:	f004 f921 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
		  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080100, 0xFEEDC0DD);
 800928e:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <removeBoot+0x44>)
 8009290:	4909      	ldr	r1, [pc, #36]	; (80092b8 <removeBoot+0x3c>)
 8009292:	2002      	movs	r0, #2
 8009294:	f004 f948 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
		  HAL_FLASHEx_DATAEEPROM_Lock();
 8009298:	f004 f936 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
		  HAL_FLASHEx_DATAEEPROM_Unlock();
 800929c:	f004 f918 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
		  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080100, 0xFEEDC0DD);
 80092a0:	4a07      	ldr	r2, [pc, #28]	; (80092c0 <removeBoot+0x44>)
 80092a2:	4905      	ldr	r1, [pc, #20]	; (80092b8 <removeBoot+0x3c>)
 80092a4:	2002      	movs	r0, #2
 80092a6:	f004 f93f 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
		  HAL_FLASHEx_DATAEEPROM_Lock();
 80092aa:	f004 f92d 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
		  //tx(uartDebug, (uint8_t*)"BOOTLOADER_REMOVED\n");
		  NVIC_SystemReset();
 80092ae:	f7ff fd0f 	bl	8008cd0 <__NVIC_SystemReset>
	}
}
 80092b2:	bf00      	nop
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	08080100 	.word	0x08080100
 80092bc:	feedc0de 	.word	0xfeedc0de
 80092c0:	feedc0dd 	.word	0xfeedc0dd

080092c4 <removeFirst>:
void removeFirst(){
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
	if(*(uint32_t*)0x08080200 != 0xFEEDC0DE){
 80092c8:	4b1f      	ldr	r3, [pc, #124]	; (8009348 <removeFirst+0x84>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1f      	ldr	r2, [pc, #124]	; (800934c <removeFirst+0x88>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d037      	beq.n	8009342 <removeFirst+0x7e>
		  //tx(uartDebug, (uint8_t*)"FIRST_REMOVED\n");
		  tx(uartModem, (uint8_t*)"AT+FSDRIVE=1;&W\r\n");
 80092d2:	4b1f      	ldr	r3, [pc, #124]	; (8009350 <removeFirst+0x8c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	491f      	ldr	r1, [pc, #124]	; (8009354 <removeFirst+0x90>)
 80092d8:	4618      	mov	r0, r3
 80092da:	f009 f8ff 	bl	80124dc <tx>
		  rx(uartModem, SIMR, 2);
 80092de:	4b1c      	ldr	r3, [pc, #112]	; (8009350 <removeFirst+0x8c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1d      	ldr	r2, [pc, #116]	; (8009358 <removeFirst+0x94>)
 80092e4:	6811      	ldr	r1, [r2, #0]
 80092e6:	2202      	movs	r2, #2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f009 f929 	bl	8012540 <rx>
		  tx(uartModem, (uint8_t*)"AT+FSMKDIR=D:\\BtReceived\r\n");
 80092ee:	4b18      	ldr	r3, [pc, #96]	; (8009350 <removeFirst+0x8c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	491a      	ldr	r1, [pc, #104]	; (800935c <removeFirst+0x98>)
 80092f4:	4618      	mov	r0, r3
 80092f6:	f009 f8f1 	bl	80124dc <tx>
		  rx(uartModem, SIMR, 2);
 80092fa:	4b15      	ldr	r3, [pc, #84]	; (8009350 <removeFirst+0x8c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a16      	ldr	r2, [pc, #88]	; (8009358 <removeFirst+0x94>)
 8009300:	6811      	ldr	r1, [r2, #0]
 8009302:	2202      	movs	r2, #2
 8009304:	4618      	mov	r0, r3
 8009306:	f009 f91b 	bl	8012540 <rx>
		  defaultParam();
 800930a:	f000 fdc5 	bl	8009e98 <defaultParam>
		  writeConfig();
 800930e:	f000 fa21 	bl	8009754 <writeConfig>
		  defaultTable();
 8009312:	f000 fefd 	bl	800a110 <defaultTable>
		  writeTable();
 8009316:	f000 fd63 	bl	8009de0 <writeTable>
		  defaulLog();
 800931a:	f003 f90b 	bl	800c534 <defaulLog>

          HAL_FLASHEx_DATAEEPROM_Unlock();
 800931e:	f004 f8d7 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
		  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080200, 0xFEEDC0DE);
 8009322:	4a0a      	ldr	r2, [pc, #40]	; (800934c <removeFirst+0x88>)
 8009324:	4908      	ldr	r1, [pc, #32]	; (8009348 <removeFirst+0x84>)
 8009326:	2002      	movs	r0, #2
 8009328:	f004 f8fe 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
		  HAL_FLASHEx_DATAEEPROM_Lock();
 800932c:	f004 f8ec 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
		  HAL_FLASHEx_DATAEEPROM_Unlock();
 8009330:	f004 f8ce 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
		  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080200, 0xFEEDC0DE);
 8009334:	4a05      	ldr	r2, [pc, #20]	; (800934c <removeFirst+0x88>)
 8009336:	4904      	ldr	r1, [pc, #16]	; (8009348 <removeFirst+0x84>)
 8009338:	2002      	movs	r0, #2
 800933a:	f004 f8f5 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
		  HAL_FLASHEx_DATAEEPROM_Lock();
 800933e:	f004 f8e3 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
	}
}
 8009342:	bf00      	nop
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	08080200 	.word	0x08080200
 800934c:	feedc0de 	.word	0xfeedc0de
 8009350:	20004d5c 	.word	0x20004d5c
 8009354:	08015130 	.word	0x08015130
 8009358:	20000118 	.word	0x20000118
 800935c:	08015144 	.word	0x08015144

08009360 <readConfig>:
uint8_t* PATHCF = (uint8_t*)"D:\\FTP\\config.txt";//Config path
uint8_t* PATHTF = (uint8_t*)"D:\\FTP\\table.txt";//TablePath
uint8_t* PATHL = (uint8_t*)"D:\\log.txt";//LogPath
uint8_t* PATHP = (uint8_t*)"D:\\pos.txt";//PosPath

void readConfig(int type){
 8009360:	b580      	push	{r7, lr}
 8009362:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8009366:	af08      	add	r7, sp, #32
 8009368:	1d3b      	adds	r3, r7, #4
 800936a:	6018      	str	r0, [r3, #0]
	uint8_t* config_p;
	uint8_t config_a[1000];
	if(type == 0){
 800936c:	1d3b      	adds	r3, r7, #4
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d105      	bne.n	8009380 <readConfig+0x20>
		fsRead(PATHC);
 8009374:	4bc2      	ldr	r3, [pc, #776]	; (8009680 <readConfig+0x320>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff faff 	bl	800897c <fsRead>
 800937e:	e004      	b.n	800938a <readConfig+0x2a>
	}
	else{
		fsRead(PATHCF);
 8009380:	4bc0      	ldr	r3, [pc, #768]	; (8009684 <readConfig+0x324>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff faf9 	bl	800897c <fsRead>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"UPNUM");
 800938a:	49bf      	ldr	r1, [pc, #764]	; (8009688 <readConfig+0x328>)
 800938c:	48bf      	ldr	r0, [pc, #764]	; (800968c <readConfig+0x32c>)
 800938e:	f009 fcc1 	bl	8012d14 <strstr>
 8009392:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 8009396:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01a      	beq.n	80093d4 <readConfig+0x74>
		strcpy((char*)config_a,(char*)config_p+6);
 800939e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80093a2:	1d9a      	adds	r2, r3, #6
 80093a4:	f107 030c 	add.w	r3, r7, #12
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f009 fc99 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 80093b0:	f107 030c 	add.w	r3, r7, #12
 80093b4:	49b6      	ldr	r1, [pc, #728]	; (8009690 <readConfig+0x330>)
 80093b6:	4618      	mov	r0, r3
 80093b8:	f009 fc9b 	bl	8012cf2 <strcspn>
 80093bc:	4602      	mov	r2, r0
 80093be:	f107 030c 	add.w	r3, r7, #12
 80093c2:	2100      	movs	r1, #0
 80093c4:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%s",(char*)UPNUM);
 80093c6:	f107 030c 	add.w	r3, r7, #12
 80093ca:	4ab2      	ldr	r2, [pc, #712]	; (8009694 <readConfig+0x334>)
 80093cc:	49b2      	ldr	r1, [pc, #712]	; (8009698 <readConfig+0x338>)
 80093ce:	4618      	mov	r0, r3
 80093d0:	f009 fbfc 	bl	8012bcc <siscanf>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"SENSOR");
 80093d4:	49b1      	ldr	r1, [pc, #708]	; (800969c <readConfig+0x33c>)
 80093d6:	48ad      	ldr	r0, [pc, #692]	; (800968c <readConfig+0x32c>)
 80093d8:	f009 fc9c 	bl	8012d14 <strstr>
 80093dc:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 80093e0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01c      	beq.n	8009422 <readConfig+0xc2>
		strcpy((char*)config_a,(char*)config_p+7);
 80093e8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80093ec:	1dda      	adds	r2, r3, #7
 80093ee:	f107 030c 	add.w	r3, r7, #12
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f009 fc74 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 80093fa:	f107 030c 	add.w	r3, r7, #12
 80093fe:	49a4      	ldr	r1, [pc, #656]	; (8009690 <readConfig+0x330>)
 8009400:	4618      	mov	r0, r3
 8009402:	f009 fc76 	bl	8012cf2 <strcspn>
 8009406:	4602      	mov	r2, r0
 8009408:	f107 030c 	add.w	r3, r7, #12
 800940c:	2100      	movs	r1, #0
 800940e:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%[^,],%[^,],%s",(char*)SENSORTYPE,(char*)SETH,(char*)COR);
 8009410:	f107 000c 	add.w	r0, r7, #12
 8009414:	4ba2      	ldr	r3, [pc, #648]	; (80096a0 <readConfig+0x340>)
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4ba2      	ldr	r3, [pc, #648]	; (80096a4 <readConfig+0x344>)
 800941a:	4aa3      	ldr	r2, [pc, #652]	; (80096a8 <readConfig+0x348>)
 800941c:	49a3      	ldr	r1, [pc, #652]	; (80096ac <readConfig+0x34c>)
 800941e:	f009 fbd5 	bl	8012bcc <siscanf>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"APN");
 8009422:	49a3      	ldr	r1, [pc, #652]	; (80096b0 <readConfig+0x350>)
 8009424:	4899      	ldr	r0, [pc, #612]	; (800968c <readConfig+0x32c>)
 8009426:	f009 fc75 	bl	8012d14 <strstr>
 800942a:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 800942e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8009432:	2b00      	cmp	r3, #0
 8009434:	d022      	beq.n	800947c <readConfig+0x11c>
		strcpy((char*)config_a,(char*)config_p+4);
 8009436:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800943a:	1d1a      	adds	r2, r3, #4
 800943c:	f107 030c 	add.w	r3, r7, #12
 8009440:	4611      	mov	r1, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f009 fc4d 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 8009448:	f107 030c 	add.w	r3, r7, #12
 800944c:	4990      	ldr	r1, [pc, #576]	; (8009690 <readConfig+0x330>)
 800944e:	4618      	mov	r0, r3
 8009450:	f009 fc4f 	bl	8012cf2 <strcspn>
 8009454:	4602      	mov	r2, r0
 8009456:	f107 030c 	add.w	r3, r7, #12
 800945a:	2100      	movs	r1, #0
 800945c:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%[^,],%[^,],%[^,],%[^,],%[^,],%s",(char*)APNCONTYPE,(char*)APNNAME,(char*)APNUSERNAME,(char*)APNPASSWORD,(char*)APNPHONENUM,(char*)APNRATE);
 800945e:	f107 000c 	add.w	r0, r7, #12
 8009462:	4b94      	ldr	r3, [pc, #592]	; (80096b4 <readConfig+0x354>)
 8009464:	9303      	str	r3, [sp, #12]
 8009466:	4b94      	ldr	r3, [pc, #592]	; (80096b8 <readConfig+0x358>)
 8009468:	9302      	str	r3, [sp, #8]
 800946a:	4b94      	ldr	r3, [pc, #592]	; (80096bc <readConfig+0x35c>)
 800946c:	9301      	str	r3, [sp, #4]
 800946e:	4b94      	ldr	r3, [pc, #592]	; (80096c0 <readConfig+0x360>)
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	4b94      	ldr	r3, [pc, #592]	; (80096c4 <readConfig+0x364>)
 8009474:	4a94      	ldr	r2, [pc, #592]	; (80096c8 <readConfig+0x368>)
 8009476:	4995      	ldr	r1, [pc, #596]	; (80096cc <readConfig+0x36c>)
 8009478:	f009 fba8 	bl	8012bcc <siscanf>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"DAQ");
 800947c:	4994      	ldr	r1, [pc, #592]	; (80096d0 <readConfig+0x370>)
 800947e:	4883      	ldr	r0, [pc, #524]	; (800968c <readConfig+0x32c>)
 8009480:	f009 fc48 	bl	8012d14 <strstr>
 8009484:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 8009488:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01e      	beq.n	80094ce <readConfig+0x16e>
		strcpy((char*)config_a,(char*)config_p+4);
 8009490:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8009494:	1d1a      	adds	r2, r3, #4
 8009496:	f107 030c 	add.w	r3, r7, #12
 800949a:	4611      	mov	r1, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f009 fc20 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 80094a2:	f107 030c 	add.w	r3, r7, #12
 80094a6:	497a      	ldr	r1, [pc, #488]	; (8009690 <readConfig+0x330>)
 80094a8:	4618      	mov	r0, r3
 80094aa:	f009 fc22 	bl	8012cf2 <strcspn>
 80094ae:	4602      	mov	r2, r0
 80094b0:	f107 030c 	add.w	r3, r7, #12
 80094b4:	2100      	movs	r1, #0
 80094b6:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%[^,],%[^,],%[^,],%s",(char*)MINDISTANCE,(char*)MINSENDPERIOD,(char*)MINMEASUREMENT,(char*)MINMEASUREPERIOD);
 80094b8:	f107 000c 	add.w	r0, r7, #12
 80094bc:	4b85      	ldr	r3, [pc, #532]	; (80096d4 <readConfig+0x374>)
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	4b85      	ldr	r3, [pc, #532]	; (80096d8 <readConfig+0x378>)
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	4b85      	ldr	r3, [pc, #532]	; (80096dc <readConfig+0x37c>)
 80094c6:	4a86      	ldr	r2, [pc, #536]	; (80096e0 <readConfig+0x380>)
 80094c8:	4986      	ldr	r1, [pc, #536]	; (80096e4 <readConfig+0x384>)
 80094ca:	f009 fb7f 	bl	8012bcc <siscanf>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"MQTT");
 80094ce:	4986      	ldr	r1, [pc, #536]	; (80096e8 <readConfig+0x388>)
 80094d0:	486e      	ldr	r0, [pc, #440]	; (800968c <readConfig+0x32c>)
 80094d2:	f009 fc1f 	bl	8012d14 <strstr>
 80094d6:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 80094da:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d02a      	beq.n	8009538 <readConfig+0x1d8>
		strcpy((char*)config_a,(char*)config_p+5);
 80094e2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80094e6:	1d5a      	adds	r2, r3, #5
 80094e8:	f107 030c 	add.w	r3, r7, #12
 80094ec:	4611      	mov	r1, r2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f009 fbf7 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 80094f4:	f107 030c 	add.w	r3, r7, #12
 80094f8:	4965      	ldr	r1, [pc, #404]	; (8009690 <readConfig+0x330>)
 80094fa:	4618      	mov	r0, r3
 80094fc:	f009 fbf9 	bl	8012cf2 <strcspn>
 8009500:	4602      	mov	r2, r0
 8009502:	f107 030c 	add.w	r3, r7, #12
 8009506:	2100      	movs	r1, #0
 8009508:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,]",(char*)MQTTIP,(char*)MQTTPORT,(char*)MQTTUSERNAME,(char*)MQTTPASSWORD,(char*)MQTTQOS,(char*)MQTTCLEANASS,(char*)MQTTKEEPALIVE,(char*)MQTTTIMEOUT,(char*)MQTTTOPICS[0],(char*)MQTTTOPICS[1]);
 800950a:	f107 000c 	add.w	r0, r7, #12
 800950e:	4b77      	ldr	r3, [pc, #476]	; (80096ec <readConfig+0x38c>)
 8009510:	9307      	str	r3, [sp, #28]
 8009512:	4b77      	ldr	r3, [pc, #476]	; (80096f0 <readConfig+0x390>)
 8009514:	9306      	str	r3, [sp, #24]
 8009516:	4b77      	ldr	r3, [pc, #476]	; (80096f4 <readConfig+0x394>)
 8009518:	9305      	str	r3, [sp, #20]
 800951a:	4b77      	ldr	r3, [pc, #476]	; (80096f8 <readConfig+0x398>)
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	4b77      	ldr	r3, [pc, #476]	; (80096fc <readConfig+0x39c>)
 8009520:	9303      	str	r3, [sp, #12]
 8009522:	4b77      	ldr	r3, [pc, #476]	; (8009700 <readConfig+0x3a0>)
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	4b77      	ldr	r3, [pc, #476]	; (8009704 <readConfig+0x3a4>)
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	4b77      	ldr	r3, [pc, #476]	; (8009708 <readConfig+0x3a8>)
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	4b77      	ldr	r3, [pc, #476]	; (800970c <readConfig+0x3ac>)
 8009530:	4a77      	ldr	r2, [pc, #476]	; (8009710 <readConfig+0x3b0>)
 8009532:	4978      	ldr	r1, [pc, #480]	; (8009714 <readConfig+0x3b4>)
 8009534:	f009 fb4a 	bl	8012bcc <siscanf>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"FTP");
 8009538:	4977      	ldr	r1, [pc, #476]	; (8009718 <readConfig+0x3b8>)
 800953a:	4854      	ldr	r0, [pc, #336]	; (800968c <readConfig+0x32c>)
 800953c:	f009 fbea 	bl	8012d14 <strstr>
 8009540:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 8009544:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d024      	beq.n	8009596 <readConfig+0x236>
		strcpy((char*)config_a,(char*)config_p+4);
 800954c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8009550:	1d1a      	adds	r2, r3, #4
 8009552:	f107 030c 	add.w	r3, r7, #12
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f009 fbc2 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 800955e:	f107 030c 	add.w	r3, r7, #12
 8009562:	494b      	ldr	r1, [pc, #300]	; (8009690 <readConfig+0x330>)
 8009564:	4618      	mov	r0, r3
 8009566:	f009 fbc4 	bl	8012cf2 <strcspn>
 800956a:	4602      	mov	r2, r0
 800956c:	f107 030c 	add.w	r3, r7, #12
 8009570:	2100      	movs	r1, #0
 8009572:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,]",(char*)FTPIP,(char*)FTPPORT,(char*)FTPUSERNAME,(char*)FTPPASSWORD,(char*)FTPINTERVAL,(char*)FTPTOPICS[0],(char*)FTPTOPICS[1]);
 8009574:	f107 000c 	add.w	r0, r7, #12
 8009578:	4b68      	ldr	r3, [pc, #416]	; (800971c <readConfig+0x3bc>)
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	4b68      	ldr	r3, [pc, #416]	; (8009720 <readConfig+0x3c0>)
 800957e:	9303      	str	r3, [sp, #12]
 8009580:	4b68      	ldr	r3, [pc, #416]	; (8009724 <readConfig+0x3c4>)
 8009582:	9302      	str	r3, [sp, #8]
 8009584:	4b68      	ldr	r3, [pc, #416]	; (8009728 <readConfig+0x3c8>)
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	4b68      	ldr	r3, [pc, #416]	; (800972c <readConfig+0x3cc>)
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	4b68      	ldr	r3, [pc, #416]	; (8009730 <readConfig+0x3d0>)
 800958e:	4a69      	ldr	r2, [pc, #420]	; (8009734 <readConfig+0x3d4>)
 8009590:	4969      	ldr	r1, [pc, #420]	; (8009738 <readConfig+0x3d8>)
 8009592:	f009 fb1b 	bl	8012bcc <siscanf>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"NAME1");
 8009596:	4969      	ldr	r1, [pc, #420]	; (800973c <readConfig+0x3dc>)
 8009598:	483c      	ldr	r0, [pc, #240]	; (800968c <readConfig+0x32c>)
 800959a:	f009 fbbb 	bl	8012d14 <strstr>
 800959e:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 80095a2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d01a      	beq.n	80095e0 <readConfig+0x280>
		strcpy((char*)config_a,(char*)config_p+6);
 80095aa:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80095ae:	1d9a      	adds	r2, r3, #6
 80095b0:	f107 030c 	add.w	r3, r7, #12
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f009 fb93 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 80095bc:	f107 030c 	add.w	r3, r7, #12
 80095c0:	4933      	ldr	r1, [pc, #204]	; (8009690 <readConfig+0x330>)
 80095c2:	4618      	mov	r0, r3
 80095c4:	f009 fb95 	bl	8012cf2 <strcspn>
 80095c8:	4602      	mov	r2, r0
 80095ca:	f107 030c 	add.w	r3, r7, #12
 80095ce:	2100      	movs	r1, #0
 80095d0:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%s",(char*)NAME1);
 80095d2:	f107 030c 	add.w	r3, r7, #12
 80095d6:	4a5a      	ldr	r2, [pc, #360]	; (8009740 <readConfig+0x3e0>)
 80095d8:	492f      	ldr	r1, [pc, #188]	; (8009698 <readConfig+0x338>)
 80095da:	4618      	mov	r0, r3
 80095dc:	f009 faf6 	bl	8012bcc <siscanf>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"NAME2");
 80095e0:	4958      	ldr	r1, [pc, #352]	; (8009744 <readConfig+0x3e4>)
 80095e2:	482a      	ldr	r0, [pc, #168]	; (800968c <readConfig+0x32c>)
 80095e4:	f009 fb96 	bl	8012d14 <strstr>
 80095e8:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 80095ec:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d01a      	beq.n	800962a <readConfig+0x2ca>
		strcpy((char*)config_a,(char*)config_p+6);
 80095f4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80095f8:	1d9a      	adds	r2, r3, #6
 80095fa:	f107 030c 	add.w	r3, r7, #12
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f009 fb6e 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 8009606:	f107 030c 	add.w	r3, r7, #12
 800960a:	4921      	ldr	r1, [pc, #132]	; (8009690 <readConfig+0x330>)
 800960c:	4618      	mov	r0, r3
 800960e:	f009 fb70 	bl	8012cf2 <strcspn>
 8009612:	4602      	mov	r2, r0
 8009614:	f107 030c 	add.w	r3, r7, #12
 8009618:	2100      	movs	r1, #0
 800961a:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%s",(char*)NAME2);
 800961c:	f107 030c 	add.w	r3, r7, #12
 8009620:	4a49      	ldr	r2, [pc, #292]	; (8009748 <readConfig+0x3e8>)
 8009622:	491d      	ldr	r1, [pc, #116]	; (8009698 <readConfig+0x338>)
 8009624:	4618      	mov	r0, r3
 8009626:	f009 fad1 	bl	8012bcc <siscanf>
	}
	config_p = (uint8_t*)strstr((char*)fs_buf,"NAME3");
 800962a:	4948      	ldr	r1, [pc, #288]	; (800974c <readConfig+0x3ec>)
 800962c:	4817      	ldr	r0, [pc, #92]	; (800968c <readConfig+0x32c>)
 800962e:	f009 fb71 	bl	8012d14 <strstr>
 8009632:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	if(config_p != NULL){
 8009636:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01a      	beq.n	8009674 <readConfig+0x314>
		strcpy((char*)config_a,(char*)config_p+6);
 800963e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8009642:	1d9a      	adds	r2, r3, #6
 8009644:	f107 030c 	add.w	r3, r7, #12
 8009648:	4611      	mov	r1, r2
 800964a:	4618      	mov	r0, r3
 800964c:	f009 fb49 	bl	8012ce2 <strcpy>
		config_a[strcspn((char*)config_a,"#")] = '\0';
 8009650:	f107 030c 	add.w	r3, r7, #12
 8009654:	490e      	ldr	r1, [pc, #56]	; (8009690 <readConfig+0x330>)
 8009656:	4618      	mov	r0, r3
 8009658:	f009 fb4b 	bl	8012cf2 <strcspn>
 800965c:	4602      	mov	r2, r0
 800965e:	f107 030c 	add.w	r3, r7, #12
 8009662:	2100      	movs	r1, #0
 8009664:	5499      	strb	r1, [r3, r2]
		sscanf((char*)config_a,"%s",(char*)NAME3);
 8009666:	f107 030c 	add.w	r3, r7, #12
 800966a:	4a39      	ldr	r2, [pc, #228]	; (8009750 <readConfig+0x3f0>)
 800966c:	490a      	ldr	r1, [pc, #40]	; (8009698 <readConfig+0x338>)
 800966e:	4618      	mov	r0, r3
 8009670:	f009 faac 	bl	8012bcc <siscanf>
	}
}
 8009674:	bf00      	nop
 8009676:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	200000a8 	.word	0x200000a8
 8009684:	200000b0 	.word	0x200000b0
 8009688:	080151d4 	.word	0x080151d4
 800968c:	200015e8 	.word	0x200015e8
 8009690:	080151dc 	.word	0x080151dc
 8009694:	20003e20 	.word	0x20003e20
 8009698:	080151e0 	.word	0x080151e0
 800969c:	080151e4 	.word	0x080151e4
 80096a0:	20004428 	.word	0x20004428
 80096a4:	200002a0 	.word	0x200002a0
 80096a8:	200040f8 	.word	0x200040f8
 80096ac:	080151ec 	.word	0x080151ec
 80096b0:	080151fc 	.word	0x080151fc
 80096b4:	20003d8c 	.word	0x20003d8c
 80096b8:	20004104 	.word	0x20004104
 80096bc:	20004434 	.word	0x20004434
 80096c0:	20000240 	.word	0x20000240
 80096c4:	20003e4c 	.word	0x20003e4c
 80096c8:	20000234 	.word	0x20000234
 80096cc:	08015200 	.word	0x08015200
 80096d0:	08015224 	.word	0x08015224
 80096d4:	200004e4 	.word	0x200004e4
 80096d8:	20004400 	.word	0x20004400
 80096dc:	2000412c 	.word	0x2000412c
 80096e0:	20003fac 	.word	0x20003fac
 80096e4:	08015228 	.word	0x08015228
 80096e8:	08015240 	.word	0x08015240
 80096ec:	20004232 	.word	0x20004232
 80096f0:	20004228 	.word	0x20004228
 80096f4:	200040ec 	.word	0x200040ec
 80096f8:	20004118 	.word	0x20004118
 80096fc:	20003e70 	.word	0x20003e70
 8009700:	200040e0 	.word	0x200040e0
 8009704:	20003e34 	.word	0x20003e34
 8009708:	20004138 	.word	0x20004138
 800970c:	2000421c 	.word	0x2000421c
 8009710:	20003d38 	.word	0x20003d38
 8009714:	08015248 	.word	0x08015248
 8009718:	08015284 	.word	0x08015284
 800971c:	20003ee6 	.word	0x20003ee6
 8009720:	20003edc 	.word	0x20003edc
 8009724:	200003a8 	.word	0x200003a8
 8009728:	200003b4 	.word	0x200003b4
 800972c:	200040b4 	.word	0x200040b4
 8009730:	20000450 	.word	0x20000450
 8009734:	20003e00 	.word	0x20003e00
 8009738:	08015288 	.word	0x08015288
 800973c:	080152b4 	.word	0x080152b4
 8009740:	2000418c 	.word	0x2000418c
 8009744:	080152bc 	.word	0x080152bc
 8009748:	20003d04 	.word	0x20003d04
 800974c:	080152c4 	.word	0x080152c4
 8009750:	2000041c 	.word	0x2000041c

08009754 <writeConfig>:
void writeConfig(void){
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
	int i;
	strcpy((char*)fs_buf,"UPNUM=");
 800975a:	4bbe      	ldr	r3, [pc, #760]	; (8009a54 <writeConfig+0x300>)
 800975c:	4abe      	ldr	r2, [pc, #760]	; (8009a58 <writeConfig+0x304>)
 800975e:	6810      	ldr	r0, [r2, #0]
 8009760:	6018      	str	r0, [r3, #0]
 8009762:	8891      	ldrh	r1, [r2, #4]
 8009764:	7992      	ldrb	r2, [r2, #6]
 8009766:	8099      	strh	r1, [r3, #4]
 8009768:	719a      	strb	r2, [r3, #6]
	strcat((char*)fs_buf,(char*)UPNUM);
 800976a:	49bc      	ldr	r1, [pc, #752]	; (8009a5c <writeConfig+0x308>)
 800976c:	48b9      	ldr	r0, [pc, #740]	; (8009a54 <writeConfig+0x300>)
 800976e:	f009 fa9c 	bl	8012caa <strcat>
	strcat((char*)fs_buf,"#\r\n");
 8009772:	48b8      	ldr	r0, [pc, #736]	; (8009a54 <writeConfig+0x300>)
 8009774:	f7fb fd0c 	bl	8005190 <strlen>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	4bb5      	ldr	r3, [pc, #724]	; (8009a54 <writeConfig+0x300>)
 800977e:	4413      	add	r3, r2
 8009780:	4ab7      	ldr	r2, [pc, #732]	; (8009a60 <writeConfig+0x30c>)
 8009782:	6810      	ldr	r0, [r2, #0]
 8009784:	6018      	str	r0, [r3, #0]


	strcat((char*)fs_buf,"SENSOR=");
 8009786:	48b3      	ldr	r0, [pc, #716]	; (8009a54 <writeConfig+0x300>)
 8009788:	f7fb fd02 	bl	8005190 <strlen>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	4bb0      	ldr	r3, [pc, #704]	; (8009a54 <writeConfig+0x300>)
 8009792:	4413      	add	r3, r2
 8009794:	49b3      	ldr	r1, [pc, #716]	; (8009a64 <writeConfig+0x310>)
 8009796:	461a      	mov	r2, r3
 8009798:	460b      	mov	r3, r1
 800979a:	cb03      	ldmia	r3!, {r0, r1}
 800979c:	6010      	str	r0, [r2, #0]
 800979e:	6051      	str	r1, [r2, #4]
	strcat((char*)fs_buf,(char*)SENSORTYPE);
 80097a0:	49b1      	ldr	r1, [pc, #708]	; (8009a68 <writeConfig+0x314>)
 80097a2:	48ac      	ldr	r0, [pc, #688]	; (8009a54 <writeConfig+0x300>)
 80097a4:	f009 fa81 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 80097a8:	48aa      	ldr	r0, [pc, #680]	; (8009a54 <writeConfig+0x300>)
 80097aa:	f7fb fcf1 	bl	8005190 <strlen>
 80097ae:	4603      	mov	r3, r0
 80097b0:	461a      	mov	r2, r3
 80097b2:	4ba8      	ldr	r3, [pc, #672]	; (8009a54 <writeConfig+0x300>)
 80097b4:	4413      	add	r3, r2
 80097b6:	49ad      	ldr	r1, [pc, #692]	; (8009a6c <writeConfig+0x318>)
 80097b8:	461a      	mov	r2, r3
 80097ba:	460b      	mov	r3, r1
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)SETH);
 80097c0:	49ab      	ldr	r1, [pc, #684]	; (8009a70 <writeConfig+0x31c>)
 80097c2:	48a4      	ldr	r0, [pc, #656]	; (8009a54 <writeConfig+0x300>)
 80097c4:	f009 fa71 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 80097c8:	48a2      	ldr	r0, [pc, #648]	; (8009a54 <writeConfig+0x300>)
 80097ca:	f7fb fce1 	bl	8005190 <strlen>
 80097ce:	4603      	mov	r3, r0
 80097d0:	461a      	mov	r2, r3
 80097d2:	4ba0      	ldr	r3, [pc, #640]	; (8009a54 <writeConfig+0x300>)
 80097d4:	4413      	add	r3, r2
 80097d6:	49a5      	ldr	r1, [pc, #660]	; (8009a6c <writeConfig+0x318>)
 80097d8:	461a      	mov	r2, r3
 80097da:	460b      	mov	r3, r1
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)COR);
 80097e0:	49a4      	ldr	r1, [pc, #656]	; (8009a74 <writeConfig+0x320>)
 80097e2:	489c      	ldr	r0, [pc, #624]	; (8009a54 <writeConfig+0x300>)
 80097e4:	f009 fa61 	bl	8012caa <strcat>
	strcat((char*)fs_buf,"#\r\n");
 80097e8:	489a      	ldr	r0, [pc, #616]	; (8009a54 <writeConfig+0x300>)
 80097ea:	f7fb fcd1 	bl	8005190 <strlen>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	4b98      	ldr	r3, [pc, #608]	; (8009a54 <writeConfig+0x300>)
 80097f4:	4413      	add	r3, r2
 80097f6:	4a9a      	ldr	r2, [pc, #616]	; (8009a60 <writeConfig+0x30c>)
 80097f8:	6810      	ldr	r0, [r2, #0]
 80097fa:	6018      	str	r0, [r3, #0]


	strcat((char*)fs_buf,"DAQ=");
 80097fc:	4895      	ldr	r0, [pc, #596]	; (8009a54 <writeConfig+0x300>)
 80097fe:	f7fb fcc7 	bl	8005190 <strlen>
 8009802:	4603      	mov	r3, r0
 8009804:	461a      	mov	r2, r3
 8009806:	4b93      	ldr	r3, [pc, #588]	; (8009a54 <writeConfig+0x300>)
 8009808:	4413      	add	r3, r2
 800980a:	4a9b      	ldr	r2, [pc, #620]	; (8009a78 <writeConfig+0x324>)
 800980c:	6810      	ldr	r0, [r2, #0]
 800980e:	6018      	str	r0, [r3, #0]
 8009810:	7912      	ldrb	r2, [r2, #4]
 8009812:	711a      	strb	r2, [r3, #4]
	strcat((char*)fs_buf,(char*)MINDISTANCE);
 8009814:	4999      	ldr	r1, [pc, #612]	; (8009a7c <writeConfig+0x328>)
 8009816:	488f      	ldr	r0, [pc, #572]	; (8009a54 <writeConfig+0x300>)
 8009818:	f009 fa47 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 800981c:	488d      	ldr	r0, [pc, #564]	; (8009a54 <writeConfig+0x300>)
 800981e:	f7fb fcb7 	bl	8005190 <strlen>
 8009822:	4603      	mov	r3, r0
 8009824:	461a      	mov	r2, r3
 8009826:	4b8b      	ldr	r3, [pc, #556]	; (8009a54 <writeConfig+0x300>)
 8009828:	4413      	add	r3, r2
 800982a:	4990      	ldr	r1, [pc, #576]	; (8009a6c <writeConfig+0x318>)
 800982c:	461a      	mov	r2, r3
 800982e:	460b      	mov	r3, r1
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MINSENDPERIOD);
 8009834:	4992      	ldr	r1, [pc, #584]	; (8009a80 <writeConfig+0x32c>)
 8009836:	4887      	ldr	r0, [pc, #540]	; (8009a54 <writeConfig+0x300>)
 8009838:	f009 fa37 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 800983c:	4885      	ldr	r0, [pc, #532]	; (8009a54 <writeConfig+0x300>)
 800983e:	f7fb fca7 	bl	8005190 <strlen>
 8009842:	4603      	mov	r3, r0
 8009844:	461a      	mov	r2, r3
 8009846:	4b83      	ldr	r3, [pc, #524]	; (8009a54 <writeConfig+0x300>)
 8009848:	4413      	add	r3, r2
 800984a:	4988      	ldr	r1, [pc, #544]	; (8009a6c <writeConfig+0x318>)
 800984c:	461a      	mov	r2, r3
 800984e:	460b      	mov	r3, r1
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MINMEASUREMENT);
 8009854:	498b      	ldr	r1, [pc, #556]	; (8009a84 <writeConfig+0x330>)
 8009856:	487f      	ldr	r0, [pc, #508]	; (8009a54 <writeConfig+0x300>)
 8009858:	f009 fa27 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 800985c:	487d      	ldr	r0, [pc, #500]	; (8009a54 <writeConfig+0x300>)
 800985e:	f7fb fc97 	bl	8005190 <strlen>
 8009862:	4603      	mov	r3, r0
 8009864:	461a      	mov	r2, r3
 8009866:	4b7b      	ldr	r3, [pc, #492]	; (8009a54 <writeConfig+0x300>)
 8009868:	4413      	add	r3, r2
 800986a:	4980      	ldr	r1, [pc, #512]	; (8009a6c <writeConfig+0x318>)
 800986c:	461a      	mov	r2, r3
 800986e:	460b      	mov	r3, r1
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MINMEASUREPERIOD);
 8009874:	4984      	ldr	r1, [pc, #528]	; (8009a88 <writeConfig+0x334>)
 8009876:	4877      	ldr	r0, [pc, #476]	; (8009a54 <writeConfig+0x300>)
 8009878:	f009 fa17 	bl	8012caa <strcat>
	strcat((char*)fs_buf,"#\r\n");
 800987c:	4875      	ldr	r0, [pc, #468]	; (8009a54 <writeConfig+0x300>)
 800987e:	f7fb fc87 	bl	8005190 <strlen>
 8009882:	4603      	mov	r3, r0
 8009884:	461a      	mov	r2, r3
 8009886:	4b73      	ldr	r3, [pc, #460]	; (8009a54 <writeConfig+0x300>)
 8009888:	4413      	add	r3, r2
 800988a:	4a75      	ldr	r2, [pc, #468]	; (8009a60 <writeConfig+0x30c>)
 800988c:	6810      	ldr	r0, [r2, #0]
 800988e:	6018      	str	r0, [r3, #0]

	strcat((char*)fs_buf,"APN=");
 8009890:	4870      	ldr	r0, [pc, #448]	; (8009a54 <writeConfig+0x300>)
 8009892:	f7fb fc7d 	bl	8005190 <strlen>
 8009896:	4603      	mov	r3, r0
 8009898:	461a      	mov	r2, r3
 800989a:	4b6e      	ldr	r3, [pc, #440]	; (8009a54 <writeConfig+0x300>)
 800989c:	4413      	add	r3, r2
 800989e:	4a7b      	ldr	r2, [pc, #492]	; (8009a8c <writeConfig+0x338>)
 80098a0:	6810      	ldr	r0, [r2, #0]
 80098a2:	6018      	str	r0, [r3, #0]
 80098a4:	7912      	ldrb	r2, [r2, #4]
 80098a6:	711a      	strb	r2, [r3, #4]
	strcat((char*)fs_buf,(char*)APNCONTYPE);
 80098a8:	4979      	ldr	r1, [pc, #484]	; (8009a90 <writeConfig+0x33c>)
 80098aa:	486a      	ldr	r0, [pc, #424]	; (8009a54 <writeConfig+0x300>)
 80098ac:	f009 f9fd 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 80098b0:	4868      	ldr	r0, [pc, #416]	; (8009a54 <writeConfig+0x300>)
 80098b2:	f7fb fc6d 	bl	8005190 <strlen>
 80098b6:	4603      	mov	r3, r0
 80098b8:	461a      	mov	r2, r3
 80098ba:	4b66      	ldr	r3, [pc, #408]	; (8009a54 <writeConfig+0x300>)
 80098bc:	4413      	add	r3, r2
 80098be:	496b      	ldr	r1, [pc, #428]	; (8009a6c <writeConfig+0x318>)
 80098c0:	461a      	mov	r2, r3
 80098c2:	460b      	mov	r3, r1
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)APNNAME);
 80098c8:	4972      	ldr	r1, [pc, #456]	; (8009a94 <writeConfig+0x340>)
 80098ca:	4862      	ldr	r0, [pc, #392]	; (8009a54 <writeConfig+0x300>)
 80098cc:	f009 f9ed 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 80098d0:	4860      	ldr	r0, [pc, #384]	; (8009a54 <writeConfig+0x300>)
 80098d2:	f7fb fc5d 	bl	8005190 <strlen>
 80098d6:	4603      	mov	r3, r0
 80098d8:	461a      	mov	r2, r3
 80098da:	4b5e      	ldr	r3, [pc, #376]	; (8009a54 <writeConfig+0x300>)
 80098dc:	4413      	add	r3, r2
 80098de:	4963      	ldr	r1, [pc, #396]	; (8009a6c <writeConfig+0x318>)
 80098e0:	461a      	mov	r2, r3
 80098e2:	460b      	mov	r3, r1
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)APNUSERNAME);
 80098e8:	496b      	ldr	r1, [pc, #428]	; (8009a98 <writeConfig+0x344>)
 80098ea:	485a      	ldr	r0, [pc, #360]	; (8009a54 <writeConfig+0x300>)
 80098ec:	f009 f9dd 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 80098f0:	4858      	ldr	r0, [pc, #352]	; (8009a54 <writeConfig+0x300>)
 80098f2:	f7fb fc4d 	bl	8005190 <strlen>
 80098f6:	4603      	mov	r3, r0
 80098f8:	461a      	mov	r2, r3
 80098fa:	4b56      	ldr	r3, [pc, #344]	; (8009a54 <writeConfig+0x300>)
 80098fc:	4413      	add	r3, r2
 80098fe:	495b      	ldr	r1, [pc, #364]	; (8009a6c <writeConfig+0x318>)
 8009900:	461a      	mov	r2, r3
 8009902:	460b      	mov	r3, r1
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)APNPASSWORD);
 8009908:	4964      	ldr	r1, [pc, #400]	; (8009a9c <writeConfig+0x348>)
 800990a:	4852      	ldr	r0, [pc, #328]	; (8009a54 <writeConfig+0x300>)
 800990c:	f009 f9cd 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009910:	4850      	ldr	r0, [pc, #320]	; (8009a54 <writeConfig+0x300>)
 8009912:	f7fb fc3d 	bl	8005190 <strlen>
 8009916:	4603      	mov	r3, r0
 8009918:	461a      	mov	r2, r3
 800991a:	4b4e      	ldr	r3, [pc, #312]	; (8009a54 <writeConfig+0x300>)
 800991c:	4413      	add	r3, r2
 800991e:	4953      	ldr	r1, [pc, #332]	; (8009a6c <writeConfig+0x318>)
 8009920:	461a      	mov	r2, r3
 8009922:	460b      	mov	r3, r1
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)APNPHONENUM);
 8009928:	495d      	ldr	r1, [pc, #372]	; (8009aa0 <writeConfig+0x34c>)
 800992a:	484a      	ldr	r0, [pc, #296]	; (8009a54 <writeConfig+0x300>)
 800992c:	f009 f9bd 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009930:	4848      	ldr	r0, [pc, #288]	; (8009a54 <writeConfig+0x300>)
 8009932:	f7fb fc2d 	bl	8005190 <strlen>
 8009936:	4603      	mov	r3, r0
 8009938:	461a      	mov	r2, r3
 800993a:	4b46      	ldr	r3, [pc, #280]	; (8009a54 <writeConfig+0x300>)
 800993c:	4413      	add	r3, r2
 800993e:	494b      	ldr	r1, [pc, #300]	; (8009a6c <writeConfig+0x318>)
 8009940:	461a      	mov	r2, r3
 8009942:	460b      	mov	r3, r1
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)APNRATE);
 8009948:	4956      	ldr	r1, [pc, #344]	; (8009aa4 <writeConfig+0x350>)
 800994a:	4842      	ldr	r0, [pc, #264]	; (8009a54 <writeConfig+0x300>)
 800994c:	f009 f9ad 	bl	8012caa <strcat>
	strcat((char*)fs_buf,"#\r\n");
 8009950:	4840      	ldr	r0, [pc, #256]	; (8009a54 <writeConfig+0x300>)
 8009952:	f7fb fc1d 	bl	8005190 <strlen>
 8009956:	4603      	mov	r3, r0
 8009958:	461a      	mov	r2, r3
 800995a:	4b3e      	ldr	r3, [pc, #248]	; (8009a54 <writeConfig+0x300>)
 800995c:	4413      	add	r3, r2
 800995e:	4a40      	ldr	r2, [pc, #256]	; (8009a60 <writeConfig+0x30c>)
 8009960:	6810      	ldr	r0, [r2, #0]
 8009962:	6018      	str	r0, [r3, #0]

	strcat((char*)fs_buf,"MQTT=");
 8009964:	483b      	ldr	r0, [pc, #236]	; (8009a54 <writeConfig+0x300>)
 8009966:	f7fb fc13 	bl	8005190 <strlen>
 800996a:	4603      	mov	r3, r0
 800996c:	461a      	mov	r2, r3
 800996e:	4b39      	ldr	r3, [pc, #228]	; (8009a54 <writeConfig+0x300>)
 8009970:	4413      	add	r3, r2
 8009972:	4a4d      	ldr	r2, [pc, #308]	; (8009aa8 <writeConfig+0x354>)
 8009974:	6810      	ldr	r0, [r2, #0]
 8009976:	6018      	str	r0, [r3, #0]
 8009978:	8892      	ldrh	r2, [r2, #4]
 800997a:	809a      	strh	r2, [r3, #4]
	strcat((char*)fs_buf,(char*)MQTTIP);
 800997c:	494b      	ldr	r1, [pc, #300]	; (8009aac <writeConfig+0x358>)
 800997e:	4835      	ldr	r0, [pc, #212]	; (8009a54 <writeConfig+0x300>)
 8009980:	f009 f993 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009984:	4833      	ldr	r0, [pc, #204]	; (8009a54 <writeConfig+0x300>)
 8009986:	f7fb fc03 	bl	8005190 <strlen>
 800998a:	4603      	mov	r3, r0
 800998c:	461a      	mov	r2, r3
 800998e:	4b31      	ldr	r3, [pc, #196]	; (8009a54 <writeConfig+0x300>)
 8009990:	4413      	add	r3, r2
 8009992:	4936      	ldr	r1, [pc, #216]	; (8009a6c <writeConfig+0x318>)
 8009994:	461a      	mov	r2, r3
 8009996:	460b      	mov	r3, r1
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MQTTPORT);
 800999c:	4944      	ldr	r1, [pc, #272]	; (8009ab0 <writeConfig+0x35c>)
 800999e:	482d      	ldr	r0, [pc, #180]	; (8009a54 <writeConfig+0x300>)
 80099a0:	f009 f983 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 80099a4:	482b      	ldr	r0, [pc, #172]	; (8009a54 <writeConfig+0x300>)
 80099a6:	f7fb fbf3 	bl	8005190 <strlen>
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	4b29      	ldr	r3, [pc, #164]	; (8009a54 <writeConfig+0x300>)
 80099b0:	4413      	add	r3, r2
 80099b2:	492e      	ldr	r1, [pc, #184]	; (8009a6c <writeConfig+0x318>)
 80099b4:	461a      	mov	r2, r3
 80099b6:	460b      	mov	r3, r1
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MQTTUSERNAME);
 80099bc:	493d      	ldr	r1, [pc, #244]	; (8009ab4 <writeConfig+0x360>)
 80099be:	4825      	ldr	r0, [pc, #148]	; (8009a54 <writeConfig+0x300>)
 80099c0:	f009 f973 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 80099c4:	4823      	ldr	r0, [pc, #140]	; (8009a54 <writeConfig+0x300>)
 80099c6:	f7fb fbe3 	bl	8005190 <strlen>
 80099ca:	4603      	mov	r3, r0
 80099cc:	461a      	mov	r2, r3
 80099ce:	4b21      	ldr	r3, [pc, #132]	; (8009a54 <writeConfig+0x300>)
 80099d0:	4413      	add	r3, r2
 80099d2:	4926      	ldr	r1, [pc, #152]	; (8009a6c <writeConfig+0x318>)
 80099d4:	461a      	mov	r2, r3
 80099d6:	460b      	mov	r3, r1
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MQTTPASSWORD);
 80099dc:	4936      	ldr	r1, [pc, #216]	; (8009ab8 <writeConfig+0x364>)
 80099de:	481d      	ldr	r0, [pc, #116]	; (8009a54 <writeConfig+0x300>)
 80099e0:	f009 f963 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 80099e4:	481b      	ldr	r0, [pc, #108]	; (8009a54 <writeConfig+0x300>)
 80099e6:	f7fb fbd3 	bl	8005190 <strlen>
 80099ea:	4603      	mov	r3, r0
 80099ec:	461a      	mov	r2, r3
 80099ee:	4b19      	ldr	r3, [pc, #100]	; (8009a54 <writeConfig+0x300>)
 80099f0:	4413      	add	r3, r2
 80099f2:	491e      	ldr	r1, [pc, #120]	; (8009a6c <writeConfig+0x318>)
 80099f4:	461a      	mov	r2, r3
 80099f6:	460b      	mov	r3, r1
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MQTTQOS);
 80099fc:	492f      	ldr	r1, [pc, #188]	; (8009abc <writeConfig+0x368>)
 80099fe:	4815      	ldr	r0, [pc, #84]	; (8009a54 <writeConfig+0x300>)
 8009a00:	f009 f953 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009a04:	4813      	ldr	r0, [pc, #76]	; (8009a54 <writeConfig+0x300>)
 8009a06:	f7fb fbc3 	bl	8005190 <strlen>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4b11      	ldr	r3, [pc, #68]	; (8009a54 <writeConfig+0x300>)
 8009a10:	4413      	add	r3, r2
 8009a12:	4916      	ldr	r1, [pc, #88]	; (8009a6c <writeConfig+0x318>)
 8009a14:	461a      	mov	r2, r3
 8009a16:	460b      	mov	r3, r1
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MQTTCLEANASS);
 8009a1c:	4928      	ldr	r1, [pc, #160]	; (8009ac0 <writeConfig+0x36c>)
 8009a1e:	480d      	ldr	r0, [pc, #52]	; (8009a54 <writeConfig+0x300>)
 8009a20:	f009 f943 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009a24:	480b      	ldr	r0, [pc, #44]	; (8009a54 <writeConfig+0x300>)
 8009a26:	f7fb fbb3 	bl	8005190 <strlen>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <writeConfig+0x300>)
 8009a30:	4413      	add	r3, r2
 8009a32:	490e      	ldr	r1, [pc, #56]	; (8009a6c <writeConfig+0x318>)
 8009a34:	461a      	mov	r2, r3
 8009a36:	460b      	mov	r3, r1
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MQTTKEEPALIVE);
 8009a3c:	4921      	ldr	r1, [pc, #132]	; (8009ac4 <writeConfig+0x370>)
 8009a3e:	4805      	ldr	r0, [pc, #20]	; (8009a54 <writeConfig+0x300>)
 8009a40:	f009 f933 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009a44:	4803      	ldr	r0, [pc, #12]	; (8009a54 <writeConfig+0x300>)
 8009a46:	f7fb fba3 	bl	8005190 <strlen>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4b01      	ldr	r3, [pc, #4]	; (8009a54 <writeConfig+0x300>)
 8009a50:	4413      	add	r3, r2
 8009a52:	e039      	b.n	8009ac8 <writeConfig+0x374>
 8009a54:	200015e8 	.word	0x200015e8
 8009a58:	080152cc 	.word	0x080152cc
 8009a5c:	20003e20 	.word	0x20003e20
 8009a60:	080152d4 	.word	0x080152d4
 8009a64:	080152d8 	.word	0x080152d8
 8009a68:	200040f8 	.word	0x200040f8
 8009a6c:	080152e0 	.word	0x080152e0
 8009a70:	200002a0 	.word	0x200002a0
 8009a74:	20004428 	.word	0x20004428
 8009a78:	080152e4 	.word	0x080152e4
 8009a7c:	20003fac 	.word	0x20003fac
 8009a80:	2000412c 	.word	0x2000412c
 8009a84:	20004400 	.word	0x20004400
 8009a88:	200004e4 	.word	0x200004e4
 8009a8c:	080152ec 	.word	0x080152ec
 8009a90:	20000234 	.word	0x20000234
 8009a94:	20003e4c 	.word	0x20003e4c
 8009a98:	20000240 	.word	0x20000240
 8009a9c:	20004434 	.word	0x20004434
 8009aa0:	20004104 	.word	0x20004104
 8009aa4:	20003d8c 	.word	0x20003d8c
 8009aa8:	080152f4 	.word	0x080152f4
 8009aac:	20003d38 	.word	0x20003d38
 8009ab0:	2000421c 	.word	0x2000421c
 8009ab4:	20004138 	.word	0x20004138
 8009ab8:	20003e34 	.word	0x20003e34
 8009abc:	200040e0 	.word	0x200040e0
 8009ac0:	20003e70 	.word	0x20003e70
 8009ac4:	20004118 	.word	0x20004118
 8009ac8:	498a      	ldr	r1, [pc, #552]	; (8009cf4 <writeConfig+0x5a0>)
 8009aca:	461a      	mov	r2, r3
 8009acc:	460b      	mov	r3, r1
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)MQTTTIMEOUT);
 8009ad2:	4989      	ldr	r1, [pc, #548]	; (8009cf8 <writeConfig+0x5a4>)
 8009ad4:	4889      	ldr	r0, [pc, #548]	; (8009cfc <writeConfig+0x5a8>)
 8009ad6:	f009 f8e8 	bl	8012caa <strcat>
	i = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	607b      	str	r3, [r7, #4]
	while(MQTTTOPICS[i][0] != '\0'){
 8009ade:	e018      	b.n	8009b12 <writeConfig+0x3be>
		strcat((char*)fs_buf,",");
 8009ae0:	4886      	ldr	r0, [pc, #536]	; (8009cfc <writeConfig+0x5a8>)
 8009ae2:	f7fb fb55 	bl	8005190 <strlen>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4b84      	ldr	r3, [pc, #528]	; (8009cfc <writeConfig+0x5a8>)
 8009aec:	4413      	add	r3, r2
 8009aee:	4981      	ldr	r1, [pc, #516]	; (8009cf4 <writeConfig+0x5a0>)
 8009af0:	461a      	mov	r2, r3
 8009af2:	460b      	mov	r3, r1
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	8013      	strh	r3, [r2, #0]
		strcat((char*)fs_buf,(char*)MQTTTOPICS[i++]);
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	1c53      	adds	r3, r2, #1
 8009afc:	607b      	str	r3, [r7, #4]
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	005b      	lsls	r3, r3, #1
 8009b06:	4a7e      	ldr	r2, [pc, #504]	; (8009d00 <writeConfig+0x5ac>)
 8009b08:	4413      	add	r3, r2
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	487b      	ldr	r0, [pc, #492]	; (8009cfc <writeConfig+0x5a8>)
 8009b0e:	f009 f8cc 	bl	8012caa <strcat>
	while(MQTTTOPICS[i][0] != '\0'){
 8009b12:	497b      	ldr	r1, [pc, #492]	; (8009d00 <writeConfig+0x5ac>)
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	440b      	add	r3, r1
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1dc      	bne.n	8009ae0 <writeConfig+0x38c>
	}
	strcat((char*)fs_buf,"#\r\n");
 8009b26:	4875      	ldr	r0, [pc, #468]	; (8009cfc <writeConfig+0x5a8>)
 8009b28:	f7fb fb32 	bl	8005190 <strlen>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	461a      	mov	r2, r3
 8009b30:	4b72      	ldr	r3, [pc, #456]	; (8009cfc <writeConfig+0x5a8>)
 8009b32:	4413      	add	r3, r2
 8009b34:	4a73      	ldr	r2, [pc, #460]	; (8009d04 <writeConfig+0x5b0>)
 8009b36:	6810      	ldr	r0, [r2, #0]
 8009b38:	6018      	str	r0, [r3, #0]


	strcat((char*)fs_buf,"FTP=");
 8009b3a:	4870      	ldr	r0, [pc, #448]	; (8009cfc <writeConfig+0x5a8>)
 8009b3c:	f7fb fb28 	bl	8005190 <strlen>
 8009b40:	4603      	mov	r3, r0
 8009b42:	461a      	mov	r2, r3
 8009b44:	4b6d      	ldr	r3, [pc, #436]	; (8009cfc <writeConfig+0x5a8>)
 8009b46:	4413      	add	r3, r2
 8009b48:	4a6f      	ldr	r2, [pc, #444]	; (8009d08 <writeConfig+0x5b4>)
 8009b4a:	6810      	ldr	r0, [r2, #0]
 8009b4c:	6018      	str	r0, [r3, #0]
 8009b4e:	7912      	ldrb	r2, [r2, #4]
 8009b50:	711a      	strb	r2, [r3, #4]
	strcat((char*)fs_buf,(char*)FTPIP);
 8009b52:	496e      	ldr	r1, [pc, #440]	; (8009d0c <writeConfig+0x5b8>)
 8009b54:	4869      	ldr	r0, [pc, #420]	; (8009cfc <writeConfig+0x5a8>)
 8009b56:	f009 f8a8 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009b5a:	4868      	ldr	r0, [pc, #416]	; (8009cfc <writeConfig+0x5a8>)
 8009b5c:	f7fb fb18 	bl	8005190 <strlen>
 8009b60:	4603      	mov	r3, r0
 8009b62:	461a      	mov	r2, r3
 8009b64:	4b65      	ldr	r3, [pc, #404]	; (8009cfc <writeConfig+0x5a8>)
 8009b66:	4413      	add	r3, r2
 8009b68:	4962      	ldr	r1, [pc, #392]	; (8009cf4 <writeConfig+0x5a0>)
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)FTPPORT);
 8009b72:	4967      	ldr	r1, [pc, #412]	; (8009d10 <writeConfig+0x5bc>)
 8009b74:	4861      	ldr	r0, [pc, #388]	; (8009cfc <writeConfig+0x5a8>)
 8009b76:	f009 f898 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009b7a:	4860      	ldr	r0, [pc, #384]	; (8009cfc <writeConfig+0x5a8>)
 8009b7c:	f7fb fb08 	bl	8005190 <strlen>
 8009b80:	4603      	mov	r3, r0
 8009b82:	461a      	mov	r2, r3
 8009b84:	4b5d      	ldr	r3, [pc, #372]	; (8009cfc <writeConfig+0x5a8>)
 8009b86:	4413      	add	r3, r2
 8009b88:	495a      	ldr	r1, [pc, #360]	; (8009cf4 <writeConfig+0x5a0>)
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)FTPUSERNAME);
 8009b92:	4960      	ldr	r1, [pc, #384]	; (8009d14 <writeConfig+0x5c0>)
 8009b94:	4859      	ldr	r0, [pc, #356]	; (8009cfc <writeConfig+0x5a8>)
 8009b96:	f009 f888 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009b9a:	4858      	ldr	r0, [pc, #352]	; (8009cfc <writeConfig+0x5a8>)
 8009b9c:	f7fb faf8 	bl	8005190 <strlen>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	4b55      	ldr	r3, [pc, #340]	; (8009cfc <writeConfig+0x5a8>)
 8009ba6:	4413      	add	r3, r2
 8009ba8:	4952      	ldr	r1, [pc, #328]	; (8009cf4 <writeConfig+0x5a0>)
 8009baa:	461a      	mov	r2, r3
 8009bac:	460b      	mov	r3, r1
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)FTPPASSWORD);
 8009bb2:	4959      	ldr	r1, [pc, #356]	; (8009d18 <writeConfig+0x5c4>)
 8009bb4:	4851      	ldr	r0, [pc, #324]	; (8009cfc <writeConfig+0x5a8>)
 8009bb6:	f009 f878 	bl	8012caa <strcat>
	strcat((char*)fs_buf,",");
 8009bba:	4850      	ldr	r0, [pc, #320]	; (8009cfc <writeConfig+0x5a8>)
 8009bbc:	f7fb fae8 	bl	8005190 <strlen>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	4b4d      	ldr	r3, [pc, #308]	; (8009cfc <writeConfig+0x5a8>)
 8009bc6:	4413      	add	r3, r2
 8009bc8:	494a      	ldr	r1, [pc, #296]	; (8009cf4 <writeConfig+0x5a0>)
 8009bca:	461a      	mov	r2, r3
 8009bcc:	460b      	mov	r3, r1
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	8013      	strh	r3, [r2, #0]
	strcat((char*)fs_buf,(char*)FTPINTERVAL);
 8009bd2:	4952      	ldr	r1, [pc, #328]	; (8009d1c <writeConfig+0x5c8>)
 8009bd4:	4849      	ldr	r0, [pc, #292]	; (8009cfc <writeConfig+0x5a8>)
 8009bd6:	f009 f868 	bl	8012caa <strcat>
	i = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	607b      	str	r3, [r7, #4]
	while(FTPTOPICS[i][0] != '\0'){
 8009bde:	e018      	b.n	8009c12 <writeConfig+0x4be>
		strcat((char*)fs_buf,",");
 8009be0:	4846      	ldr	r0, [pc, #280]	; (8009cfc <writeConfig+0x5a8>)
 8009be2:	f7fb fad5 	bl	8005190 <strlen>
 8009be6:	4603      	mov	r3, r0
 8009be8:	461a      	mov	r2, r3
 8009bea:	4b44      	ldr	r3, [pc, #272]	; (8009cfc <writeConfig+0x5a8>)
 8009bec:	4413      	add	r3, r2
 8009bee:	4941      	ldr	r1, [pc, #260]	; (8009cf4 <writeConfig+0x5a0>)
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	8013      	strh	r3, [r2, #0]
		strcat((char*)fs_buf,(char*)FTPTOPICS[i++]);
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	1c53      	adds	r3, r2, #1
 8009bfc:	607b      	str	r3, [r7, #4]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	4a46      	ldr	r2, [pc, #280]	; (8009d20 <writeConfig+0x5cc>)
 8009c08:	4413      	add	r3, r2
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	483b      	ldr	r0, [pc, #236]	; (8009cfc <writeConfig+0x5a8>)
 8009c0e:	f009 f84c 	bl	8012caa <strcat>
	while(FTPTOPICS[i][0] != '\0'){
 8009c12:	4943      	ldr	r1, [pc, #268]	; (8009d20 <writeConfig+0x5cc>)
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	4613      	mov	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	440b      	add	r3, r1
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1dc      	bne.n	8009be0 <writeConfig+0x48c>
	}
	strcat((char*)fs_buf,"#\r\n");
 8009c26:	4835      	ldr	r0, [pc, #212]	; (8009cfc <writeConfig+0x5a8>)
 8009c28:	f7fb fab2 	bl	8005190 <strlen>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4b32      	ldr	r3, [pc, #200]	; (8009cfc <writeConfig+0x5a8>)
 8009c32:	4413      	add	r3, r2
 8009c34:	4a33      	ldr	r2, [pc, #204]	; (8009d04 <writeConfig+0x5b0>)
 8009c36:	6810      	ldr	r0, [r2, #0]
 8009c38:	6018      	str	r0, [r3, #0]
	strcat((char*)fs_buf,"NAME1=");
 8009c3a:	4830      	ldr	r0, [pc, #192]	; (8009cfc <writeConfig+0x5a8>)
 8009c3c:	f7fb faa8 	bl	8005190 <strlen>
 8009c40:	4603      	mov	r3, r0
 8009c42:	461a      	mov	r2, r3
 8009c44:	4b2d      	ldr	r3, [pc, #180]	; (8009cfc <writeConfig+0x5a8>)
 8009c46:	4413      	add	r3, r2
 8009c48:	4a36      	ldr	r2, [pc, #216]	; (8009d24 <writeConfig+0x5d0>)
 8009c4a:	6810      	ldr	r0, [r2, #0]
 8009c4c:	6018      	str	r0, [r3, #0]
 8009c4e:	8891      	ldrh	r1, [r2, #4]
 8009c50:	7992      	ldrb	r2, [r2, #6]
 8009c52:	8099      	strh	r1, [r3, #4]
 8009c54:	719a      	strb	r2, [r3, #6]
	strcat((char*)fs_buf,(char*)NAME1);
 8009c56:	4934      	ldr	r1, [pc, #208]	; (8009d28 <writeConfig+0x5d4>)
 8009c58:	4828      	ldr	r0, [pc, #160]	; (8009cfc <writeConfig+0x5a8>)
 8009c5a:	f009 f826 	bl	8012caa <strcat>
	strcat((char*)fs_buf,"#\r\n");
 8009c5e:	4827      	ldr	r0, [pc, #156]	; (8009cfc <writeConfig+0x5a8>)
 8009c60:	f7fb fa96 	bl	8005190 <strlen>
 8009c64:	4603      	mov	r3, r0
 8009c66:	461a      	mov	r2, r3
 8009c68:	4b24      	ldr	r3, [pc, #144]	; (8009cfc <writeConfig+0x5a8>)
 8009c6a:	4413      	add	r3, r2
 8009c6c:	4a25      	ldr	r2, [pc, #148]	; (8009d04 <writeConfig+0x5b0>)
 8009c6e:	6810      	ldr	r0, [r2, #0]
 8009c70:	6018      	str	r0, [r3, #0]

	strcat((char*)fs_buf,"NAME2=");
 8009c72:	4822      	ldr	r0, [pc, #136]	; (8009cfc <writeConfig+0x5a8>)
 8009c74:	f7fb fa8c 	bl	8005190 <strlen>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	4b1f      	ldr	r3, [pc, #124]	; (8009cfc <writeConfig+0x5a8>)
 8009c7e:	4413      	add	r3, r2
 8009c80:	4a2a      	ldr	r2, [pc, #168]	; (8009d2c <writeConfig+0x5d8>)
 8009c82:	6810      	ldr	r0, [r2, #0]
 8009c84:	6018      	str	r0, [r3, #0]
 8009c86:	8891      	ldrh	r1, [r2, #4]
 8009c88:	7992      	ldrb	r2, [r2, #6]
 8009c8a:	8099      	strh	r1, [r3, #4]
 8009c8c:	719a      	strb	r2, [r3, #6]
	strcat((char*)fs_buf,(char*)NAME2);
 8009c8e:	4928      	ldr	r1, [pc, #160]	; (8009d30 <writeConfig+0x5dc>)
 8009c90:	481a      	ldr	r0, [pc, #104]	; (8009cfc <writeConfig+0x5a8>)
 8009c92:	f009 f80a 	bl	8012caa <strcat>
	strcat((char*)fs_buf,"#\r\n");
 8009c96:	4819      	ldr	r0, [pc, #100]	; (8009cfc <writeConfig+0x5a8>)
 8009c98:	f7fb fa7a 	bl	8005190 <strlen>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	4b16      	ldr	r3, [pc, #88]	; (8009cfc <writeConfig+0x5a8>)
 8009ca2:	4413      	add	r3, r2
 8009ca4:	4a17      	ldr	r2, [pc, #92]	; (8009d04 <writeConfig+0x5b0>)
 8009ca6:	6810      	ldr	r0, [r2, #0]
 8009ca8:	6018      	str	r0, [r3, #0]

	strcat((char*)fs_buf,"NAME3=");
 8009caa:	4814      	ldr	r0, [pc, #80]	; (8009cfc <writeConfig+0x5a8>)
 8009cac:	f7fb fa70 	bl	8005190 <strlen>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <writeConfig+0x5a8>)
 8009cb6:	4413      	add	r3, r2
 8009cb8:	4a1e      	ldr	r2, [pc, #120]	; (8009d34 <writeConfig+0x5e0>)
 8009cba:	6810      	ldr	r0, [r2, #0]
 8009cbc:	6018      	str	r0, [r3, #0]
 8009cbe:	8891      	ldrh	r1, [r2, #4]
 8009cc0:	7992      	ldrb	r2, [r2, #6]
 8009cc2:	8099      	strh	r1, [r3, #4]
 8009cc4:	719a      	strb	r2, [r3, #6]
	strcat((char*)fs_buf,(char*)NAME3);
 8009cc6:	491c      	ldr	r1, [pc, #112]	; (8009d38 <writeConfig+0x5e4>)
 8009cc8:	480c      	ldr	r0, [pc, #48]	; (8009cfc <writeConfig+0x5a8>)
 8009cca:	f008 ffee 	bl	8012caa <strcat>
	strcat((char*)fs_buf,"#\r\n");
 8009cce:	480b      	ldr	r0, [pc, #44]	; (8009cfc <writeConfig+0x5a8>)
 8009cd0:	f7fb fa5e 	bl	8005190 <strlen>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	4b08      	ldr	r3, [pc, #32]	; (8009cfc <writeConfig+0x5a8>)
 8009cda:	4413      	add	r3, r2
 8009cdc:	4a09      	ldr	r2, [pc, #36]	; (8009d04 <writeConfig+0x5b0>)
 8009cde:	6810      	ldr	r0, [r2, #0]
 8009ce0:	6018      	str	r0, [r3, #0]

	fsWrite(PATHC);
 8009ce2:	4b16      	ldr	r3, [pc, #88]	; (8009d3c <writeConfig+0x5e8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fee8 	bl	8008abc <fsWrite>
}
 8009cec:	bf00      	nop
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	080152e0 	.word	0x080152e0
 8009cf8:	200040ec 	.word	0x200040ec
 8009cfc:	200015e8 	.word	0x200015e8
 8009d00:	20004228 	.word	0x20004228
 8009d04:	080152d4 	.word	0x080152d4
 8009d08:	080152fc 	.word	0x080152fc
 8009d0c:	20003e00 	.word	0x20003e00
 8009d10:	20000450 	.word	0x20000450
 8009d14:	200040b4 	.word	0x200040b4
 8009d18:	200003b4 	.word	0x200003b4
 8009d1c:	200003a8 	.word	0x200003a8
 8009d20:	20003edc 	.word	0x20003edc
 8009d24:	08015304 	.word	0x08015304
 8009d28:	2000418c 	.word	0x2000418c
 8009d2c:	0801530c 	.word	0x0801530c
 8009d30:	20003d04 	.word	0x20003d04
 8009d34:	08015314 	.word	0x08015314
 8009d38:	2000041c 	.word	0x2000041c
 8009d3c:	200000a8 	.word	0x200000a8

08009d40 <readTable>:
void readTable(int type){
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	int i=0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
	uint8_t* TABLE_P;
	if(type == 0){
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d105      	bne.n	8009d5e <readTable+0x1e>
		fsRead(PATHT);
 8009d52:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <readTable+0x88>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fe10 	bl	800897c <fsRead>
 8009d5c:	e004      	b.n	8009d68 <readTable+0x28>
	}
	else{
		fsRead(PATHTF);
 8009d5e:	4b1b      	ldr	r3, [pc, #108]	; (8009dcc <readTable+0x8c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fe0a 	bl	800897c <fsRead>
	}
	TABLE_P = (uint8_t*)strtok((char*)fs_buf,",");
 8009d68:	4919      	ldr	r1, [pc, #100]	; (8009dd0 <readTable+0x90>)
 8009d6a:	481a      	ldr	r0, [pc, #104]	; (8009dd4 <readTable+0x94>)
 8009d6c:	f008 ffea 	bl	8012d44 <strtok>
 8009d70:	60b8      	str	r0, [r7, #8]
	while(TABLE_P != NULL){
 8009d72:	e00e      	b.n	8009d92 <readTable+0x52>
		TABLE[i++] = atol((char*)TABLE_P);
 8009d74:	68fc      	ldr	r4, [r7, #12]
 8009d76:	1c63      	adds	r3, r4, #1
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	68b8      	ldr	r0, [r7, #8]
 8009d7c:	f008 fea8 	bl	8012ad0 <atol>
 8009d80:	4603      	mov	r3, r0
 8009d82:	4a15      	ldr	r2, [pc, #84]	; (8009dd8 <readTable+0x98>)
 8009d84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		TABLE_P = (uint8_t*)strtok((char*)NULL,",");
 8009d88:	4911      	ldr	r1, [pc, #68]	; (8009dd0 <readTable+0x90>)
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	f008 ffda 	bl	8012d44 <strtok>
 8009d90:	60b8      	str	r0, [r7, #8]
	while(TABLE_P != NULL){
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1ed      	bne.n	8009d74 <readTable+0x34>
	}
	TABLE[i] = -1;
 8009d98:	4a0f      	ldr	r2, [pc, #60]	; (8009dd8 <readTable+0x98>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8009da0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while(i++<999){
 8009da4:	e004      	b.n	8009db0 <readTable+0x70>
		TABLE[i] = -1000;
 8009da6:	4a0c      	ldr	r2, [pc, #48]	; (8009dd8 <readTable+0x98>)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	490c      	ldr	r1, [pc, #48]	; (8009ddc <readTable+0x9c>)
 8009dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while(i++<999){
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	60fa      	str	r2, [r7, #12]
 8009db6:	f240 32e6 	movw	r2, #998	; 0x3e6
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	ddf3      	ble.n	8009da6 <readTable+0x66>
	}
}
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd90      	pop	{r4, r7, pc}
 8009dc8:	200000ac 	.word	0x200000ac
 8009dcc:	200000b4 	.word	0x200000b4
 8009dd0:	080152e0 	.word	0x080152e0
 8009dd4:	200015e8 	.word	0x200015e8
 8009dd8:	20000644 	.word	0x20000644
 8009ddc:	fffffc18 	.word	0xfffffc18

08009de0 <writeTable>:
void writeTable(void){
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
	int i=0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60fb      	str	r3, [r7, #12]
	char TABLE_A[10];
	strcpy((char*)fs_buf,"");
 8009dea:	4b26      	ldr	r3, [pc, #152]	; (8009e84 <writeTable+0xa4>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]
	itoa((int)TABLE[i++],TABLE_A,10);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	60fa      	str	r2, [r7, #12]
 8009df6:	4a24      	ldr	r2, [pc, #144]	; (8009e88 <writeTable+0xa8>)
 8009df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	220a      	movs	r2, #10
 8009e00:	4618      	mov	r0, r3
 8009e02:	f008 feab 	bl	8012b5c <itoa>
	strcat((char*)fs_buf,TABLE_A);
 8009e06:	463b      	mov	r3, r7
 8009e08:	4619      	mov	r1, r3
 8009e0a:	481e      	ldr	r0, [pc, #120]	; (8009e84 <writeTable+0xa4>)
 8009e0c:	f008 ff4d 	bl	8012caa <strcat>
	while(TABLE[i] != -1){
 8009e10:	e01b      	b.n	8009e4a <writeTable+0x6a>
		itoa((int)TABLE[i++],TABLE_A,10);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1c5a      	adds	r2, r3, #1
 8009e16:	60fa      	str	r2, [r7, #12]
 8009e18:	4a1b      	ldr	r2, [pc, #108]	; (8009e88 <writeTable+0xa8>)
 8009e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e1e:	4639      	mov	r1, r7
 8009e20:	220a      	movs	r2, #10
 8009e22:	4618      	mov	r0, r3
 8009e24:	f008 fe9a 	bl	8012b5c <itoa>
		strcat((char*)fs_buf,",");
 8009e28:	4816      	ldr	r0, [pc, #88]	; (8009e84 <writeTable+0xa4>)
 8009e2a:	f7fb f9b1 	bl	8005190 <strlen>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	461a      	mov	r2, r3
 8009e32:	4b14      	ldr	r3, [pc, #80]	; (8009e84 <writeTable+0xa4>)
 8009e34:	4413      	add	r3, r2
 8009e36:	4915      	ldr	r1, [pc, #84]	; (8009e8c <writeTable+0xac>)
 8009e38:	461a      	mov	r2, r3
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	8013      	strh	r3, [r2, #0]
		strcat((char*)fs_buf,TABLE_A);
 8009e40:	463b      	mov	r3, r7
 8009e42:	4619      	mov	r1, r3
 8009e44:	480f      	ldr	r0, [pc, #60]	; (8009e84 <writeTable+0xa4>)
 8009e46:	f008 ff30 	bl	8012caa <strcat>
	while(TABLE[i] != -1){
 8009e4a:	4a0f      	ldr	r2, [pc, #60]	; (8009e88 <writeTable+0xa8>)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e56:	d1dc      	bne.n	8009e12 <writeTable+0x32>
	}
	strcat((char*)fs_buf,"#");
 8009e58:	480a      	ldr	r0, [pc, #40]	; (8009e84 <writeTable+0xa4>)
 8009e5a:	f7fb f999 	bl	8005190 <strlen>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	461a      	mov	r2, r3
 8009e62:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <writeTable+0xa4>)
 8009e64:	4413      	add	r3, r2
 8009e66:	490a      	ldr	r1, [pc, #40]	; (8009e90 <writeTable+0xb0>)
 8009e68:	461a      	mov	r2, r3
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	8013      	strh	r3, [r2, #0]
	fsWrite(PATHT);
 8009e70:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <writeTable+0xb4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe fe21 	bl	8008abc <fsWrite>
}
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	200015e8 	.word	0x200015e8
 8009e88:	20000644 	.word	0x20000644
 8009e8c:	080152e0 	.word	0x080152e0
 8009e90:	080151dc 	.word	0x080151dc
 8009e94:	200000ac 	.word	0x200000ac

08009e98 <defaultParam>:
void defaultParam(void){
 8009e98:	b4b0      	push	{r4, r5, r7}
 8009e9a:	af00      	add	r7, sp, #0
	strcpy((char*)UPNUM,"+998");
 8009e9c:	4b61      	ldr	r3, [pc, #388]	; (800a024 <defaultParam+0x18c>)
 8009e9e:	4a62      	ldr	r2, [pc, #392]	; (800a028 <defaultParam+0x190>)
 8009ea0:	6810      	ldr	r0, [r2, #0]
 8009ea2:	6018      	str	r0, [r3, #0]
 8009ea4:	7912      	ldrb	r2, [r2, #4]
 8009ea6:	711a      	strb	r2, [r3, #4]

	strcpy((char*)SENSORTYPE,"MB7588");
 8009ea8:	4b60      	ldr	r3, [pc, #384]	; (800a02c <defaultParam+0x194>)
 8009eaa:	4a61      	ldr	r2, [pc, #388]	; (800a030 <defaultParam+0x198>)
 8009eac:	6810      	ldr	r0, [r2, #0]
 8009eae:	6018      	str	r0, [r3, #0]
 8009eb0:	8891      	ldrh	r1, [r2, #4]
 8009eb2:	7992      	ldrb	r2, [r2, #6]
 8009eb4:	8099      	strh	r1, [r3, #4]
 8009eb6:	719a      	strb	r2, [r3, #6]
	strcpy((char*)SETH,"0");
 8009eb8:	4a5e      	ldr	r2, [pc, #376]	; (800a034 <defaultParam+0x19c>)
 8009eba:	4b5f      	ldr	r3, [pc, #380]	; (800a038 <defaultParam+0x1a0>)
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	8013      	strh	r3, [r2, #0]
	strcpy((char*)COR,"0");
 8009ec0:	4a5e      	ldr	r2, [pc, #376]	; (800a03c <defaultParam+0x1a4>)
 8009ec2:	4b5d      	ldr	r3, [pc, #372]	; (800a038 <defaultParam+0x1a0>)
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	8013      	strh	r3, [r2, #0]

	strcpy((char*)MINDISTANCE,"10");
 8009ec8:	4b5d      	ldr	r3, [pc, #372]	; (800a040 <defaultParam+0x1a8>)
 8009eca:	4a5e      	ldr	r2, [pc, #376]	; (800a044 <defaultParam+0x1ac>)
 8009ecc:	8811      	ldrh	r1, [r2, #0]
 8009ece:	7892      	ldrb	r2, [r2, #2]
 8009ed0:	8019      	strh	r1, [r3, #0]
 8009ed2:	709a      	strb	r2, [r3, #2]
	strcpy((char*)MINSENDPERIOD,"2");
 8009ed4:	4a5c      	ldr	r2, [pc, #368]	; (800a048 <defaultParam+0x1b0>)
 8009ed6:	4b5d      	ldr	r3, [pc, #372]	; (800a04c <defaultParam+0x1b4>)
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	8013      	strh	r3, [r2, #0]
	strcpy((char*)MINMEASUREMENT,"2");
 8009edc:	4a5c      	ldr	r2, [pc, #368]	; (800a050 <defaultParam+0x1b8>)
 8009ede:	4b5b      	ldr	r3, [pc, #364]	; (800a04c <defaultParam+0x1b4>)
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	8013      	strh	r3, [r2, #0]
	strcpy((char*)MINMEASUREPERIOD,"5");
 8009ee4:	4a5b      	ldr	r2, [pc, #364]	; (800a054 <defaultParam+0x1bc>)
 8009ee6:	4b5c      	ldr	r3, [pc, #368]	; (800a058 <defaultParam+0x1c0>)
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	8013      	strh	r3, [r2, #0]

	strcpy((char*)MQTTIP,"185.196.214.190");
 8009eec:	4a5b      	ldr	r2, [pc, #364]	; (800a05c <defaultParam+0x1c4>)
 8009eee:	4b5c      	ldr	r3, [pc, #368]	; (800a060 <defaultParam+0x1c8>)
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	461d      	mov	r5, r3
 8009ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ef6:	6020      	str	r0, [r4, #0]
 8009ef8:	6061      	str	r1, [r4, #4]
 8009efa:	60a2      	str	r2, [r4, #8]
 8009efc:	60e3      	str	r3, [r4, #12]
	strcpy((char*)MQTTPORT,"1883");
 8009efe:	4b59      	ldr	r3, [pc, #356]	; (800a064 <defaultParam+0x1cc>)
 8009f00:	4a59      	ldr	r2, [pc, #356]	; (800a068 <defaultParam+0x1d0>)
 8009f02:	6810      	ldr	r0, [r2, #0]
 8009f04:	6018      	str	r0, [r3, #0]
 8009f06:	7912      	ldrb	r2, [r2, #4]
 8009f08:	711a      	strb	r2, [r3, #4]
	strcpy((char*)MQTTUSERNAME,"emqx");
 8009f0a:	4b58      	ldr	r3, [pc, #352]	; (800a06c <defaultParam+0x1d4>)
 8009f0c:	4a58      	ldr	r2, [pc, #352]	; (800a070 <defaultParam+0x1d8>)
 8009f0e:	6810      	ldr	r0, [r2, #0]
 8009f10:	6018      	str	r0, [r3, #0]
 8009f12:	7912      	ldrb	r2, [r2, #4]
 8009f14:	711a      	strb	r2, [r3, #4]
	strcpy((char*)MQTTPASSWORD,"12345");
 8009f16:	4b57      	ldr	r3, [pc, #348]	; (800a074 <defaultParam+0x1dc>)
 8009f18:	4a57      	ldr	r2, [pc, #348]	; (800a078 <defaultParam+0x1e0>)
 8009f1a:	6810      	ldr	r0, [r2, #0]
 8009f1c:	6018      	str	r0, [r3, #0]
 8009f1e:	8892      	ldrh	r2, [r2, #4]
 8009f20:	809a      	strh	r2, [r3, #4]
	strcpy((char*)MQTTQOS,"1");
 8009f22:	4a56      	ldr	r2, [pc, #344]	; (800a07c <defaultParam+0x1e4>)
 8009f24:	4b56      	ldr	r3, [pc, #344]	; (800a080 <defaultParam+0x1e8>)
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	8013      	strh	r3, [r2, #0]
	strcpy((char*)MQTTCLEANASS,"0");
 8009f2a:	4a56      	ldr	r2, [pc, #344]	; (800a084 <defaultParam+0x1ec>)
 8009f2c:	4b42      	ldr	r3, [pc, #264]	; (800a038 <defaultParam+0x1a0>)
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	8013      	strh	r3, [r2, #0]
	strcpy((char*)MQTTKEEPALIVE,"60");
 8009f32:	4b55      	ldr	r3, [pc, #340]	; (800a088 <defaultParam+0x1f0>)
 8009f34:	4a55      	ldr	r2, [pc, #340]	; (800a08c <defaultParam+0x1f4>)
 8009f36:	8811      	ldrh	r1, [r2, #0]
 8009f38:	7892      	ldrb	r2, [r2, #2]
 8009f3a:	8019      	strh	r1, [r3, #0]
 8009f3c:	709a      	strb	r2, [r3, #2]
	strcpy((char*)MQTTTIMEOUT,"60");
 8009f3e:	4b54      	ldr	r3, [pc, #336]	; (800a090 <defaultParam+0x1f8>)
 8009f40:	4a52      	ldr	r2, [pc, #328]	; (800a08c <defaultParam+0x1f4>)
 8009f42:	8811      	ldrh	r1, [r2, #0]
 8009f44:	7892      	ldrb	r2, [r2, #2]
 8009f46:	8019      	strh	r1, [r3, #0]
 8009f48:	709a      	strb	r2, [r3, #2]
	strcpy((char*)MQTTTOPICS[0],"SARF");
 8009f4a:	4b52      	ldr	r3, [pc, #328]	; (800a094 <defaultParam+0x1fc>)
 8009f4c:	4a52      	ldr	r2, [pc, #328]	; (800a098 <defaultParam+0x200>)
 8009f4e:	6810      	ldr	r0, [r2, #0]
 8009f50:	6018      	str	r0, [r3, #0]
 8009f52:	7912      	ldrb	r2, [r2, #4]
 8009f54:	711a      	strb	r2, [r3, #4]
	strcpy((char*)MQTTTOPICS[1],"SATH");
 8009f56:	4b51      	ldr	r3, [pc, #324]	; (800a09c <defaultParam+0x204>)
 8009f58:	4a51      	ldr	r2, [pc, #324]	; (800a0a0 <defaultParam+0x208>)
 8009f5a:	6810      	ldr	r0, [r2, #0]
 8009f5c:	6018      	str	r0, [r3, #0]
 8009f5e:	7912      	ldrb	r2, [r2, #4]
 8009f60:	711a      	strb	r2, [r3, #4]
	strcpy((char*)MQTTTOPICS[2],"BAT");
 8009f62:	4b50      	ldr	r3, [pc, #320]	; (800a0a4 <defaultParam+0x20c>)
 8009f64:	4a50      	ldr	r2, [pc, #320]	; (800a0a8 <defaultParam+0x210>)
 8009f66:	6810      	ldr	r0, [r2, #0]
 8009f68:	6018      	str	r0, [r3, #0]
	strcpy((char*)MQTTTOPICS[3],"COR");
 8009f6a:	4b50      	ldr	r3, [pc, #320]	; (800a0ac <defaultParam+0x214>)
 8009f6c:	4a50      	ldr	r2, [pc, #320]	; (800a0b0 <defaultParam+0x218>)
 8009f6e:	6810      	ldr	r0, [r2, #0]
 8009f70:	6018      	str	r0, [r3, #0]

	strcpy((char*)FTPIP,"185.196.214.63");
 8009f72:	4a50      	ldr	r2, [pc, #320]	; (800a0b4 <defaultParam+0x21c>)
 8009f74:	4b50      	ldr	r3, [pc, #320]	; (800a0b8 <defaultParam+0x220>)
 8009f76:	4614      	mov	r4, r2
 8009f78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009f7a:	6020      	str	r0, [r4, #0]
 8009f7c:	6061      	str	r1, [r4, #4]
 8009f7e:	60a2      	str	r2, [r4, #8]
 8009f80:	881a      	ldrh	r2, [r3, #0]
 8009f82:	789b      	ldrb	r3, [r3, #2]
 8009f84:	81a2      	strh	r2, [r4, #12]
 8009f86:	73a3      	strb	r3, [r4, #14]
	strcpy((char*)FTPPORT,"21");
 8009f88:	4b4c      	ldr	r3, [pc, #304]	; (800a0bc <defaultParam+0x224>)
 8009f8a:	4a4d      	ldr	r2, [pc, #308]	; (800a0c0 <defaultParam+0x228>)
 8009f8c:	8811      	ldrh	r1, [r2, #0]
 8009f8e:	7892      	ldrb	r2, [r2, #2]
 8009f90:	8019      	strh	r1, [r3, #0]
 8009f92:	709a      	strb	r2, [r3, #2]
	strcpy((char*)FTPUSERNAME,"admin_smart_ftp");
 8009f94:	4a4b      	ldr	r2, [pc, #300]	; (800a0c4 <defaultParam+0x22c>)
 8009f96:	4b4c      	ldr	r3, [pc, #304]	; (800a0c8 <defaultParam+0x230>)
 8009f98:	4614      	mov	r4, r2
 8009f9a:	461d      	mov	r5, r3
 8009f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f9e:	6020      	str	r0, [r4, #0]
 8009fa0:	6061      	str	r1, [r4, #4]
 8009fa2:	60a2      	str	r2, [r4, #8]
 8009fa4:	60e3      	str	r3, [r4, #12]
	strcpy((char*)FTPPASSWORD,"12345678");
 8009fa6:	4a49      	ldr	r2, [pc, #292]	; (800a0cc <defaultParam+0x234>)
 8009fa8:	4b49      	ldr	r3, [pc, #292]	; (800a0d0 <defaultParam+0x238>)
 8009faa:	cb03      	ldmia	r3!, {r0, r1}
 8009fac:	6010      	str	r0, [r2, #0]
 8009fae:	6051      	str	r1, [r2, #4]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	7213      	strb	r3, [r2, #8]
	strcpy((char*)FTPINTERVAL,"2");
 8009fb4:	4a47      	ldr	r2, [pc, #284]	; (800a0d4 <defaultParam+0x23c>)
 8009fb6:	4b25      	ldr	r3, [pc, #148]	; (800a04c <defaultParam+0x1b4>)
 8009fb8:	881b      	ldrh	r3, [r3, #0]
 8009fba:	8013      	strh	r3, [r2, #0]
	strcpy((char*)FTPTOPICS[0],"BAT");
 8009fbc:	4b46      	ldr	r3, [pc, #280]	; (800a0d8 <defaultParam+0x240>)
 8009fbe:	4a3a      	ldr	r2, [pc, #232]	; (800a0a8 <defaultParam+0x210>)
 8009fc0:	6810      	ldr	r0, [r2, #0]
 8009fc2:	6018      	str	r0, [r3, #0]
	strcpy((char*)FTPTOPICS[1],"FW");
 8009fc4:	4b45      	ldr	r3, [pc, #276]	; (800a0dc <defaultParam+0x244>)
 8009fc6:	4a46      	ldr	r2, [pc, #280]	; (800a0e0 <defaultParam+0x248>)
 8009fc8:	8811      	ldrh	r1, [r2, #0]
 8009fca:	7892      	ldrb	r2, [r2, #2]
 8009fcc:	8019      	strh	r1, [r3, #0]
 8009fce:	709a      	strb	r2, [r3, #2]

	strcpy((char*)NAME1,"0");
 8009fd0:	4a44      	ldr	r2, [pc, #272]	; (800a0e4 <defaultParam+0x24c>)
 8009fd2:	4b19      	ldr	r3, [pc, #100]	; (800a038 <defaultParam+0x1a0>)
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	8013      	strh	r3, [r2, #0]
	strcpy((char*)NAME2,"0");
 8009fd8:	4a43      	ldr	r2, [pc, #268]	; (800a0e8 <defaultParam+0x250>)
 8009fda:	4b17      	ldr	r3, [pc, #92]	; (800a038 <defaultParam+0x1a0>)
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	8013      	strh	r3, [r2, #0]
	strcpy((char*)NAME3,"0");
 8009fe0:	4a42      	ldr	r2, [pc, #264]	; (800a0ec <defaultParam+0x254>)
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <defaultParam+0x1a0>)
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	8013      	strh	r3, [r2, #0]

	strcpy((char*)APNCONTYPE,"GPRS");
 8009fe8:	4b41      	ldr	r3, [pc, #260]	; (800a0f0 <defaultParam+0x258>)
 8009fea:	4a42      	ldr	r2, [pc, #264]	; (800a0f4 <defaultParam+0x25c>)
 8009fec:	6810      	ldr	r0, [r2, #0]
 8009fee:	6018      	str	r0, [r3, #0]
 8009ff0:	7912      	ldrb	r2, [r2, #4]
 8009ff2:	711a      	strb	r2, [r3, #4]
	strcpy((char*)APNNAME,"internet");
 8009ff4:	4a40      	ldr	r2, [pc, #256]	; (800a0f8 <defaultParam+0x260>)
 8009ff6:	4b41      	ldr	r3, [pc, #260]	; (800a0fc <defaultParam+0x264>)
 8009ff8:	cb03      	ldmia	r3!, {r0, r1}
 8009ffa:	6010      	str	r0, [r2, #0]
 8009ffc:	6051      	str	r1, [r2, #4]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	7213      	strb	r3, [r2, #8]
	strcpy((char*)APNUSERNAME,"");
 800a002:	4b3f      	ldr	r3, [pc, #252]	; (800a100 <defaultParam+0x268>)
 800a004:	2200      	movs	r2, #0
 800a006:	701a      	strb	r2, [r3, #0]
	strcpy((char*)APNPASSWORD,"");
 800a008:	4b3e      	ldr	r3, [pc, #248]	; (800a104 <defaultParam+0x26c>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	701a      	strb	r2, [r3, #0]
	strcpy((char*)APNPHONENUM,"");
 800a00e:	4b3e      	ldr	r3, [pc, #248]	; (800a108 <defaultParam+0x270>)
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]
	strcpy((char*)APNRATE,"2");
 800a014:	4a3d      	ldr	r2, [pc, #244]	; (800a10c <defaultParam+0x274>)
 800a016:	4b0d      	ldr	r3, [pc, #52]	; (800a04c <defaultParam+0x1b4>)
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	8013      	strh	r3, [r2, #0]

}
 800a01c:	bf00      	nop
 800a01e:	46bd      	mov	sp, r7
 800a020:	bcb0      	pop	{r4, r5, r7}
 800a022:	4770      	bx	lr
 800a024:	20003e20 	.word	0x20003e20
 800a028:	0801531c 	.word	0x0801531c
 800a02c:	200040f8 	.word	0x200040f8
 800a030:	08015324 	.word	0x08015324
 800a034:	200002a0 	.word	0x200002a0
 800a038:	0801532c 	.word	0x0801532c
 800a03c:	20004428 	.word	0x20004428
 800a040:	20003fac 	.word	0x20003fac
 800a044:	08015330 	.word	0x08015330
 800a048:	2000412c 	.word	0x2000412c
 800a04c:	08015334 	.word	0x08015334
 800a050:	20004400 	.word	0x20004400
 800a054:	200004e4 	.word	0x200004e4
 800a058:	08015338 	.word	0x08015338
 800a05c:	20003d38 	.word	0x20003d38
 800a060:	0801533c 	.word	0x0801533c
 800a064:	2000421c 	.word	0x2000421c
 800a068:	0801534c 	.word	0x0801534c
 800a06c:	20004138 	.word	0x20004138
 800a070:	08015354 	.word	0x08015354
 800a074:	20003e34 	.word	0x20003e34
 800a078:	0801535c 	.word	0x0801535c
 800a07c:	200040e0 	.word	0x200040e0
 800a080:	08015364 	.word	0x08015364
 800a084:	20003e70 	.word	0x20003e70
 800a088:	20004118 	.word	0x20004118
 800a08c:	08015368 	.word	0x08015368
 800a090:	200040ec 	.word	0x200040ec
 800a094:	20004228 	.word	0x20004228
 800a098:	0801536c 	.word	0x0801536c
 800a09c:	20004232 	.word	0x20004232
 800a0a0:	08015374 	.word	0x08015374
 800a0a4:	2000423c 	.word	0x2000423c
 800a0a8:	0801537c 	.word	0x0801537c
 800a0ac:	20004246 	.word	0x20004246
 800a0b0:	08015380 	.word	0x08015380
 800a0b4:	20003e00 	.word	0x20003e00
 800a0b8:	08015384 	.word	0x08015384
 800a0bc:	20000450 	.word	0x20000450
 800a0c0:	08015394 	.word	0x08015394
 800a0c4:	200040b4 	.word	0x200040b4
 800a0c8:	08015398 	.word	0x08015398
 800a0cc:	200003b4 	.word	0x200003b4
 800a0d0:	080153a8 	.word	0x080153a8
 800a0d4:	200003a8 	.word	0x200003a8
 800a0d8:	20003edc 	.word	0x20003edc
 800a0dc:	20003ee6 	.word	0x20003ee6
 800a0e0:	080153b4 	.word	0x080153b4
 800a0e4:	2000418c 	.word	0x2000418c
 800a0e8:	20003d04 	.word	0x20003d04
 800a0ec:	2000041c 	.word	0x2000041c
 800a0f0:	20000234 	.word	0x20000234
 800a0f4:	080153b8 	.word	0x080153b8
 800a0f8:	20003e4c 	.word	0x20003e4c
 800a0fc:	080153c0 	.word	0x080153c0
 800a100:	20000240 	.word	0x20000240
 800a104:	20004434 	.word	0x20004434
 800a108:	20004104 	.word	0x20004104
 800a10c:	20003d8c 	.word	0x20003d8c

0800a110 <defaultTable>:
void defaultTable(void){
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
	TABLE[0]=0;
 800a114:	4b14      	ldr	r3, [pc, #80]	; (800a168 <defaultTable+0x58>)
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]
	TABLE[1]=0;
 800a11a:	4b13      	ldr	r3, [pc, #76]	; (800a168 <defaultTable+0x58>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	605a      	str	r2, [r3, #4]
	TABLE[2]=0;
 800a120:	4b11      	ldr	r3, [pc, #68]	; (800a168 <defaultTable+0x58>)
 800a122:	2200      	movs	r2, #0
 800a124:	609a      	str	r2, [r3, #8]
	TABLE[3]=0;
 800a126:	4b10      	ldr	r3, [pc, #64]	; (800a168 <defaultTable+0x58>)
 800a128:	2200      	movs	r2, #0
 800a12a:	60da      	str	r2, [r3, #12]
	TABLE[4]=0;
 800a12c:	4b0e      	ldr	r3, [pc, #56]	; (800a168 <defaultTable+0x58>)
 800a12e:	2200      	movs	r2, #0
 800a130:	611a      	str	r2, [r3, #16]
	TABLE[5]=0;
 800a132:	4b0d      	ldr	r3, [pc, #52]	; (800a168 <defaultTable+0x58>)
 800a134:	2200      	movs	r2, #0
 800a136:	615a      	str	r2, [r3, #20]
	TABLE[6]=0;
 800a138:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <defaultTable+0x58>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	619a      	str	r2, [r3, #24]
	TABLE[7]=0;
 800a13e:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <defaultTable+0x58>)
 800a140:	2200      	movs	r2, #0
 800a142:	61da      	str	r2, [r3, #28]
	TABLE[8]=0;
 800a144:	4b08      	ldr	r3, [pc, #32]	; (800a168 <defaultTable+0x58>)
 800a146:	2200      	movs	r2, #0
 800a148:	621a      	str	r2, [r3, #32]
	TABLE[9]=0;
 800a14a:	4b07      	ldr	r3, [pc, #28]	; (800a168 <defaultTable+0x58>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	625a      	str	r2, [r3, #36]	; 0x24
	TABLE[10]=0;
 800a150:	4b05      	ldr	r3, [pc, #20]	; (800a168 <defaultTable+0x58>)
 800a152:	2200      	movs	r2, #0
 800a154:	629a      	str	r2, [r3, #40]	; 0x28
	TABLE[11]=-1;
 800a156:	4b04      	ldr	r3, [pc, #16]	; (800a168 <defaultTable+0x58>)
 800a158:	f04f 32ff 	mov.w	r2, #4294967295
 800a15c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a15e:	bf00      	nop
 800a160:	46bd      	mov	sp, r7
 800a162:	bc80      	pop	{r7}
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	20000644 	.word	0x20000644

0800a16c <updateConfig>:
void updateConfig(int type){
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
	readConfig(type);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff f8f3 	bl	8009360 <readConfig>
	writeConfig();
 800a17a:	f7ff faeb 	bl	8009754 <writeConfig>
}
 800a17e:	bf00      	nop
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <updateTable>:
void updateTable(int type){
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
	readTable(type);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff fdd6 	bl	8009d40 <readTable>
	writeTable();
 800a194:	f7ff fe24 	bl	8009de0 <writeTable>
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <getgsmloc>:
#include "gsmloc.h"
#include "uart.h"
#include "mqtt.h"
#include "sim868.h"
#include <string.h>
void getgsmloc(){
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
	if(CONNECTION == CONNECTED){
 800a1a4:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <getgsmloc+0x78>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b38      	cmp	r3, #56	; 0x38
 800a1aa:	d132      	bne.n	800a212 <getgsmloc+0x72>
		GSMLOCATION = NOT_LOCKED;
 800a1ac:	4b1b      	ldr	r3, [pc, #108]	; (800a21c <getgsmloc+0x7c>)
 800a1ae:	223b      	movs	r2, #59	; 0x3b
 800a1b0:	601a      	str	r2, [r3, #0]
		txr(uartModem, (uint8_t*)"AT+CLBS=4,1\r\n");
 800a1b2:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <getgsmloc+0x80>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	491b      	ldr	r1, [pc, #108]	; (800a224 <getgsmloc+0x84>)
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f008 fa85 	bl	80126c8 <txr>
		rx(uartModem, SIMN, 25);
 800a1be:	4b18      	ldr	r3, [pc, #96]	; (800a220 <getgsmloc+0x80>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a19      	ldr	r2, [pc, #100]	; (800a228 <getgsmloc+0x88>)
 800a1c4:	6811      	ldr	r1, [r2, #0]
 800a1c6:	2219      	movs	r2, #25
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f008 f9b9 	bl	8012540 <rx>
		rx(uartModem, (uint8_t*)"+CLBS: ", 1);
 800a1ce:	4b14      	ldr	r3, [pc, #80]	; (800a220 <getgsmloc+0x80>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4915      	ldr	r1, [pc, #84]	; (800a22c <getgsmloc+0x8c>)
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f008 f9b2 	bl	8012540 <rx>
		rx(uartModem, SIMR, 1);
 800a1dc:	4b10      	ldr	r3, [pc, #64]	; (800a220 <getgsmloc+0x80>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a13      	ldr	r2, [pc, #76]	; (800a230 <getgsmloc+0x90>)
 800a1e2:	6811      	ldr	r1, [r2, #0]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f008 f9aa 	bl	8012540 <rx>
		if(rx_buf[0] == '0'){
 800a1ec:	4b11      	ldr	r3, [pc, #68]	; (800a234 <getgsmloc+0x94>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b30      	cmp	r3, #48	; 0x30
 800a1f2:	d10e      	bne.n	800a212 <getgsmloc+0x72>
			GSMLOCATION = LOCKED;
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <getgsmloc+0x7c>)
 800a1f6:	223a      	movs	r2, #58	; 0x3a
 800a1f8:	601a      	str	r2, [r3, #0]
			strcpy((char*)GSMLOCK,(char*)rx_buf);
 800a1fa:	490e      	ldr	r1, [pc, #56]	; (800a234 <getgsmloc+0x94>)
 800a1fc:	480e      	ldr	r0, [pc, #56]	; (800a238 <getgsmloc+0x98>)
 800a1fe:	f008 fd70 	bl	8012ce2 <strcpy>
			GSMLOCK[strlen((char*)GSMLOCK)-8]='\0';
 800a202:	480d      	ldr	r0, [pc, #52]	; (800a238 <getgsmloc+0x98>)
 800a204:	f7fa ffc4 	bl	8005190 <strlen>
 800a208:	4603      	mov	r3, r0
 800a20a:	3b08      	subs	r3, #8
 800a20c:	4a0a      	ldr	r2, [pc, #40]	; (800a238 <getgsmloc+0x98>)
 800a20e:	2100      	movs	r1, #0
 800a210:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 800a212:	bf00      	nop
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	2000015c 	.word	0x2000015c
 800a21c:	20000164 	.word	0x20000164
 800a220:	20004d5c 	.word	0x20004d5c
 800a224:	080153cc 	.word	0x080153cc
 800a228:	20000134 	.word	0x20000134
 800a22c:	080153dc 	.word	0x080153dc
 800a230:	20000118 	.word	0x20000118
 800a234:	20004588 	.word	0x20004588
 800a238:	20000518 	.word	0x20000518

0800a23c <updateTime>:
uint8_t* GPSR4 = (uint8_t*)"+CGNSAID:";
uint8_t* GPSR5 = (uint8_t*)"+CGNSPWR: 1";
uint8_t* GPS11 = (uint8_t*)"AT+CGNSPWR=1\r\n";
uint8_t* GPS13 = (uint8_t*)"AT+CGNSINF\r\n";

void updateTime(){
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
	if(GPSLOCATION == LOCKED){
 800a240:	4b3b      	ldr	r3, [pc, #236]	; (800a330 <updateTime+0xf4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b3a      	cmp	r3, #58	; 0x3a
 800a246:	d14d      	bne.n	800a2e4 <updateTime+0xa8>
		TIME[0] = LOCK[6];
 800a248:	4b3a      	ldr	r3, [pc, #232]	; (800a334 <updateTime+0xf8>)
 800a24a:	799a      	ldrb	r2, [r3, #6]
 800a24c:	4b3a      	ldr	r3, [pc, #232]	; (800a338 <updateTime+0xfc>)
 800a24e:	701a      	strb	r2, [r3, #0]
		TIME[1] = LOCK[7];
 800a250:	4b38      	ldr	r3, [pc, #224]	; (800a334 <updateTime+0xf8>)
 800a252:	79da      	ldrb	r2, [r3, #7]
 800a254:	4b38      	ldr	r3, [pc, #224]	; (800a338 <updateTime+0xfc>)
 800a256:	705a      	strb	r2, [r3, #1]
		TIME[2] = (uint8_t)'/';
 800a258:	4b37      	ldr	r3, [pc, #220]	; (800a338 <updateTime+0xfc>)
 800a25a:	222f      	movs	r2, #47	; 0x2f
 800a25c:	709a      	strb	r2, [r3, #2]
		TIME[3] = LOCK[8];
 800a25e:	4b35      	ldr	r3, [pc, #212]	; (800a334 <updateTime+0xf8>)
 800a260:	7a1a      	ldrb	r2, [r3, #8]
 800a262:	4b35      	ldr	r3, [pc, #212]	; (800a338 <updateTime+0xfc>)
 800a264:	70da      	strb	r2, [r3, #3]
		TIME[4] = LOCK[9];
 800a266:	4b33      	ldr	r3, [pc, #204]	; (800a334 <updateTime+0xf8>)
 800a268:	7a5a      	ldrb	r2, [r3, #9]
 800a26a:	4b33      	ldr	r3, [pc, #204]	; (800a338 <updateTime+0xfc>)
 800a26c:	711a      	strb	r2, [r3, #4]
		TIME[5] = (uint8_t)'/';
 800a26e:	4b32      	ldr	r3, [pc, #200]	; (800a338 <updateTime+0xfc>)
 800a270:	222f      	movs	r2, #47	; 0x2f
 800a272:	715a      	strb	r2, [r3, #5]
		TIME[6] = LOCK[10];
 800a274:	4b2f      	ldr	r3, [pc, #188]	; (800a334 <updateTime+0xf8>)
 800a276:	7a9a      	ldrb	r2, [r3, #10]
 800a278:	4b2f      	ldr	r3, [pc, #188]	; (800a338 <updateTime+0xfc>)
 800a27a:	719a      	strb	r2, [r3, #6]
		TIME[7] = LOCK[11];
 800a27c:	4b2d      	ldr	r3, [pc, #180]	; (800a334 <updateTime+0xf8>)
 800a27e:	7ada      	ldrb	r2, [r3, #11]
 800a280:	4b2d      	ldr	r3, [pc, #180]	; (800a338 <updateTime+0xfc>)
 800a282:	71da      	strb	r2, [r3, #7]
		TIME[8] = (uint8_t)',';
 800a284:	4b2c      	ldr	r3, [pc, #176]	; (800a338 <updateTime+0xfc>)
 800a286:	222c      	movs	r2, #44	; 0x2c
 800a288:	721a      	strb	r2, [r3, #8]
		TIME[9] = LOCK[12];
 800a28a:	4b2a      	ldr	r3, [pc, #168]	; (800a334 <updateTime+0xf8>)
 800a28c:	7b1a      	ldrb	r2, [r3, #12]
 800a28e:	4b2a      	ldr	r3, [pc, #168]	; (800a338 <updateTime+0xfc>)
 800a290:	725a      	strb	r2, [r3, #9]
		TIME[10] = LOCK[13];
 800a292:	4b28      	ldr	r3, [pc, #160]	; (800a334 <updateTime+0xf8>)
 800a294:	7b5a      	ldrb	r2, [r3, #13]
 800a296:	4b28      	ldr	r3, [pc, #160]	; (800a338 <updateTime+0xfc>)
 800a298:	729a      	strb	r2, [r3, #10]
		TIME[11] = (uint8_t)':';
 800a29a:	4b27      	ldr	r3, [pc, #156]	; (800a338 <updateTime+0xfc>)
 800a29c:	223a      	movs	r2, #58	; 0x3a
 800a29e:	72da      	strb	r2, [r3, #11]
		TIME[12] = LOCK[14];
 800a2a0:	4b24      	ldr	r3, [pc, #144]	; (800a334 <updateTime+0xf8>)
 800a2a2:	7b9a      	ldrb	r2, [r3, #14]
 800a2a4:	4b24      	ldr	r3, [pc, #144]	; (800a338 <updateTime+0xfc>)
 800a2a6:	731a      	strb	r2, [r3, #12]
		TIME[13] = LOCK[15];
 800a2a8:	4b22      	ldr	r3, [pc, #136]	; (800a334 <updateTime+0xf8>)
 800a2aa:	7bda      	ldrb	r2, [r3, #15]
 800a2ac:	4b22      	ldr	r3, [pc, #136]	; (800a338 <updateTime+0xfc>)
 800a2ae:	735a      	strb	r2, [r3, #13]
		TIME[14] = (uint8_t)':';
 800a2b0:	4b21      	ldr	r3, [pc, #132]	; (800a338 <updateTime+0xfc>)
 800a2b2:	223a      	movs	r2, #58	; 0x3a
 800a2b4:	739a      	strb	r2, [r3, #14]
		TIME[15] = LOCK[16];
 800a2b6:	4b1f      	ldr	r3, [pc, #124]	; (800a334 <updateTime+0xf8>)
 800a2b8:	7c1a      	ldrb	r2, [r3, #16]
 800a2ba:	4b1f      	ldr	r3, [pc, #124]	; (800a338 <updateTime+0xfc>)
 800a2bc:	73da      	strb	r2, [r3, #15]
		TIME[16] = LOCK[17];
 800a2be:	4b1d      	ldr	r3, [pc, #116]	; (800a334 <updateTime+0xf8>)
 800a2c0:	7c5a      	ldrb	r2, [r3, #17]
 800a2c2:	4b1d      	ldr	r3, [pc, #116]	; (800a338 <updateTime+0xfc>)
 800a2c4:	741a      	strb	r2, [r3, #16]
		TIME[17] = (uint8_t)'+';
 800a2c6:	4b1c      	ldr	r3, [pc, #112]	; (800a338 <updateTime+0xfc>)
 800a2c8:	222b      	movs	r2, #43	; 0x2b
 800a2ca:	745a      	strb	r2, [r3, #17]
		TIME[18] = (uint8_t)'0';
 800a2cc:	4b1a      	ldr	r3, [pc, #104]	; (800a338 <updateTime+0xfc>)
 800a2ce:	2230      	movs	r2, #48	; 0x30
 800a2d0:	749a      	strb	r2, [r3, #18]
		TIME[19] = (uint8_t)'0';
 800a2d2:	4b19      	ldr	r3, [pc, #100]	; (800a338 <updateTime+0xfc>)
 800a2d4:	2230      	movs	r2, #48	; 0x30
 800a2d6:	74da      	strb	r2, [r3, #19]
		TIME[20] = '\0';
 800a2d8:	4b17      	ldr	r3, [pc, #92]	; (800a338 <updateTime+0xfc>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	751a      	strb	r2, [r3, #20]
		setTime();
 800a2de:	f7fe fad9 	bl	8008894 <setTime>
		strtok(NULL,",");
		strtok(NULL,",");
		strcpy((char*)TIME,strtok(NULL,"\r\n"));
		setTime();
	}
}
 800a2e2:	e022      	b.n	800a32a <updateTime+0xee>
	else if(GSMLOCATION == LOCKED){
 800a2e4:	4b15      	ldr	r3, [pc, #84]	; (800a33c <updateTime+0x100>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b3a      	cmp	r3, #58	; 0x3a
 800a2ea:	d11e      	bne.n	800a32a <updateTime+0xee>
		strcpy((char*)rx_buf,(char*)GSMLOCK);
 800a2ec:	4914      	ldr	r1, [pc, #80]	; (800a340 <updateTime+0x104>)
 800a2ee:	4815      	ldr	r0, [pc, #84]	; (800a344 <updateTime+0x108>)
 800a2f0:	f008 fcf7 	bl	8012ce2 <strcpy>
		strtok((char*)rx_buf,",");
 800a2f4:	4914      	ldr	r1, [pc, #80]	; (800a348 <updateTime+0x10c>)
 800a2f6:	4813      	ldr	r0, [pc, #76]	; (800a344 <updateTime+0x108>)
 800a2f8:	f008 fd24 	bl	8012d44 <strtok>
		strtok(NULL,",");
 800a2fc:	4912      	ldr	r1, [pc, #72]	; (800a348 <updateTime+0x10c>)
 800a2fe:	2000      	movs	r0, #0
 800a300:	f008 fd20 	bl	8012d44 <strtok>
		strtok(NULL,",");
 800a304:	4910      	ldr	r1, [pc, #64]	; (800a348 <updateTime+0x10c>)
 800a306:	2000      	movs	r0, #0
 800a308:	f008 fd1c 	bl	8012d44 <strtok>
		strtok(NULL,",");
 800a30c:	490e      	ldr	r1, [pc, #56]	; (800a348 <updateTime+0x10c>)
 800a30e:	2000      	movs	r0, #0
 800a310:	f008 fd18 	bl	8012d44 <strtok>
		strcpy((char*)TIME,strtok(NULL,"\r\n"));
 800a314:	490d      	ldr	r1, [pc, #52]	; (800a34c <updateTime+0x110>)
 800a316:	2000      	movs	r0, #0
 800a318:	f008 fd14 	bl	8012d44 <strtok>
 800a31c:	4603      	mov	r3, r0
 800a31e:	4619      	mov	r1, r3
 800a320:	4805      	ldr	r0, [pc, #20]	; (800a338 <updateTime+0xfc>)
 800a322:	f008 fcde 	bl	8012ce2 <strcpy>
		setTime();
 800a326:	f7fe fab5 	bl	8008894 <setTime>
}
 800a32a:	bf00      	nop
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000168 	.word	0x20000168
 800a334:	200002cc 	.word	0x200002cc
 800a338:	20000268 	.word	0x20000268
 800a33c:	20000164 	.word	0x20000164
 800a340:	20000518 	.word	0x20000518
 800a344:	20004588 	.word	0x20004588
 800a348:	08015424 	.word	0x08015424
 800a34c:	08015428 	.word	0x08015428

0800a350 <gpsPowerOn>:
void gpsPowerOn(){
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
	txr(uartModem, GPS11);
 800a354:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <gpsPowerOn+0x40>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a0e      	ldr	r2, [pc, #56]	; (800a394 <gpsPowerOn+0x44>)
 800a35a:	6812      	ldr	r2, [r2, #0]
 800a35c:	4611      	mov	r1, r2
 800a35e:	4618      	mov	r0, r3
 800a360:	f008 f9b2 	bl	80126c8 <txr>
	rx(uartModem, GPSR5, 5);
 800a364:	4b0a      	ldr	r3, [pc, #40]	; (800a390 <gpsPowerOn+0x40>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a0b      	ldr	r2, [pc, #44]	; (800a398 <gpsPowerOn+0x48>)
 800a36a:	6811      	ldr	r1, [r2, #0]
 800a36c:	2205      	movs	r2, #5
 800a36e:	4618      	mov	r0, r3
 800a370:	f008 f8e6 	bl	8012540 <rx>
	tx(uartModem, GPS13);
 800a374:	4b06      	ldr	r3, [pc, #24]	; (800a390 <gpsPowerOn+0x40>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a08      	ldr	r2, [pc, #32]	; (800a39c <gpsPowerOn+0x4c>)
 800a37a:	6812      	ldr	r2, [r2, #0]
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f008 f8ac 	bl	80124dc <tx>
	HAL_Delay(1000);
 800a384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a388:	f002 f974 	bl	800c674 <HAL_Delay>
}
 800a38c:	bf00      	nop
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20004d5c 	.word	0x20004d5c
 800a394:	200000c0 	.word	0x200000c0
 800a398:	200000bc 	.word	0x200000bc
 800a39c:	200000c4 	.word	0x200000c4

0800a3a0 <NMEA>:
void NMEA(int times){
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	int t=0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60fb      	str	r3, [r7, #12]
	GPSLOCATION = NOT_LOCKED;
 800a3ac:	4b26      	ldr	r3, [pc, #152]	; (800a448 <NMEA+0xa8>)
 800a3ae:	223b      	movs	r2, #59	; 0x3b
 800a3b0:	601a      	str	r2, [r3, #0]
	gpsPowerOn();
 800a3b2:	f7ff ffcd 	bl	800a350 <gpsPowerOn>
	while(t<times){
 800a3b6:	e03e      	b.n	800a436 <NMEA+0x96>
		tx(uartModem, GPS13);
 800a3b8:	4b24      	ldr	r3, [pc, #144]	; (800a44c <NMEA+0xac>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a24      	ldr	r2, [pc, #144]	; (800a450 <NMEA+0xb0>)
 800a3be:	6812      	ldr	r2, [r2, #0]
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f008 f88a 	bl	80124dc <tx>
		rx(uartModem, (uint8_t*)"+CGNSINF: ", 2);
 800a3c8:	4b20      	ldr	r3, [pc, #128]	; (800a44c <NMEA+0xac>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	4921      	ldr	r1, [pc, #132]	; (800a454 <NMEA+0xb4>)
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f008 f8b5 	bl	8012540 <rx>
		rx(uartModem, SIMN, 1);
 800a3d6:	4b1d      	ldr	r3, [pc, #116]	; (800a44c <NMEA+0xac>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a1f      	ldr	r2, [pc, #124]	; (800a458 <NMEA+0xb8>)
 800a3dc:	6811      	ldr	r1, [r2, #0]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f008 f8ad 	bl	8012540 <rx>
		strcpy((char*)LOCK,(char*)rx_buf);
 800a3e6:	491d      	ldr	r1, [pc, #116]	; (800a45c <NMEA+0xbc>)
 800a3e8:	481d      	ldr	r0, [pc, #116]	; (800a460 <NMEA+0xc0>)
 800a3ea:	f008 fc7a 	bl	8012ce2 <strcpy>
		uint8_t* p = (uint8_t*)strstr((char*)LOCK,"\r\n");
 800a3ee:	491d      	ldr	r1, [pc, #116]	; (800a464 <NMEA+0xc4>)
 800a3f0:	481b      	ldr	r0, [pc, #108]	; (800a460 <NMEA+0xc0>)
 800a3f2:	f008 fc8f 	bl	8012d14 <strstr>
 800a3f6:	60b8      	str	r0, [r7, #8]
		LOCK[p - LOCK] = '\0';
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4a19      	ldr	r2, [pc, #100]	; (800a460 <NMEA+0xc0>)
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	4a18      	ldr	r2, [pc, #96]	; (800a460 <NMEA+0xc0>)
 800a400:	2100      	movs	r1, #0
 800a402:	54d1      	strb	r1, [r2, r3]
		if(LOCK[4] == '2'){
 800a404:	4b16      	ldr	r3, [pc, #88]	; (800a460 <NMEA+0xc0>)
 800a406:	791b      	ldrb	r3, [r3, #4]
 800a408:	2b32      	cmp	r3, #50	; 0x32
 800a40a:	d102      	bne.n	800a412 <NMEA+0x72>
			GPSLOCATION = LOCKED;
 800a40c:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <NMEA+0xa8>)
 800a40e:	223a      	movs	r2, #58	; 0x3a
 800a410:	601a      	str	r2, [r3, #0]
		}
		updateTime();
 800a412:	f7ff ff13 	bl	800a23c <updateTime>
		dataConnect();
 800a416:	f000 f83d 	bl	800a494 <dataConnect>
		buzzOn();
 800a41a:	f008 f917 	bl	801264c <buzzOn>
		getgsmloc();
 800a41e:	f7ff febf 	bl	800a1a0 <getgsmloc>
		buzzOff();
 800a422:	f008 f91d 	bl	8012660 <buzzOff>
		mqttConnect();
 800a426:	f000 f9e9 	bl	800a7fc <mqttConnect>
		mqttSend(2);
 800a42a:	2002      	movs	r0, #2
 800a42c:	f000 fbc4 	bl	800abb8 <mqttSend>
		t++;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3301      	adds	r3, #1
 800a434:	60fb      	str	r3, [r7, #12]
	while(t<times){
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	dbbc      	blt.n	800a3b8 <NMEA+0x18>
	}
}
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000168 	.word	0x20000168
 800a44c:	20004d5c 	.word	0x20004d5c
 800a450:	200000c4 	.word	0x200000c4
 800a454:	0801542c 	.word	0x0801542c
 800a458:	20000134 	.word	0x20000134
 800a45c:	20004588 	.word	0x20004588
 800a460:	200002cc 	.word	0x200002cc
 800a464:	08015428 	.word	0x08015428

0800a468 <__NVIC_SystemReset>:
{
 800a468:	b480      	push	{r7}
 800a46a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a46c:	f3bf 8f4f 	dsb	sy
}
 800a470:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <__NVIC_SystemReset+0x24>)
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a47a:	4904      	ldr	r1, [pc, #16]	; (800a48c <__NVIC_SystemReset+0x24>)
 800a47c:	4b04      	ldr	r3, [pc, #16]	; (800a490 <__NVIC_SystemReset+0x28>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a482:	f3bf 8f4f 	dsb	sy
}
 800a486:	bf00      	nop
    __NOP();
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <__NVIC_SystemReset+0x20>
 800a48c:	e000ed00 	.word	0xe000ed00
 800a490:	05fa0004 	.word	0x05fa0004

0800a494 <dataConnect>:
uint8_t* SM14 = (uint8_t*)"AT+SMPUB=\"";
uint8_t* SM15 = (uint8_t*)"\"";
uint8_t* SM16 = (uint8_t*)",";


void dataConnect(){
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
	if(REGESTRATION == REGISTERED){
 800a498:	4b95      	ldr	r3, [pc, #596]	; (800a6f0 <dataConnect+0x25c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b36      	cmp	r3, #54	; 0x36
 800a49e:	f040 8125 	bne.w	800a6ec <dataConnect+0x258>
		tx(uartModem, SM4);
 800a4a2:	4b94      	ldr	r3, [pc, #592]	; (800a6f4 <dataConnect+0x260>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a94      	ldr	r2, [pc, #592]	; (800a6f8 <dataConnect+0x264>)
 800a4a8:	6812      	ldr	r2, [r2, #0]
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f008 f815 	bl	80124dc <tx>
		rx(uartModem, SIMR, 1);
 800a4b2:	4b90      	ldr	r3, [pc, #576]	; (800a6f4 <dataConnect+0x260>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a91      	ldr	r2, [pc, #580]	; (800a6fc <dataConnect+0x268>)
 800a4b8:	6811      	ldr	r1, [r2, #0]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f008 f83f 	bl	8012540 <rx>
		if(strstr((char*)rx_buf,"0.0.0.0") == NULL){
 800a4c2:	498f      	ldr	r1, [pc, #572]	; (800a700 <dataConnect+0x26c>)
 800a4c4:	488f      	ldr	r0, [pc, #572]	; (800a704 <dataConnect+0x270>)
 800a4c6:	f008 fc25 	bl	8012d14 <strstr>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d103      	bne.n	800a4d8 <dataConnect+0x44>
			CONNECTION = CONNECTED;
 800a4d0:	4b8d      	ldr	r3, [pc, #564]	; (800a708 <dataConnect+0x274>)
 800a4d2:	2238      	movs	r2, #56	; 0x38
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	e002      	b.n	800a4de <dataConnect+0x4a>
		}
		else{
			CONNECTION = NOT_CONNECTED;
 800a4d8:	4b8b      	ldr	r3, [pc, #556]	; (800a708 <dataConnect+0x274>)
 800a4da:	2239      	movs	r2, #57	; 0x39
 800a4dc:	601a      	str	r2, [r3, #0]
		}
		if(REGESTRATION == REGISTERED){
 800a4de:	4b84      	ldr	r3, [pc, #528]	; (800a6f0 <dataConnect+0x25c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b36      	cmp	r3, #54	; 0x36
 800a4e4:	f040 8102 	bne.w	800a6ec <dataConnect+0x258>
			if(CONNECTION == NOT_CONNECTED && BATTERYSAVER == BATTERYSAVER_OFF){
 800a4e8:	4b87      	ldr	r3, [pc, #540]	; (800a708 <dataConnect+0x274>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b39      	cmp	r3, #57	; 0x39
 800a4ee:	f040 80fa 	bne.w	800a6e6 <dataConnect+0x252>
 800a4f2:	4b86      	ldr	r3, [pc, #536]	; (800a70c <dataConnect+0x278>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b3f      	cmp	r3, #63	; 0x3f
 800a4f8:	f040 80f5 	bne.w	800a6e6 <dataConnect+0x252>
				txr(uartModem, SM1);
 800a4fc:	4b7d      	ldr	r3, [pc, #500]	; (800a6f4 <dataConnect+0x260>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a83      	ldr	r2, [pc, #524]	; (800a710 <dataConnect+0x27c>)
 800a502:	6812      	ldr	r2, [r2, #0]
 800a504:	4611      	mov	r1, r2
 800a506:	4618      	mov	r0, r3
 800a508:	f008 f8de 	bl	80126c8 <txr>
				txr(uartModem, APNCONTYPE);
 800a50c:	4b79      	ldr	r3, [pc, #484]	; (800a6f4 <dataConnect+0x260>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4980      	ldr	r1, [pc, #512]	; (800a714 <dataConnect+0x280>)
 800a512:	4618      	mov	r0, r3
 800a514:	f008 f8d8 	bl	80126c8 <txr>
				txr(uartModem, SIMVN);
 800a518:	4b76      	ldr	r3, [pc, #472]	; (800a6f4 <dataConnect+0x260>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a7e      	ldr	r2, [pc, #504]	; (800a718 <dataConnect+0x284>)
 800a51e:	6812      	ldr	r2, [r2, #0]
 800a520:	4611      	mov	r1, r2
 800a522:	4618      	mov	r0, r3
 800a524:	f008 f8d0 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a528:	4b72      	ldr	r3, [pc, #456]	; (800a6f4 <dataConnect+0x260>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a73      	ldr	r2, [pc, #460]	; (800a6fc <dataConnect+0x268>)
 800a52e:	6811      	ldr	r1, [r2, #0]
 800a530:	2201      	movs	r2, #1
 800a532:	4618      	mov	r0, r3
 800a534:	f008 f89e 	bl	8012674 <rxr>

				txr(uartModem, SM2);
 800a538:	4b6e      	ldr	r3, [pc, #440]	; (800a6f4 <dataConnect+0x260>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a77      	ldr	r2, [pc, #476]	; (800a71c <dataConnect+0x288>)
 800a53e:	6812      	ldr	r2, [r2, #0]
 800a540:	4611      	mov	r1, r2
 800a542:	4618      	mov	r0, r3
 800a544:	f008 f8c0 	bl	80126c8 <txr>
				txr(uartModem, APNNAME);
 800a548:	4b6a      	ldr	r3, [pc, #424]	; (800a6f4 <dataConnect+0x260>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4974      	ldr	r1, [pc, #464]	; (800a720 <dataConnect+0x28c>)
 800a54e:	4618      	mov	r0, r3
 800a550:	f008 f8ba 	bl	80126c8 <txr>
				txr(uartModem, SIMVN);
 800a554:	4b67      	ldr	r3, [pc, #412]	; (800a6f4 <dataConnect+0x260>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a6f      	ldr	r2, [pc, #444]	; (800a718 <dataConnect+0x284>)
 800a55a:	6812      	ldr	r2, [r2, #0]
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f008 f8b2 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a564:	4b63      	ldr	r3, [pc, #396]	; (800a6f4 <dataConnect+0x260>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a64      	ldr	r2, [pc, #400]	; (800a6fc <dataConnect+0x268>)
 800a56a:	6811      	ldr	r1, [r2, #0]
 800a56c:	2201      	movs	r2, #1
 800a56e:	4618      	mov	r0, r3
 800a570:	f008 f880 	bl	8012674 <rxr>

				txr(uartModem, SM21);
 800a574:	4b5f      	ldr	r3, [pc, #380]	; (800a6f4 <dataConnect+0x260>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a6a      	ldr	r2, [pc, #424]	; (800a724 <dataConnect+0x290>)
 800a57a:	6812      	ldr	r2, [r2, #0]
 800a57c:	4611      	mov	r1, r2
 800a57e:	4618      	mov	r0, r3
 800a580:	f008 f8a2 	bl	80126c8 <txr>
				txr(uartModem, APNUSERNAME);
 800a584:	4b5b      	ldr	r3, [pc, #364]	; (800a6f4 <dataConnect+0x260>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4967      	ldr	r1, [pc, #412]	; (800a728 <dataConnect+0x294>)
 800a58a:	4618      	mov	r0, r3
 800a58c:	f008 f89c 	bl	80126c8 <txr>
				txr(uartModem, SIMVN);
 800a590:	4b58      	ldr	r3, [pc, #352]	; (800a6f4 <dataConnect+0x260>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a60      	ldr	r2, [pc, #384]	; (800a718 <dataConnect+0x284>)
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	4611      	mov	r1, r2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f008 f894 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a5a0:	4b54      	ldr	r3, [pc, #336]	; (800a6f4 <dataConnect+0x260>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a55      	ldr	r2, [pc, #340]	; (800a6fc <dataConnect+0x268>)
 800a5a6:	6811      	ldr	r1, [r2, #0]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f008 f862 	bl	8012674 <rxr>

				txr(uartModem, SM22);
 800a5b0:	4b50      	ldr	r3, [pc, #320]	; (800a6f4 <dataConnect+0x260>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a5d      	ldr	r2, [pc, #372]	; (800a72c <dataConnect+0x298>)
 800a5b6:	6812      	ldr	r2, [r2, #0]
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f008 f884 	bl	80126c8 <txr>
				txr(uartModem, APNPASSWORD);
 800a5c0:	4b4c      	ldr	r3, [pc, #304]	; (800a6f4 <dataConnect+0x260>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	495a      	ldr	r1, [pc, #360]	; (800a730 <dataConnect+0x29c>)
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f008 f87e 	bl	80126c8 <txr>
				txr(uartModem, SIMVN);
 800a5cc:	4b49      	ldr	r3, [pc, #292]	; (800a6f4 <dataConnect+0x260>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a51      	ldr	r2, [pc, #324]	; (800a718 <dataConnect+0x284>)
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f008 f876 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a5dc:	4b45      	ldr	r3, [pc, #276]	; (800a6f4 <dataConnect+0x260>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a46      	ldr	r2, [pc, #280]	; (800a6fc <dataConnect+0x268>)
 800a5e2:	6811      	ldr	r1, [r2, #0]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f008 f844 	bl	8012674 <rxr>

				txr(uartModem, SM23);
 800a5ec:	4b41      	ldr	r3, [pc, #260]	; (800a6f4 <dataConnect+0x260>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a50      	ldr	r2, [pc, #320]	; (800a734 <dataConnect+0x2a0>)
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f008 f866 	bl	80126c8 <txr>
				txr(uartModem, APNPHONENUM);
 800a5fc:	4b3d      	ldr	r3, [pc, #244]	; (800a6f4 <dataConnect+0x260>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	494d      	ldr	r1, [pc, #308]	; (800a738 <dataConnect+0x2a4>)
 800a602:	4618      	mov	r0, r3
 800a604:	f008 f860 	bl	80126c8 <txr>
				txr(uartModem, SIMVN);
 800a608:	4b3a      	ldr	r3, [pc, #232]	; (800a6f4 <dataConnect+0x260>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a42      	ldr	r2, [pc, #264]	; (800a718 <dataConnect+0x284>)
 800a60e:	6812      	ldr	r2, [r2, #0]
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f008 f858 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a618:	4b36      	ldr	r3, [pc, #216]	; (800a6f4 <dataConnect+0x260>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a37      	ldr	r2, [pc, #220]	; (800a6fc <dataConnect+0x268>)
 800a61e:	6811      	ldr	r1, [r2, #0]
 800a620:	2201      	movs	r2, #1
 800a622:	4618      	mov	r0, r3
 800a624:	f008 f826 	bl	8012674 <rxr>

				txr(uartModem, SM24);
 800a628:	4b32      	ldr	r3, [pc, #200]	; (800a6f4 <dataConnect+0x260>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a43      	ldr	r2, [pc, #268]	; (800a73c <dataConnect+0x2a8>)
 800a62e:	6812      	ldr	r2, [r2, #0]
 800a630:	4611      	mov	r1, r2
 800a632:	4618      	mov	r0, r3
 800a634:	f008 f848 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"2");
 800a638:	4b2e      	ldr	r3, [pc, #184]	; (800a6f4 <dataConnect+0x260>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4940      	ldr	r1, [pc, #256]	; (800a740 <dataConnect+0x2ac>)
 800a63e:	4618      	mov	r0, r3
 800a640:	f008 f842 	bl	80126c8 <txr>
				txr(uartModem, SIMVN);
 800a644:	4b2b      	ldr	r3, [pc, #172]	; (800a6f4 <dataConnect+0x260>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a33      	ldr	r2, [pc, #204]	; (800a718 <dataConnect+0x284>)
 800a64a:	6812      	ldr	r2, [r2, #0]
 800a64c:	4611      	mov	r1, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f008 f83a 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a654:	4b27      	ldr	r3, [pc, #156]	; (800a6f4 <dataConnect+0x260>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a28      	ldr	r2, [pc, #160]	; (800a6fc <dataConnect+0x268>)
 800a65a:	6811      	ldr	r1, [r2, #0]
 800a65c:	2201      	movs	r2, #1
 800a65e:	4618      	mov	r0, r3
 800a660:	f008 f808 	bl	8012674 <rxr>

				txr(uartModem, SM3);
 800a664:	4b23      	ldr	r3, [pc, #140]	; (800a6f4 <dataConnect+0x260>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a36      	ldr	r2, [pc, #216]	; (800a744 <dataConnect+0x2b0>)
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	4611      	mov	r1, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f008 f82a 	bl	80126c8 <txr>
				rx(uartModem, SIMR, 20);
 800a674:	4b1f      	ldr	r3, [pc, #124]	; (800a6f4 <dataConnect+0x260>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a20      	ldr	r2, [pc, #128]	; (800a6fc <dataConnect+0x268>)
 800a67a:	6811      	ldr	r1, [r2, #0]
 800a67c:	2214      	movs	r2, #20
 800a67e:	4618      	mov	r0, r3
 800a680:	f007 ff5e 	bl	8012540 <rx>
				tx(uartModem, SM4);
 800a684:	4b1b      	ldr	r3, [pc, #108]	; (800a6f4 <dataConnect+0x260>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a1b      	ldr	r2, [pc, #108]	; (800a6f8 <dataConnect+0x264>)
 800a68a:	6812      	ldr	r2, [r2, #0]
 800a68c:	4611      	mov	r1, r2
 800a68e:	4618      	mov	r0, r3
 800a690:	f007 ff24 	bl	80124dc <tx>
				rx(uartModem, SIMR, 1);
 800a694:	4b17      	ldr	r3, [pc, #92]	; (800a6f4 <dataConnect+0x260>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a18      	ldr	r2, [pc, #96]	; (800a6fc <dataConnect+0x268>)
 800a69a:	6811      	ldr	r1, [r2, #0]
 800a69c:	2201      	movs	r2, #1
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f007 ff4e 	bl	8012540 <rx>
				if(strstr((char*)rx_buf,"0.0.0.0") == NULL){
 800a6a4:	4916      	ldr	r1, [pc, #88]	; (800a700 <dataConnect+0x26c>)
 800a6a6:	4817      	ldr	r0, [pc, #92]	; (800a704 <dataConnect+0x270>)
 800a6a8:	f008 fb34 	bl	8012d14 <strstr>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d103      	bne.n	800a6ba <dataConnect+0x226>
					CONNECTION = CONNECTED;
 800a6b2:	4b15      	ldr	r3, [pc, #84]	; (800a708 <dataConnect+0x274>)
 800a6b4:	2238      	movs	r2, #56	; 0x38
 800a6b6:	601a      	str	r2, [r3, #0]
 800a6b8:	e015      	b.n	800a6e6 <dataConnect+0x252>
				}
				else{
					CONNECTION = NOT_CONNECTED;
 800a6ba:	4b13      	ldr	r3, [pc, #76]	; (800a708 <dataConnect+0x274>)
 800a6bc:	2239      	movs	r2, #57	; 0x39
 800a6be:	601a      	str	r2, [r3, #0]
					if(savebattery < 1440/minSendPeriod){
 800a6c0:	4b21      	ldr	r3, [pc, #132]	; (800a748 <dataConnect+0x2b4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800a6c8:	fb92 f2f3 	sdiv	r2, r2, r3
 800a6cc:	4b1f      	ldr	r3, [pc, #124]	; (800a74c <dataConnect+0x2b8>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	dd05      	ble.n	800a6e0 <dataConnect+0x24c>
						savebattery ++;
 800a6d4:	4b1d      	ldr	r3, [pc, #116]	; (800a74c <dataConnect+0x2b8>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	4a1c      	ldr	r2, [pc, #112]	; (800a74c <dataConnect+0x2b8>)
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	e002      	b.n	800a6e6 <dataConnect+0x252>
					}
					else{
						BATTERYSAVER = BATTERYSAVER_ON;
 800a6e0:	4b0a      	ldr	r3, [pc, #40]	; (800a70c <dataConnect+0x278>)
 800a6e2:	223e      	movs	r2, #62	; 0x3e
 800a6e4:	601a      	str	r2, [r3, #0]
					}
				}
			}
			HAL_Delay(100);
 800a6e6:	2064      	movs	r0, #100	; 0x64
 800a6e8:	f001 ffc4 	bl	800c674 <HAL_Delay>
		}
	}
}
 800a6ec:	bf00      	nop
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20000158 	.word	0x20000158
 800a6f4:	20004d5c 	.word	0x20004d5c
 800a6f8:	200000e4 	.word	0x200000e4
 800a6fc:	20000118 	.word	0x20000118
 800a700:	080155cc 	.word	0x080155cc
 800a704:	20004588 	.word	0x20004588
 800a708:	2000015c 	.word	0x2000015c
 800a70c:	2000016c 	.word	0x2000016c
 800a710:	200000c8 	.word	0x200000c8
 800a714:	20000234 	.word	0x20000234
 800a718:	2000013c 	.word	0x2000013c
 800a71c:	200000cc 	.word	0x200000cc
 800a720:	20003e4c 	.word	0x20003e4c
 800a724:	200000d0 	.word	0x200000d0
 800a728:	20000240 	.word	0x20000240
 800a72c:	200000d4 	.word	0x200000d4
 800a730:	20004434 	.word	0x20004434
 800a734:	200000d8 	.word	0x200000d8
 800a738:	20004104 	.word	0x20004104
 800a73c:	200000dc 	.word	0x200000dc
 800a740:	080155d4 	.word	0x080155d4
 800a744:	200000e0 	.word	0x200000e0
 800a748:	20000200 	.word	0x20000200
 800a74c:	2000028c 	.word	0x2000028c

0800a750 <dataDisconnect>:

void dataDisconnect(){
 800a750:	b580      	push	{r7, lr}
 800a752:	af00      	add	r7, sp, #0
	if(REGESTRATION == REGISTERED){
 800a754:	4b20      	ldr	r3, [pc, #128]	; (800a7d8 <dataDisconnect+0x88>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b36      	cmp	r3, #54	; 0x36
 800a75a:	d13a      	bne.n	800a7d2 <dataDisconnect+0x82>
		tx(uartModem, SM4);
 800a75c:	4b1f      	ldr	r3, [pc, #124]	; (800a7dc <dataDisconnect+0x8c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1f      	ldr	r2, [pc, #124]	; (800a7e0 <dataDisconnect+0x90>)
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f007 feb8 	bl	80124dc <tx>
		rx(uartModem, SIMR, 1);
 800a76c:	4b1b      	ldr	r3, [pc, #108]	; (800a7dc <dataDisconnect+0x8c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a1c      	ldr	r2, [pc, #112]	; (800a7e4 <dataDisconnect+0x94>)
 800a772:	6811      	ldr	r1, [r2, #0]
 800a774:	2201      	movs	r2, #1
 800a776:	4618      	mov	r0, r3
 800a778:	f007 fee2 	bl	8012540 <rx>
		if(strstr((char*)rx_buf,"0.0.0.0") == NULL){
 800a77c:	491a      	ldr	r1, [pc, #104]	; (800a7e8 <dataDisconnect+0x98>)
 800a77e:	481b      	ldr	r0, [pc, #108]	; (800a7ec <dataDisconnect+0x9c>)
 800a780:	f008 fac8 	bl	8012d14 <strstr>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d103      	bne.n	800a792 <dataDisconnect+0x42>
			CONNECTION = CONNECTED;
 800a78a:	4b19      	ldr	r3, [pc, #100]	; (800a7f0 <dataDisconnect+0xa0>)
 800a78c:	2238      	movs	r2, #56	; 0x38
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	e002      	b.n	800a798 <dataDisconnect+0x48>
			//tx(uartDebug, (uint8_t*)"CONNECTED\r\n");
		}
		else{
			CONNECTION = NOT_CONNECTED;
 800a792:	4b17      	ldr	r3, [pc, #92]	; (800a7f0 <dataDisconnect+0xa0>)
 800a794:	2239      	movs	r2, #57	; 0x39
 800a796:	601a      	str	r2, [r3, #0]
		}
		if(CONNECTION == CONNECTED){
 800a798:	4b15      	ldr	r3, [pc, #84]	; (800a7f0 <dataDisconnect+0xa0>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b38      	cmp	r3, #56	; 0x38
 800a79e:	d118      	bne.n	800a7d2 <dataDisconnect+0x82>
			txr(uartModem, SM6);
 800a7a0:	4b0e      	ldr	r3, [pc, #56]	; (800a7dc <dataDisconnect+0x8c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a13      	ldr	r2, [pc, #76]	; (800a7f4 <dataDisconnect+0xa4>)
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f007 ff8c 	bl	80126c8 <txr>
			if(rx(uartModem, SIMN, 40) == UART_OK){
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <dataDisconnect+0x8c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a10      	ldr	r2, [pc, #64]	; (800a7f8 <dataDisconnect+0xa8>)
 800a7b6:	6811      	ldr	r1, [r2, #0]
 800a7b8:	2228      	movs	r2, #40	; 0x28
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f007 fec0 	bl	8012540 <rx>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b32      	cmp	r3, #50	; 0x32
 800a7c4:	d102      	bne.n	800a7cc <dataDisconnect+0x7c>
				CONNECTION = NOT_CONNECTED;
 800a7c6:	4b0a      	ldr	r3, [pc, #40]	; (800a7f0 <dataDisconnect+0xa0>)
 800a7c8:	2239      	movs	r2, #57	; 0x39
 800a7ca:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(100);
 800a7cc:	2064      	movs	r0, #100	; 0x64
 800a7ce:	f001 ff51 	bl	800c674 <HAL_Delay>
		}
	}
}
 800a7d2:	bf00      	nop
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000158 	.word	0x20000158
 800a7dc:	20004d5c 	.word	0x20004d5c
 800a7e0:	200000e4 	.word	0x200000e4
 800a7e4:	20000118 	.word	0x20000118
 800a7e8:	080155cc 	.word	0x080155cc
 800a7ec:	20004588 	.word	0x20004588
 800a7f0:	2000015c 	.word	0x2000015c
 800a7f4:	200000e8 	.word	0x200000e8
 800a7f8:	20000134 	.word	0x20000134

0800a7fc <mqttConnect>:

void mqttConnect(){
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
	if(REGESTRATION == REGISTERED){
 800a800:	4b9c      	ldr	r3, [pc, #624]	; (800aa74 <mqttConnect+0x278>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b36      	cmp	r3, #54	; 0x36
 800a806:	f040 8133 	bne.w	800aa70 <mqttConnect+0x274>
		tx(uartModem, (uint8_t*)"AT+SMSTATE?\r\n");
 800a80a:	4b9b      	ldr	r3, [pc, #620]	; (800aa78 <mqttConnect+0x27c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	499b      	ldr	r1, [pc, #620]	; (800aa7c <mqttConnect+0x280>)
 800a810:	4618      	mov	r0, r3
 800a812:	f007 fe63 	bl	80124dc <tx>
		rx(uartModem, SIMR, 1);
 800a816:	4b98      	ldr	r3, [pc, #608]	; (800aa78 <mqttConnect+0x27c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a99      	ldr	r2, [pc, #612]	; (800aa80 <mqttConnect+0x284>)
 800a81c:	6811      	ldr	r1, [r2, #0]
 800a81e:	2201      	movs	r2, #1
 800a820:	4618      	mov	r0, r3
 800a822:	f007 fe8d 	bl	8012540 <rx>
		if(strstr((char*)rx_buf,"+SMSTATE: 1") != NULL){
 800a826:	4997      	ldr	r1, [pc, #604]	; (800aa84 <mqttConnect+0x288>)
 800a828:	4897      	ldr	r0, [pc, #604]	; (800aa88 <mqttConnect+0x28c>)
 800a82a:	f008 fa73 	bl	8012d14 <strstr>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <mqttConnect+0x40>
			MQTTCONNECTION = CONNECTED;
 800a834:	4b95      	ldr	r3, [pc, #596]	; (800aa8c <mqttConnect+0x290>)
 800a836:	2238      	movs	r2, #56	; 0x38
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	e002      	b.n	800a842 <mqttConnect+0x46>
		}
		else{
			MQTTCONNECTION = NOT_CONNECTED;
 800a83c:	4b93      	ldr	r3, [pc, #588]	; (800aa8c <mqttConnect+0x290>)
 800a83e:	2239      	movs	r2, #57	; 0x39
 800a840:	601a      	str	r2, [r3, #0]
		}
		if(CONNECTION == CONNECTED){
 800a842:	4b93      	ldr	r3, [pc, #588]	; (800aa90 <mqttConnect+0x294>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b38      	cmp	r3, #56	; 0x38
 800a848:	f040 8112 	bne.w	800aa70 <mqttConnect+0x274>
			if(MQTTCONNECTION == NOT_CONNECTED && BATTERYSAVER == BATTERYSAVER_OFF){
 800a84c:	4b8f      	ldr	r3, [pc, #572]	; (800aa8c <mqttConnect+0x290>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b39      	cmp	r3, #57	; 0x39
 800a852:	f040 810a 	bne.w	800aa6a <mqttConnect+0x26e>
 800a856:	4b8f      	ldr	r3, [pc, #572]	; (800aa94 <mqttConnect+0x298>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b3f      	cmp	r3, #63	; 0x3f
 800a85c:	f040 8105 	bne.w	800aa6a <mqttConnect+0x26e>
				txr(uartModem, SM7);
 800a860:	4b85      	ldr	r3, [pc, #532]	; (800aa78 <mqttConnect+0x27c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a8c      	ldr	r2, [pc, #560]	; (800aa98 <mqttConnect+0x29c>)
 800a866:	6812      	ldr	r2, [r2, #0]
 800a868:	4611      	mov	r1, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f007 ff2c 	bl	80126c8 <txr>
				txr(uartModem, MQTTIP);
 800a870:	4b81      	ldr	r3, [pc, #516]	; (800aa78 <mqttConnect+0x27c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4989      	ldr	r1, [pc, #548]	; (800aa9c <mqttConnect+0x2a0>)
 800a876:	4618      	mov	r0, r3
 800a878:	f007 ff26 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)":");
 800a87c:	4b7e      	ldr	r3, [pc, #504]	; (800aa78 <mqttConnect+0x27c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4987      	ldr	r1, [pc, #540]	; (800aaa0 <mqttConnect+0x2a4>)
 800a882:	4618      	mov	r0, r3
 800a884:	f007 ff20 	bl	80126c8 <txr>
				txr(uartModem, MQTTPORT);
 800a888:	4b7b      	ldr	r3, [pc, #492]	; (800aa78 <mqttConnect+0x27c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4985      	ldr	r1, [pc, #532]	; (800aaa4 <mqttConnect+0x2a8>)
 800a88e:	4618      	mov	r0, r3
 800a890:	f007 ff1a 	bl	80126c8 <txr>
				txr(uartModem, SM8);
 800a894:	4b78      	ldr	r3, [pc, #480]	; (800aa78 <mqttConnect+0x27c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a83      	ldr	r2, [pc, #524]	; (800aaa8 <mqttConnect+0x2ac>)
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f007 ff12 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a8a4:	4b74      	ldr	r3, [pc, #464]	; (800aa78 <mqttConnect+0x27c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a75      	ldr	r2, [pc, #468]	; (800aa80 <mqttConnect+0x284>)
 800a8aa:	6811      	ldr	r1, [r2, #0]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f007 fee0 	bl	8012674 <rxr>


				txr(uartModem, SM9);
 800a8b4:	4b70      	ldr	r3, [pc, #448]	; (800aa78 <mqttConnect+0x27c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a7c      	ldr	r2, [pc, #496]	; (800aaac <mqttConnect+0x2b0>)
 800a8ba:	6812      	ldr	r2, [r2, #0]
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f007 ff02 	bl	80126c8 <txr>
				txr(uartModem, IMEI);
 800a8c4:	4b6c      	ldr	r3, [pc, #432]	; (800aa78 <mqttConnect+0x27c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4979      	ldr	r1, [pc, #484]	; (800aab0 <mqttConnect+0x2b4>)
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f007 fefc 	bl	80126c8 <txr>
				txr(uartModem, TIME);
 800a8d0:	4b69      	ldr	r3, [pc, #420]	; (800aa78 <mqttConnect+0x27c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4977      	ldr	r1, [pc, #476]	; (800aab4 <mqttConnect+0x2b8>)
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f007 fef6 	bl	80126c8 <txr>
				txr(uartModem, SM8);
 800a8dc:	4b66      	ldr	r3, [pc, #408]	; (800aa78 <mqttConnect+0x27c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a71      	ldr	r2, [pc, #452]	; (800aaa8 <mqttConnect+0x2ac>)
 800a8e2:	6812      	ldr	r2, [r2, #0]
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f007 feee 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a8ec:	4b62      	ldr	r3, [pc, #392]	; (800aa78 <mqttConnect+0x27c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a63      	ldr	r2, [pc, #396]	; (800aa80 <mqttConnect+0x284>)
 800a8f2:	6811      	ldr	r1, [r2, #0]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f007 febc 	bl	8012674 <rxr>


				txr(uartModem, SM10);
 800a8fc:	4b5e      	ldr	r3, [pc, #376]	; (800aa78 <mqttConnect+0x27c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a6d      	ldr	r2, [pc, #436]	; (800aab8 <mqttConnect+0x2bc>)
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	4611      	mov	r1, r2
 800a906:	4618      	mov	r0, r3
 800a908:	f007 fede 	bl	80126c8 <txr>
				txr(uartModem, MQTTUSERNAME);
 800a90c:	4b5a      	ldr	r3, [pc, #360]	; (800aa78 <mqttConnect+0x27c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	496a      	ldr	r1, [pc, #424]	; (800aabc <mqttConnect+0x2c0>)
 800a912:	4618      	mov	r0, r3
 800a914:	f007 fed8 	bl	80126c8 <txr>
				txr(uartModem, SM8);
 800a918:	4b57      	ldr	r3, [pc, #348]	; (800aa78 <mqttConnect+0x27c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a62      	ldr	r2, [pc, #392]	; (800aaa8 <mqttConnect+0x2ac>)
 800a91e:	6812      	ldr	r2, [r2, #0]
 800a920:	4611      	mov	r1, r2
 800a922:	4618      	mov	r0, r3
 800a924:	f007 fed0 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a928:	4b53      	ldr	r3, [pc, #332]	; (800aa78 <mqttConnect+0x27c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a54      	ldr	r2, [pc, #336]	; (800aa80 <mqttConnect+0x284>)
 800a92e:	6811      	ldr	r1, [r2, #0]
 800a930:	2201      	movs	r2, #1
 800a932:	4618      	mov	r0, r3
 800a934:	f007 fe9e 	bl	8012674 <rxr>


				txr(uartModem, SM11);
 800a938:	4b4f      	ldr	r3, [pc, #316]	; (800aa78 <mqttConnect+0x27c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a60      	ldr	r2, [pc, #384]	; (800aac0 <mqttConnect+0x2c4>)
 800a93e:	6812      	ldr	r2, [r2, #0]
 800a940:	4611      	mov	r1, r2
 800a942:	4618      	mov	r0, r3
 800a944:	f007 fec0 	bl	80126c8 <txr>
				txr(uartModem, MQTTPASSWORD);
 800a948:	4b4b      	ldr	r3, [pc, #300]	; (800aa78 <mqttConnect+0x27c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	495d      	ldr	r1, [pc, #372]	; (800aac4 <mqttConnect+0x2c8>)
 800a94e:	4618      	mov	r0, r3
 800a950:	f007 feba 	bl	80126c8 <txr>
				txr(uartModem, SM8);
 800a954:	4b48      	ldr	r3, [pc, #288]	; (800aa78 <mqttConnect+0x27c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a53      	ldr	r2, [pc, #332]	; (800aaa8 <mqttConnect+0x2ac>)
 800a95a:	6812      	ldr	r2, [r2, #0]
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f007 feb2 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a964:	4b44      	ldr	r3, [pc, #272]	; (800aa78 <mqttConnect+0x27c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a45      	ldr	r2, [pc, #276]	; (800aa80 <mqttConnect+0x284>)
 800a96a:	6811      	ldr	r1, [r2, #0]
 800a96c:	2201      	movs	r2, #1
 800a96e:	4618      	mov	r0, r3
 800a970:	f007 fe80 	bl	8012674 <rxr>


				txr(uartModem, SM111);
 800a974:	4b40      	ldr	r3, [pc, #256]	; (800aa78 <mqttConnect+0x27c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a53      	ldr	r2, [pc, #332]	; (800aac8 <mqttConnect+0x2cc>)
 800a97a:	6812      	ldr	r2, [r2, #0]
 800a97c:	4611      	mov	r1, r2
 800a97e:	4618      	mov	r0, r3
 800a980:	f007 fea2 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"100");
 800a984:	4b3c      	ldr	r3, [pc, #240]	; (800aa78 <mqttConnect+0x27c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4950      	ldr	r1, [pc, #320]	; (800aacc <mqttConnect+0x2d0>)
 800a98a:	4618      	mov	r0, r3
 800a98c:	f007 fe9c 	bl	80126c8 <txr>
				txr(uartModem, SM8);
 800a990:	4b39      	ldr	r3, [pc, #228]	; (800aa78 <mqttConnect+0x27c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a44      	ldr	r2, [pc, #272]	; (800aaa8 <mqttConnect+0x2ac>)
 800a996:	6812      	ldr	r2, [r2, #0]
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f007 fe94 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a9a0:	4b35      	ldr	r3, [pc, #212]	; (800aa78 <mqttConnect+0x27c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a36      	ldr	r2, [pc, #216]	; (800aa80 <mqttConnect+0x284>)
 800a9a6:	6811      	ldr	r1, [r2, #0]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f007 fe62 	bl	8012674 <rxr>


				txr(uartModem, SM112);
 800a9b0:	4b31      	ldr	r3, [pc, #196]	; (800aa78 <mqttConnect+0x27c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a46      	ldr	r2, [pc, #280]	; (800aad0 <mqttConnect+0x2d4>)
 800a9b6:	6812      	ldr	r2, [r2, #0]
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f007 fe84 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"0");
 800a9c0:	4b2d      	ldr	r3, [pc, #180]	; (800aa78 <mqttConnect+0x27c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4943      	ldr	r1, [pc, #268]	; (800aad4 <mqttConnect+0x2d8>)
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f007 fe7e 	bl	80126c8 <txr>
				txr(uartModem, SM8);
 800a9cc:	4b2a      	ldr	r3, [pc, #168]	; (800aa78 <mqttConnect+0x27c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a35      	ldr	r2, [pc, #212]	; (800aaa8 <mqttConnect+0x2ac>)
 800a9d2:	6812      	ldr	r2, [r2, #0]
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f007 fe76 	bl	80126c8 <txr>
				rxr(uartModem, SIMR, 1);
 800a9dc:	4b26      	ldr	r3, [pc, #152]	; (800aa78 <mqttConnect+0x27c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a27      	ldr	r2, [pc, #156]	; (800aa80 <mqttConnect+0x284>)
 800a9e2:	6811      	ldr	r1, [r2, #0]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f007 fe44 	bl	8012674 <rxr>

				txr(uartModem, SM12);
 800a9ec:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <mqttConnect+0x27c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a39      	ldr	r2, [pc, #228]	; (800aad8 <mqttConnect+0x2dc>)
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f007 fe66 	bl	80126c8 <txr>
				rx(uartModem, SIMN, 20);
 800a9fc:	4b1e      	ldr	r3, [pc, #120]	; (800aa78 <mqttConnect+0x27c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a36      	ldr	r2, [pc, #216]	; (800aadc <mqttConnect+0x2e0>)
 800aa02:	6811      	ldr	r1, [r2, #0]
 800aa04:	2214      	movs	r2, #20
 800aa06:	4618      	mov	r0, r3
 800aa08:	f007 fd9a 	bl	8012540 <rx>
				tx(uartModem, (uint8_t*)"AT+SMSTATE?\r\n");
 800aa0c:	4b1a      	ldr	r3, [pc, #104]	; (800aa78 <mqttConnect+0x27c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	491a      	ldr	r1, [pc, #104]	; (800aa7c <mqttConnect+0x280>)
 800aa12:	4618      	mov	r0, r3
 800aa14:	f007 fd62 	bl	80124dc <tx>
				rx(uartModem, SIMR, 1);
 800aa18:	4b17      	ldr	r3, [pc, #92]	; (800aa78 <mqttConnect+0x27c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a18      	ldr	r2, [pc, #96]	; (800aa80 <mqttConnect+0x284>)
 800aa1e:	6811      	ldr	r1, [r2, #0]
 800aa20:	2201      	movs	r2, #1
 800aa22:	4618      	mov	r0, r3
 800aa24:	f007 fd8c 	bl	8012540 <rx>
				if(strstr((char*)rx_buf,"+SMSTATE: 1") != NULL){
 800aa28:	4916      	ldr	r1, [pc, #88]	; (800aa84 <mqttConnect+0x288>)
 800aa2a:	4817      	ldr	r0, [pc, #92]	; (800aa88 <mqttConnect+0x28c>)
 800aa2c:	f008 f972 	bl	8012d14 <strstr>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <mqttConnect+0x242>
					MQTTCONNECTION = CONNECTED;
 800aa36:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <mqttConnect+0x290>)
 800aa38:	2238      	movs	r2, #56	; 0x38
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	e015      	b.n	800aa6a <mqttConnect+0x26e>
				}
				else{
					MQTTCONNECTION = NOT_CONNECTED;
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <mqttConnect+0x290>)
 800aa40:	2239      	movs	r2, #57	; 0x39
 800aa42:	601a      	str	r2, [r3, #0]
					if(savebattery < 1440/minSendPeriod){
 800aa44:	4b26      	ldr	r3, [pc, #152]	; (800aae0 <mqttConnect+0x2e4>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800aa4c:	fb92 f2f3 	sdiv	r2, r2, r3
 800aa50:	4b24      	ldr	r3, [pc, #144]	; (800aae4 <mqttConnect+0x2e8>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	dd05      	ble.n	800aa64 <mqttConnect+0x268>
						savebattery ++;
 800aa58:	4b22      	ldr	r3, [pc, #136]	; (800aae4 <mqttConnect+0x2e8>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	4a21      	ldr	r2, [pc, #132]	; (800aae4 <mqttConnect+0x2e8>)
 800aa60:	6013      	str	r3, [r2, #0]
 800aa62:	e002      	b.n	800aa6a <mqttConnect+0x26e>
					}
					else{
						BATTERYSAVER = BATTERYSAVER_ON;
 800aa64:	4b0b      	ldr	r3, [pc, #44]	; (800aa94 <mqttConnect+0x298>)
 800aa66:	223e      	movs	r2, #62	; 0x3e
 800aa68:	601a      	str	r2, [r3, #0]
					}
				}
			}
			HAL_Delay(100);
 800aa6a:	2064      	movs	r0, #100	; 0x64
 800aa6c:	f001 fe02 	bl	800c674 <HAL_Delay>
		}
	}
}
 800aa70:	bf00      	nop
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20000158 	.word	0x20000158
 800aa78:	20004d5c 	.word	0x20004d5c
 800aa7c:	080155d8 	.word	0x080155d8
 800aa80:	20000118 	.word	0x20000118
 800aa84:	080155e8 	.word	0x080155e8
 800aa88:	20004588 	.word	0x20004588
 800aa8c:	20000160 	.word	0x20000160
 800aa90:	2000015c 	.word	0x2000015c
 800aa94:	2000016c 	.word	0x2000016c
 800aa98:	200000ec 	.word	0x200000ec
 800aa9c:	20003d38 	.word	0x20003d38
 800aaa0:	080155f4 	.word	0x080155f4
 800aaa4:	2000421c 	.word	0x2000421c
 800aaa8:	200000f0 	.word	0x200000f0
 800aaac:	200000f4 	.word	0x200000f4
 800aab0:	20003d9c 	.word	0x20003d9c
 800aab4:	20000268 	.word	0x20000268
 800aab8:	200000f8 	.word	0x200000f8
 800aabc:	20004138 	.word	0x20004138
 800aac0:	200000fc 	.word	0x200000fc
 800aac4:	20003e34 	.word	0x20003e34
 800aac8:	20000100 	.word	0x20000100
 800aacc:	080155f8 	.word	0x080155f8
 800aad0:	20000104 	.word	0x20000104
 800aad4:	080155fc 	.word	0x080155fc
 800aad8:	20000108 	.word	0x20000108
 800aadc:	20000134 	.word	0x20000134
 800aae0:	20000200 	.word	0x20000200
 800aae4:	2000028c 	.word	0x2000028c

0800aae8 <mqttDisconnect>:

void mqttDisconnect(){
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
	if(REGESTRATION == REGISTERED){
 800aaec:	4b29      	ldr	r3, [pc, #164]	; (800ab94 <mqttDisconnect+0xac>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b36      	cmp	r3, #54	; 0x36
 800aaf2:	d14c      	bne.n	800ab8e <mqttDisconnect+0xa6>
		tx(uartModem, (uint8_t*)"AT+SMSTATE?\r\n");
 800aaf4:	4b28      	ldr	r3, [pc, #160]	; (800ab98 <mqttDisconnect+0xb0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4928      	ldr	r1, [pc, #160]	; (800ab9c <mqttDisconnect+0xb4>)
 800aafa:	4618      	mov	r0, r3
 800aafc:	f007 fcee 	bl	80124dc <tx>
		rx(uartModem, SIMR, 1);
 800ab00:	4b25      	ldr	r3, [pc, #148]	; (800ab98 <mqttDisconnect+0xb0>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a26      	ldr	r2, [pc, #152]	; (800aba0 <mqttDisconnect+0xb8>)
 800ab06:	6811      	ldr	r1, [r2, #0]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f007 fd18 	bl	8012540 <rx>
		if(strstr((char*)rx_buf,"+SMSTATE: 1") != NULL){
 800ab10:	4924      	ldr	r1, [pc, #144]	; (800aba4 <mqttDisconnect+0xbc>)
 800ab12:	4825      	ldr	r0, [pc, #148]	; (800aba8 <mqttDisconnect+0xc0>)
 800ab14:	f008 f8fe 	bl	8012d14 <strstr>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <mqttDisconnect+0x3e>
			MQTTCONNECTION = CONNECTED;
 800ab1e:	4b23      	ldr	r3, [pc, #140]	; (800abac <mqttDisconnect+0xc4>)
 800ab20:	2238      	movs	r2, #56	; 0x38
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	e002      	b.n	800ab2c <mqttDisconnect+0x44>
		}
		else{
			MQTTCONNECTION = NOT_CONNECTED;
 800ab26:	4b21      	ldr	r3, [pc, #132]	; (800abac <mqttDisconnect+0xc4>)
 800ab28:	2239      	movs	r2, #57	; 0x39
 800ab2a:	601a      	str	r2, [r3, #0]
		}
	if(MQTTCONNECTION == CONNECTED){
 800ab2c:	4b1f      	ldr	r3, [pc, #124]	; (800abac <mqttDisconnect+0xc4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b38      	cmp	r3, #56	; 0x38
 800ab32:	d12c      	bne.n	800ab8e <mqttDisconnect+0xa6>
		txr(uartModem, (uint8_t*)"AT+SMDISC\r\n");
 800ab34:	4b18      	ldr	r3, [pc, #96]	; (800ab98 <mqttDisconnect+0xb0>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	491d      	ldr	r1, [pc, #116]	; (800abb0 <mqttDisconnect+0xc8>)
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f007 fdc4 	bl	80126c8 <txr>
		rx(uartModem, SIMN, 40);
 800ab40:	4b15      	ldr	r3, [pc, #84]	; (800ab98 <mqttDisconnect+0xb0>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a1b      	ldr	r2, [pc, #108]	; (800abb4 <mqttDisconnect+0xcc>)
 800ab46:	6811      	ldr	r1, [r2, #0]
 800ab48:	2228      	movs	r2, #40	; 0x28
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f007 fcf8 	bl	8012540 <rx>

		txr(uartModem, (uint8_t*)"AT+SMSTATE?\r\n");
 800ab50:	4b11      	ldr	r3, [pc, #68]	; (800ab98 <mqttDisconnect+0xb0>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4911      	ldr	r1, [pc, #68]	; (800ab9c <mqttDisconnect+0xb4>)
 800ab56:	4618      	mov	r0, r3
 800ab58:	f007 fdb6 	bl	80126c8 <txr>
		rx(uartModem, SIMR, 2);
 800ab5c:	4b0e      	ldr	r3, [pc, #56]	; (800ab98 <mqttDisconnect+0xb0>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a0f      	ldr	r2, [pc, #60]	; (800aba0 <mqttDisconnect+0xb8>)
 800ab62:	6811      	ldr	r1, [r2, #0]
 800ab64:	2202      	movs	r2, #2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f007 fcea 	bl	8012540 <rx>
		if(strstr((char*)rx_buf,"+SMSTATE: 1") != NULL){
 800ab6c:	490d      	ldr	r1, [pc, #52]	; (800aba4 <mqttDisconnect+0xbc>)
 800ab6e:	480e      	ldr	r0, [pc, #56]	; (800aba8 <mqttDisconnect+0xc0>)
 800ab70:	f008 f8d0 	bl	8012d14 <strstr>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <mqttDisconnect+0x9a>
			MQTTCONNECTION = CONNECTED;
 800ab7a:	4b0c      	ldr	r3, [pc, #48]	; (800abac <mqttDisconnect+0xc4>)
 800ab7c:	2238      	movs	r2, #56	; 0x38
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	e002      	b.n	800ab88 <mqttDisconnect+0xa0>
		}
		else{
			MQTTCONNECTION = NOT_CONNECTED;
 800ab82:	4b0a      	ldr	r3, [pc, #40]	; (800abac <mqttDisconnect+0xc4>)
 800ab84:	2239      	movs	r2, #57	; 0x39
 800ab86:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(100);
 800ab88:	2064      	movs	r0, #100	; 0x64
 800ab8a:	f001 fd73 	bl	800c674 <HAL_Delay>
		}
	}
}
 800ab8e:	bf00      	nop
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20000158 	.word	0x20000158
 800ab98:	20004d5c 	.word	0x20004d5c
 800ab9c:	080155d8 	.word	0x080155d8
 800aba0:	20000118 	.word	0x20000118
 800aba4:	080155e8 	.word	0x080155e8
 800aba8:	20004588 	.word	0x20004588
 800abac:	20000160 	.word	0x20000160
 800abb0:	08015600 	.word	0x08015600
 800abb4:	20000134 	.word	0x20000134

0800abb8 <mqttSend>:

int mqttSend(int type){
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
	if(MQTTCONNECTION == CONNECTED){
 800abc0:	4b7e      	ldr	r3, [pc, #504]	; (800adbc <mqttSend+0x204>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b38      	cmp	r3, #56	; 0x38
 800abc6:	f040 87b9 	bne.w	800bb3c <mqttSend+0xf84>
		if(type == 1){
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	f040 81cf 	bne.w	800af70 <mqttSend+0x3b8>
			if(strstr((char*)SENSORTYPE,"MB7588") != NULL || strstr((char*)SENSORTYPE,"A011617")!=NULL){
 800abd2:	497b      	ldr	r1, [pc, #492]	; (800adc0 <mqttSend+0x208>)
 800abd4:	487b      	ldr	r0, [pc, #492]	; (800adc4 <mqttSend+0x20c>)
 800abd6:	f008 f89d 	bl	8012d14 <strstr>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <mqttSend+0x36>
 800abe0:	4979      	ldr	r1, [pc, #484]	; (800adc8 <mqttSend+0x210>)
 800abe2:	4878      	ldr	r0, [pc, #480]	; (800adc4 <mqttSend+0x20c>)
 800abe4:	f008 f896 	bl	8012d14 <strstr>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d06e      	beq.n	800accc <mqttSend+0x114>
				txr(uartModem, SM13);
 800abee:	4b77      	ldr	r3, [pc, #476]	; (800adcc <mqttSend+0x214>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a77      	ldr	r2, [pc, #476]	; (800add0 <mqttSend+0x218>)
 800abf4:	6812      	ldr	r2, [r2, #0]
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f007 fd65 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"W/");
 800abfe:	4b73      	ldr	r3, [pc, #460]	; (800adcc <mqttSend+0x214>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4974      	ldr	r1, [pc, #464]	; (800add4 <mqttSend+0x21c>)
 800ac04:	4618      	mov	r0, r3
 800ac06:	f007 fd5f 	bl	80126c8 <txr>
				txr(uartModem, NAME1);
 800ac0a:	4b70      	ldr	r3, [pc, #448]	; (800adcc <mqttSend+0x214>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4972      	ldr	r1, [pc, #456]	; (800add8 <mqttSend+0x220>)
 800ac10:	4618      	mov	r0, r3
 800ac12:	f007 fd59 	bl	80126c8 <txr>
				tx(uartModem, (uint8_t*)"/");
 800ac16:	4b6d      	ldr	r3, [pc, #436]	; (800adcc <mqttSend+0x214>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4970      	ldr	r1, [pc, #448]	; (800addc <mqttSend+0x224>)
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f007 fc5d 	bl	80124dc <tx>
				txr(uartModem, NAME2);
 800ac22:	4b6a      	ldr	r3, [pc, #424]	; (800adcc <mqttSend+0x214>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	496e      	ldr	r1, [pc, #440]	; (800ade0 <mqttSend+0x228>)
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f007 fd4d 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"/");
 800ac2e:	4b67      	ldr	r3, [pc, #412]	; (800adcc <mqttSend+0x214>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	496a      	ldr	r1, [pc, #424]	; (800addc <mqttSend+0x224>)
 800ac34:	4618      	mov	r0, r3
 800ac36:	f007 fd47 	bl	80126c8 <txr>
				txr(uartModem, IMEI);
 800ac3a:	4b64      	ldr	r3, [pc, #400]	; (800adcc <mqttSend+0x214>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4969      	ldr	r1, [pc, #420]	; (800ade4 <mqttSend+0x22c>)
 800ac40:	4618      	mov	r0, r3
 800ac42:	f007 fd41 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"/data\",1,1,\"{\\\"i\\\":\\\"");
 800ac46:	4b61      	ldr	r3, [pc, #388]	; (800adcc <mqttSend+0x214>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4967      	ldr	r1, [pc, #412]	; (800ade8 <mqttSend+0x230>)
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f007 fd3b 	bl	80126c8 <txr>
				txr(uartModem, IMEI);
 800ac52:	4b5e      	ldr	r3, [pc, #376]	; (800adcc <mqttSend+0x214>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4963      	ldr	r1, [pc, #396]	; (800ade4 <mqttSend+0x22c>)
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f007 fd35 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"t\\\":\\\"");
 800ac5e:	4b5b      	ldr	r3, [pc, #364]	; (800adcc <mqttSend+0x214>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4962      	ldr	r1, [pc, #392]	; (800adec <mqttSend+0x234>)
 800ac64:	4618      	mov	r0, r3
 800ac66:	f007 fd2f 	bl	80126c8 <txr>
				txr(uartModem, TIME);
 800ac6a:	4b58      	ldr	r3, [pc, #352]	; (800adcc <mqttSend+0x214>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4960      	ldr	r1, [pc, #384]	; (800adf0 <mqttSend+0x238>)
 800ac70:	4618      	mov	r0, r3
 800ac72:	f007 fd29 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"d\\\":\\\"");
 800ac76:	4b55      	ldr	r3, [pc, #340]	; (800adcc <mqttSend+0x214>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	495e      	ldr	r1, [pc, #376]	; (800adf4 <mqttSend+0x23c>)
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f007 fd23 	bl	80126c8 <txr>
				txr(uartModem, SATH);
 800ac82:	4b52      	ldr	r3, [pc, #328]	; (800adcc <mqttSend+0x214>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	495c      	ldr	r1, [pc, #368]	; (800adf8 <mqttSend+0x240>)
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f007 fd1d 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"v\\\":\\\"");
 800ac8e:	4b4f      	ldr	r3, [pc, #316]	; (800adcc <mqttSend+0x214>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	495a      	ldr	r1, [pc, #360]	; (800adfc <mqttSend+0x244>)
 800ac94:	4618      	mov	r0, r3
 800ac96:	f007 fd17 	bl	80126c8 <txr>
				txr(uartModem, SARF);
 800ac9a:	4b4c      	ldr	r3, [pc, #304]	; (800adcc <mqttSend+0x214>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4958      	ldr	r1, [pc, #352]	; (800ae00 <mqttSend+0x248>)
 800aca0:	4618      	mov	r0, r3
 800aca2:	f007 fd11 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"c\\\":\\\"");
 800aca6:	4b49      	ldr	r3, [pc, #292]	; (800adcc <mqttSend+0x214>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4956      	ldr	r1, [pc, #344]	; (800ae04 <mqttSend+0x24c>)
 800acac:	4618      	mov	r0, r3
 800acae:	f007 fd0b 	bl	80126c8 <txr>
				txr(uartModem, COR);
 800acb2:	4b46      	ldr	r3, [pc, #280]	; (800adcc <mqttSend+0x214>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4954      	ldr	r1, [pc, #336]	; (800ae08 <mqttSend+0x250>)
 800acb8:	4618      	mov	r0, r3
 800acba:	f007 fd05 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\"}\"\r\n");
 800acbe:	4b43      	ldr	r3, [pc, #268]	; (800adcc <mqttSend+0x214>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4952      	ldr	r1, [pc, #328]	; (800ae0c <mqttSend+0x254>)
 800acc4:	4618      	mov	r0, r3
 800acc6:	f007 fcff 	bl	80126c8 <txr>
 800acca:	e124      	b.n	800af16 <mqttSend+0x35e>
			}
			else if(strstr((char*)SENSORTYPE,"SWellVer") != NULL){
 800accc:	4950      	ldr	r1, [pc, #320]	; (800ae10 <mqttSend+0x258>)
 800acce:	483d      	ldr	r0, [pc, #244]	; (800adc4 <mqttSend+0x20c>)
 800acd0:	f008 f820 	bl	8012d14 <strstr>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 80a8 	beq.w	800ae2c <mqttSend+0x274>
				txr(uartModem, SM13);
 800acdc:	4b3b      	ldr	r3, [pc, #236]	; (800adcc <mqttSend+0x214>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a3b      	ldr	r2, [pc, #236]	; (800add0 <mqttSend+0x218>)
 800ace2:	6812      	ldr	r2, [r2, #0]
 800ace4:	4611      	mov	r1, r2
 800ace6:	4618      	mov	r0, r3
 800ace8:	f007 fcee 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"S/");
 800acec:	4b37      	ldr	r3, [pc, #220]	; (800adcc <mqttSend+0x214>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4948      	ldr	r1, [pc, #288]	; (800ae14 <mqttSend+0x25c>)
 800acf2:	4618      	mov	r0, r3
 800acf4:	f007 fce8 	bl	80126c8 <txr>
				txr(uartModem, NAME1);
 800acf8:	4b34      	ldr	r3, [pc, #208]	; (800adcc <mqttSend+0x214>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4936      	ldr	r1, [pc, #216]	; (800add8 <mqttSend+0x220>)
 800acfe:	4618      	mov	r0, r3
 800ad00:	f007 fce2 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"/");
 800ad04:	4b31      	ldr	r3, [pc, #196]	; (800adcc <mqttSend+0x214>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4934      	ldr	r1, [pc, #208]	; (800addc <mqttSend+0x224>)
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f007 fcdc 	bl	80126c8 <txr>
				txr(uartModem, NAME2);
 800ad10:	4b2e      	ldr	r3, [pc, #184]	; (800adcc <mqttSend+0x214>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4932      	ldr	r1, [pc, #200]	; (800ade0 <mqttSend+0x228>)
 800ad16:	4618      	mov	r0, r3
 800ad18:	f007 fcd6 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"/");
 800ad1c:	4b2b      	ldr	r3, [pc, #172]	; (800adcc <mqttSend+0x214>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	492e      	ldr	r1, [pc, #184]	; (800addc <mqttSend+0x224>)
 800ad22:	4618      	mov	r0, r3
 800ad24:	f007 fcd0 	bl	80126c8 <txr>
				txr(uartModem, IMEI);
 800ad28:	4b28      	ldr	r3, [pc, #160]	; (800adcc <mqttSend+0x214>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	492d      	ldr	r1, [pc, #180]	; (800ade4 <mqttSend+0x22c>)
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f007 fcca 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"/data\",1,1,\"{\\\"i\\\":\\\"");
 800ad34:	4b25      	ldr	r3, [pc, #148]	; (800adcc <mqttSend+0x214>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	492b      	ldr	r1, [pc, #172]	; (800ade8 <mqttSend+0x230>)
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f007 fcc4 	bl	80126c8 <txr>
				txr(uartModem, IMEI);
 800ad40:	4b22      	ldr	r3, [pc, #136]	; (800adcc <mqttSend+0x214>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4927      	ldr	r1, [pc, #156]	; (800ade4 <mqttSend+0x22c>)
 800ad46:	4618      	mov	r0, r3
 800ad48:	f007 fcbe 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"t\\\":\\\"");
 800ad4c:	4b1f      	ldr	r3, [pc, #124]	; (800adcc <mqttSend+0x214>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4926      	ldr	r1, [pc, #152]	; (800adec <mqttSend+0x234>)
 800ad52:	4618      	mov	r0, r3
 800ad54:	f007 fcb8 	bl	80126c8 <txr>
				txr(uartModem, TIME);
 800ad58:	4b1c      	ldr	r3, [pc, #112]	; (800adcc <mqttSend+0x214>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4924      	ldr	r1, [pc, #144]	; (800adf0 <mqttSend+0x238>)
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f007 fcb2 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"d\\\":\\\"");
 800ad64:	4b19      	ldr	r3, [pc, #100]	; (800adcc <mqttSend+0x214>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4922      	ldr	r1, [pc, #136]	; (800adf4 <mqttSend+0x23c>)
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f007 fcac 	bl	80126c8 <txr>
				txr(uartModem, MSATH);
 800ad70:	4b16      	ldr	r3, [pc, #88]	; (800adcc <mqttSend+0x214>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4928      	ldr	r1, [pc, #160]	; (800ae18 <mqttSend+0x260>)
 800ad76:	4618      	mov	r0, r3
 800ad78:	f007 fca6 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"r\\\":\\\"");
 800ad7c:	4b13      	ldr	r3, [pc, #76]	; (800adcc <mqttSend+0x214>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4926      	ldr	r1, [pc, #152]	; (800ae1c <mqttSend+0x264>)
 800ad82:	4618      	mov	r0, r3
 800ad84:	f007 fca0 	bl	80126c8 <txr>
				txr(uartModem, MCON);
 800ad88:	4b10      	ldr	r3, [pc, #64]	; (800adcc <mqttSend+0x214>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4924      	ldr	r1, [pc, #144]	; (800ae20 <mqttSend+0x268>)
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f007 fc9a 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"q\\\":\\\"");
 800ad94:	4b0d      	ldr	r3, [pc, #52]	; (800adcc <mqttSend+0x214>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4922      	ldr	r1, [pc, #136]	; (800ae24 <mqttSend+0x26c>)
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f007 fc94 	bl	80126c8 <txr>
				txr(uartModem, MTEMP);
 800ada0:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <mqttSend+0x214>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4920      	ldr	r1, [pc, #128]	; (800ae28 <mqttSend+0x270>)
 800ada6:	4618      	mov	r0, r3
 800ada8:	f007 fc8e 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\"}\"\r\n");
 800adac:	4b07      	ldr	r3, [pc, #28]	; (800adcc <mqttSend+0x214>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4916      	ldr	r1, [pc, #88]	; (800ae0c <mqttSend+0x254>)
 800adb2:	4618      	mov	r0, r3
 800adb4:	f007 fc88 	bl	80126c8 <txr>
 800adb8:	e0ad      	b.n	800af16 <mqttSend+0x35e>
 800adba:	bf00      	nop
 800adbc:	20000160 	.word	0x20000160
 800adc0:	0801560c 	.word	0x0801560c
 800adc4:	200040f8 	.word	0x200040f8
 800adc8:	08015614 	.word	0x08015614
 800adcc:	20004d5c 	.word	0x20004d5c
 800add0:	2000010c 	.word	0x2000010c
 800add4:	0801561c 	.word	0x0801561c
 800add8:	2000418c 	.word	0x2000418c
 800addc:	08015620 	.word	0x08015620
 800ade0:	20003d04 	.word	0x20003d04
 800ade4:	20003d9c 	.word	0x20003d9c
 800ade8:	08015624 	.word	0x08015624
 800adec:	0801563c 	.word	0x0801563c
 800adf0:	20000268 	.word	0x20000268
 800adf4:	08015648 	.word	0x08015648
 800adf8:	20003cf8 	.word	0x20003cf8
 800adfc:	08015654 	.word	0x08015654
 800ae00:	20000398 	.word	0x20000398
 800ae04:	08015660 	.word	0x08015660
 800ae08:	20004428 	.word	0x20004428
 800ae0c:	0801566c 	.word	0x0801566c
 800ae10:	08015674 	.word	0x08015674
 800ae14:	08015680 	.word	0x08015680
 800ae18:	200002b8 	.word	0x200002b8
 800ae1c:	08015684 	.word	0x08015684
 800ae20:	20004418 	.word	0x20004418
 800ae24:	08015690 	.word	0x08015690
 800ae28:	200002ac 	.word	0x200002ac
			}
			else if(strstr((char*)SENSORTYPE,"WellVer") != NULL){
 800ae2c:	4968      	ldr	r1, [pc, #416]	; (800afd0 <mqttSend+0x418>)
 800ae2e:	4869      	ldr	r0, [pc, #420]	; (800afd4 <mqttSend+0x41c>)
 800ae30:	f007 ff70 	bl	8012d14 <strstr>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d06d      	beq.n	800af16 <mqttSend+0x35e>
				txr(uartModem, SM13);
 800ae3a:	4b67      	ldr	r3, [pc, #412]	; (800afd8 <mqttSend+0x420>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a67      	ldr	r2, [pc, #412]	; (800afdc <mqttSend+0x424>)
 800ae40:	6812      	ldr	r2, [r2, #0]
 800ae42:	4611      	mov	r1, r2
 800ae44:	4618      	mov	r0, r3
 800ae46:	f007 fc3f 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"M/");
 800ae4a:	4b63      	ldr	r3, [pc, #396]	; (800afd8 <mqttSend+0x420>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4964      	ldr	r1, [pc, #400]	; (800afe0 <mqttSend+0x428>)
 800ae50:	4618      	mov	r0, r3
 800ae52:	f007 fc39 	bl	80126c8 <txr>
				txr(uartModem, NAME1);
 800ae56:	4b60      	ldr	r3, [pc, #384]	; (800afd8 <mqttSend+0x420>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4962      	ldr	r1, [pc, #392]	; (800afe4 <mqttSend+0x42c>)
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f007 fc33 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"/");
 800ae62:	4b5d      	ldr	r3, [pc, #372]	; (800afd8 <mqttSend+0x420>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4960      	ldr	r1, [pc, #384]	; (800afe8 <mqttSend+0x430>)
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f007 fc2d 	bl	80126c8 <txr>
				txr(uartModem, NAME2);
 800ae6e:	4b5a      	ldr	r3, [pc, #360]	; (800afd8 <mqttSend+0x420>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	495e      	ldr	r1, [pc, #376]	; (800afec <mqttSend+0x434>)
 800ae74:	4618      	mov	r0, r3
 800ae76:	f007 fc27 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"/");
 800ae7a:	4b57      	ldr	r3, [pc, #348]	; (800afd8 <mqttSend+0x420>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	495a      	ldr	r1, [pc, #360]	; (800afe8 <mqttSend+0x430>)
 800ae80:	4618      	mov	r0, r3
 800ae82:	f007 fc21 	bl	80126c8 <txr>
				txr(uartModem, IMEI);
 800ae86:	4b54      	ldr	r3, [pc, #336]	; (800afd8 <mqttSend+0x420>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4959      	ldr	r1, [pc, #356]	; (800aff0 <mqttSend+0x438>)
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f007 fc1b 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"/data\",1,1,\"{\\\"i\\\":\\\"");
 800ae92:	4b51      	ldr	r3, [pc, #324]	; (800afd8 <mqttSend+0x420>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4957      	ldr	r1, [pc, #348]	; (800aff4 <mqttSend+0x43c>)
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f007 fc15 	bl	80126c8 <txr>
				txr(uartModem, IMEI);
 800ae9e:	4b4e      	ldr	r3, [pc, #312]	; (800afd8 <mqttSend+0x420>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4953      	ldr	r1, [pc, #332]	; (800aff0 <mqttSend+0x438>)
 800aea4:	4618      	mov	r0, r3
 800aea6:	f007 fc0f 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"t\\\":\\\"");
 800aeaa:	4b4b      	ldr	r3, [pc, #300]	; (800afd8 <mqttSend+0x420>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4952      	ldr	r1, [pc, #328]	; (800aff8 <mqttSend+0x440>)
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f007 fc09 	bl	80126c8 <txr>
				txr(uartModem, TIME);
 800aeb6:	4b48      	ldr	r3, [pc, #288]	; (800afd8 <mqttSend+0x420>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4950      	ldr	r1, [pc, #320]	; (800affc <mqttSend+0x444>)
 800aebc:	4618      	mov	r0, r3
 800aebe:	f007 fc03 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"d\\\":\\\"");
 800aec2:	4b45      	ldr	r3, [pc, #276]	; (800afd8 <mqttSend+0x420>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	494e      	ldr	r1, [pc, #312]	; (800b000 <mqttSend+0x448>)
 800aec8:	4618      	mov	r0, r3
 800aeca:	f007 fbfd 	bl	80126c8 <txr>
				txr(uartModem, MSATH);
 800aece:	4b42      	ldr	r3, [pc, #264]	; (800afd8 <mqttSend+0x420>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	494c      	ldr	r1, [pc, #304]	; (800b004 <mqttSend+0x44c>)
 800aed4:	4618      	mov	r0, r3
 800aed6:	f007 fbf7 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"r\\\":\\\"");
 800aeda:	4b3f      	ldr	r3, [pc, #252]	; (800afd8 <mqttSend+0x420>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	494a      	ldr	r1, [pc, #296]	; (800b008 <mqttSend+0x450>)
 800aee0:	4618      	mov	r0, r3
 800aee2:	f007 fbf1 	bl	80126c8 <txr>
				txr(uartModem, MCON);
 800aee6:	4b3c      	ldr	r3, [pc, #240]	; (800afd8 <mqttSend+0x420>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4948      	ldr	r1, [pc, #288]	; (800b00c <mqttSend+0x454>)
 800aeec:	4618      	mov	r0, r3
 800aeee:	f007 fbeb 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\",\\\"q\\\":\\\"");
 800aef2:	4b39      	ldr	r3, [pc, #228]	; (800afd8 <mqttSend+0x420>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4946      	ldr	r1, [pc, #280]	; (800b010 <mqttSend+0x458>)
 800aef8:	4618      	mov	r0, r3
 800aefa:	f007 fbe5 	bl	80126c8 <txr>
				txr(uartModem, MTEMP);
 800aefe:	4b36      	ldr	r3, [pc, #216]	; (800afd8 <mqttSend+0x420>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4944      	ldr	r1, [pc, #272]	; (800b014 <mqttSend+0x45c>)
 800af04:	4618      	mov	r0, r3
 800af06:	f007 fbdf 	bl	80126c8 <txr>
				txr(uartModem, (uint8_t*)"\\\"}\"\r\n");
 800af0a:	4b33      	ldr	r3, [pc, #204]	; (800afd8 <mqttSend+0x420>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4942      	ldr	r1, [pc, #264]	; (800b018 <mqttSend+0x460>)
 800af10:	4618      	mov	r0, r3
 800af12:	f007 fbd9 	bl	80126c8 <txr>
			}
			rx(uartModem, SIMR, 40);
 800af16:	4b30      	ldr	r3, [pc, #192]	; (800afd8 <mqttSend+0x420>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a40      	ldr	r2, [pc, #256]	; (800b01c <mqttSend+0x464>)
 800af1c:	6811      	ldr	r1, [r2, #0]
 800af1e:	2228      	movs	r2, #40	; 0x28
 800af20:	4618      	mov	r0, r3
 800af22:	f007 fb0d 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800af26:	4b2c      	ldr	r3, [pc, #176]	; (800afd8 <mqttSend+0x420>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a3d      	ldr	r2, [pc, #244]	; (800b020 <mqttSend+0x468>)
 800af2c:	6811      	ldr	r1, [r2, #0]
 800af2e:	2201      	movs	r2, #1
 800af30:	4618      	mov	r0, r3
 800af32:	f007 fb05 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800af36:	4b28      	ldr	r3, [pc, #160]	; (800afd8 <mqttSend+0x420>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a39      	ldr	r2, [pc, #228]	; (800b020 <mqttSend+0x468>)
 800af3c:	6811      	ldr	r1, [r2, #0]
 800af3e:	2201      	movs	r2, #1
 800af40:	4618      	mov	r0, r3
 800af42:	f007 fafd 	bl	8012540 <rx>
			if(strstr((char*)rx_buf,",0") != NULL){
 800af46:	4937      	ldr	r1, [pc, #220]	; (800b024 <mqttSend+0x46c>)
 800af48:	4837      	ldr	r0, [pc, #220]	; (800b028 <mqttSend+0x470>)
 800af4a:	f007 fee3 	bl	8012d14 <strstr>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00a      	beq.n	800af6a <mqttSend+0x3b2>
				sendPosition++;
 800af54:	4b35      	ldr	r3, [pc, #212]	; (800b02c <mqttSend+0x474>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3301      	adds	r3, #1
 800af5a:	4a34      	ldr	r2, [pc, #208]	; (800b02c <mqttSend+0x474>)
 800af5c:	6013      	str	r3, [r2, #0]
				savebattery = 0;
 800af5e:	4b34      	ldr	r3, [pc, #208]	; (800b030 <mqttSend+0x478>)
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]
				return MQTTSEND_OK;
 800af64:	233c      	movs	r3, #60	; 0x3c
 800af66:	f000 bdea 	b.w	800bb3e <mqttSend+0xf86>
			}
			else{
				return MQTTSEND_ERROR;
 800af6a:	233d      	movs	r3, #61	; 0x3d
 800af6c:	f000 bde7 	b.w	800bb3e <mqttSend+0xf86>
			}
		}
		if(type == 2){
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b02      	cmp	r3, #2
 800af74:	f040 821e 	bne.w	800b3b4 <mqttSend+0x7fc>
			tx(uartModem, SM13);
 800af78:	4b17      	ldr	r3, [pc, #92]	; (800afd8 <mqttSend+0x420>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a17      	ldr	r2, [pc, #92]	; (800afdc <mqttSend+0x424>)
 800af7e:	6812      	ldr	r2, [r2, #0]
 800af80:	4611      	mov	r1, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f007 faaa 	bl	80124dc <tx>
			if(strstr((char*)SENSORTYPE,"MB7588") != NULL || strstr((char*)SENSORTYPE,"A011617")!=NULL){
 800af88:	492a      	ldr	r1, [pc, #168]	; (800b034 <mqttSend+0x47c>)
 800af8a:	4812      	ldr	r0, [pc, #72]	; (800afd4 <mqttSend+0x41c>)
 800af8c:	f007 fec2 	bl	8012d14 <strstr>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <mqttSend+0x3ec>
 800af96:	4928      	ldr	r1, [pc, #160]	; (800b038 <mqttSend+0x480>)
 800af98:	480e      	ldr	r0, [pc, #56]	; (800afd4 <mqttSend+0x41c>)
 800af9a:	f007 febb 	bl	8012d14 <strstr>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d006      	beq.n	800afb2 <mqttSend+0x3fa>
				tx(uartModem, (uint8_t*)"W/");
 800afa4:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <mqttSend+0x420>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4924      	ldr	r1, [pc, #144]	; (800b03c <mqttSend+0x484>)
 800afaa:	4618      	mov	r0, r3
 800afac:	f007 fa96 	bl	80124dc <tx>
 800afb0:	e057      	b.n	800b062 <mqttSend+0x4aa>
			}
			else if(strstr((char*)SENSORTYPE,"SWellVer") != NULL){
 800afb2:	4923      	ldr	r1, [pc, #140]	; (800b040 <mqttSend+0x488>)
 800afb4:	4807      	ldr	r0, [pc, #28]	; (800afd4 <mqttSend+0x41c>)
 800afb6:	f007 fead 	bl	8012d14 <strstr>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d043      	beq.n	800b048 <mqttSend+0x490>
				tx(uartModem, (uint8_t*)"S/");
 800afc0:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <mqttSend+0x420>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	491f      	ldr	r1, [pc, #124]	; (800b044 <mqttSend+0x48c>)
 800afc6:	4618      	mov	r0, r3
 800afc8:	f007 fa88 	bl	80124dc <tx>
 800afcc:	e049      	b.n	800b062 <mqttSend+0x4aa>
 800afce:	bf00      	nop
 800afd0:	0801569c 	.word	0x0801569c
 800afd4:	200040f8 	.word	0x200040f8
 800afd8:	20004d5c 	.word	0x20004d5c
 800afdc:	2000010c 	.word	0x2000010c
 800afe0:	080156a4 	.word	0x080156a4
 800afe4:	2000418c 	.word	0x2000418c
 800afe8:	08015620 	.word	0x08015620
 800afec:	20003d04 	.word	0x20003d04
 800aff0:	20003d9c 	.word	0x20003d9c
 800aff4:	08015624 	.word	0x08015624
 800aff8:	0801563c 	.word	0x0801563c
 800affc:	20000268 	.word	0x20000268
 800b000:	08015648 	.word	0x08015648
 800b004:	200002b8 	.word	0x200002b8
 800b008:	08015684 	.word	0x08015684
 800b00c:	20004418 	.word	0x20004418
 800b010:	08015690 	.word	0x08015690
 800b014:	200002ac 	.word	0x200002ac
 800b018:	0801566c 	.word	0x0801566c
 800b01c:	20000118 	.word	0x20000118
 800b020:	20000134 	.word	0x20000134
 800b024:	08015438 	.word	0x08015438
 800b028:	20004588 	.word	0x20004588
 800b02c:	20004124 	.word	0x20004124
 800b030:	2000028c 	.word	0x2000028c
 800b034:	0801560c 	.word	0x0801560c
 800b038:	08015614 	.word	0x08015614
 800b03c:	0801561c 	.word	0x0801561c
 800b040:	08015674 	.word	0x08015674
 800b044:	08015680 	.word	0x08015680
			}
			else if(strstr((char*)SENSORTYPE,"WellVer") != NULL){
 800b048:	49a7      	ldr	r1, [pc, #668]	; (800b2e8 <mqttSend+0x730>)
 800b04a:	48a8      	ldr	r0, [pc, #672]	; (800b2ec <mqttSend+0x734>)
 800b04c:	f007 fe62 	bl	8012d14 <strstr>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d005      	beq.n	800b062 <mqttSend+0x4aa>
				tx(uartModem, (uint8_t*)"M/");
 800b056:	4ba6      	ldr	r3, [pc, #664]	; (800b2f0 <mqttSend+0x738>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	49a6      	ldr	r1, [pc, #664]	; (800b2f4 <mqttSend+0x73c>)
 800b05c:	4618      	mov	r0, r3
 800b05e:	f007 fa3d 	bl	80124dc <tx>
			}
			tx(uartModem, NAME1);
 800b062:	4ba3      	ldr	r3, [pc, #652]	; (800b2f0 <mqttSend+0x738>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	49a4      	ldr	r1, [pc, #656]	; (800b2f8 <mqttSend+0x740>)
 800b068:	4618      	mov	r0, r3
 800b06a:	f007 fa37 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800b06e:	4ba0      	ldr	r3, [pc, #640]	; (800b2f0 <mqttSend+0x738>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	49a2      	ldr	r1, [pc, #648]	; (800b2fc <mqttSend+0x744>)
 800b074:	4618      	mov	r0, r3
 800b076:	f007 fa31 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800b07a:	4b9d      	ldr	r3, [pc, #628]	; (800b2f0 <mqttSend+0x738>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	49a0      	ldr	r1, [pc, #640]	; (800b300 <mqttSend+0x748>)
 800b080:	4618      	mov	r0, r3
 800b082:	f007 fa2b 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800b086:	4b9a      	ldr	r3, [pc, #616]	; (800b2f0 <mqttSend+0x738>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	499c      	ldr	r1, [pc, #624]	; (800b2fc <mqttSend+0x744>)
 800b08c:	4618      	mov	r0, r3
 800b08e:	f007 fa25 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800b092:	4b97      	ldr	r3, [pc, #604]	; (800b2f0 <mqttSend+0x738>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	499b      	ldr	r1, [pc, #620]	; (800b304 <mqttSend+0x74c>)
 800b098:	4618      	mov	r0, r3
 800b09a:	f007 fa1f 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/info\",1,1,\"{\\\"i\\\":\\\"");
 800b09e:	4b94      	ldr	r3, [pc, #592]	; (800b2f0 <mqttSend+0x738>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4999      	ldr	r1, [pc, #612]	; (800b308 <mqttSend+0x750>)
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f007 fa19 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800b0aa:	4b91      	ldr	r3, [pc, #580]	; (800b2f0 <mqttSend+0x738>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4995      	ldr	r1, [pc, #596]	; (800b304 <mqttSend+0x74c>)
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f007 fa13 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"t\\\":\\\"");
 800b0b6:	4b8e      	ldr	r3, [pc, #568]	; (800b2f0 <mqttSend+0x738>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4994      	ldr	r1, [pc, #592]	; (800b30c <mqttSend+0x754>)
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f007 fa0d 	bl	80124dc <tx>
			tx(uartModem, TIME);
 800b0c2:	4b8b      	ldr	r3, [pc, #556]	; (800b2f0 <mqttSend+0x738>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4992      	ldr	r1, [pc, #584]	; (800b310 <mqttSend+0x758>)
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f007 fa07 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p1\\\":\\\"");
 800b0ce:	4b88      	ldr	r3, [pc, #544]	; (800b2f0 <mqttSend+0x738>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4990      	ldr	r1, [pc, #576]	; (800b314 <mqttSend+0x75c>)
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f007 fa01 	bl	80124dc <tx>
			tx(uartModem, NAME1);
 800b0da:	4b85      	ldr	r3, [pc, #532]	; (800b2f0 <mqttSend+0x738>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4986      	ldr	r1, [pc, #536]	; (800b2f8 <mqttSend+0x740>)
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f007 f9fb 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p2\\\":\\\"");
 800b0e6:	4b82      	ldr	r3, [pc, #520]	; (800b2f0 <mqttSend+0x738>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	498b      	ldr	r1, [pc, #556]	; (800b318 <mqttSend+0x760>)
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f007 f9f5 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800b0f2:	4b7f      	ldr	r3, [pc, #508]	; (800b2f0 <mqttSend+0x738>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4982      	ldr	r1, [pc, #520]	; (800b300 <mqttSend+0x748>)
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f007 f9ef 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p3\\\":\\\"");
 800b0fe:	4b7c      	ldr	r3, [pc, #496]	; (800b2f0 <mqttSend+0x738>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4986      	ldr	r1, [pc, #536]	; (800b31c <mqttSend+0x764>)
 800b104:	4618      	mov	r0, r3
 800b106:	f007 f9e9 	bl	80124dc <tx>
			tx(uartModem, NAME3);
 800b10a:	4b79      	ldr	r3, [pc, #484]	; (800b2f0 <mqttSend+0x738>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4984      	ldr	r1, [pc, #528]	; (800b320 <mqttSend+0x768>)
 800b110:	4618      	mov	r0, r3
 800b112:	f007 f9e3 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p4\\\":\\\"");
 800b116:	4b76      	ldr	r3, [pc, #472]	; (800b2f0 <mqttSend+0x738>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4982      	ldr	r1, [pc, #520]	; (800b324 <mqttSend+0x76c>)
 800b11c:	4618      	mov	r0, r3
 800b11e:	f007 f9dd 	bl	80124dc <tx>
			tx(uartModem, PNUM);
 800b122:	4b73      	ldr	r3, [pc, #460]	; (800b2f0 <mqttSend+0x738>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4980      	ldr	r1, [pc, #512]	; (800b328 <mqttSend+0x770>)
 800b128:	4618      	mov	r0, r3
 800b12a:	f007 f9d7 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p5\\\":\\\"");
 800b12e:	4b70      	ldr	r3, [pc, #448]	; (800b2f0 <mqttSend+0x738>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	497e      	ldr	r1, [pc, #504]	; (800b32c <mqttSend+0x774>)
 800b134:	4618      	mov	r0, r3
 800b136:	f007 f9d1 	bl	80124dc <tx>
			tx(uartModem, UPNUM);
 800b13a:	4b6d      	ldr	r3, [pc, #436]	; (800b2f0 <mqttSend+0x738>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	497c      	ldr	r1, [pc, #496]	; (800b330 <mqttSend+0x778>)
 800b140:	4618      	mov	r0, r3
 800b142:	f007 f9cb 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p6\\\":\\\"");
 800b146:	4b6a      	ldr	r3, [pc, #424]	; (800b2f0 <mqttSend+0x738>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	497a      	ldr	r1, [pc, #488]	; (800b334 <mqttSend+0x77c>)
 800b14c:	4618      	mov	r0, r3
 800b14e:	f007 f9c5 	bl	80124dc <tx>
			tx(uartModem, LOCK);
 800b152:	4b67      	ldr	r3, [pc, #412]	; (800b2f0 <mqttSend+0x738>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4978      	ldr	r1, [pc, #480]	; (800b338 <mqttSend+0x780>)
 800b158:	4618      	mov	r0, r3
 800b15a:	f007 f9bf 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"GLOCK=");
 800b15e:	4b64      	ldr	r3, [pc, #400]	; (800b2f0 <mqttSend+0x738>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4976      	ldr	r1, [pc, #472]	; (800b33c <mqttSend+0x784>)
 800b164:	4618      	mov	r0, r3
 800b166:	f007 f9b9 	bl	80124dc <tx>
			tx(uartModem, GSMLOCK);
 800b16a:	4b61      	ldr	r3, [pc, #388]	; (800b2f0 <mqttSend+0x738>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4974      	ldr	r1, [pc, #464]	; (800b340 <mqttSend+0x788>)
 800b170:	4618      	mov	r0, r3
 800b172:	f007 f9b3 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p7\\\":\\\"");
 800b176:	4b5e      	ldr	r3, [pc, #376]	; (800b2f0 <mqttSend+0x738>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4972      	ldr	r1, [pc, #456]	; (800b344 <mqttSend+0x78c>)
 800b17c:	4618      	mov	r0, r3
 800b17e:	f007 f9ad 	bl	80124dc <tx>
			tx(uartModem, TEMP);
 800b182:	4b5b      	ldr	r3, [pc, #364]	; (800b2f0 <mqttSend+0x738>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4970      	ldr	r1, [pc, #448]	; (800b348 <mqttSend+0x790>)
 800b188:	4618      	mov	r0, r3
 800b18a:	f007 f9a7 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p8\\\":\\\"");
 800b18e:	4b58      	ldr	r3, [pc, #352]	; (800b2f0 <mqttSend+0x738>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	496e      	ldr	r1, [pc, #440]	; (800b34c <mqttSend+0x794>)
 800b194:	4618      	mov	r0, r3
 800b196:	f007 f9a1 	bl	80124dc <tx>
			tx(uartModem, BAT);
 800b19a:	4b55      	ldr	r3, [pc, #340]	; (800b2f0 <mqttSend+0x738>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	496c      	ldr	r1, [pc, #432]	; (800b350 <mqttSend+0x798>)
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f007 f99b 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p9\\\":\\\"");
 800b1a6:	4b52      	ldr	r3, [pc, #328]	; (800b2f0 <mqttSend+0x738>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	496a      	ldr	r1, [pc, #424]	; (800b354 <mqttSend+0x79c>)
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f007 f995 	bl	80124dc <tx>
			tx(uartModem, SIG);
 800b1b2:	4b4f      	ldr	r3, [pc, #316]	; (800b2f0 <mqttSend+0x738>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4968      	ldr	r1, [pc, #416]	; (800b358 <mqttSend+0x7a0>)
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f007 f98f 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p10\\\":\\\"");
 800b1be:	4b4c      	ldr	r3, [pc, #304]	; (800b2f0 <mqttSend+0x738>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4966      	ldr	r1, [pc, #408]	; (800b35c <mqttSend+0x7a4>)
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f007 f989 	bl	80124dc <tx>
			tx(uartModem, FW);
 800b1ca:	4b49      	ldr	r3, [pc, #292]	; (800b2f0 <mqttSend+0x738>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a64      	ldr	r2, [pc, #400]	; (800b360 <mqttSend+0x7a8>)
 800b1d0:	6812      	ldr	r2, [r2, #0]
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f007 f981 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p11\\\":\\\"");
 800b1da:	4b45      	ldr	r3, [pc, #276]	; (800b2f0 <mqttSend+0x738>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4961      	ldr	r1, [pc, #388]	; (800b364 <mqttSend+0x7ac>)
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f007 f97b 	bl	80124dc <tx>
			tx(uartModem, BW);
 800b1e6:	4b42      	ldr	r3, [pc, #264]	; (800b2f0 <mqttSend+0x738>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a5f      	ldr	r2, [pc, #380]	; (800b368 <mqttSend+0x7b0>)
 800b1ec:	6812      	ldr	r2, [r2, #0]
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f007 f973 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p12\\\":\\\"");
 800b1f6:	4b3e      	ldr	r3, [pc, #248]	; (800b2f0 <mqttSend+0x738>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	495c      	ldr	r1, [pc, #368]	; (800b36c <mqttSend+0x7b4>)
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f007 f96d 	bl	80124dc <tx>
			tx(uartModem, MINDISTANCE);
 800b202:	4b3b      	ldr	r3, [pc, #236]	; (800b2f0 <mqttSend+0x738>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	495a      	ldr	r1, [pc, #360]	; (800b370 <mqttSend+0x7b8>)
 800b208:	4618      	mov	r0, r3
 800b20a:	f007 f967 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p13\\\":\\\"");
 800b20e:	4b38      	ldr	r3, [pc, #224]	; (800b2f0 <mqttSend+0x738>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4958      	ldr	r1, [pc, #352]	; (800b374 <mqttSend+0x7bc>)
 800b214:	4618      	mov	r0, r3
 800b216:	f007 f961 	bl	80124dc <tx>
			tx(uartModem, MINMEASUREPERIOD);
 800b21a:	4b35      	ldr	r3, [pc, #212]	; (800b2f0 <mqttSend+0x738>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4956      	ldr	r1, [pc, #344]	; (800b378 <mqttSend+0x7c0>)
 800b220:	4618      	mov	r0, r3
 800b222:	f007 f95b 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p14\\\":\\\"");
 800b226:	4b32      	ldr	r3, [pc, #200]	; (800b2f0 <mqttSend+0x738>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4954      	ldr	r1, [pc, #336]	; (800b37c <mqttSend+0x7c4>)
 800b22c:	4618      	mov	r0, r3
 800b22e:	f007 f955 	bl	80124dc <tx>
			tx(uartModem, MINSENDPERIOD);
 800b232:	4b2f      	ldr	r3, [pc, #188]	; (800b2f0 <mqttSend+0x738>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4952      	ldr	r1, [pc, #328]	; (800b380 <mqttSend+0x7c8>)
 800b238:	4618      	mov	r0, r3
 800b23a:	f007 f94f 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p15\\\":\\\"");
 800b23e:	4b2c      	ldr	r3, [pc, #176]	; (800b2f0 <mqttSend+0x738>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4950      	ldr	r1, [pc, #320]	; (800b384 <mqttSend+0x7cc>)
 800b244:	4618      	mov	r0, r3
 800b246:	f007 f949 	bl	80124dc <tx>
			tx(uartModem, FTPINTERVAL);
 800b24a:	4b29      	ldr	r3, [pc, #164]	; (800b2f0 <mqttSend+0x738>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	494e      	ldr	r1, [pc, #312]	; (800b388 <mqttSend+0x7d0>)
 800b250:	4618      	mov	r0, r3
 800b252:	f007 f943 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p16\\\":\\\"");
 800b256:	4b26      	ldr	r3, [pc, #152]	; (800b2f0 <mqttSend+0x738>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	494c      	ldr	r1, [pc, #304]	; (800b38c <mqttSend+0x7d4>)
 800b25c:	4618      	mov	r0, r3
 800b25e:	f007 f93d 	bl	80124dc <tx>
			tx(uartModem, ID);
 800b262:	4b23      	ldr	r3, [pc, #140]	; (800b2f0 <mqttSend+0x738>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	494a      	ldr	r1, [pc, #296]	; (800b390 <mqttSend+0x7d8>)
 800b268:	4618      	mov	r0, r3
 800b26a:	f007 f937 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p17\\\":\\\"");
 800b26e:	4b20      	ldr	r3, [pc, #128]	; (800b2f0 <mqttSend+0x738>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4948      	ldr	r1, [pc, #288]	; (800b394 <mqttSend+0x7dc>)
 800b274:	4618      	mov	r0, r3
 800b276:	f007 f931 	bl	80124dc <tx>
			tx(uartModem, SENSORTYPE);
 800b27a:	4b1d      	ldr	r3, [pc, #116]	; (800b2f0 <mqttSend+0x738>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	491b      	ldr	r1, [pc, #108]	; (800b2ec <mqttSend+0x734>)
 800b280:	4618      	mov	r0, r3
 800b282:	f007 f92b 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\"}\"\r\n");
 800b286:	4b1a      	ldr	r3, [pc, #104]	; (800b2f0 <mqttSend+0x738>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4943      	ldr	r1, [pc, #268]	; (800b398 <mqttSend+0x7e0>)
 800b28c:	4618      	mov	r0, r3
 800b28e:	f007 f925 	bl	80124dc <tx>
			rx(uartModem, SIMR, 40);
 800b292:	4b17      	ldr	r3, [pc, #92]	; (800b2f0 <mqttSend+0x738>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a41      	ldr	r2, [pc, #260]	; (800b39c <mqttSend+0x7e4>)
 800b298:	6811      	ldr	r1, [r2, #0]
 800b29a:	2228      	movs	r2, #40	; 0x28
 800b29c:	4618      	mov	r0, r3
 800b29e:	f007 f94f 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800b2a2:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <mqttSend+0x738>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a3e      	ldr	r2, [pc, #248]	; (800b3a0 <mqttSend+0x7e8>)
 800b2a8:	6811      	ldr	r1, [r2, #0]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f007 f947 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800b2b2:	4b0f      	ldr	r3, [pc, #60]	; (800b2f0 <mqttSend+0x738>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a3a      	ldr	r2, [pc, #232]	; (800b3a0 <mqttSend+0x7e8>)
 800b2b8:	6811      	ldr	r1, [r2, #0]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f007 f93f 	bl	8012540 <rx>
			if(strstr((char*)rx_buf,",0") != NULL){
 800b2c2:	4938      	ldr	r1, [pc, #224]	; (800b3a4 <mqttSend+0x7ec>)
 800b2c4:	4838      	ldr	r0, [pc, #224]	; (800b3a8 <mqttSend+0x7f0>)
 800b2c6:	f007 fd25 	bl	8012d14 <strstr>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d008      	beq.n	800b2e2 <mqttSend+0x72a>
				savebattery = 0;
 800b2d0:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <mqttSend+0x7f4>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]
				BATTERYSAVER = BATTERYSAVER_OFF;
 800b2d6:	4b36      	ldr	r3, [pc, #216]	; (800b3b0 <mqttSend+0x7f8>)
 800b2d8:	223f      	movs	r2, #63	; 0x3f
 800b2da:	601a      	str	r2, [r3, #0]
				return MQTTSEND_OK;
 800b2dc:	233c      	movs	r3, #60	; 0x3c
 800b2de:	f000 bc2e 	b.w	800bb3e <mqttSend+0xf86>
			}
			else{
				return MQTTSEND_ERROR;
 800b2e2:	233d      	movs	r3, #61	; 0x3d
 800b2e4:	f000 bc2b 	b.w	800bb3e <mqttSend+0xf86>
 800b2e8:	0801569c 	.word	0x0801569c
 800b2ec:	200040f8 	.word	0x200040f8
 800b2f0:	20004d5c 	.word	0x20004d5c
 800b2f4:	080156a4 	.word	0x080156a4
 800b2f8:	2000418c 	.word	0x2000418c
 800b2fc:	08015620 	.word	0x08015620
 800b300:	20003d04 	.word	0x20003d04
 800b304:	20003d9c 	.word	0x20003d9c
 800b308:	080156a8 	.word	0x080156a8
 800b30c:	0801563c 	.word	0x0801563c
 800b310:	20000268 	.word	0x20000268
 800b314:	080156c0 	.word	0x080156c0
 800b318:	080156d0 	.word	0x080156d0
 800b31c:	080156e0 	.word	0x080156e0
 800b320:	2000041c 	.word	0x2000041c
 800b324:	080156f0 	.word	0x080156f0
 800b328:	20004348 	.word	0x20004348
 800b32c:	08015700 	.word	0x08015700
 800b330:	20003e20 	.word	0x20003e20
 800b334:	08015710 	.word	0x08015710
 800b338:	200002cc 	.word	0x200002cc
 800b33c:	08015720 	.word	0x08015720
 800b340:	20000518 	.word	0x20000518
 800b344:	08015728 	.word	0x08015728
 800b348:	20003df4 	.word	0x20003df4
 800b34c:	08015738 	.word	0x08015738
 800b350:	20000290 	.word	0x20000290
 800b354:	08015748 	.word	0x08015748
 800b358:	200041cc 	.word	0x200041cc
 800b35c:	08015758 	.word	0x08015758
 800b360:	20000000 	.word	0x20000000
 800b364:	08015768 	.word	0x08015768
 800b368:	20000004 	.word	0x20000004
 800b36c:	08015778 	.word	0x08015778
 800b370:	20003fac 	.word	0x20003fac
 800b374:	08015788 	.word	0x08015788
 800b378:	200004e4 	.word	0x200004e4
 800b37c:	08015798 	.word	0x08015798
 800b380:	2000412c 	.word	0x2000412c
 800b384:	080157a8 	.word	0x080157a8
 800b388:	200003a8 	.word	0x200003a8
 800b38c:	080157b8 	.word	0x080157b8
 800b390:	200004b0 	.word	0x200004b0
 800b394:	080157c8 	.word	0x080157c8
 800b398:	0801566c 	.word	0x0801566c
 800b39c:	20000118 	.word	0x20000118
 800b3a0:	20000134 	.word	0x20000134
 800b3a4:	08015438 	.word	0x08015438
 800b3a8:	20004588 	.word	0x20004588
 800b3ac:	2000028c 	.word	0x2000028c
 800b3b0:	2000016c 	.word	0x2000016c
			}
		}
		if(type == 3){//move first
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	f040 80eb 	bne.w	800b592 <mqttSend+0x9da>
			tx(uartModem, SM13);
 800b3bc:	4b8c      	ldr	r3, [pc, #560]	; (800b5f0 <mqttSend+0xa38>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a8c      	ldr	r2, [pc, #560]	; (800b5f4 <mqttSend+0xa3c>)
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f007 f888 	bl	80124dc <tx>
			if(strstr((char*)SENSORTYPE,"MB7588") != NULL || strstr((char*)SENSORTYPE,"A011617")!=NULL){
 800b3cc:	498a      	ldr	r1, [pc, #552]	; (800b5f8 <mqttSend+0xa40>)
 800b3ce:	488b      	ldr	r0, [pc, #556]	; (800b5fc <mqttSend+0xa44>)
 800b3d0:	f007 fca0 	bl	8012d14 <strstr>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <mqttSend+0x830>
 800b3da:	4989      	ldr	r1, [pc, #548]	; (800b600 <mqttSend+0xa48>)
 800b3dc:	4887      	ldr	r0, [pc, #540]	; (800b5fc <mqttSend+0xa44>)
 800b3de:	f007 fc99 	bl	8012d14 <strstr>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d006      	beq.n	800b3f6 <mqttSend+0x83e>
				tx(uartModem, (uint8_t*)"W/");
 800b3e8:	4b81      	ldr	r3, [pc, #516]	; (800b5f0 <mqttSend+0xa38>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4985      	ldr	r1, [pc, #532]	; (800b604 <mqttSend+0xa4c>)
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f007 f874 	bl	80124dc <tx>
 800b3f4:	e01a      	b.n	800b42c <mqttSend+0x874>
			}
			else if(strstr((char*)SENSORTYPE,"SWellVer") != NULL){
 800b3f6:	4984      	ldr	r1, [pc, #528]	; (800b608 <mqttSend+0xa50>)
 800b3f8:	4880      	ldr	r0, [pc, #512]	; (800b5fc <mqttSend+0xa44>)
 800b3fa:	f007 fc8b 	bl	8012d14 <strstr>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d006      	beq.n	800b412 <mqttSend+0x85a>
				tx(uartModem, (uint8_t*)"S/");
 800b404:	4b7a      	ldr	r3, [pc, #488]	; (800b5f0 <mqttSend+0xa38>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4980      	ldr	r1, [pc, #512]	; (800b60c <mqttSend+0xa54>)
 800b40a:	4618      	mov	r0, r3
 800b40c:	f007 f866 	bl	80124dc <tx>
 800b410:	e00c      	b.n	800b42c <mqttSend+0x874>
			}
			else if(strstr((char*)SENSORTYPE,"WellVer") != NULL){
 800b412:	497f      	ldr	r1, [pc, #508]	; (800b610 <mqttSend+0xa58>)
 800b414:	4879      	ldr	r0, [pc, #484]	; (800b5fc <mqttSend+0xa44>)
 800b416:	f007 fc7d 	bl	8012d14 <strstr>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <mqttSend+0x874>
				tx(uartModem, (uint8_t*)"M/");
 800b420:	4b73      	ldr	r3, [pc, #460]	; (800b5f0 <mqttSend+0xa38>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	497b      	ldr	r1, [pc, #492]	; (800b614 <mqttSend+0xa5c>)
 800b426:	4618      	mov	r0, r3
 800b428:	f007 f858 	bl	80124dc <tx>
			}
			tx(uartModem, NAME1);
 800b42c:	4b70      	ldr	r3, [pc, #448]	; (800b5f0 <mqttSend+0xa38>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4979      	ldr	r1, [pc, #484]	; (800b618 <mqttSend+0xa60>)
 800b432:	4618      	mov	r0, r3
 800b434:	f007 f852 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800b438:	4b6d      	ldr	r3, [pc, #436]	; (800b5f0 <mqttSend+0xa38>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4977      	ldr	r1, [pc, #476]	; (800b61c <mqttSend+0xa64>)
 800b43e:	4618      	mov	r0, r3
 800b440:	f007 f84c 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800b444:	4b6a      	ldr	r3, [pc, #424]	; (800b5f0 <mqttSend+0xa38>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4975      	ldr	r1, [pc, #468]	; (800b620 <mqttSend+0xa68>)
 800b44a:	4618      	mov	r0, r3
 800b44c:	f007 f846 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800b450:	4b67      	ldr	r3, [pc, #412]	; (800b5f0 <mqttSend+0xa38>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4971      	ldr	r1, [pc, #452]	; (800b61c <mqttSend+0xa64>)
 800b456:	4618      	mov	r0, r3
 800b458:	f007 f840 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800b45c:	4b64      	ldr	r3, [pc, #400]	; (800b5f0 <mqttSend+0xa38>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4970      	ldr	r1, [pc, #448]	; (800b624 <mqttSend+0xa6c>)
 800b462:	4618      	mov	r0, r3
 800b464:	f007 f83a 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/alert1\",1,1,\"{\\\"i\\\":\\\"");
 800b468:	4b61      	ldr	r3, [pc, #388]	; (800b5f0 <mqttSend+0xa38>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	496e      	ldr	r1, [pc, #440]	; (800b628 <mqttSend+0xa70>)
 800b46e:	4618      	mov	r0, r3
 800b470:	f007 f834 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800b474:	4b5e      	ldr	r3, [pc, #376]	; (800b5f0 <mqttSend+0xa38>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	496a      	ldr	r1, [pc, #424]	; (800b624 <mqttSend+0xa6c>)
 800b47a:	4618      	mov	r0, r3
 800b47c:	f007 f82e 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"t\\\":\\\"");
 800b480:	4b5b      	ldr	r3, [pc, #364]	; (800b5f0 <mqttSend+0xa38>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4969      	ldr	r1, [pc, #420]	; (800b62c <mqttSend+0xa74>)
 800b486:	4618      	mov	r0, r3
 800b488:	f007 f828 	bl	80124dc <tx>
			tx(uartModem, TIME);
 800b48c:	4b58      	ldr	r3, [pc, #352]	; (800b5f0 <mqttSend+0xa38>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4967      	ldr	r1, [pc, #412]	; (800b630 <mqttSend+0xa78>)
 800b492:	4618      	mov	r0, r3
 800b494:	f007 f822 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p1\\\":\\\"");
 800b498:	4b55      	ldr	r3, [pc, #340]	; (800b5f0 <mqttSend+0xa38>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4965      	ldr	r1, [pc, #404]	; (800b634 <mqttSend+0xa7c>)
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f007 f81c 	bl	80124dc <tx>
			tx(uartModem, NAME1);
 800b4a4:	4b52      	ldr	r3, [pc, #328]	; (800b5f0 <mqttSend+0xa38>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	495b      	ldr	r1, [pc, #364]	; (800b618 <mqttSend+0xa60>)
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f007 f816 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p2\\\":\\\"");
 800b4b0:	4b4f      	ldr	r3, [pc, #316]	; (800b5f0 <mqttSend+0xa38>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4960      	ldr	r1, [pc, #384]	; (800b638 <mqttSend+0xa80>)
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f007 f810 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800b4bc:	4b4c      	ldr	r3, [pc, #304]	; (800b5f0 <mqttSend+0xa38>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4957      	ldr	r1, [pc, #348]	; (800b620 <mqttSend+0xa68>)
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f007 f80a 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p3\\\":\\\"");
 800b4c8:	4b49      	ldr	r3, [pc, #292]	; (800b5f0 <mqttSend+0xa38>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	495b      	ldr	r1, [pc, #364]	; (800b63c <mqttSend+0xa84>)
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f007 f804 	bl	80124dc <tx>
			tx(uartModem, NAME3);
 800b4d4:	4b46      	ldr	r3, [pc, #280]	; (800b5f0 <mqttSend+0xa38>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4959      	ldr	r1, [pc, #356]	; (800b640 <mqttSend+0xa88>)
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f006 fffe 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p4\\\":\\\"");
 800b4e0:	4b43      	ldr	r3, [pc, #268]	; (800b5f0 <mqttSend+0xa38>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4957      	ldr	r1, [pc, #348]	; (800b644 <mqttSend+0xa8c>)
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f006 fff8 	bl	80124dc <tx>
			tx(uartModem, PNUM);
 800b4ec:	4b40      	ldr	r3, [pc, #256]	; (800b5f0 <mqttSend+0xa38>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4955      	ldr	r1, [pc, #340]	; (800b648 <mqttSend+0xa90>)
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f006 fff2 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p5\\\":\\\"");
 800b4f8:	4b3d      	ldr	r3, [pc, #244]	; (800b5f0 <mqttSend+0xa38>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4953      	ldr	r1, [pc, #332]	; (800b64c <mqttSend+0xa94>)
 800b4fe:	4618      	mov	r0, r3
 800b500:	f006 ffec 	bl	80124dc <tx>
			tx(uartModem, UPNUM);
 800b504:	4b3a      	ldr	r3, [pc, #232]	; (800b5f0 <mqttSend+0xa38>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4951      	ldr	r1, [pc, #324]	; (800b650 <mqttSend+0xa98>)
 800b50a:	4618      	mov	r0, r3
 800b50c:	f006 ffe6 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p6\\\":\\\"");
 800b510:	4b37      	ldr	r3, [pc, #220]	; (800b5f0 <mqttSend+0xa38>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	494f      	ldr	r1, [pc, #316]	; (800b654 <mqttSend+0xa9c>)
 800b516:	4618      	mov	r0, r3
 800b518:	f006 ffe0 	bl	80124dc <tx>
			tx(uartModem, BAT);
 800b51c:	4b34      	ldr	r3, [pc, #208]	; (800b5f0 <mqttSend+0xa38>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	494d      	ldr	r1, [pc, #308]	; (800b658 <mqttSend+0xaa0>)
 800b522:	4618      	mov	r0, r3
 800b524:	f006 ffda 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p7\\\":\\\"");
 800b528:	4b31      	ldr	r3, [pc, #196]	; (800b5f0 <mqttSend+0xa38>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	494b      	ldr	r1, [pc, #300]	; (800b65c <mqttSend+0xaa4>)
 800b52e:	4618      	mov	r0, r3
 800b530:	f006 ffd4 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"MoveFirst");
 800b534:	4b2e      	ldr	r3, [pc, #184]	; (800b5f0 <mqttSend+0xa38>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4949      	ldr	r1, [pc, #292]	; (800b660 <mqttSend+0xaa8>)
 800b53a:	4618      	mov	r0, r3
 800b53c:	f006 ffce 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\"}\"\r\n");
 800b540:	4b2b      	ldr	r3, [pc, #172]	; (800b5f0 <mqttSend+0xa38>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4947      	ldr	r1, [pc, #284]	; (800b664 <mqttSend+0xaac>)
 800b546:	4618      	mov	r0, r3
 800b548:	f006 ffc8 	bl	80124dc <tx>
			rx(uartModem, SIMR, 40);
 800b54c:	4b28      	ldr	r3, [pc, #160]	; (800b5f0 <mqttSend+0xa38>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a45      	ldr	r2, [pc, #276]	; (800b668 <mqttSend+0xab0>)
 800b552:	6811      	ldr	r1, [r2, #0]
 800b554:	2228      	movs	r2, #40	; 0x28
 800b556:	4618      	mov	r0, r3
 800b558:	f006 fff2 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800b55c:	4b24      	ldr	r3, [pc, #144]	; (800b5f0 <mqttSend+0xa38>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a42      	ldr	r2, [pc, #264]	; (800b66c <mqttSend+0xab4>)
 800b562:	6811      	ldr	r1, [r2, #0]
 800b564:	2201      	movs	r2, #1
 800b566:	4618      	mov	r0, r3
 800b568:	f006 ffea 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800b56c:	4b20      	ldr	r3, [pc, #128]	; (800b5f0 <mqttSend+0xa38>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a3e      	ldr	r2, [pc, #248]	; (800b66c <mqttSend+0xab4>)
 800b572:	6811      	ldr	r1, [r2, #0]
 800b574:	2201      	movs	r2, #1
 800b576:	4618      	mov	r0, r3
 800b578:	f006 ffe2 	bl	8012540 <rx>
			if(strstr((char*)rx_buf,",0") != NULL){
 800b57c:	493c      	ldr	r1, [pc, #240]	; (800b670 <mqttSend+0xab8>)
 800b57e:	483d      	ldr	r0, [pc, #244]	; (800b674 <mqttSend+0xabc>)
 800b580:	f007 fbc8 	bl	8012d14 <strstr>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <mqttSend+0x9d6>
				return MQTTSEND_OK;
 800b58a:	233c      	movs	r3, #60	; 0x3c
 800b58c:	e2d7      	b.n	800bb3e <mqttSend+0xf86>
			}
			else{
				return MQTTSEND_ERROR;
 800b58e:	233d      	movs	r3, #61	; 0x3d
 800b590:	e2d5      	b.n	800bb3e <mqttSend+0xf86>
			}
		}
		if(type == 4){//move second
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b04      	cmp	r3, #4
 800b596:	f040 813b 	bne.w	800b810 <mqttSend+0xc58>
			tx(uartModem, SM13);
 800b59a:	4b15      	ldr	r3, [pc, #84]	; (800b5f0 <mqttSend+0xa38>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a15      	ldr	r2, [pc, #84]	; (800b5f4 <mqttSend+0xa3c>)
 800b5a0:	6812      	ldr	r2, [r2, #0]
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f006 ff99 	bl	80124dc <tx>
			if(strstr((char*)SENSORTYPE,"MB7588") != NULL || strstr((char*)SENSORTYPE,"A011617")!=NULL){
 800b5aa:	4913      	ldr	r1, [pc, #76]	; (800b5f8 <mqttSend+0xa40>)
 800b5ac:	4813      	ldr	r0, [pc, #76]	; (800b5fc <mqttSend+0xa44>)
 800b5ae:	f007 fbb1 	bl	8012d14 <strstr>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d106      	bne.n	800b5c6 <mqttSend+0xa0e>
 800b5b8:	4911      	ldr	r1, [pc, #68]	; (800b600 <mqttSend+0xa48>)
 800b5ba:	4810      	ldr	r0, [pc, #64]	; (800b5fc <mqttSend+0xa44>)
 800b5bc:	f007 fbaa 	bl	8012d14 <strstr>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d006      	beq.n	800b5d4 <mqttSend+0xa1c>
				tx(uartModem, (uint8_t*)"W/");
 800b5c6:	4b0a      	ldr	r3, [pc, #40]	; (800b5f0 <mqttSend+0xa38>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	490e      	ldr	r1, [pc, #56]	; (800b604 <mqttSend+0xa4c>)
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f006 ff85 	bl	80124dc <tx>
 800b5d2:	e05e      	b.n	800b692 <mqttSend+0xada>
			}
			else if(strstr((char*)SENSORTYPE,"SWellVer") != NULL){
 800b5d4:	490c      	ldr	r1, [pc, #48]	; (800b608 <mqttSend+0xa50>)
 800b5d6:	4809      	ldr	r0, [pc, #36]	; (800b5fc <mqttSend+0xa44>)
 800b5d8:	f007 fb9c 	bl	8012d14 <strstr>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d04a      	beq.n	800b678 <mqttSend+0xac0>
				tx(uartModem, (uint8_t*)"S/");
 800b5e2:	4b03      	ldr	r3, [pc, #12]	; (800b5f0 <mqttSend+0xa38>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4909      	ldr	r1, [pc, #36]	; (800b60c <mqttSend+0xa54>)
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f006 ff77 	bl	80124dc <tx>
 800b5ee:	e050      	b.n	800b692 <mqttSend+0xada>
 800b5f0:	20004d5c 	.word	0x20004d5c
 800b5f4:	2000010c 	.word	0x2000010c
 800b5f8:	0801560c 	.word	0x0801560c
 800b5fc:	200040f8 	.word	0x200040f8
 800b600:	08015614 	.word	0x08015614
 800b604:	0801561c 	.word	0x0801561c
 800b608:	08015674 	.word	0x08015674
 800b60c:	08015680 	.word	0x08015680
 800b610:	0801569c 	.word	0x0801569c
 800b614:	080156a4 	.word	0x080156a4
 800b618:	2000418c 	.word	0x2000418c
 800b61c:	08015620 	.word	0x08015620
 800b620:	20003d04 	.word	0x20003d04
 800b624:	20003d9c 	.word	0x20003d9c
 800b628:	080157d8 	.word	0x080157d8
 800b62c:	0801563c 	.word	0x0801563c
 800b630:	20000268 	.word	0x20000268
 800b634:	080156c0 	.word	0x080156c0
 800b638:	080156d0 	.word	0x080156d0
 800b63c:	080156e0 	.word	0x080156e0
 800b640:	2000041c 	.word	0x2000041c
 800b644:	080156f0 	.word	0x080156f0
 800b648:	20004348 	.word	0x20004348
 800b64c:	08015700 	.word	0x08015700
 800b650:	20003e20 	.word	0x20003e20
 800b654:	08015710 	.word	0x08015710
 800b658:	20000290 	.word	0x20000290
 800b65c:	08015728 	.word	0x08015728
 800b660:	080157f0 	.word	0x080157f0
 800b664:	0801566c 	.word	0x0801566c
 800b668:	20000118 	.word	0x20000118
 800b66c:	20000134 	.word	0x20000134
 800b670:	08015438 	.word	0x08015438
 800b674:	20004588 	.word	0x20004588
			}
			else if(strstr((char*)SENSORTYPE,"WellVer") != NULL){
 800b678:	497d      	ldr	r1, [pc, #500]	; (800b870 <mqttSend+0xcb8>)
 800b67a:	487e      	ldr	r0, [pc, #504]	; (800b874 <mqttSend+0xcbc>)
 800b67c:	f007 fb4a 	bl	8012d14 <strstr>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d005      	beq.n	800b692 <mqttSend+0xada>
				tx(uartModem, (uint8_t*)"M/");
 800b686:	4b7c      	ldr	r3, [pc, #496]	; (800b878 <mqttSend+0xcc0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	497c      	ldr	r1, [pc, #496]	; (800b87c <mqttSend+0xcc4>)
 800b68c:	4618      	mov	r0, r3
 800b68e:	f006 ff25 	bl	80124dc <tx>
			}
			tx(uartModem, NAME1);
 800b692:	4b79      	ldr	r3, [pc, #484]	; (800b878 <mqttSend+0xcc0>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	497a      	ldr	r1, [pc, #488]	; (800b880 <mqttSend+0xcc8>)
 800b698:	4618      	mov	r0, r3
 800b69a:	f006 ff1f 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800b69e:	4b76      	ldr	r3, [pc, #472]	; (800b878 <mqttSend+0xcc0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4978      	ldr	r1, [pc, #480]	; (800b884 <mqttSend+0xccc>)
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f006 ff19 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800b6aa:	4b73      	ldr	r3, [pc, #460]	; (800b878 <mqttSend+0xcc0>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4976      	ldr	r1, [pc, #472]	; (800b888 <mqttSend+0xcd0>)
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f006 ff13 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800b6b6:	4b70      	ldr	r3, [pc, #448]	; (800b878 <mqttSend+0xcc0>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4972      	ldr	r1, [pc, #456]	; (800b884 <mqttSend+0xccc>)
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f006 ff0d 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800b6c2:	4b6d      	ldr	r3, [pc, #436]	; (800b878 <mqttSend+0xcc0>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4971      	ldr	r1, [pc, #452]	; (800b88c <mqttSend+0xcd4>)
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f006 ff07 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/alert2\",1,1,\"{\\\"i\\\":\\\"");
 800b6ce:	4b6a      	ldr	r3, [pc, #424]	; (800b878 <mqttSend+0xcc0>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	496f      	ldr	r1, [pc, #444]	; (800b890 <mqttSend+0xcd8>)
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f006 ff01 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800b6da:	4b67      	ldr	r3, [pc, #412]	; (800b878 <mqttSend+0xcc0>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	496b      	ldr	r1, [pc, #428]	; (800b88c <mqttSend+0xcd4>)
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f006 fefb 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"t\\\":\\\"");
 800b6e6:	4b64      	ldr	r3, [pc, #400]	; (800b878 <mqttSend+0xcc0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	496a      	ldr	r1, [pc, #424]	; (800b894 <mqttSend+0xcdc>)
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f006 fef5 	bl	80124dc <tx>
			tx(uartModem, TIME);
 800b6f2:	4b61      	ldr	r3, [pc, #388]	; (800b878 <mqttSend+0xcc0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4968      	ldr	r1, [pc, #416]	; (800b898 <mqttSend+0xce0>)
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f006 feef 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p1\\\":\\\"");
 800b6fe:	4b5e      	ldr	r3, [pc, #376]	; (800b878 <mqttSend+0xcc0>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4966      	ldr	r1, [pc, #408]	; (800b89c <mqttSend+0xce4>)
 800b704:	4618      	mov	r0, r3
 800b706:	f006 fee9 	bl	80124dc <tx>
			tx(uartModem, NAME1);
 800b70a:	4b5b      	ldr	r3, [pc, #364]	; (800b878 <mqttSend+0xcc0>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	495c      	ldr	r1, [pc, #368]	; (800b880 <mqttSend+0xcc8>)
 800b710:	4618      	mov	r0, r3
 800b712:	f006 fee3 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p2\\\":\\\"");
 800b716:	4b58      	ldr	r3, [pc, #352]	; (800b878 <mqttSend+0xcc0>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4961      	ldr	r1, [pc, #388]	; (800b8a0 <mqttSend+0xce8>)
 800b71c:	4618      	mov	r0, r3
 800b71e:	f006 fedd 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800b722:	4b55      	ldr	r3, [pc, #340]	; (800b878 <mqttSend+0xcc0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4958      	ldr	r1, [pc, #352]	; (800b888 <mqttSend+0xcd0>)
 800b728:	4618      	mov	r0, r3
 800b72a:	f006 fed7 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p3\\\":\\\"");
 800b72e:	4b52      	ldr	r3, [pc, #328]	; (800b878 <mqttSend+0xcc0>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	495c      	ldr	r1, [pc, #368]	; (800b8a4 <mqttSend+0xcec>)
 800b734:	4618      	mov	r0, r3
 800b736:	f006 fed1 	bl	80124dc <tx>
			tx(uartModem, NAME3);
 800b73a:	4b4f      	ldr	r3, [pc, #316]	; (800b878 <mqttSend+0xcc0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	495a      	ldr	r1, [pc, #360]	; (800b8a8 <mqttSend+0xcf0>)
 800b740:	4618      	mov	r0, r3
 800b742:	f006 fecb 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p4\\\":\\\"");
 800b746:	4b4c      	ldr	r3, [pc, #304]	; (800b878 <mqttSend+0xcc0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4958      	ldr	r1, [pc, #352]	; (800b8ac <mqttSend+0xcf4>)
 800b74c:	4618      	mov	r0, r3
 800b74e:	f006 fec5 	bl	80124dc <tx>
			tx(uartModem, PNUM);
 800b752:	4b49      	ldr	r3, [pc, #292]	; (800b878 <mqttSend+0xcc0>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4956      	ldr	r1, [pc, #344]	; (800b8b0 <mqttSend+0xcf8>)
 800b758:	4618      	mov	r0, r3
 800b75a:	f006 febf 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p5\\\":\\\"");
 800b75e:	4b46      	ldr	r3, [pc, #280]	; (800b878 <mqttSend+0xcc0>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4954      	ldr	r1, [pc, #336]	; (800b8b4 <mqttSend+0xcfc>)
 800b764:	4618      	mov	r0, r3
 800b766:	f006 feb9 	bl	80124dc <tx>
			tx(uartModem, UPNUM);
 800b76a:	4b43      	ldr	r3, [pc, #268]	; (800b878 <mqttSend+0xcc0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4952      	ldr	r1, [pc, #328]	; (800b8b8 <mqttSend+0xd00>)
 800b770:	4618      	mov	r0, r3
 800b772:	f006 feb3 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p6\\\":\\\"");
 800b776:	4b40      	ldr	r3, [pc, #256]	; (800b878 <mqttSend+0xcc0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4950      	ldr	r1, [pc, #320]	; (800b8bc <mqttSend+0xd04>)
 800b77c:	4618      	mov	r0, r3
 800b77e:	f006 fead 	bl	80124dc <tx>
			tx(uartModem, LOCK);
 800b782:	4b3d      	ldr	r3, [pc, #244]	; (800b878 <mqttSend+0xcc0>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	494e      	ldr	r1, [pc, #312]	; (800b8c0 <mqttSend+0xd08>)
 800b788:	4618      	mov	r0, r3
 800b78a:	f006 fea7 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"#");
 800b78e:	4b3a      	ldr	r3, [pc, #232]	; (800b878 <mqttSend+0xcc0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	494c      	ldr	r1, [pc, #304]	; (800b8c4 <mqttSend+0xd0c>)
 800b794:	4618      	mov	r0, r3
 800b796:	f006 fea1 	bl	80124dc <tx>
			tx(uartModem, GSMLOCK);
 800b79a:	4b37      	ldr	r3, [pc, #220]	; (800b878 <mqttSend+0xcc0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	494a      	ldr	r1, [pc, #296]	; (800b8c8 <mqttSend+0xd10>)
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f006 fe9b 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p7\\\":\\\"");
 800b7a6:	4b34      	ldr	r3, [pc, #208]	; (800b878 <mqttSend+0xcc0>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4948      	ldr	r1, [pc, #288]	; (800b8cc <mqttSend+0xd14>)
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f006 fe95 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"MoveSecond");
 800b7b2:	4b31      	ldr	r3, [pc, #196]	; (800b878 <mqttSend+0xcc0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4946      	ldr	r1, [pc, #280]	; (800b8d0 <mqttSend+0xd18>)
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f006 fe8f 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\"}\"\r\n");
 800b7be:	4b2e      	ldr	r3, [pc, #184]	; (800b878 <mqttSend+0xcc0>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4944      	ldr	r1, [pc, #272]	; (800b8d4 <mqttSend+0xd1c>)
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f006 fe89 	bl	80124dc <tx>
			rx(uartModem, SIMR, 40);
 800b7ca:	4b2b      	ldr	r3, [pc, #172]	; (800b878 <mqttSend+0xcc0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a42      	ldr	r2, [pc, #264]	; (800b8d8 <mqttSend+0xd20>)
 800b7d0:	6811      	ldr	r1, [r2, #0]
 800b7d2:	2228      	movs	r2, #40	; 0x28
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f006 feb3 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800b7da:	4b27      	ldr	r3, [pc, #156]	; (800b878 <mqttSend+0xcc0>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a3f      	ldr	r2, [pc, #252]	; (800b8dc <mqttSend+0xd24>)
 800b7e0:	6811      	ldr	r1, [r2, #0]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f006 feab 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800b7ea:	4b23      	ldr	r3, [pc, #140]	; (800b878 <mqttSend+0xcc0>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a3b      	ldr	r2, [pc, #236]	; (800b8dc <mqttSend+0xd24>)
 800b7f0:	6811      	ldr	r1, [r2, #0]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f006 fea3 	bl	8012540 <rx>
			if(strstr((char*)rx_buf,",0") != NULL){
 800b7fa:	4939      	ldr	r1, [pc, #228]	; (800b8e0 <mqttSend+0xd28>)
 800b7fc:	4839      	ldr	r0, [pc, #228]	; (800b8e4 <mqttSend+0xd2c>)
 800b7fe:	f007 fa89 	bl	8012d14 <strstr>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <mqttSend+0xc54>
				return MQTTSEND_OK;
 800b808:	233c      	movs	r3, #60	; 0x3c
 800b80a:	e198      	b.n	800bb3e <mqttSend+0xf86>
			}
			else{
				return MQTTSEND_ERROR;
 800b80c:	233d      	movs	r3, #61	; 0x3d
 800b80e:	e196      	b.n	800bb3e <mqttSend+0xf86>
			}
		}
		if(type == 7){
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b07      	cmp	r3, #7
 800b814:	f040 8134 	bne.w	800ba80 <mqttSend+0xec8>
			tx(uartModem, SM13);
 800b818:	4b17      	ldr	r3, [pc, #92]	; (800b878 <mqttSend+0xcc0>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a32      	ldr	r2, [pc, #200]	; (800b8e8 <mqttSend+0xd30>)
 800b81e:	6812      	ldr	r2, [r2, #0]
 800b820:	4611      	mov	r1, r2
 800b822:	4618      	mov	r0, r3
 800b824:	f006 fe5a 	bl	80124dc <tx>
			if(strstr((char*)SENSORTYPE,"MB7588") != NULL || strstr((char*)SENSORTYPE,"A011617")!=NULL){
 800b828:	4930      	ldr	r1, [pc, #192]	; (800b8ec <mqttSend+0xd34>)
 800b82a:	4812      	ldr	r0, [pc, #72]	; (800b874 <mqttSend+0xcbc>)
 800b82c:	f007 fa72 	bl	8012d14 <strstr>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <mqttSend+0xc8c>
 800b836:	492e      	ldr	r1, [pc, #184]	; (800b8f0 <mqttSend+0xd38>)
 800b838:	480e      	ldr	r0, [pc, #56]	; (800b874 <mqttSend+0xcbc>)
 800b83a:	f007 fa6b 	bl	8012d14 <strstr>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d006      	beq.n	800b852 <mqttSend+0xc9a>
				tx(uartModem, (uint8_t*)"W/");
 800b844:	4b0c      	ldr	r3, [pc, #48]	; (800b878 <mqttSend+0xcc0>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	492a      	ldr	r1, [pc, #168]	; (800b8f4 <mqttSend+0xd3c>)
 800b84a:	4618      	mov	r0, r3
 800b84c:	f006 fe46 	bl	80124dc <tx>
 800b850:	e063      	b.n	800b91a <mqttSend+0xd62>
			}
			else if(strstr((char*)SENSORTYPE,"SWellVer") != NULL){
 800b852:	4929      	ldr	r1, [pc, #164]	; (800b8f8 <mqttSend+0xd40>)
 800b854:	4807      	ldr	r0, [pc, #28]	; (800b874 <mqttSend+0xcbc>)
 800b856:	f007 fa5d 	bl	8012d14 <strstr>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d04f      	beq.n	800b900 <mqttSend+0xd48>
				tx(uartModem, (uint8_t*)"S/");
 800b860:	4b05      	ldr	r3, [pc, #20]	; (800b878 <mqttSend+0xcc0>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4925      	ldr	r1, [pc, #148]	; (800b8fc <mqttSend+0xd44>)
 800b866:	4618      	mov	r0, r3
 800b868:	f006 fe38 	bl	80124dc <tx>
 800b86c:	e055      	b.n	800b91a <mqttSend+0xd62>
 800b86e:	bf00      	nop
 800b870:	0801569c 	.word	0x0801569c
 800b874:	200040f8 	.word	0x200040f8
 800b878:	20004d5c 	.word	0x20004d5c
 800b87c:	080156a4 	.word	0x080156a4
 800b880:	2000418c 	.word	0x2000418c
 800b884:	08015620 	.word	0x08015620
 800b888:	20003d04 	.word	0x20003d04
 800b88c:	20003d9c 	.word	0x20003d9c
 800b890:	080157fc 	.word	0x080157fc
 800b894:	0801563c 	.word	0x0801563c
 800b898:	20000268 	.word	0x20000268
 800b89c:	080156c0 	.word	0x080156c0
 800b8a0:	080156d0 	.word	0x080156d0
 800b8a4:	080156e0 	.word	0x080156e0
 800b8a8:	2000041c 	.word	0x2000041c
 800b8ac:	080156f0 	.word	0x080156f0
 800b8b0:	20004348 	.word	0x20004348
 800b8b4:	08015700 	.word	0x08015700
 800b8b8:	20003e20 	.word	0x20003e20
 800b8bc:	08015710 	.word	0x08015710
 800b8c0:	200002cc 	.word	0x200002cc
 800b8c4:	08015814 	.word	0x08015814
 800b8c8:	20000518 	.word	0x20000518
 800b8cc:	08015728 	.word	0x08015728
 800b8d0:	08015818 	.word	0x08015818
 800b8d4:	0801566c 	.word	0x0801566c
 800b8d8:	20000118 	.word	0x20000118
 800b8dc:	20000134 	.word	0x20000134
 800b8e0:	08015438 	.word	0x08015438
 800b8e4:	20004588 	.word	0x20004588
 800b8e8:	2000010c 	.word	0x2000010c
 800b8ec:	0801560c 	.word	0x0801560c
 800b8f0:	08015614 	.word	0x08015614
 800b8f4:	0801561c 	.word	0x0801561c
 800b8f8:	08015674 	.word	0x08015674
 800b8fc:	08015680 	.word	0x08015680
			}
			else if(strstr((char*)SENSORTYPE,"WellVer") != NULL){
 800b900:	4991      	ldr	r1, [pc, #580]	; (800bb48 <mqttSend+0xf90>)
 800b902:	4892      	ldr	r0, [pc, #584]	; (800bb4c <mqttSend+0xf94>)
 800b904:	f007 fa06 	bl	8012d14 <strstr>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d005      	beq.n	800b91a <mqttSend+0xd62>
				tx(uartModem, (uint8_t*)"M/");
 800b90e:	4b90      	ldr	r3, [pc, #576]	; (800bb50 <mqttSend+0xf98>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4990      	ldr	r1, [pc, #576]	; (800bb54 <mqttSend+0xf9c>)
 800b914:	4618      	mov	r0, r3
 800b916:	f006 fde1 	bl	80124dc <tx>
			}
			tx(uartModem, NAME1);
 800b91a:	4b8d      	ldr	r3, [pc, #564]	; (800bb50 <mqttSend+0xf98>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	498e      	ldr	r1, [pc, #568]	; (800bb58 <mqttSend+0xfa0>)
 800b920:	4618      	mov	r0, r3
 800b922:	f006 fddb 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800b926:	4b8a      	ldr	r3, [pc, #552]	; (800bb50 <mqttSend+0xf98>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	498c      	ldr	r1, [pc, #560]	; (800bb5c <mqttSend+0xfa4>)
 800b92c:	4618      	mov	r0, r3
 800b92e:	f006 fdd5 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800b932:	4b87      	ldr	r3, [pc, #540]	; (800bb50 <mqttSend+0xf98>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	498a      	ldr	r1, [pc, #552]	; (800bb60 <mqttSend+0xfa8>)
 800b938:	4618      	mov	r0, r3
 800b93a:	f006 fdcf 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800b93e:	4b84      	ldr	r3, [pc, #528]	; (800bb50 <mqttSend+0xf98>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4986      	ldr	r1, [pc, #536]	; (800bb5c <mqttSend+0xfa4>)
 800b944:	4618      	mov	r0, r3
 800b946:	f006 fdc9 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800b94a:	4b81      	ldr	r3, [pc, #516]	; (800bb50 <mqttSend+0xf98>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4985      	ldr	r1, [pc, #532]	; (800bb64 <mqttSend+0xfac>)
 800b950:	4618      	mov	r0, r3
 800b952:	f006 fdc3 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/warning\",1,1,\"{\\\"i\\\":\\\"");
 800b956:	4b7e      	ldr	r3, [pc, #504]	; (800bb50 <mqttSend+0xf98>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4983      	ldr	r1, [pc, #524]	; (800bb68 <mqttSend+0xfb0>)
 800b95c:	4618      	mov	r0, r3
 800b95e:	f006 fdbd 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800b962:	4b7b      	ldr	r3, [pc, #492]	; (800bb50 <mqttSend+0xf98>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	497f      	ldr	r1, [pc, #508]	; (800bb64 <mqttSend+0xfac>)
 800b968:	4618      	mov	r0, r3
 800b96a:	f006 fdb7 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"t\\\":\\\"");
 800b96e:	4b78      	ldr	r3, [pc, #480]	; (800bb50 <mqttSend+0xf98>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	497e      	ldr	r1, [pc, #504]	; (800bb6c <mqttSend+0xfb4>)
 800b974:	4618      	mov	r0, r3
 800b976:	f006 fdb1 	bl	80124dc <tx>
			tx(uartModem, TIME);
 800b97a:	4b75      	ldr	r3, [pc, #468]	; (800bb50 <mqttSend+0xf98>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	497c      	ldr	r1, [pc, #496]	; (800bb70 <mqttSend+0xfb8>)
 800b980:	4618      	mov	r0, r3
 800b982:	f006 fdab 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p1\\\":\\\"");
 800b986:	4b72      	ldr	r3, [pc, #456]	; (800bb50 <mqttSend+0xf98>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	497a      	ldr	r1, [pc, #488]	; (800bb74 <mqttSend+0xfbc>)
 800b98c:	4618      	mov	r0, r3
 800b98e:	f006 fda5 	bl	80124dc <tx>
			tx(uartModem, NAME1);
 800b992:	4b6f      	ldr	r3, [pc, #444]	; (800bb50 <mqttSend+0xf98>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4970      	ldr	r1, [pc, #448]	; (800bb58 <mqttSend+0xfa0>)
 800b998:	4618      	mov	r0, r3
 800b99a:	f006 fd9f 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p2\\\":\\\"");
 800b99e:	4b6c      	ldr	r3, [pc, #432]	; (800bb50 <mqttSend+0xf98>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4975      	ldr	r1, [pc, #468]	; (800bb78 <mqttSend+0xfc0>)
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f006 fd99 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800b9aa:	4b69      	ldr	r3, [pc, #420]	; (800bb50 <mqttSend+0xf98>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	496c      	ldr	r1, [pc, #432]	; (800bb60 <mqttSend+0xfa8>)
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f006 fd93 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p3\\\":\\\"");
 800b9b6:	4b66      	ldr	r3, [pc, #408]	; (800bb50 <mqttSend+0xf98>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4970      	ldr	r1, [pc, #448]	; (800bb7c <mqttSend+0xfc4>)
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f006 fd8d 	bl	80124dc <tx>
			tx(uartModem, NAME3);
 800b9c2:	4b63      	ldr	r3, [pc, #396]	; (800bb50 <mqttSend+0xf98>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	496e      	ldr	r1, [pc, #440]	; (800bb80 <mqttSend+0xfc8>)
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f006 fd87 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p4\\\":\\\"");
 800b9ce:	4b60      	ldr	r3, [pc, #384]	; (800bb50 <mqttSend+0xf98>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	496c      	ldr	r1, [pc, #432]	; (800bb84 <mqttSend+0xfcc>)
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f006 fd81 	bl	80124dc <tx>
			tx(uartModem, PNUM);
 800b9da:	4b5d      	ldr	r3, [pc, #372]	; (800bb50 <mqttSend+0xf98>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	496a      	ldr	r1, [pc, #424]	; (800bb88 <mqttSend+0xfd0>)
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f006 fd7b 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p5\\\":\\\"");
 800b9e6:	4b5a      	ldr	r3, [pc, #360]	; (800bb50 <mqttSend+0xf98>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4968      	ldr	r1, [pc, #416]	; (800bb8c <mqttSend+0xfd4>)
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f006 fd75 	bl	80124dc <tx>
			tx(uartModem, UPNUM);
 800b9f2:	4b57      	ldr	r3, [pc, #348]	; (800bb50 <mqttSend+0xf98>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4966      	ldr	r1, [pc, #408]	; (800bb90 <mqttSend+0xfd8>)
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f006 fd6f 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p6\\\":\\\"");
 800b9fe:	4b54      	ldr	r3, [pc, #336]	; (800bb50 <mqttSend+0xf98>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4964      	ldr	r1, [pc, #400]	; (800bb94 <mqttSend+0xfdc>)
 800ba04:	4618      	mov	r0, r3
 800ba06:	f006 fd69 	bl	80124dc <tx>
			tx(uartModem, COR);
 800ba0a:	4b51      	ldr	r3, [pc, #324]	; (800bb50 <mqttSend+0xf98>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4962      	ldr	r1, [pc, #392]	; (800bb98 <mqttSend+0xfe0>)
 800ba10:	4618      	mov	r0, r3
 800ba12:	f006 fd63 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\",\\\"p7\\\":\\\"");
 800ba16:	4b4e      	ldr	r3, [pc, #312]	; (800bb50 <mqttSend+0xf98>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4960      	ldr	r1, [pc, #384]	; (800bb9c <mqttSend+0xfe4>)
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f006 fd5d 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"CorrectionChange");
 800ba22:	4b4b      	ldr	r3, [pc, #300]	; (800bb50 <mqttSend+0xf98>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	495e      	ldr	r1, [pc, #376]	; (800bba0 <mqttSend+0xfe8>)
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f006 fd57 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\\\"}\"\r\n");
 800ba2e:	4b48      	ldr	r3, [pc, #288]	; (800bb50 <mqttSend+0xf98>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	495c      	ldr	r1, [pc, #368]	; (800bba4 <mqttSend+0xfec>)
 800ba34:	4618      	mov	r0, r3
 800ba36:	f006 fd51 	bl	80124dc <tx>
			rx(uartModem, SIMR, 40);
 800ba3a:	4b45      	ldr	r3, [pc, #276]	; (800bb50 <mqttSend+0xf98>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a5a      	ldr	r2, [pc, #360]	; (800bba8 <mqttSend+0xff0>)
 800ba40:	6811      	ldr	r1, [r2, #0]
 800ba42:	2228      	movs	r2, #40	; 0x28
 800ba44:	4618      	mov	r0, r3
 800ba46:	f006 fd7b 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800ba4a:	4b41      	ldr	r3, [pc, #260]	; (800bb50 <mqttSend+0xf98>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a57      	ldr	r2, [pc, #348]	; (800bbac <mqttSend+0xff4>)
 800ba50:	6811      	ldr	r1, [r2, #0]
 800ba52:	2201      	movs	r2, #1
 800ba54:	4618      	mov	r0, r3
 800ba56:	f006 fd73 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800ba5a:	4b3d      	ldr	r3, [pc, #244]	; (800bb50 <mqttSend+0xf98>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a53      	ldr	r2, [pc, #332]	; (800bbac <mqttSend+0xff4>)
 800ba60:	6811      	ldr	r1, [r2, #0]
 800ba62:	2201      	movs	r2, #1
 800ba64:	4618      	mov	r0, r3
 800ba66:	f006 fd6b 	bl	8012540 <rx>
			if(strstr((char*)rx_buf,",0") != NULL){
 800ba6a:	4951      	ldr	r1, [pc, #324]	; (800bbb0 <mqttSend+0xff8>)
 800ba6c:	4851      	ldr	r0, [pc, #324]	; (800bbb4 <mqttSend+0xffc>)
 800ba6e:	f007 f951 	bl	8012d14 <strstr>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <mqttSend+0xec4>
				return MQTTSEND_OK;
 800ba78:	233c      	movs	r3, #60	; 0x3c
 800ba7a:	e060      	b.n	800bb3e <mqttSend+0xf86>
			}
			else{
				return MQTTSEND_ERROR;
 800ba7c:	233d      	movs	r3, #61	; 0x3d
 800ba7e:	e05e      	b.n	800bb3e <mqttSend+0xf86>
			}
		}
		if(type == 8){
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b08      	cmp	r3, #8
 800ba84:	d15a      	bne.n	800bb3c <mqttSend+0xf84>
			tx(uartModem, SM13);
 800ba86:	4b32      	ldr	r3, [pc, #200]	; (800bb50 <mqttSend+0xf98>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a4b      	ldr	r2, [pc, #300]	; (800bbb8 <mqttSend+0x1000>)
 800ba8c:	6812      	ldr	r2, [r2, #0]
 800ba8e:	4611      	mov	r1, r2
 800ba90:	4618      	mov	r0, r3
 800ba92:	f006 fd23 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"R/");
 800ba96:	4b2e      	ldr	r3, [pc, #184]	; (800bb50 <mqttSend+0xf98>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4948      	ldr	r1, [pc, #288]	; (800bbbc <mqttSend+0x1004>)
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f006 fd1d 	bl	80124dc <tx>
			tx(uartModem, NAME1);
 800baa2:	4b2b      	ldr	r3, [pc, #172]	; (800bb50 <mqttSend+0xf98>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	492c      	ldr	r1, [pc, #176]	; (800bb58 <mqttSend+0xfa0>)
 800baa8:	4618      	mov	r0, r3
 800baaa:	f006 fd17 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800baae:	4b28      	ldr	r3, [pc, #160]	; (800bb50 <mqttSend+0xf98>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	492a      	ldr	r1, [pc, #168]	; (800bb5c <mqttSend+0xfa4>)
 800bab4:	4618      	mov	r0, r3
 800bab6:	f006 fd11 	bl	80124dc <tx>
			tx(uartModem, NAME2);
 800baba:	4b25      	ldr	r3, [pc, #148]	; (800bb50 <mqttSend+0xf98>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4928      	ldr	r1, [pc, #160]	; (800bb60 <mqttSend+0xfa8>)
 800bac0:	4618      	mov	r0, r3
 800bac2:	f006 fd0b 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/");
 800bac6:	4b22      	ldr	r3, [pc, #136]	; (800bb50 <mqttSend+0xf98>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4924      	ldr	r1, [pc, #144]	; (800bb5c <mqttSend+0xfa4>)
 800bacc:	4618      	mov	r0, r3
 800bace:	f006 fd05 	bl	80124dc <tx>
			tx(uartModem, IMEI);
 800bad2:	4b1f      	ldr	r3, [pc, #124]	; (800bb50 <mqttSend+0xf98>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4923      	ldr	r1, [pc, #140]	; (800bb64 <mqttSend+0xfac>)
 800bad8:	4618      	mov	r0, r3
 800bada:	f006 fcff 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"/receive\",1,1,\"#\"");
 800bade:	4b1c      	ldr	r3, [pc, #112]	; (800bb50 <mqttSend+0xf98>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4937      	ldr	r1, [pc, #220]	; (800bbc0 <mqttSend+0x1008>)
 800bae4:	4618      	mov	r0, r3
 800bae6:	f006 fcf9 	bl	80124dc <tx>
			tx(uartModem, (uint8_t*)"\r\n");
 800baea:	4b19      	ldr	r3, [pc, #100]	; (800bb50 <mqttSend+0xf98>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4935      	ldr	r1, [pc, #212]	; (800bbc4 <mqttSend+0x100c>)
 800baf0:	4618      	mov	r0, r3
 800baf2:	f006 fcf3 	bl	80124dc <tx>
			rx(uartModem, SIMR, 40);
 800baf6:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <mqttSend+0xf98>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a2b      	ldr	r2, [pc, #172]	; (800bba8 <mqttSend+0xff0>)
 800bafc:	6811      	ldr	r1, [r2, #0]
 800bafe:	2228      	movs	r2, #40	; 0x28
 800bb00:	4618      	mov	r0, r3
 800bb02:	f006 fd1d 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800bb06:	4b12      	ldr	r3, [pc, #72]	; (800bb50 <mqttSend+0xf98>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a28      	ldr	r2, [pc, #160]	; (800bbac <mqttSend+0xff4>)
 800bb0c:	6811      	ldr	r1, [r2, #0]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4618      	mov	r0, r3
 800bb12:	f006 fd15 	bl	8012540 <rx>
			rx(uartModem, SIMN, 1);
 800bb16:	4b0e      	ldr	r3, [pc, #56]	; (800bb50 <mqttSend+0xf98>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a24      	ldr	r2, [pc, #144]	; (800bbac <mqttSend+0xff4>)
 800bb1c:	6811      	ldr	r1, [r2, #0]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	4618      	mov	r0, r3
 800bb22:	f006 fd0d 	bl	8012540 <rx>
			if(strstr((char*)rx_buf,",0") != NULL){
 800bb26:	4922      	ldr	r1, [pc, #136]	; (800bbb0 <mqttSend+0xff8>)
 800bb28:	4822      	ldr	r0, [pc, #136]	; (800bbb4 <mqttSend+0xffc>)
 800bb2a:	f007 f8f3 	bl	8012d14 <strstr>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <mqttSend+0xf80>
				return MQTTSEND_OK;
 800bb34:	233c      	movs	r3, #60	; 0x3c
 800bb36:	e002      	b.n	800bb3e <mqttSend+0xf86>
			}
			else{
				return MQTTSEND_ERROR;
 800bb38:	233d      	movs	r3, #61	; 0x3d
 800bb3a:	e000      	b.n	800bb3e <mqttSend+0xf86>
			}
		}
	}
	return MQTTSEND_ERROR;
 800bb3c:	233d      	movs	r3, #61	; 0x3d
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	0801569c 	.word	0x0801569c
 800bb4c:	200040f8 	.word	0x200040f8
 800bb50:	20004d5c 	.word	0x20004d5c
 800bb54:	080156a4 	.word	0x080156a4
 800bb58:	2000418c 	.word	0x2000418c
 800bb5c:	08015620 	.word	0x08015620
 800bb60:	20003d04 	.word	0x20003d04
 800bb64:	20003d9c 	.word	0x20003d9c
 800bb68:	08015824 	.word	0x08015824
 800bb6c:	0801563c 	.word	0x0801563c
 800bb70:	20000268 	.word	0x20000268
 800bb74:	080156c0 	.word	0x080156c0
 800bb78:	080156d0 	.word	0x080156d0
 800bb7c:	080156e0 	.word	0x080156e0
 800bb80:	2000041c 	.word	0x2000041c
 800bb84:	080156f0 	.word	0x080156f0
 800bb88:	20004348 	.word	0x20004348
 800bb8c:	08015700 	.word	0x08015700
 800bb90:	20003e20 	.word	0x20003e20
 800bb94:	08015710 	.word	0x08015710
 800bb98:	20004428 	.word	0x20004428
 800bb9c:	08015728 	.word	0x08015728
 800bba0:	08015840 	.word	0x08015840
 800bba4:	0801566c 	.word	0x0801566c
 800bba8:	20000118 	.word	0x20000118
 800bbac:	20000134 	.word	0x20000134
 800bbb0:	08015438 	.word	0x08015438
 800bbb4:	20004588 	.word	0x20004588
 800bbb8:	2000010c 	.word	0x2000010c
 800bbbc:	08015854 	.word	0x08015854
 800bbc0:	08015858 	.word	0x08015858
 800bbc4:	0801586c 	.word	0x0801586c

0800bbc8 <mqttReceive>:

void mqttReceive(){
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 800bbce:	af00      	add	r7, sp, #0
	uint8_t* REC_p;
	if(MQTTCONNECTION == CONNECTED){
 800bbd0:	4b77      	ldr	r3, [pc, #476]	; (800bdb0 <mqttReceive+0x1e8>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b38      	cmp	r3, #56	; 0x38
 800bbd6:	f040 82a0 	bne.w	800c11a <mqttReceive+0x552>
		uint8_t NMEAT[10];
		uint8_t REC[500];
		uint8_t RECS[100];
		int newUp=0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
		txr(uartModem, (uint8_t*)"AT+SMSUB=\"");
 800bbe0:	4b74      	ldr	r3, [pc, #464]	; (800bdb4 <mqttReceive+0x1ec>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4974      	ldr	r1, [pc, #464]	; (800bdb8 <mqttReceive+0x1f0>)
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f006 fd6e 	bl	80126c8 <txr>
		tx(uartModem, (uint8_t*)"R/");
 800bbec:	4b71      	ldr	r3, [pc, #452]	; (800bdb4 <mqttReceive+0x1ec>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4972      	ldr	r1, [pc, #456]	; (800bdbc <mqttReceive+0x1f4>)
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f006 fc72 	bl	80124dc <tx>
		txr(uartModem, NAME1);
 800bbf8:	4b6e      	ldr	r3, [pc, #440]	; (800bdb4 <mqttReceive+0x1ec>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4970      	ldr	r1, [pc, #448]	; (800bdc0 <mqttReceive+0x1f8>)
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f006 fd62 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"/");
 800bc04:	4b6b      	ldr	r3, [pc, #428]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	496e      	ldr	r1, [pc, #440]	; (800bdc4 <mqttReceive+0x1fc>)
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f006 fd5c 	bl	80126c8 <txr>
		txr(uartModem, NAME2);
 800bc10:	4b68      	ldr	r3, [pc, #416]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	496c      	ldr	r1, [pc, #432]	; (800bdc8 <mqttReceive+0x200>)
 800bc16:	4618      	mov	r0, r3
 800bc18:	f006 fd56 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"/");
 800bc1c:	4b65      	ldr	r3, [pc, #404]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4968      	ldr	r1, [pc, #416]	; (800bdc4 <mqttReceive+0x1fc>)
 800bc22:	4618      	mov	r0, r3
 800bc24:	f006 fd50 	bl	80126c8 <txr>
		txr(uartModem, IMEI);
 800bc28:	4b62      	ldr	r3, [pc, #392]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4967      	ldr	r1, [pc, #412]	; (800bdcc <mqttReceive+0x204>)
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f006 fd4a 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"/");
 800bc34:	4b5f      	ldr	r3, [pc, #380]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4962      	ldr	r1, [pc, #392]	; (800bdc4 <mqttReceive+0x1fc>)
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f006 fd44 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"receive\",1\r\n");
 800bc40:	4b5c      	ldr	r3, [pc, #368]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4962      	ldr	r1, [pc, #392]	; (800bdd0 <mqttReceive+0x208>)
 800bc46:	4618      	mov	r0, r3
 800bc48:	f006 fd3e 	bl	80126c8 <txr>
		rx(uartModem, (uint8_t*)"%@$#$@", 10);
 800bc4c:	4b59      	ldr	r3, [pc, #356]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	220a      	movs	r2, #10
 800bc52:	4960      	ldr	r1, [pc, #384]	; (800bdd4 <mqttReceive+0x20c>)
 800bc54:	4618      	mov	r0, r3
 800bc56:	f006 fc73 	bl	8012540 <rx>
		REC_p = (uint8_t*)strtok((char*)rx_buf,"\"");
 800bc5a:	495f      	ldr	r1, [pc, #380]	; (800bdd8 <mqttReceive+0x210>)
 800bc5c:	485f      	ldr	r0, [pc, #380]	; (800bddc <mqttReceive+0x214>)
 800bc5e:	f007 f871 	bl	8012d44 <strtok>
 800bc62:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c

		txr(uartModem, (uint8_t*)"AT+SMUNSUB=\"");
 800bc66:	4b53      	ldr	r3, [pc, #332]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	495d      	ldr	r1, [pc, #372]	; (800bde0 <mqttReceive+0x218>)
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f006 fd2b 	bl	80126c8 <txr>
		if(strstr((char*)SENSORTYPE,"MB7588") != NULL || strstr((char*)SENSORTYPE,"A011617")!=NULL){
 800bc72:	495c      	ldr	r1, [pc, #368]	; (800bde4 <mqttReceive+0x21c>)
 800bc74:	485c      	ldr	r0, [pc, #368]	; (800bde8 <mqttReceive+0x220>)
 800bc76:	f007 f84d 	bl	8012d14 <strstr>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d106      	bne.n	800bc8e <mqttReceive+0xc6>
 800bc80:	495a      	ldr	r1, [pc, #360]	; (800bdec <mqttReceive+0x224>)
 800bc82:	4859      	ldr	r0, [pc, #356]	; (800bde8 <mqttReceive+0x220>)
 800bc84:	f007 f846 	bl	8012d14 <strstr>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d006      	beq.n	800bc9c <mqttReceive+0xd4>
			txr(uartModem, (uint8_t*)"W/");
 800bc8e:	4b49      	ldr	r3, [pc, #292]	; (800bdb4 <mqttReceive+0x1ec>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4957      	ldr	r1, [pc, #348]	; (800bdf0 <mqttReceive+0x228>)
 800bc94:	4618      	mov	r0, r3
 800bc96:	f006 fd17 	bl	80126c8 <txr>
 800bc9a:	e01a      	b.n	800bcd2 <mqttReceive+0x10a>
		}
		else if(strstr((char*)SENSORTYPE,"SWellVer") != NULL){
 800bc9c:	4955      	ldr	r1, [pc, #340]	; (800bdf4 <mqttReceive+0x22c>)
 800bc9e:	4852      	ldr	r0, [pc, #328]	; (800bde8 <mqttReceive+0x220>)
 800bca0:	f007 f838 	bl	8012d14 <strstr>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d006      	beq.n	800bcb8 <mqttReceive+0xf0>
			txr(uartModem, (uint8_t*)"S/");
 800bcaa:	4b42      	ldr	r3, [pc, #264]	; (800bdb4 <mqttReceive+0x1ec>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4952      	ldr	r1, [pc, #328]	; (800bdf8 <mqttReceive+0x230>)
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f006 fd09 	bl	80126c8 <txr>
 800bcb6:	e00c      	b.n	800bcd2 <mqttReceive+0x10a>
		}
		else if(strstr((char*)SENSORTYPE,"WellVer") != NULL){
 800bcb8:	4950      	ldr	r1, [pc, #320]	; (800bdfc <mqttReceive+0x234>)
 800bcba:	484b      	ldr	r0, [pc, #300]	; (800bde8 <mqttReceive+0x220>)
 800bcbc:	f007 f82a 	bl	8012d14 <strstr>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d005      	beq.n	800bcd2 <mqttReceive+0x10a>
			txr(uartModem, (uint8_t*)"M/");
 800bcc6:	4b3b      	ldr	r3, [pc, #236]	; (800bdb4 <mqttReceive+0x1ec>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	494d      	ldr	r1, [pc, #308]	; (800be00 <mqttReceive+0x238>)
 800bccc:	4618      	mov	r0, r3
 800bcce:	f006 fcfb 	bl	80126c8 <txr>
		}
		txr(uartModem, NAME1);
 800bcd2:	4b38      	ldr	r3, [pc, #224]	; (800bdb4 <mqttReceive+0x1ec>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	493a      	ldr	r1, [pc, #232]	; (800bdc0 <mqttReceive+0x1f8>)
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f006 fcf5 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"/");
 800bcde:	4b35      	ldr	r3, [pc, #212]	; (800bdb4 <mqttReceive+0x1ec>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4938      	ldr	r1, [pc, #224]	; (800bdc4 <mqttReceive+0x1fc>)
 800bce4:	4618      	mov	r0, r3
 800bce6:	f006 fcef 	bl	80126c8 <txr>
		txr(uartModem, NAME2);
 800bcea:	4b32      	ldr	r3, [pc, #200]	; (800bdb4 <mqttReceive+0x1ec>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4936      	ldr	r1, [pc, #216]	; (800bdc8 <mqttReceive+0x200>)
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f006 fce9 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"/");
 800bcf6:	4b2f      	ldr	r3, [pc, #188]	; (800bdb4 <mqttReceive+0x1ec>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4932      	ldr	r1, [pc, #200]	; (800bdc4 <mqttReceive+0x1fc>)
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f006 fce3 	bl	80126c8 <txr>
		tx(uartModem, IMEI);
 800bd02:	4b2c      	ldr	r3, [pc, #176]	; (800bdb4 <mqttReceive+0x1ec>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4931      	ldr	r1, [pc, #196]	; (800bdcc <mqttReceive+0x204>)
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f006 fbe7 	bl	80124dc <tx>
		txr(uartModem, (uint8_t*)"/");
 800bd0e:	4b29      	ldr	r3, [pc, #164]	; (800bdb4 <mqttReceive+0x1ec>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	492c      	ldr	r1, [pc, #176]	; (800bdc4 <mqttReceive+0x1fc>)
 800bd14:	4618      	mov	r0, r3
 800bd16:	f006 fcd7 	bl	80126c8 <txr>
		txr(uartModem, (uint8_t*)"receive\"\r\n");
 800bd1a:	4b26      	ldr	r3, [pc, #152]	; (800bdb4 <mqttReceive+0x1ec>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4939      	ldr	r1, [pc, #228]	; (800be04 <mqttReceive+0x23c>)
 800bd20:	4618      	mov	r0, r3
 800bd22:	f006 fcd1 	bl	80126c8 <txr>
		rx(uartModem, SIMR, 5);
 800bd26:	4b23      	ldr	r3, [pc, #140]	; (800bdb4 <mqttReceive+0x1ec>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a37      	ldr	r2, [pc, #220]	; (800be08 <mqttReceive+0x240>)
 800bd2c:	6811      	ldr	r1, [r2, #0]
 800bd2e:	2205      	movs	r2, #5
 800bd30:	4618      	mov	r0, r3
 800bd32:	f006 fc05 	bl	8012540 <rx>

		while(REC_p != NULL){
 800bd36:	e024      	b.n	800bd82 <mqttReceive+0x1ba>
			if(strlen((char*)REC_p) > 2 && strstr((char*)REC_p,"#") != NULL){
 800bd38:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800bd3c:	f7f9 fa28 	bl	8005190 <strlen>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d917      	bls.n	800bd76 <mqttReceive+0x1ae>
 800bd46:	2123      	movs	r1, #35	; 0x23
 800bd48:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800bd4c:	f006 ffbc 	bl	8012cc8 <strchr>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00f      	beq.n	800bd76 <mqttReceive+0x1ae>
				strcpy((char*)REC,strtok((char*)REC_p,"#"));
 800bd56:	492d      	ldr	r1, [pc, #180]	; (800be0c <mqttReceive+0x244>)
 800bd58:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800bd5c:	f006 fff2 	bl	8012d44 <strtok>
 800bd60:	4602      	mov	r2, r0
 800bd62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bd66:	4611      	mov	r1, r2
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f006 ffba 	bl	8012ce2 <strcpy>
				newUp = 1;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
				break;
 800bd74:	e009      	b.n	800bd8a <mqttReceive+0x1c2>
			}
			REC_p = (uint8_t*)strtok(NULL,"\"");
 800bd76:	4918      	ldr	r1, [pc, #96]	; (800bdd8 <mqttReceive+0x210>)
 800bd78:	2000      	movs	r0, #0
 800bd7a:	f006 ffe3 	bl	8012d44 <strtok>
 800bd7e:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		while(REC_p != NULL){
 800bd82:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1d6      	bne.n	800bd38 <mqttReceive+0x170>
		}
		if(newUp == 1){
 800bd8a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	f040 81bc 	bne.w	800c10c <mqttReceive+0x544>
			strcpy((char*)RECS,strtok((char*)REC,","));
 800bd94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bd98:	491d      	ldr	r1, [pc, #116]	; (800be10 <mqttReceive+0x248>)
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f006 ffd2 	bl	8012d44 <strtok>
 800bda0:	4602      	mov	r2, r0
 800bda2:	1d3b      	adds	r3, r7, #4
 800bda4:	4611      	mov	r1, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f006 ff9b 	bl	8012ce2 <strcpy>
			while(RECS[0] != '\0'){
 800bdac:	e19d      	b.n	800c0ea <mqttReceive+0x522>
 800bdae:	bf00      	nop
 800bdb0:	20000160 	.word	0x20000160
 800bdb4:	20004d5c 	.word	0x20004d5c
 800bdb8:	08015870 	.word	0x08015870
 800bdbc:	08015854 	.word	0x08015854
 800bdc0:	2000418c 	.word	0x2000418c
 800bdc4:	08015620 	.word	0x08015620
 800bdc8:	20003d04 	.word	0x20003d04
 800bdcc:	20003d9c 	.word	0x20003d9c
 800bdd0:	0801587c 	.word	0x0801587c
 800bdd4:	0801588c 	.word	0x0801588c
 800bdd8:	080155c4 	.word	0x080155c4
 800bddc:	20004588 	.word	0x20004588
 800bde0:	08015894 	.word	0x08015894
 800bde4:	0801560c 	.word	0x0801560c
 800bde8:	200040f8 	.word	0x200040f8
 800bdec:	08015614 	.word	0x08015614
 800bdf0:	0801561c 	.word	0x0801561c
 800bdf4:	08015674 	.word	0x08015674
 800bdf8:	08015680 	.word	0x08015680
 800bdfc:	0801569c 	.word	0x0801569c
 800be00:	080156a4 	.word	0x080156a4
 800be04:	080158a4 	.word	0x080158a4
 800be08:	20000118 	.word	0x20000118
 800be0c:	08015814 	.word	0x08015814
 800be10:	080155c8 	.word	0x080155c8
				if(strstr((char*)RECS,"UPNUM") != NULL){
 800be14:	1d3b      	adds	r3, r7, #4
 800be16:	49c3      	ldr	r1, [pc, #780]	; (800c124 <mqttReceive+0x55c>)
 800be18:	4618      	mov	r0, r3
 800be1a:	f006 ff7b 	bl	8012d14 <strstr>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d005      	beq.n	800be30 <mqttReceive+0x268>
					sscanf((char*)RECS,"UPNUM=%s",(char*)UPNUM);
 800be24:	1d3b      	adds	r3, r7, #4
 800be26:	4ac0      	ldr	r2, [pc, #768]	; (800c128 <mqttReceive+0x560>)
 800be28:	49c0      	ldr	r1, [pc, #768]	; (800c12c <mqttReceive+0x564>)
 800be2a:	4618      	mov	r0, r3
 800be2c:	f006 fece 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"COR") != NULL){
 800be30:	1d3b      	adds	r3, r7, #4
 800be32:	49bf      	ldr	r1, [pc, #764]	; (800c130 <mqttReceive+0x568>)
 800be34:	4618      	mov	r0, r3
 800be36:	f006 ff6d 	bl	8012d14 <strstr>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d005      	beq.n	800be4c <mqttReceive+0x284>
					sscanf((char*)RECS,"COR=%s",(char*)COR);
 800be40:	1d3b      	adds	r3, r7, #4
 800be42:	4abc      	ldr	r2, [pc, #752]	; (800c134 <mqttReceive+0x56c>)
 800be44:	49bc      	ldr	r1, [pc, #752]	; (800c138 <mqttReceive+0x570>)
 800be46:	4618      	mov	r0, r3
 800be48:	f006 fec0 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"MINSENDPERIOD") != NULL){
 800be4c:	1d3b      	adds	r3, r7, #4
 800be4e:	49bb      	ldr	r1, [pc, #748]	; (800c13c <mqttReceive+0x574>)
 800be50:	4618      	mov	r0, r3
 800be52:	f006 ff5f 	bl	8012d14 <strstr>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d005      	beq.n	800be68 <mqttReceive+0x2a0>
					sscanf((char*)RECS,"MINSENDPERIOD=%s",(char*)MINSENDPERIOD);
 800be5c:	1d3b      	adds	r3, r7, #4
 800be5e:	4ab8      	ldr	r2, [pc, #736]	; (800c140 <mqttReceive+0x578>)
 800be60:	49b8      	ldr	r1, [pc, #736]	; (800c144 <mqttReceive+0x57c>)
 800be62:	4618      	mov	r0, r3
 800be64:	f006 feb2 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"MINMEASUREPERIOD") != NULL){
 800be68:	1d3b      	adds	r3, r7, #4
 800be6a:	49b7      	ldr	r1, [pc, #732]	; (800c148 <mqttReceive+0x580>)
 800be6c:	4618      	mov	r0, r3
 800be6e:	f006 ff51 	bl	8012d14 <strstr>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d005      	beq.n	800be84 <mqttReceive+0x2bc>
					sscanf((char*)RECS,"MINMEASUREPERIOD=%s",(char*)MINMEASUREPERIOD);
 800be78:	1d3b      	adds	r3, r7, #4
 800be7a:	4ab4      	ldr	r2, [pc, #720]	; (800c14c <mqttReceive+0x584>)
 800be7c:	49b4      	ldr	r1, [pc, #720]	; (800c150 <mqttReceive+0x588>)
 800be7e:	4618      	mov	r0, r3
 800be80:	f006 fea4 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"MINMEASUREMENT") != NULL){
 800be84:	1d3b      	adds	r3, r7, #4
 800be86:	49b3      	ldr	r1, [pc, #716]	; (800c154 <mqttReceive+0x58c>)
 800be88:	4618      	mov	r0, r3
 800be8a:	f006 ff43 	bl	8012d14 <strstr>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d005      	beq.n	800bea0 <mqttReceive+0x2d8>
					sscanf((char*)RECS,"MINMEASUREMENT=%s",(char*)MINMEASUREMENT);
 800be94:	1d3b      	adds	r3, r7, #4
 800be96:	4ab0      	ldr	r2, [pc, #704]	; (800c158 <mqttReceive+0x590>)
 800be98:	49b0      	ldr	r1, [pc, #704]	; (800c15c <mqttReceive+0x594>)
 800be9a:	4618      	mov	r0, r3
 800be9c:	f006 fe96 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"MINDISTANCE") != NULL){
 800bea0:	1d3b      	adds	r3, r7, #4
 800bea2:	49af      	ldr	r1, [pc, #700]	; (800c160 <mqttReceive+0x598>)
 800bea4:	4618      	mov	r0, r3
 800bea6:	f006 ff35 	bl	8012d14 <strstr>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d005      	beq.n	800bebc <mqttReceive+0x2f4>
					sscanf((char*)RECS,"MINDISTANCE=%s",(char*)MINDISTANCE);
 800beb0:	1d3b      	adds	r3, r7, #4
 800beb2:	4aac      	ldr	r2, [pc, #688]	; (800c164 <mqttReceive+0x59c>)
 800beb4:	49ac      	ldr	r1, [pc, #688]	; (800c168 <mqttReceive+0x5a0>)
 800beb6:	4618      	mov	r0, r3
 800beb8:	f006 fe88 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"FTPINTERVAL") != NULL){
 800bebc:	1d3b      	adds	r3, r7, #4
 800bebe:	49ab      	ldr	r1, [pc, #684]	; (800c16c <mqttReceive+0x5a4>)
 800bec0:	4618      	mov	r0, r3
 800bec2:	f006 ff27 	bl	8012d14 <strstr>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d005      	beq.n	800bed8 <mqttReceive+0x310>
					sscanf((char*)RECS,"FTPINTERVAL=%s",(char*)FTPINTERVAL);
 800becc:	1d3b      	adds	r3, r7, #4
 800bece:	4aa8      	ldr	r2, [pc, #672]	; (800c170 <mqttReceive+0x5a8>)
 800bed0:	49a8      	ldr	r1, [pc, #672]	; (800c174 <mqttReceive+0x5ac>)
 800bed2:	4618      	mov	r0, r3
 800bed4:	f006 fe7a 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"FTPIP") != NULL){
 800bed8:	1d3b      	adds	r3, r7, #4
 800beda:	49a7      	ldr	r1, [pc, #668]	; (800c178 <mqttReceive+0x5b0>)
 800bedc:	4618      	mov	r0, r3
 800bede:	f006 ff19 	bl	8012d14 <strstr>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <mqttReceive+0x32c>
					sscanf((char*)RECS,"FTPIP=%s",(char*)FTPIP);
 800bee8:	1d3b      	adds	r3, r7, #4
 800beea:	4aa4      	ldr	r2, [pc, #656]	; (800c17c <mqttReceive+0x5b4>)
 800beec:	49a4      	ldr	r1, [pc, #656]	; (800c180 <mqttReceive+0x5b8>)
 800beee:	4618      	mov	r0, r3
 800bef0:	f006 fe6c 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"FTPPORT") != NULL){
 800bef4:	1d3b      	adds	r3, r7, #4
 800bef6:	49a3      	ldr	r1, [pc, #652]	; (800c184 <mqttReceive+0x5bc>)
 800bef8:	4618      	mov	r0, r3
 800befa:	f006 ff0b 	bl	8012d14 <strstr>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d005      	beq.n	800bf10 <mqttReceive+0x348>
					sscanf((char*)RECS,"FTPPORT=%s",(char*)FTPPORT);
 800bf04:	1d3b      	adds	r3, r7, #4
 800bf06:	4aa0      	ldr	r2, [pc, #640]	; (800c188 <mqttReceive+0x5c0>)
 800bf08:	49a0      	ldr	r1, [pc, #640]	; (800c18c <mqttReceive+0x5c4>)
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f006 fe5e 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"FTPPASSWORD") != NULL){
 800bf10:	1d3b      	adds	r3, r7, #4
 800bf12:	499f      	ldr	r1, [pc, #636]	; (800c190 <mqttReceive+0x5c8>)
 800bf14:	4618      	mov	r0, r3
 800bf16:	f006 fefd 	bl	8012d14 <strstr>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <mqttReceive+0x364>
					sscanf((char*)RECS,"FTPPASSWORD=%s",(char*)FTPPASSWORD);
 800bf20:	1d3b      	adds	r3, r7, #4
 800bf22:	4a9c      	ldr	r2, [pc, #624]	; (800c194 <mqttReceive+0x5cc>)
 800bf24:	499c      	ldr	r1, [pc, #624]	; (800c198 <mqttReceive+0x5d0>)
 800bf26:	4618      	mov	r0, r3
 800bf28:	f006 fe50 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"FTPUSERNAME") != NULL){
 800bf2c:	1d3b      	adds	r3, r7, #4
 800bf2e:	499b      	ldr	r1, [pc, #620]	; (800c19c <mqttReceive+0x5d4>)
 800bf30:	4618      	mov	r0, r3
 800bf32:	f006 feef 	bl	8012d14 <strstr>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <mqttReceive+0x380>
					sscanf((char*)RECS,"FTPUSERNAME=%s",(char*)FTPUSERNAME);
 800bf3c:	1d3b      	adds	r3, r7, #4
 800bf3e:	4a98      	ldr	r2, [pc, #608]	; (800c1a0 <mqttReceive+0x5d8>)
 800bf40:	4998      	ldr	r1, [pc, #608]	; (800c1a4 <mqttReceive+0x5dc>)
 800bf42:	4618      	mov	r0, r3
 800bf44:	f006 fe42 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"NAME1=") != NULL){
 800bf48:	1d3b      	adds	r3, r7, #4
 800bf4a:	4997      	ldr	r1, [pc, #604]	; (800c1a8 <mqttReceive+0x5e0>)
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f006 fee1 	bl	8012d14 <strstr>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d005      	beq.n	800bf64 <mqttReceive+0x39c>
					sscanf((char*)RECS,"NAME1=%s",(char*)NAME1);
 800bf58:	1d3b      	adds	r3, r7, #4
 800bf5a:	4a94      	ldr	r2, [pc, #592]	; (800c1ac <mqttReceive+0x5e4>)
 800bf5c:	4994      	ldr	r1, [pc, #592]	; (800c1b0 <mqttReceive+0x5e8>)
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f006 fe34 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"NAME2=") != NULL){
 800bf64:	1d3b      	adds	r3, r7, #4
 800bf66:	4993      	ldr	r1, [pc, #588]	; (800c1b4 <mqttReceive+0x5ec>)
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f006 fed3 	bl	8012d14 <strstr>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d005      	beq.n	800bf80 <mqttReceive+0x3b8>
					sscanf((char*)RECS,"NAME2=%s",(char*)NAME2);
 800bf74:	1d3b      	adds	r3, r7, #4
 800bf76:	4a90      	ldr	r2, [pc, #576]	; (800c1b8 <mqttReceive+0x5f0>)
 800bf78:	4990      	ldr	r1, [pc, #576]	; (800c1bc <mqttReceive+0x5f4>)
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f006 fe26 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"NAME3=") != NULL){
 800bf80:	1d3b      	adds	r3, r7, #4
 800bf82:	498f      	ldr	r1, [pc, #572]	; (800c1c0 <mqttReceive+0x5f8>)
 800bf84:	4618      	mov	r0, r3
 800bf86:	f006 fec5 	bl	8012d14 <strstr>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <mqttReceive+0x3d4>
					sscanf((char*)RECS,"NAME3=%s",(char*)NAME3);
 800bf90:	1d3b      	adds	r3, r7, #4
 800bf92:	4a8c      	ldr	r2, [pc, #560]	; (800c1c4 <mqttReceive+0x5fc>)
 800bf94:	498c      	ldr	r1, [pc, #560]	; (800c1c8 <mqttReceive+0x600>)
 800bf96:	4618      	mov	r0, r3
 800bf98:	f006 fe18 	bl	8012bcc <siscanf>
				}
				if(strstr((char*)RECS,"RESETLOG") != NULL){
 800bf9c:	1d3b      	adds	r3, r7, #4
 800bf9e:	498b      	ldr	r1, [pc, #556]	; (800c1cc <mqttReceive+0x604>)
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f006 feb7 	bl	8012d14 <strstr>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <mqttReceive+0x3e8>
					defaulLog();
 800bfac:	f000 fac2 	bl	800c534 <defaulLog>
				}
				if(strstr((char*)RECS,"SETH=") != NULL){
 800bfb0:	1d3b      	adds	r3, r7, #4
 800bfb2:	4987      	ldr	r1, [pc, #540]	; (800c1d0 <mqttReceive+0x608>)
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f006 fead 	bl	8012d14 <strstr>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d007      	beq.n	800bfd0 <mqttReceive+0x408>
					sscanf((char*)RECS,"SETH=%s",(char*)SETH);
 800bfc0:	1d3b      	adds	r3, r7, #4
 800bfc2:	4a84      	ldr	r2, [pc, #528]	; (800c1d4 <mqttReceive+0x60c>)
 800bfc4:	4984      	ldr	r1, [pc, #528]	; (800c1d8 <mqttReceive+0x610>)
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f006 fe00 	bl	8012bcc <siscanf>
					setHeight();
 800bfcc:	f004 fee6 	bl	8010d9c <setHeight>
				}
				if(strstr((char*)RECS,"INFO") != NULL){
 800bfd0:	1d3b      	adds	r3, r7, #4
 800bfd2:	4982      	ldr	r1, [pc, #520]	; (800c1dc <mqttReceive+0x614>)
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f006 fe9d 	bl	8012d14 <strstr>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d016      	beq.n	800c00e <mqttReceive+0x446>
					dataConnect();
 800bfe0:	f7fe fa58 	bl	800a494 <dataConnect>
					mqttConnect();
 800bfe4:	f7fe fc0a 	bl	800a7fc <mqttConnect>
					mqttSend(8);
 800bfe8:	2008      	movs	r0, #8
 800bfea:	f7fe fde5 	bl	800abb8 <mqttSend>
					sscanf((char*)RECS,"INFO=%s",(char*)NMEAT);
 800bfee:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800bff2:	1d3b      	adds	r3, r7, #4
 800bff4:	497a      	ldr	r1, [pc, #488]	; (800c1e0 <mqttReceive+0x618>)
 800bff6:	4618      	mov	r0, r3
 800bff8:	f006 fde8 	bl	8012bcc <siscanf>
					NMEA(atoi((char*)NMEAT));
 800bffc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800c000:	4618      	mov	r0, r3
 800c002:	f006 fd61 	bl	8012ac8 <atoi>
 800c006:	4603      	mov	r3, r0
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe f9c9 	bl	800a3a0 <NMEA>
				}
				if(strstr((char*)RECS,"BT") != NULL){
 800c00e:	1d3b      	adds	r3, r7, #4
 800c010:	4974      	ldr	r1, [pc, #464]	; (800c1e4 <mqttReceive+0x61c>)
 800c012:	4618      	mov	r0, r3
 800c014:	f006 fe7e 	bl	8012d14 <strstr>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00d      	beq.n	800c03a <mqttReceive+0x472>
					dataConnect();
 800c01e:	f7fe fa39 	bl	800a494 <dataConnect>
					mqttConnect();
 800c022:	f7fe fbeb 	bl	800a7fc <mqttConnect>
					mqttSend(8);
 800c026:	2008      	movs	r0, #8
 800c028:	f7fe fdc6 	bl	800abb8 <mqttSend>
					mqttDisconnect();
 800c02c:	f7fe fd5c 	bl	800aae8 <mqttDisconnect>
					dataDisconnect();
 800c030:	f7fe fb8e 	bl	800a750 <dataDisconnect>
					bluetoothMode(180);
 800c034:	20b4      	movs	r0, #180	; 0xb4
 800c036:	f7fa fec1 	bl	8006dbc <bluetoothMode>
				}
				if(strstr((char*)RECS,"RESET") != NULL){
 800c03a:	1d3b      	adds	r3, r7, #4
 800c03c:	496a      	ldr	r1, [pc, #424]	; (800c1e8 <mqttReceive+0x620>)
 800c03e:	4618      	mov	r0, r3
 800c040:	f006 fe68 	bl	8012d14 <strstr>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d01a      	beq.n	800c080 <mqttReceive+0x4b8>
					dataConnect();
 800c04a:	f7fe fa23 	bl	800a494 <dataConnect>
					mqttConnect();
 800c04e:	f7fe fbd5 	bl	800a7fc <mqttConnect>
					mqttSend(8);
 800c052:	2008      	movs	r0, #8
 800c054:	f7fe fdb0 	bl	800abb8 <mqttSend>
					HAL_FLASHEx_DATAEEPROM_Unlock();
 800c058:	f001 fa3a 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
					HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080200, 0xFEEDC0DD);
 800c05c:	4a63      	ldr	r2, [pc, #396]	; (800c1ec <mqttReceive+0x624>)
 800c05e:	4964      	ldr	r1, [pc, #400]	; (800c1f0 <mqttReceive+0x628>)
 800c060:	2002      	movs	r0, #2
 800c062:	f001 fa61 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
					HAL_FLASHEx_DATAEEPROM_Lock();
 800c066:	f001 fa4f 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
					HAL_FLASHEx_DATAEEPROM_Unlock();
 800c06a:	f001 fa31 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
					HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080200, 0xFEEDC0DD);
 800c06e:	4a5f      	ldr	r2, [pc, #380]	; (800c1ec <mqttReceive+0x624>)
 800c070:	495f      	ldr	r1, [pc, #380]	; (800c1f0 <mqttReceive+0x628>)
 800c072:	2002      	movs	r0, #2
 800c074:	f001 fa58 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
					HAL_FLASHEx_DATAEEPROM_Lock();
 800c078:	f001 fa46 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
					NVIC_SystemReset();
 800c07c:	f7fe f9f4 	bl	800a468 <__NVIC_SystemReset>
				}
				if(strstr((char*)RECS,"FTPCHECK") != NULL){
 800c080:	1d3b      	adds	r3, r7, #4
 800c082:	495c      	ldr	r1, [pc, #368]	; (800c1f4 <mqttReceive+0x62c>)
 800c084:	4618      	mov	r0, r3
 800c086:	f006 fe45 	bl	8012d14 <strstr>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00d      	beq.n	800c0ac <mqttReceive+0x4e4>
					dataConnect();
 800c090:	f7fe fa00 	bl	800a494 <dataConnect>
					mqttConnect();
 800c094:	f7fe fbb2 	bl	800a7fc <mqttConnect>
					mqttSend(8);
 800c098:	2008      	movs	r0, #8
 800c09a:	f7fe fd8d 	bl	800abb8 <mqttSend>
					dataConnect();
 800c09e:	f7fe f9f9 	bl	800a494 <dataConnect>
					ftpSetParam();
 800c0a2:	f7fc feed 	bl	8008e80 <ftpSetParam>
					ftpGet(1);
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	f7fc ff8e 	bl	8008fc8 <ftpGet>
				}
				if(strstr((char*)RECS,"SENSORTYPE") != NULL){
 800c0ac:	1d3b      	adds	r3, r7, #4
 800c0ae:	4952      	ldr	r1, [pc, #328]	; (800c1f8 <mqttReceive+0x630>)
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f006 fe2f 	bl	8012d14 <strstr>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00c      	beq.n	800c0d6 <mqttReceive+0x50e>
					dataConnect();
 800c0bc:	f7fe f9ea 	bl	800a494 <dataConnect>
					mqttConnect();
 800c0c0:	f7fe fb9c 	bl	800a7fc <mqttConnect>
					mqttSend(8);
 800c0c4:	2008      	movs	r0, #8
 800c0c6:	f7fe fd77 	bl	800abb8 <mqttSend>
					sscanf((char*)RECS,"SENSORTYPE=%s",(char*)SENSORTYPE);
 800c0ca:	1d3b      	adds	r3, r7, #4
 800c0cc:	4a4b      	ldr	r2, [pc, #300]	; (800c1fc <mqttReceive+0x634>)
 800c0ce:	494c      	ldr	r1, [pc, #304]	; (800c200 <mqttReceive+0x638>)
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f006 fd7b 	bl	8012bcc <siscanf>
				}
				strcpy((char*)RECS,strtok((char*)NULL,","));
 800c0d6:	494b      	ldr	r1, [pc, #300]	; (800c204 <mqttReceive+0x63c>)
 800c0d8:	2000      	movs	r0, #0
 800c0da:	f006 fe33 	bl	8012d44 <strtok>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	1d3b      	adds	r3, r7, #4
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f006 fdfc 	bl	8012ce2 <strcpy>
			while(RECS[0] != '\0'){
 800c0ea:	1d3b      	adds	r3, r7, #4
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f47f ae90 	bne.w	800be14 <mqttReceive+0x24c>
			}
			dataConnect();
 800c0f4:	f7fe f9ce 	bl	800a494 <dataConnect>
			mqttConnect();
 800c0f8:	f7fe fb80 	bl	800a7fc <mqttConnect>
			mqttSend(8);
 800c0fc:	2008      	movs	r0, #8
 800c0fe:	f7fe fd5b 	bl	800abb8 <mqttSend>
			writeConfig();
 800c102:	f7fd fb27 	bl	8009754 <writeConfig>
			getSleepParametrs();
 800c106:	f005 ffe3 	bl	80120d0 <getSleepParametrs>
			dataConnect();
			mqttConnect();
			mqttSend(8);
		}
	}
}
 800c10a:	e006      	b.n	800c11a <mqttReceive+0x552>
			dataConnect();
 800c10c:	f7fe f9c2 	bl	800a494 <dataConnect>
			mqttConnect();
 800c110:	f7fe fb74 	bl	800a7fc <mqttConnect>
			mqttSend(8);
 800c114:	2008      	movs	r0, #8
 800c116:	f7fe fd4f 	bl	800abb8 <mqttSend>
}
 800c11a:	bf00      	nop
 800c11c:	f507 771c 	add.w	r7, r7, #624	; 0x270
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	080158b0 	.word	0x080158b0
 800c128:	20003e20 	.word	0x20003e20
 800c12c:	080158b8 	.word	0x080158b8
 800c130:	080158c4 	.word	0x080158c4
 800c134:	20004428 	.word	0x20004428
 800c138:	080158c8 	.word	0x080158c8
 800c13c:	080158d0 	.word	0x080158d0
 800c140:	2000412c 	.word	0x2000412c
 800c144:	080158e0 	.word	0x080158e0
 800c148:	080158f4 	.word	0x080158f4
 800c14c:	200004e4 	.word	0x200004e4
 800c150:	08015908 	.word	0x08015908
 800c154:	0801591c 	.word	0x0801591c
 800c158:	20004400 	.word	0x20004400
 800c15c:	0801592c 	.word	0x0801592c
 800c160:	08015940 	.word	0x08015940
 800c164:	20003fac 	.word	0x20003fac
 800c168:	0801594c 	.word	0x0801594c
 800c16c:	0801595c 	.word	0x0801595c
 800c170:	200003a8 	.word	0x200003a8
 800c174:	08015968 	.word	0x08015968
 800c178:	08015978 	.word	0x08015978
 800c17c:	20003e00 	.word	0x20003e00
 800c180:	08015980 	.word	0x08015980
 800c184:	0801598c 	.word	0x0801598c
 800c188:	20000450 	.word	0x20000450
 800c18c:	08015994 	.word	0x08015994
 800c190:	080159a0 	.word	0x080159a0
 800c194:	200003b4 	.word	0x200003b4
 800c198:	080159ac 	.word	0x080159ac
 800c19c:	080159bc 	.word	0x080159bc
 800c1a0:	200040b4 	.word	0x200040b4
 800c1a4:	080159c8 	.word	0x080159c8
 800c1a8:	080159d8 	.word	0x080159d8
 800c1ac:	2000418c 	.word	0x2000418c
 800c1b0:	080159e0 	.word	0x080159e0
 800c1b4:	080159ec 	.word	0x080159ec
 800c1b8:	20003d04 	.word	0x20003d04
 800c1bc:	080159f4 	.word	0x080159f4
 800c1c0:	08015a00 	.word	0x08015a00
 800c1c4:	2000041c 	.word	0x2000041c
 800c1c8:	08015a08 	.word	0x08015a08
 800c1cc:	08015a14 	.word	0x08015a14
 800c1d0:	08015a20 	.word	0x08015a20
 800c1d4:	200002a0 	.word	0x200002a0
 800c1d8:	08015a28 	.word	0x08015a28
 800c1dc:	08015a30 	.word	0x08015a30
 800c1e0:	08015a38 	.word	0x08015a38
 800c1e4:	08015a40 	.word	0x08015a40
 800c1e8:	08015a44 	.word	0x08015a44
 800c1ec:	feedc0dd 	.word	0xfeedc0dd
 800c1f0:	08080200 	.word	0x08080200
 800c1f4:	08015a4c 	.word	0x08015a4c
 800c1f8:	08015a58 	.word	0x08015a58
 800c1fc:	200040f8 	.word	0x200040f8
 800c200:	08015a64 	.word	0x08015a64
 800c204:	080155c8 	.word	0x080155c8

0800c208 <__NVIC_SystemReset>:
{
 800c208:	b480      	push	{r7}
 800c20a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c20c:	f3bf 8f4f 	dsb	sy
}
 800c210:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c212:	4b06      	ldr	r3, [pc, #24]	; (800c22c <__NVIC_SystemReset+0x24>)
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c21a:	4904      	ldr	r1, [pc, #16]	; (800c22c <__NVIC_SystemReset+0x24>)
 800c21c:	4b04      	ldr	r3, [pc, #16]	; (800c230 <__NVIC_SystemReset+0x28>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c222:	f3bf 8f4f 	dsb	sy
}
 800c226:	bf00      	nop
    __NOP();
 800c228:	bf00      	nop
 800c22a:	e7fd      	b.n	800c228 <__NVIC_SystemReset+0x20>
 800c22c:	e000ed00 	.word	0xe000ed00
 800c230:	05fa0004 	.word	0x05fa0004

0800c234 <addToLog>:
#include "sim868.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

void addToLog(){
 800c234:	b5b0      	push	{r4, r5, r7, lr}
 800c236:	b088      	sub	sp, #32
 800c238:	af04      	add	r7, sp, #16
	if(strstr((char*)SENSORTYPE,"MB7588")!=NULL || strstr((char*)SENSORTYPE,"A011617")!=NULL){
 800c23a:	4940      	ldr	r1, [pc, #256]	; (800c33c <addToLog+0x108>)
 800c23c:	4840      	ldr	r0, [pc, #256]	; (800c340 <addToLog+0x10c>)
 800c23e:	f006 fd69 	bl	8012d14 <strstr>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d106      	bne.n	800c256 <addToLog+0x22>
 800c248:	493e      	ldr	r1, [pc, #248]	; (800c344 <addToLog+0x110>)
 800c24a:	483d      	ldr	r0, [pc, #244]	; (800c340 <addToLog+0x10c>)
 800c24c:	f006 fd62 	bl	8012d14 <strstr>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d015      	beq.n	800c282 <addToLog+0x4e>
		sprintf((char*)fs_buf,"{\"D\":{\"T\":\"%20s\",\"H\":\"%05d\",\"Q\":\"%09d\",\"C\":\"%03d\",\"S\":\"%1s\"}}\r\n",(char*)TIME,atoi((char*)SATH),atoi((char*)SARF),atoi((char*)COR),STAT);
 800c256:	483c      	ldr	r0, [pc, #240]	; (800c348 <addToLog+0x114>)
 800c258:	f006 fc36 	bl	8012ac8 <atoi>
 800c25c:	4605      	mov	r5, r0
 800c25e:	483b      	ldr	r0, [pc, #236]	; (800c34c <addToLog+0x118>)
 800c260:	f006 fc32 	bl	8012ac8 <atoi>
 800c264:	4604      	mov	r4, r0
 800c266:	483a      	ldr	r0, [pc, #232]	; (800c350 <addToLog+0x11c>)
 800c268:	f006 fc2e 	bl	8012ac8 <atoi>
 800c26c:	4603      	mov	r3, r0
 800c26e:	4a39      	ldr	r2, [pc, #228]	; (800c354 <addToLog+0x120>)
 800c270:	9202      	str	r2, [sp, #8]
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	9400      	str	r4, [sp, #0]
 800c276:	462b      	mov	r3, r5
 800c278:	4a37      	ldr	r2, [pc, #220]	; (800c358 <addToLog+0x124>)
 800c27a:	4938      	ldr	r1, [pc, #224]	; (800c35c <addToLog+0x128>)
 800c27c:	4838      	ldr	r0, [pc, #224]	; (800c360 <addToLog+0x12c>)
 800c27e:	f006 fc85 	bl	8012b8c <siprintf>
	}
	if(strstr((char*)SENSORTYPE,"WellVer")!=NULL){
 800c282:	4938      	ldr	r1, [pc, #224]	; (800c364 <addToLog+0x130>)
 800c284:	482e      	ldr	r0, [pc, #184]	; (800c340 <addToLog+0x10c>)
 800c286:	f006 fd45 	bl	8012d14 <strstr>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d015      	beq.n	800c2bc <addToLog+0x88>
		sprintf((char*)fs_buf,"{\"D\":{\"T\":\"%20s\",\"H\":\"%05d\",\"Q\":\"%09d\",\"C\":\"%03d\",\"S\":\"%1s\"}}\r\n",(char*)TIME,atoi((char*)MSATH),atoi((char*)MCON),atoi((char*)MTEMP),STAT);
 800c290:	4835      	ldr	r0, [pc, #212]	; (800c368 <addToLog+0x134>)
 800c292:	f006 fc19 	bl	8012ac8 <atoi>
 800c296:	4605      	mov	r5, r0
 800c298:	4834      	ldr	r0, [pc, #208]	; (800c36c <addToLog+0x138>)
 800c29a:	f006 fc15 	bl	8012ac8 <atoi>
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4833      	ldr	r0, [pc, #204]	; (800c370 <addToLog+0x13c>)
 800c2a2:	f006 fc11 	bl	8012ac8 <atoi>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	4a2a      	ldr	r2, [pc, #168]	; (800c354 <addToLog+0x120>)
 800c2aa:	9202      	str	r2, [sp, #8]
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	9400      	str	r4, [sp, #0]
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	4a29      	ldr	r2, [pc, #164]	; (800c358 <addToLog+0x124>)
 800c2b4:	4929      	ldr	r1, [pc, #164]	; (800c35c <addToLog+0x128>)
 800c2b6:	482a      	ldr	r0, [pc, #168]	; (800c360 <addToLog+0x12c>)
 800c2b8:	f006 fc68 	bl	8012b8c <siprintf>
	}
	fs_buf[82]='\0';
 800c2bc:	4b28      	ldr	r3, [pc, #160]	; (800c360 <addToLog+0x12c>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	if(fsAdd(PATHL, fs_buf, 82) == 0){
 800c2c4:	4b2b      	ldr	r3, [pc, #172]	; (800c374 <addToLog+0x140>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2252      	movs	r2, #82	; 0x52
 800c2ca:	4925      	ldr	r1, [pc, #148]	; (800c360 <addToLog+0x12c>)
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fc fc79 	bl	8008bc4 <fsAdd>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <addToLog+0xa8>
		NVIC_SystemReset();
 800c2d8:	f7ff ff96 	bl	800c208 <__NVIC_SystemReset>
	}
	txr(uartModem, (uint8_t*)"AT+FSFLSIZE=D:\\log.txt\r\n");
 800c2dc:	4b26      	ldr	r3, [pc, #152]	; (800c378 <addToLog+0x144>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4926      	ldr	r1, [pc, #152]	; (800c37c <addToLog+0x148>)
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f006 f9f0 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 2);
 800c2e8:	4b23      	ldr	r3, [pc, #140]	; (800c378 <addToLog+0x144>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a24      	ldr	r2, [pc, #144]	; (800c380 <addToLog+0x14c>)
 800c2ee:	6811      	ldr	r1, [r2, #0]
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f006 f9be 	bl	8012674 <rxr>
	strtok((char*)rx_buf,": ");
 800c2f8:	4922      	ldr	r1, [pc, #136]	; (800c384 <addToLog+0x150>)
 800c2fa:	4823      	ldr	r0, [pc, #140]	; (800c388 <addToLog+0x154>)
 800c2fc:	f006 fd22 	bl	8012d44 <strtok>
	logPosition = atoi(strtok(NULL,"\r\n"))/82;
 800c300:	4922      	ldr	r1, [pc, #136]	; (800c38c <addToLog+0x158>)
 800c302:	2000      	movs	r0, #0
 800c304:	f006 fd1e 	bl	8012d44 <strtok>
 800c308:	4603      	mov	r3, r0
 800c30a:	4618      	mov	r0, r3
 800c30c:	f006 fbdc 	bl	8012ac8 <atoi>
 800c310:	4603      	mov	r3, r0
 800c312:	4a1f      	ldr	r2, [pc, #124]	; (800c390 <addToLog+0x15c>)
 800c314:	fb82 1203 	smull	r1, r2, r2, r3
 800c318:	1152      	asrs	r2, r2, #5
 800c31a:	17db      	asrs	r3, r3, #31
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	4a1d      	ldr	r2, [pc, #116]	; (800c394 <addToLog+0x160>)
 800c320:	6013      	str	r3, [r2, #0]
	uint8_t sds[10];
	itoa((int)logPosition-1,(char*)sds,10);
 800c322:	4b1c      	ldr	r3, [pc, #112]	; (800c394 <addToLog+0x160>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3b01      	subs	r3, #1
 800c328:	1d39      	adds	r1, r7, #4
 800c32a:	220a      	movs	r2, #10
 800c32c:	4618      	mov	r0, r3
 800c32e:	f006 fc15 	bl	8012b5c <itoa>
}
 800c332:	bf00      	nop
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bdb0      	pop	{r4, r5, r7, pc}
 800c33a:	bf00      	nop
 800c33c:	08015a74 	.word	0x08015a74
 800c340:	200040f8 	.word	0x200040f8
 800c344:	08015a7c 	.word	0x08015a7c
 800c348:	20003cf8 	.word	0x20003cf8
 800c34c:	20000398 	.word	0x20000398
 800c350:	20004428 	.word	0x20004428
 800c354:	20003fb8 	.word	0x20003fb8
 800c358:	20000268 	.word	0x20000268
 800c35c:	08015a84 	.word	0x08015a84
 800c360:	200015e8 	.word	0x200015e8
 800c364:	08015ac4 	.word	0x08015ac4
 800c368:	200002b8 	.word	0x200002b8
 800c36c:	20004418 	.word	0x20004418
 800c370:	200002ac 	.word	0x200002ac
 800c374:	200000b8 	.word	0x200000b8
 800c378:	20004d5c 	.word	0x20004d5c
 800c37c:	08015acc 	.word	0x08015acc
 800c380:	20000118 	.word	0x20000118
 800c384:	08015ae8 	.word	0x08015ae8
 800c388:	20004588 	.word	0x20004588
 800c38c:	08015aec 	.word	0x08015aec
 800c390:	63e7063f 	.word	0x63e7063f
 800c394:	20004424 	.word	0x20004424

0800c398 <readFromLog>:
int readFromLog(long pos){
 800c398:	b580      	push	{r7, lr}
 800c39a:	b086      	sub	sp, #24
 800c39c:	af04      	add	r7, sp, #16
 800c39e:	6078      	str	r0, [r7, #4]
	itoa(pos*82,(char*)POSST,10);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2252      	movs	r2, #82	; 0x52
 800c3a4:	fb02 f303 	mul.w	r3, r2, r3
 800c3a8:	220a      	movs	r2, #10
 800c3aa:	4931      	ldr	r1, [pc, #196]	; (800c470 <readFromLog+0xd8>)
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f006 fbd5 	bl	8012b5c <itoa>
	tx(uartModem, (uint8_t*)"AT+FSREAD=");
 800c3b2:	4b30      	ldr	r3, [pc, #192]	; (800c474 <readFromLog+0xdc>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4930      	ldr	r1, [pc, #192]	; (800c478 <readFromLog+0xe0>)
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f006 f88f 	bl	80124dc <tx>
	tx(uartModem, PATHL);
 800c3be:	4b2d      	ldr	r3, [pc, #180]	; (800c474 <readFromLog+0xdc>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a2e      	ldr	r2, [pc, #184]	; (800c47c <readFromLog+0xe4>)
 800c3c4:	6812      	ldr	r2, [r2, #0]
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f006 f887 	bl	80124dc <tx>
	tx(uartModem, (uint8_t*)",1,82,");
 800c3ce:	4b29      	ldr	r3, [pc, #164]	; (800c474 <readFromLog+0xdc>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	492b      	ldr	r1, [pc, #172]	; (800c480 <readFromLog+0xe8>)
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f006 f881 	bl	80124dc <tx>
	tx(uartModem, POSST);
 800c3da:	4b26      	ldr	r3, [pc, #152]	; (800c474 <readFromLog+0xdc>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4924      	ldr	r1, [pc, #144]	; (800c470 <readFromLog+0xd8>)
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f006 f87b 	bl	80124dc <tx>
	tx(uartModem, (uint8_t*)"\r\n");
 800c3e6:	4b23      	ldr	r3, [pc, #140]	; (800c474 <readFromLog+0xdc>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4926      	ldr	r1, [pc, #152]	; (800c484 <readFromLog+0xec>)
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f006 f875 	bl	80124dc <tx>
	rxr(uartModem, SIMR, 10);
 800c3f2:	4b20      	ldr	r3, [pc, #128]	; (800c474 <readFromLog+0xdc>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a24      	ldr	r2, [pc, #144]	; (800c488 <readFromLog+0xf0>)
 800c3f8:	6811      	ldr	r1, [r2, #0]
 800c3fa:	220a      	movs	r2, #10
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f006 f939 	bl	8012674 <rxr>
	strcpy((char*)rx_buf,(char*)&rx_buf[2]);
 800c402:	4922      	ldr	r1, [pc, #136]	; (800c48c <readFromLog+0xf4>)
 800c404:	4822      	ldr	r0, [pc, #136]	; (800c490 <readFromLog+0xf8>)
 800c406:	f006 fc6c 	bl	8012ce2 <strcpy>
	if(strstr((char*)SENSORTYPE,"MB7588")!=NULL || strstr((char*)SENSORTYPE,"A011617")!=NULL){
 800c40a:	4922      	ldr	r1, [pc, #136]	; (800c494 <readFromLog+0xfc>)
 800c40c:	4822      	ldr	r0, [pc, #136]	; (800c498 <readFromLog+0x100>)
 800c40e:	f006 fc81 	bl	8012d14 <strstr>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d106      	bne.n	800c426 <readFromLog+0x8e>
 800c418:	4920      	ldr	r1, [pc, #128]	; (800c49c <readFromLog+0x104>)
 800c41a:	481f      	ldr	r0, [pc, #124]	; (800c498 <readFromLog+0x100>)
 800c41c:	f006 fc7a 	bl	8012d14 <strstr>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00b      	beq.n	800c43e <readFromLog+0xa6>
		sscanf((char*)rx_buf,"{\"D\":{\"T\":\"%20s\",\"H\":\"%05s\",\"Q\":\"%09s\",\"C\":\"%03s\",\"S\":\"%1s\"}}\r\n",(char*)&TIME,(char*)&SATH,(char*)&SARF,(char*)&COR,(char*)&STAT);
 800c426:	4b1e      	ldr	r3, [pc, #120]	; (800c4a0 <readFromLog+0x108>)
 800c428:	9302      	str	r3, [sp, #8]
 800c42a:	4b1e      	ldr	r3, [pc, #120]	; (800c4a4 <readFromLog+0x10c>)
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	4b1e      	ldr	r3, [pc, #120]	; (800c4a8 <readFromLog+0x110>)
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	4b1e      	ldr	r3, [pc, #120]	; (800c4ac <readFromLog+0x114>)
 800c434:	4a1e      	ldr	r2, [pc, #120]	; (800c4b0 <readFromLog+0x118>)
 800c436:	491f      	ldr	r1, [pc, #124]	; (800c4b4 <readFromLog+0x11c>)
 800c438:	4815      	ldr	r0, [pc, #84]	; (800c490 <readFromLog+0xf8>)
 800c43a:	f006 fbc7 	bl	8012bcc <siscanf>
	}
	if(strstr((char*)SENSORTYPE,"WellVer")!=NULL){
 800c43e:	491e      	ldr	r1, [pc, #120]	; (800c4b8 <readFromLog+0x120>)
 800c440:	4815      	ldr	r0, [pc, #84]	; (800c498 <readFromLog+0x100>)
 800c442:	f006 fc67 	bl	8012d14 <strstr>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00b      	beq.n	800c464 <readFromLog+0xcc>
		sscanf((char*)rx_buf,"{\"D\":{\"T\":\"%20s\",\"H\":\"%05s\",\"Q\":\"%09s\",\"C\":\"%03s\",\"S\":\"%1s\"}}\r\n",(char*)&TIME,(char*)&MSATH,(char*)&MCON,(char*)&MTEMP,(char*)&STAT);
 800c44c:	4b14      	ldr	r3, [pc, #80]	; (800c4a0 <readFromLog+0x108>)
 800c44e:	9302      	str	r3, [sp, #8]
 800c450:	4b1a      	ldr	r3, [pc, #104]	; (800c4bc <readFromLog+0x124>)
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	4b1a      	ldr	r3, [pc, #104]	; (800c4c0 <readFromLog+0x128>)
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	4b1a      	ldr	r3, [pc, #104]	; (800c4c4 <readFromLog+0x12c>)
 800c45a:	4a15      	ldr	r2, [pc, #84]	; (800c4b0 <readFromLog+0x118>)
 800c45c:	4915      	ldr	r1, [pc, #84]	; (800c4b4 <readFromLog+0x11c>)
 800c45e:	480c      	ldr	r0, [pc, #48]	; (800c490 <readFromLog+0xf8>)
 800c460:	f006 fbb4 	bl	8012bcc <siscanf>
	}
	return 0;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	200041c0 	.word	0x200041c0
 800c474:	20004d5c 	.word	0x20004d5c
 800c478:	08015af0 	.word	0x08015af0
 800c47c:	200000b8 	.word	0x200000b8
 800c480:	08015afc 	.word	0x08015afc
 800c484:	08015aec 	.word	0x08015aec
 800c488:	20000118 	.word	0x20000118
 800c48c:	2000458a 	.word	0x2000458a
 800c490:	20004588 	.word	0x20004588
 800c494:	08015a74 	.word	0x08015a74
 800c498:	200040f8 	.word	0x200040f8
 800c49c:	08015a7c 	.word	0x08015a7c
 800c4a0:	20003fb8 	.word	0x20003fb8
 800c4a4:	20004428 	.word	0x20004428
 800c4a8:	20000398 	.word	0x20000398
 800c4ac:	20003cf8 	.word	0x20003cf8
 800c4b0:	20000268 	.word	0x20000268
 800c4b4:	08015b04 	.word	0x08015b04
 800c4b8:	08015ac4 	.word	0x08015ac4
 800c4bc:	200002ac 	.word	0x200002ac
 800c4c0:	20004418 	.word	0x20004418
 800c4c4:	200002b8 	.word	0x200002b8

0800c4c8 <getPos>:

void getPos(){
 800c4c8:	b480      	push	{r7}
 800c4ca:	af00      	add	r7, sp, #0
	sendPosition = *(uint32_t*)0x08080110;
 800c4cc:	4b04      	ldr	r3, [pc, #16]	; (800c4e0 <getPos+0x18>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4b04      	ldr	r3, [pc, #16]	; (800c4e4 <getPos+0x1c>)
 800c4d4:	601a      	str	r2, [r3, #0]
}
 800c4d6:	bf00      	nop
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bc80      	pop	{r7}
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	08080110 	.word	0x08080110
 800c4e4:	20004124 	.word	0x20004124

0800c4e8 <setPos>:
void setPos(long position){
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 800c4f0:	f000 ffee 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080110, position);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	490d      	ldr	r1, [pc, #52]	; (800c530 <setPos+0x48>)
 800c4fa:	2002      	movs	r0, #2
 800c4fc:	f001 f814 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_FLASHEx_DATAEEPROM_Lock();
 800c500:	f001 f802 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
	HAL_FLASHEx_DATAEEPROM_Unlock();
 800c504:	f000 ffe4 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080110, position);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	461a      	mov	r2, r3
 800c50c:	4908      	ldr	r1, [pc, #32]	; (800c530 <setPos+0x48>)
 800c50e:	2002      	movs	r0, #2
 800c510:	f001 f80a 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_FLASHEx_DATAEEPROM_Lock();
 800c514:	f000 fff8 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
	uint8_t sds[10];
	itoa((int)position,(char*)sds,10);
 800c518:	f107 030c 	add.w	r3, r7, #12
 800c51c:	220a      	movs	r2, #10
 800c51e:	4619      	mov	r1, r3
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f006 fb1b 	bl	8012b5c <itoa>
}
 800c526:	bf00      	nop
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	08080110 	.word	0x08080110

0800c534 <defaulLog>:
void defaulLog(){
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
	fsCreate(PATHL);
 800c538:	4b04      	ldr	r3, [pc, #16]	; (800c54c <defaulLog+0x18>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fc f9f3 	bl	8008928 <fsCreate>
	setPos(0);
 800c542:	2000      	movs	r0, #0
 800c544:	f7ff ffd0 	bl	800c4e8 <setPos>
}
 800c548:	bf00      	nop
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	200000b8 	.word	0x200000b8

0800c550 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c55a:	2003      	movs	r0, #3
 800c55c:	f000 fe14 	bl	800d188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c560:	200f      	movs	r0, #15
 800c562:	f000 f831 	bl	800c5c8 <HAL_InitTick>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	71fb      	strb	r3, [r7, #7]
 800c570:	e001      	b.n	800c576 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800c572:	f7fa f825 	bl	80065c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c576:	79fb      	ldrb	r3, [r7, #7]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800c584:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <HAL_DeInit+0x38>)
 800c586:	f04f 32ff 	mov.w	r2, #4294967295
 800c58a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_APB1_RELEASE_RESET();
 800c58c:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <HAL_DeInit+0x38>)
 800c58e:	2200      	movs	r2, #0
 800c590:	619a      	str	r2, [r3, #24]

  __HAL_RCC_APB2_FORCE_RESET();
 800c592:	4b09      	ldr	r3, [pc, #36]	; (800c5b8 <HAL_DeInit+0x38>)
 800c594:	f04f 32ff 	mov.w	r2, #4294967295
 800c598:	615a      	str	r2, [r3, #20]
  __HAL_RCC_APB2_RELEASE_RESET();
 800c59a:	4b07      	ldr	r3, [pc, #28]	; (800c5b8 <HAL_DeInit+0x38>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB_FORCE_RESET();
 800c5a0:	4b05      	ldr	r3, [pc, #20]	; (800c5b8 <HAL_DeInit+0x38>)
 800c5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB_RELEASE_RESET();
 800c5a8:	4b03      	ldr	r3, [pc, #12]	; (800c5b8 <HAL_DeInit+0x38>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	611a      	str	r2, [r3, #16]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800c5ae:	f000 f805 	bl	800c5bc <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	40023800 	.word	0x40023800

0800c5bc <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800c5c0:	bf00      	nop
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bc80      	pop	{r7}
 800c5c6:	4770      	bx	lr

0800c5c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800c5d4:	4b16      	ldr	r3, [pc, #88]	; (800c630 <HAL_InitTick+0x68>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d022      	beq.n	800c622 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800c5dc:	4b15      	ldr	r3, [pc, #84]	; (800c634 <HAL_InitTick+0x6c>)
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	4b13      	ldr	r3, [pc, #76]	; (800c630 <HAL_InitTick+0x68>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c5e8:	fbb1 f3f3 	udiv	r3, r1, r3
 800c5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 fe0c 	bl	800d20e <HAL_SYSTICK_Config>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10f      	bne.n	800c61c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b0f      	cmp	r3, #15
 800c600:	d809      	bhi.n	800c616 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c602:	2200      	movs	r2, #0
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	f000 fdc8 	bl	800d19e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c60e:	4a0a      	ldr	r2, [pc, #40]	; (800c638 <HAL_InitTick+0x70>)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6013      	str	r3, [r2, #0]
 800c614:	e007      	b.n	800c626 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	73fb      	strb	r3, [r7, #15]
 800c61a:	e004      	b.n	800c626 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	73fb      	strb	r3, [r7, #15]
 800c620:	e001      	b.n	800c626 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800c626:	7bfb      	ldrb	r3, [r7, #15]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	20000114 	.word	0x20000114
 800c634:	20000008 	.word	0x20000008
 800c638:	20000110 	.word	0x20000110

0800c63c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c63c:	b480      	push	{r7}
 800c63e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c640:	4b05      	ldr	r3, [pc, #20]	; (800c658 <HAL_IncTick+0x1c>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	4b05      	ldr	r3, [pc, #20]	; (800c65c <HAL_IncTick+0x20>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4413      	add	r3, r2
 800c64a:	4a03      	ldr	r2, [pc, #12]	; (800c658 <HAL_IncTick+0x1c>)
 800c64c:	6013      	str	r3, [r2, #0]
}
 800c64e:	bf00      	nop
 800c650:	46bd      	mov	sp, r7
 800c652:	bc80      	pop	{r7}
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	20004448 	.word	0x20004448
 800c65c:	20000114 	.word	0x20000114

0800c660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c660:	b480      	push	{r7}
 800c662:	af00      	add	r7, sp, #0
  return uwTick;
 800c664:	4b02      	ldr	r3, [pc, #8]	; (800c670 <HAL_GetTick+0x10>)
 800c666:	681b      	ldr	r3, [r3, #0]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bc80      	pop	{r7}
 800c66e:	4770      	bx	lr
 800c670:	20004448 	.word	0x20004448

0800c674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c67c:	f7ff fff0 	bl	800c660 <HAL_GetTick>
 800c680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68c:	d004      	beq.n	800c698 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800c68e:	4b09      	ldr	r3, [pc, #36]	; (800c6b4 <HAL_Delay+0x40>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	4413      	add	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c698:	bf00      	nop
 800c69a:	f7ff ffe1 	bl	800c660 <HAL_GetTick>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d8f7      	bhi.n	800c69a <HAL_Delay+0x26>
  {
  }
}
 800c6aa:	bf00      	nop
 800c6ac:	bf00      	nop
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	20000114 	.word	0x20000114

0800c6b8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800c6bc:	4b04      	ldr	r3, [pc, #16]	; (800c6d0 <HAL_SuspendTick+0x18>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a03      	ldr	r2, [pc, #12]	; (800c6d0 <HAL_SuspendTick+0x18>)
 800c6c2:	f023 0302 	bic.w	r3, r3, #2
 800c6c6:	6013      	str	r3, [r2, #0]
}
 800c6c8:	bf00      	nop
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bc80      	pop	{r7}
 800c6ce:	4770      	bx	lr
 800c6d0:	e000e010 	.word	0xe000e010

0800c6d4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800c6d8:	4b04      	ldr	r3, [pc, #16]	; (800c6ec <HAL_ResumeTick+0x18>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a03      	ldr	r2, [pc, #12]	; (800c6ec <HAL_ResumeTick+0x18>)
 800c6de:	f043 0302 	orr.w	r3, r3, #2
 800c6e2:	6013      	str	r3, [r2, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bc80      	pop	{r7}
 800c6ea:	4770      	bx	lr
 800c6ec:	e000e010 	.word	0xe000e010

0800c6f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b08e      	sub	sp, #56	; 0x38
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800c70c:	2301      	movs	r3, #1
 800c70e:	e127      	b.n	800c960 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d115      	bne.n	800c74a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c72c:	4b8e      	ldr	r3, [pc, #568]	; (800c968 <HAL_ADC_Init+0x278>)
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	4a8d      	ldr	r2, [pc, #564]	; (800c968 <HAL_ADC_Init+0x278>)
 800c732:	f043 0301 	orr.w	r3, r3, #1
 800c736:	6213      	str	r3, [r2, #32]
 800c738:	4b8b      	ldr	r3, [pc, #556]	; (800c968 <HAL_ADC_Init+0x278>)
 800c73a:	6a1b      	ldr	r3, [r3, #32]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	60bb      	str	r3, [r7, #8]
 800c742:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7f9 ff69 	bl	800661c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c74e:	f003 0310 	and.w	r3, r3, #16
 800c752:	2b00      	cmp	r3, #0
 800c754:	f040 80ff 	bne.w	800c956 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c75c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c760:	f023 0302 	bic.w	r3, r3, #2
 800c764:	f043 0202 	orr.w	r2, r3, #2
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800c76c:	4b7f      	ldr	r3, [pc, #508]	; (800c96c <HAL_ADC_Init+0x27c>)
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	497c      	ldr	r1, [pc, #496]	; (800c96c <HAL_ADC_Init+0x27c>)
 800c77a:	4313      	orrs	r3, r2
 800c77c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800c786:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c78e:	4619      	mov	r1, r3
 800c790:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c794:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	fa93 f3a3 	rbit	r3, r3
 800c79c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	fab3 f383 	clz	r3, r3
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800c7aa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c7b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	fa93 f3a3 	rbit	r3, r3
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	fab3 f383 	clz	r3, r3
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800c7d2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800c7d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7de:	2b10      	cmp	r3, #16
 800c7e0:	d007      	beq.n	800c7f2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fc:	2b40      	cmp	r3, #64	; 0x40
 800c7fe:	d04f      	beq.n	800c8a0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c806:	4313      	orrs	r3, r2
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800c812:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	6912      	ldr	r2, [r2, #16]
 800c818:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800c81c:	d003      	beq.n	800c826 <HAL_ADC_Init+0x136>
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	6912      	ldr	r2, [r2, #16]
 800c822:	2a01      	cmp	r2, #1
 800c824:	d102      	bne.n	800c82c <HAL_ADC_Init+0x13c>
 800c826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c82a:	e000      	b.n	800c82e <HAL_ADC_Init+0x13e>
 800c82c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800c82e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800c830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c832:	4313      	orrs	r3, r2
 800c834:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d125      	bne.n	800c88c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c846:	2b00      	cmp	r3, #0
 800c848:	d114      	bne.n	800c874 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84e:	3b01      	subs	r3, #1
 800c850:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800c854:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c856:	69ba      	ldr	r2, [r7, #24]
 800c858:	fa92 f2a2 	rbit	r2, r2
 800c85c:	617a      	str	r2, [r7, #20]
  return result;
 800c85e:	697a      	ldr	r2, [r7, #20]
 800c860:	fab2 f282 	clz	r2, r2
 800c864:	b2d2      	uxtb	r2, r2
 800c866:	4093      	lsls	r3, r2
 800c868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c86e:	4313      	orrs	r3, r2
 800c870:	633b      	str	r3, [r7, #48]	; 0x30
 800c872:	e00b      	b.n	800c88c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c878:	f043 0220 	orr.w	r2, r3, #32
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	f043 0201 	orr.w	r2, r3, #1
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	4b37      	ldr	r3, [pc, #220]	; (800c970 <HAL_ADC_Init+0x280>)
 800c894:	4013      	ands	r3, r2
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	6812      	ldr	r2, [r2, #0]
 800c89a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c89c:	430b      	orrs	r3, r1
 800c89e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	689a      	ldr	r2, [r3, #8]
 800c8a6:	4b33      	ldr	r3, [pc, #204]	; (800c974 <HAL_ADC_Init+0x284>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	6812      	ldr	r2, [r2, #0]
 800c8ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8b0:	430b      	orrs	r3, r1
 800c8b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8bc:	d003      	beq.n	800c8c6 <HAL_ADC_Init+0x1d6>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d119      	bne.n	800c8fa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8cc:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d4:	3b01      	subs	r3, #1
 800c8d6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800c8da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	fa92 f2a2 	rbit	r2, r2
 800c8e2:	60fa      	str	r2, [r7, #12]
  return result;
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	fab2 f282 	clz	r2, r2
 800c8ea:	b2d2      	uxtb	r2, r2
 800c8ec:	fa03 f202 	lsl.w	r2, r3, r2
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	631a      	str	r2, [r3, #48]	; 0x30
 800c8f8:	e007      	b.n	800c90a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800c908:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	689a      	ldr	r2, [r3, #8]
 800c910:	4b19      	ldr	r3, [pc, #100]	; (800c978 <HAL_ADC_Init+0x288>)
 800c912:	4013      	ands	r3, r2
 800c914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c916:	429a      	cmp	r2, r3
 800c918:	d10b      	bne.n	800c932 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c924:	f023 0303 	bic.w	r3, r3, #3
 800c928:	f043 0201 	orr.w	r2, r3, #1
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	64da      	str	r2, [r3, #76]	; 0x4c
 800c930:	e014      	b.n	800c95c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c936:	f023 0312 	bic.w	r3, r3, #18
 800c93a:	f043 0210 	orr.w	r2, r3, #16
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c946:	f043 0201 	orr.w	r2, r3, #1
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c954:	e002      	b.n	800c95c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c95c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800c960:	4618      	mov	r0, r3
 800c962:	3738      	adds	r7, #56	; 0x38
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	40023800 	.word	0x40023800
 800c96c:	40012700 	.word	0x40012700
 800c970:	fcfc16ff 	.word	0xfcfc16ff
 800c974:	c0fff189 	.word	0xc0fff189
 800c978:	bf80fffe 	.word	0xbf80fffe

0800c97c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d101      	bne.n	800c996 <HAL_ADC_Start+0x1a>
 800c992:	2302      	movs	r3, #2
 800c994:	e04e      	b.n	800ca34 <HAL_ADC_Start+0xb8>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fa64 	bl	800ce6c <ADC_Enable>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d141      	bne.n	800ca32 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c9b6:	f023 0301 	bic.w	r3, r3, #1
 800c9ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d007      	beq.n	800c9e0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c9d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9ec:	d106      	bne.n	800c9fc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f2:	f023 0206 	bic.w	r2, r3, #6
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	651a      	str	r2, [r3, #80]	; 0x50
 800c9fa:	e002      	b.n	800ca02 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800ca12:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d107      	bne.n	800ca32 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	689a      	ldr	r2, [r3, #8]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ca30:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d101      	bne.n	800ca56 <HAL_ADC_Stop+0x1a>
 800ca52:	2302      	movs	r3, #2
 800ca54:	e01a      	b.n	800ca8c <HAL_ADC_Stop+0x50>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fa60 	bl	800cf24 <ADC_ConversionStop_Disable>
 800ca64:	4603      	mov	r3, r0
 800ca66:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d109      	bne.n	800ca82 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ca76:	f023 0301 	bic.w	r3, r3, #1
 800ca7a:	f043 0201 	orr.w	r2, r3, #1
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cab0:	d113      	bne.n	800cada <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800cabc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac0:	d10b      	bne.n	800cada <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cac6:	f043 0220 	orr.w	r2, r3, #32
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e068      	b.n	800cbac <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800cada:	f7ff fdc1 	bl	800c660 <HAL_GetTick>
 800cade:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800cae0:	e021      	b.n	800cb26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae8:	d01d      	beq.n	800cb26 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d007      	beq.n	800cb00 <HAL_ADC_PollForConversion+0x6c>
 800caf0:	f7ff fdb6 	bl	800c660 <HAL_GetTick>
 800caf4:	4602      	mov	r2, r0
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d212      	bcs.n	800cb26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 0302 	and.w	r3, r3, #2
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10b      	bne.n	800cb26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb12:	f043 0204 	orr.w	r2, r3, #4
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e042      	b.n	800cbac <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 0302 	and.w	r3, r3, #2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d0d6      	beq.n	800cae2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	699b      	ldr	r3, [r3, #24]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d104      	bne.n	800cb46 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f06f 0212 	mvn.w	r2, #18
 800cb44:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d124      	bne.n	800cbaa <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d11f      	bne.n	800cbaa <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb70:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d006      	beq.n	800cb86 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d111      	bne.n	800cbaa <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d105      	bne.n	800cbaa <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cba2:	f043 0201 	orr.w	r2, r3, #1
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bc80      	pop	{r7}
 800cbca:	4770      	bx	lr

0800cbcc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d101      	bne.n	800cbec <HAL_ADC_ConfigChannel+0x20>
 800cbe8:	2302      	movs	r3, #2
 800cbea:	e134      	b.n	800ce56 <HAL_ADC_ConfigChannel+0x28a>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	2b06      	cmp	r3, #6
 800cbfa:	d81c      	bhi.n	800cc36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	685a      	ldr	r2, [r3, #4]
 800cc06:	4613      	mov	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	3b05      	subs	r3, #5
 800cc0e:	221f      	movs	r2, #31
 800cc10:	fa02 f303 	lsl.w	r3, r2, r3
 800cc14:	43db      	mvns	r3, r3
 800cc16:	4019      	ands	r1, r3
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	6818      	ldr	r0, [r3, #0]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	685a      	ldr	r2, [r3, #4]
 800cc20:	4613      	mov	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4413      	add	r3, r2
 800cc26:	3b05      	subs	r3, #5
 800cc28:	fa00 f203 	lsl.w	r2, r0, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	430a      	orrs	r2, r1
 800cc32:	641a      	str	r2, [r3, #64]	; 0x40
 800cc34:	e07e      	b.n	800cd34 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	2b0c      	cmp	r3, #12
 800cc3c:	d81c      	bhi.n	800cc78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	685a      	ldr	r2, [r3, #4]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	4413      	add	r3, r2
 800cc4e:	3b23      	subs	r3, #35	; 0x23
 800cc50:	221f      	movs	r2, #31
 800cc52:	fa02 f303 	lsl.w	r3, r2, r3
 800cc56:	43db      	mvns	r3, r3
 800cc58:	4019      	ands	r1, r3
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	3b23      	subs	r3, #35	; 0x23
 800cc6a:	fa00 f203 	lsl.w	r2, r0, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	430a      	orrs	r2, r1
 800cc74:	63da      	str	r2, [r3, #60]	; 0x3c
 800cc76:	e05d      	b.n	800cd34 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	2b12      	cmp	r3, #18
 800cc7e:	d81c      	bhi.n	800ccba <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	3b41      	subs	r3, #65	; 0x41
 800cc92:	221f      	movs	r2, #31
 800cc94:	fa02 f303 	lsl.w	r3, r2, r3
 800cc98:	43db      	mvns	r3, r3
 800cc9a:	4019      	ands	r1, r3
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	6818      	ldr	r0, [r3, #0]
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	685a      	ldr	r2, [r3, #4]
 800cca4:	4613      	mov	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	3b41      	subs	r3, #65	; 0x41
 800ccac:	fa00 f203 	lsl.w	r2, r0, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	430a      	orrs	r2, r1
 800ccb6:	639a      	str	r2, [r3, #56]	; 0x38
 800ccb8:	e03c      	b.n	800cd34 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	2b18      	cmp	r3, #24
 800ccc0:	d81c      	bhi.n	800ccfc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	4613      	mov	r3, r2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	3b5f      	subs	r3, #95	; 0x5f
 800ccd4:	221f      	movs	r2, #31
 800ccd6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccda:	43db      	mvns	r3, r3
 800ccdc:	4019      	ands	r1, r3
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6818      	ldr	r0, [r3, #0]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	685a      	ldr	r2, [r3, #4]
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	3b5f      	subs	r3, #95	; 0x5f
 800ccee:	fa00 f203 	lsl.w	r2, r0, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	635a      	str	r2, [r3, #52]	; 0x34
 800ccfa:	e01b      	b.n	800cd34 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	4613      	mov	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	3b7d      	subs	r3, #125	; 0x7d
 800cd0e:	221f      	movs	r2, #31
 800cd10:	fa02 f303 	lsl.w	r3, r2, r3
 800cd14:	43db      	mvns	r3, r3
 800cd16:	4019      	ands	r1, r3
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	4613      	mov	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	4413      	add	r3, r2
 800cd26:	3b7d      	subs	r3, #125	; 0x7d
 800cd28:	fa00 f203 	lsl.w	r2, r0, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	430a      	orrs	r2, r1
 800cd32:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b09      	cmp	r3, #9
 800cd3a:	d81a      	bhi.n	800cd72 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6959      	ldr	r1, [r3, #20]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	4613      	mov	r3, r2
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	4413      	add	r3, r2
 800cd4c:	2207      	movs	r2, #7
 800cd4e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd52:	43db      	mvns	r3, r3
 800cd54:	4019      	ands	r1, r3
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	6898      	ldr	r0, [r3, #8]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	005b      	lsls	r3, r3, #1
 800cd62:	4413      	add	r3, r2
 800cd64:	fa00 f203 	lsl.w	r2, r0, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	430a      	orrs	r2, r1
 800cd6e:	615a      	str	r2, [r3, #20]
 800cd70:	e042      	b.n	800cdf8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2b13      	cmp	r3, #19
 800cd78:	d81c      	bhi.n	800cdb4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	6919      	ldr	r1, [r3, #16]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	4613      	mov	r3, r2
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	4413      	add	r3, r2
 800cd8a:	3b1e      	subs	r3, #30
 800cd8c:	2207      	movs	r2, #7
 800cd8e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd92:	43db      	mvns	r3, r3
 800cd94:	4019      	ands	r1, r3
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	6898      	ldr	r0, [r3, #8]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	4413      	add	r3, r2
 800cda4:	3b1e      	subs	r3, #30
 800cda6:	fa00 f203 	lsl.w	r2, r0, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	430a      	orrs	r2, r1
 800cdb0:	611a      	str	r2, [r3, #16]
 800cdb2:	e021      	b.n	800cdf8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b1a      	cmp	r3, #26
 800cdba:	d81c      	bhi.n	800cdf6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68d9      	ldr	r1, [r3, #12]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	4413      	add	r3, r2
 800cdcc:	3b3c      	subs	r3, #60	; 0x3c
 800cdce:	2207      	movs	r2, #7
 800cdd0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd4:	43db      	mvns	r3, r3
 800cdd6:	4019      	ands	r1, r3
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	6898      	ldr	r0, [r3, #8]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	4613      	mov	r3, r2
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	4413      	add	r3, r2
 800cde6:	3b3c      	subs	r3, #60	; 0x3c
 800cde8:	fa00 f203 	lsl.w	r2, r0, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	430a      	orrs	r2, r1
 800cdf2:	60da      	str	r2, [r3, #12]
 800cdf4:	e000      	b.n	800cdf8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800cdf6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b10      	cmp	r3, #16
 800cdfe:	d003      	beq.n	800ce08 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800ce04:	2b11      	cmp	r3, #17
 800ce06:	d121      	bne.n	800ce4c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800ce08:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <HAL_ADC_ConfigChannel+0x294>)
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d11b      	bne.n	800ce4c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800ce14:	4b12      	ldr	r3, [pc, #72]	; (800ce60 <HAL_ADC_ConfigChannel+0x294>)
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	4a11      	ldr	r2, [pc, #68]	; (800ce60 <HAL_ADC_ConfigChannel+0x294>)
 800ce1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ce1e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b10      	cmp	r3, #16
 800ce26:	d111      	bne.n	800ce4c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800ce28:	4b0e      	ldr	r3, [pc, #56]	; (800ce64 <HAL_ADC_ConfigChannel+0x298>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a0e      	ldr	r2, [pc, #56]	; (800ce68 <HAL_ADC_ConfigChannel+0x29c>)
 800ce2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce32:	0c9a      	lsrs	r2, r3, #18
 800ce34:	4613      	mov	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800ce3e:	e002      	b.n	800ce46 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1f9      	bne.n	800ce40 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bc80      	pop	{r7}
 800ce5e:	4770      	bx	lr
 800ce60:	40012700 	.word	0x40012700
 800ce64:	20000008 	.word	0x20000008
 800ce68:	431bde83 	.word	0x431bde83

0800ce6c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce86:	2b40      	cmp	r3, #64	; 0x40
 800ce88:	d043      	beq.n	800cf12 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	689a      	ldr	r2, [r3, #8]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f042 0201 	orr.w	r2, r2, #1
 800ce98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800ce9a:	4b20      	ldr	r3, [pc, #128]	; (800cf1c <ADC_Enable+0xb0>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a20      	ldr	r2, [pc, #128]	; (800cf20 <ADC_Enable+0xb4>)
 800cea0:	fba2 2303 	umull	r2, r3, r2, r3
 800cea4:	0c9a      	lsrs	r2, r3, #18
 800cea6:	4613      	mov	r3, r2
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	4413      	add	r3, r2
 800ceac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800ceae:	e002      	b.n	800ceb6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1f9      	bne.n	800ceb0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800cebc:	f7ff fbd0 	bl	800c660 <HAL_GetTick>
 800cec0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800cec2:	e01f      	b.n	800cf04 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800cec4:	f7ff fbcc 	bl	800c660 <HAL_GetTick>
 800cec8:	4602      	mov	r2, r0
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d918      	bls.n	800cf04 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cedc:	2b40      	cmp	r3, #64	; 0x40
 800cede:	d011      	beq.n	800cf04 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cee4:	f043 0210 	orr.w	r2, r3, #16
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef0:	f043 0201 	orr.w	r2, r3, #1
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e007      	b.n	800cf14 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf0e:	2b40      	cmp	r3, #64	; 0x40
 800cf10:	d1d8      	bne.n	800cec4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	20000008 	.word	0x20000008
 800cf20:	431bde83 	.word	0x431bde83

0800cf24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf3a:	2b40      	cmp	r3, #64	; 0x40
 800cf3c:	d12e      	bne.n	800cf9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	689a      	ldr	r2, [r3, #8]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f022 0201 	bic.w	r2, r2, #1
 800cf4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800cf4e:	f7ff fb87 	bl	800c660 <HAL_GetTick>
 800cf52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800cf54:	e01b      	b.n	800cf8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800cf56:	f7ff fb83 	bl	800c660 <HAL_GetTick>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d914      	bls.n	800cf8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf6e:	2b40      	cmp	r3, #64	; 0x40
 800cf70:	d10d      	bne.n	800cf8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf76:	f043 0210 	orr.w	r2, r3, #16
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf82:	f043 0201 	orr.w	r2, r3, #1
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e007      	b.n	800cf9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf98:	2b40      	cmp	r3, #64	; 0x40
 800cf9a:	d0dc      	beq.n	800cf56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <__NVIC_SetPriorityGrouping>:
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f003 0307 	and.w	r3, r3, #7
 800cfb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cfb8:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <__NVIC_SetPriorityGrouping+0x44>)
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cfc4:	4013      	ands	r3, r2
 800cfc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cfd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cfd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cfda:	4a04      	ldr	r2, [pc, #16]	; (800cfec <__NVIC_SetPriorityGrouping+0x44>)
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	60d3      	str	r3, [r2, #12]
}
 800cfe0:	bf00      	nop
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bc80      	pop	{r7}
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	e000ed00 	.word	0xe000ed00

0800cff0 <__NVIC_GetPriorityGrouping>:
{
 800cff0:	b480      	push	{r7}
 800cff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cff4:	4b04      	ldr	r3, [pc, #16]	; (800d008 <__NVIC_GetPriorityGrouping+0x18>)
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	0a1b      	lsrs	r3, r3, #8
 800cffa:	f003 0307 	and.w	r3, r3, #7
}
 800cffe:	4618      	mov	r0, r3
 800d000:	46bd      	mov	sp, r7
 800d002:	bc80      	pop	{r7}
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	e000ed00 	.word	0xe000ed00

0800d00c <__NVIC_EnableIRQ>:
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	db0b      	blt.n	800d036 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	f003 021f 	and.w	r2, r3, #31
 800d024:	4906      	ldr	r1, [pc, #24]	; (800d040 <__NVIC_EnableIRQ+0x34>)
 800d026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d02a:	095b      	lsrs	r3, r3, #5
 800d02c:	2001      	movs	r0, #1
 800d02e:	fa00 f202 	lsl.w	r2, r0, r2
 800d032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d036:	bf00      	nop
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bc80      	pop	{r7}
 800d03e:	4770      	bx	lr
 800d040:	e000e100 	.word	0xe000e100

0800d044 <__NVIC_DisableIRQ>:
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	4603      	mov	r3, r0
 800d04c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d04e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d052:	2b00      	cmp	r3, #0
 800d054:	db12      	blt.n	800d07c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	f003 021f 	and.w	r2, r3, #31
 800d05c:	490a      	ldr	r1, [pc, #40]	; (800d088 <__NVIC_DisableIRQ+0x44>)
 800d05e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d062:	095b      	lsrs	r3, r3, #5
 800d064:	2001      	movs	r0, #1
 800d066:	fa00 f202 	lsl.w	r2, r0, r2
 800d06a:	3320      	adds	r3, #32
 800d06c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d070:	f3bf 8f4f 	dsb	sy
}
 800d074:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d076:	f3bf 8f6f 	isb	sy
}
 800d07a:	bf00      	nop
}
 800d07c:	bf00      	nop
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	bc80      	pop	{r7}
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	e000e100 	.word	0xe000e100

0800d08c <__NVIC_SetPriority>:
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	db0a      	blt.n	800d0b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	490c      	ldr	r1, [pc, #48]	; (800d0d8 <__NVIC_SetPriority+0x4c>)
 800d0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0aa:	0112      	lsls	r2, r2, #4
 800d0ac:	b2d2      	uxtb	r2, r2
 800d0ae:	440b      	add	r3, r1
 800d0b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d0b4:	e00a      	b.n	800d0cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	4908      	ldr	r1, [pc, #32]	; (800d0dc <__NVIC_SetPriority+0x50>)
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	f003 030f 	and.w	r3, r3, #15
 800d0c2:	3b04      	subs	r3, #4
 800d0c4:	0112      	lsls	r2, r2, #4
 800d0c6:	b2d2      	uxtb	r2, r2
 800d0c8:	440b      	add	r3, r1
 800d0ca:	761a      	strb	r2, [r3, #24]
}
 800d0cc:	bf00      	nop
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bc80      	pop	{r7}
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	e000e100 	.word	0xe000e100
 800d0dc:	e000ed00 	.word	0xe000ed00

0800d0e0 <NVIC_EncodePriority>:
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b089      	sub	sp, #36	; 0x24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f003 0307 	and.w	r3, r3, #7
 800d0f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	f1c3 0307 	rsb	r3, r3, #7
 800d0fa:	2b04      	cmp	r3, #4
 800d0fc:	bf28      	it	cs
 800d0fe:	2304      	movcs	r3, #4
 800d100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	3304      	adds	r3, #4
 800d106:	2b06      	cmp	r3, #6
 800d108:	d902      	bls.n	800d110 <NVIC_EncodePriority+0x30>
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	3b03      	subs	r3, #3
 800d10e:	e000      	b.n	800d112 <NVIC_EncodePriority+0x32>
 800d110:	2300      	movs	r3, #0
 800d112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d114:	f04f 32ff 	mov.w	r2, #4294967295
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	fa02 f303 	lsl.w	r3, r2, r3
 800d11e:	43da      	mvns	r2, r3
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	401a      	ands	r2, r3
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d128:	f04f 31ff 	mov.w	r1, #4294967295
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	fa01 f303 	lsl.w	r3, r1, r3
 800d132:	43d9      	mvns	r1, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d138:	4313      	orrs	r3, r2
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3724      	adds	r7, #36	; 0x24
 800d13e:	46bd      	mov	sp, r7
 800d140:	bc80      	pop	{r7}
 800d142:	4770      	bx	lr

0800d144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	3b01      	subs	r3, #1
 800d150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d154:	d301      	bcc.n	800d15a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d156:	2301      	movs	r3, #1
 800d158:	e00f      	b.n	800d17a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d15a:	4a0a      	ldr	r2, [pc, #40]	; (800d184 <SysTick_Config+0x40>)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	3b01      	subs	r3, #1
 800d160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d162:	210f      	movs	r1, #15
 800d164:	f04f 30ff 	mov.w	r0, #4294967295
 800d168:	f7ff ff90 	bl	800d08c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d16c:	4b05      	ldr	r3, [pc, #20]	; (800d184 <SysTick_Config+0x40>)
 800d16e:	2200      	movs	r2, #0
 800d170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d172:	4b04      	ldr	r3, [pc, #16]	; (800d184 <SysTick_Config+0x40>)
 800d174:	2207      	movs	r2, #7
 800d176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	e000e010 	.word	0xe000e010

0800d188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff ff09 	bl	800cfa8 <__NVIC_SetPriorityGrouping>
}
 800d196:	bf00      	nop
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b086      	sub	sp, #24
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	60b9      	str	r1, [r7, #8]
 800d1a8:	607a      	str	r2, [r7, #4]
 800d1aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d1b0:	f7ff ff1e 	bl	800cff0 <__NVIC_GetPriorityGrouping>
 800d1b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	68b9      	ldr	r1, [r7, #8]
 800d1ba:	6978      	ldr	r0, [r7, #20]
 800d1bc:	f7ff ff90 	bl	800d0e0 <NVIC_EncodePriority>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1c6:	4611      	mov	r1, r2
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7ff ff5f 	bl	800d08c <__NVIC_SetPriority>
}
 800d1ce:	bf00      	nop
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b082      	sub	sp, #8
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	4603      	mov	r3, r0
 800d1de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d1e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7ff ff11 	bl	800d00c <__NVIC_EnableIRQ>
}
 800d1ea:	bf00      	nop
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d1fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff ff1f 	bl	800d044 <__NVIC_DisableIRQ>
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b082      	sub	sp, #8
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7ff ff94 	bl	800d144 <SysTick_Config>
 800d21c:	4603      	mov	r3, r0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d226:	b480      	push	{r7}
 800d228:	b085      	sub	sp, #20
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d008      	beq.n	800d250 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2204      	movs	r2, #4
 800d242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e022      	b.n	800d296 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f022 020e 	bic.w	r2, r2, #14
 800d25e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f022 0201 	bic.w	r2, r2, #1
 800d26e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d274:	f003 021c 	and.w	r2, r3, #28
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d27c:	2101      	movs	r1, #1
 800d27e:	fa01 f202 	lsl.w	r2, r1, r2
 800d282:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800d294:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bc80      	pop	{r7}
 800d29e:	4770      	bx	lr

0800d2a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d005      	beq.n	800d2c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2204      	movs	r2, #4
 800d2bc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	73fb      	strb	r3, [r7, #15]
 800d2c2:	e029      	b.n	800d318 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f022 020e 	bic.w	r2, r2, #14
 800d2d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f022 0201 	bic.w	r2, r2, #1
 800d2e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e8:	f003 021c 	and.w	r2, r3, #28
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	fa01 f202 	lsl.w	r2, r1, r2
 800d2f6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d003      	beq.n	800d318 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	4798      	blx	r3
    }
  }
  return status;
 800d318:	7bfb      	ldrb	r3, [r7, #15]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
	...

0800d324 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800d32c:	f7ff f998 	bl	800c660 <HAL_GetTick>
 800d330:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800d332:	e010      	b.n	800d356 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33a:	d00c      	beq.n	800d356 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d007      	beq.n	800d352 <FLASH_WaitForLastOperation+0x2e>
 800d342:	f7ff f98d 	bl	800c660 <HAL_GetTick>
 800d346:	4602      	mov	r2, r0
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d201      	bcs.n	800d356 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800d352:	2303      	movs	r3, #3
 800d354:	e03d      	b.n	800d3d2 <FLASH_WaitForLastOperation+0xae>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800d356:	4b21      	ldr	r3, [pc, #132]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	f003 0301 	and.w	r3, r3, #1
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d0e8      	beq.n	800d334 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d362:	4b1e      	ldr	r3, [pc, #120]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	f003 0302 	and.w	r3, r3, #2
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d102      	bne.n	800d374 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d36e:	4b1b      	ldr	r3, [pc, #108]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d370:	2202      	movs	r2, #2
 800d372:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800d374:	4b19      	ldr	r3, [pc, #100]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d37c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d380:	d022      	beq.n	800d3c8 <FLASH_WaitForLastOperation+0xa4>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800d382:	4b16      	ldr	r3, [pc, #88]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d384:	699b      	ldr	r3, [r3, #24]
 800d386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800d38a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d38e:	d01b      	beq.n	800d3c8 <FLASH_WaitForLastOperation+0xa4>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 800d390:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800d398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d39c:	d014      	beq.n	800d3c8 <FLASH_WaitForLastOperation+0xa4>
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 800d39e:	4b0f      	ldr	r3, [pc, #60]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 800d3a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3aa:	d00d      	beq.n	800d3c8 <FLASH_WaitForLastOperation+0xa4>
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800d3ac:	4b0b      	ldr	r3, [pc, #44]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 800d3b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3b8:	d006      	beq.n	800d3c8 <FLASH_WaitForLastOperation+0xa4>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800d3ba:	4b08      	ldr	r3, [pc, #32]	; (800d3dc <FLASH_WaitForLastOperation+0xb8>)
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800d3c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3c6:	d103      	bne.n	800d3d0 <FLASH_WaitForLastOperation+0xac>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800d3c8:	f000 f80a 	bl	800d3e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e000      	b.n	800d3d2 <FLASH_WaitForLastOperation+0xae>
  }

  /* There is no error flag set */
  return HAL_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	40023c00 	.word	0x40023c00

0800d3e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800d3ea:	4b37      	ldr	r3, [pc, #220]	; (800d4c8 <FLASH_SetErrorCode+0xe8>)
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3f6:	d109      	bne.n	800d40c <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d3f8:	4b34      	ldr	r3, [pc, #208]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	f043 0302 	orr.w	r3, r3, #2
 800d400:	4a32      	ldr	r2, [pc, #200]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d402:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d40a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800d40c:	4b2e      	ldr	r3, [pc, #184]	; (800d4c8 <FLASH_SetErrorCode+0xe8>)
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d418:	d109      	bne.n	800d42e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800d41a:	4b2c      	ldr	r3, [pc, #176]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	f043 0301 	orr.w	r3, r3, #1
 800d422:	4a2a      	ldr	r2, [pc, #168]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d424:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d42c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800d42e:	4b26      	ldr	r3, [pc, #152]	; (800d4c8 <FLASH_SetErrorCode+0xe8>)
 800d430:	699b      	ldr	r3, [r3, #24]
 800d432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d43a:	d109      	bne.n	800d450 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800d43c:	4b23      	ldr	r3, [pc, #140]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	f043 0304 	orr.w	r3, r3, #4
 800d444:	4a21      	ldr	r2, [pc, #132]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d446:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d44e:	607b      	str	r3, [r7, #4]
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800d450:	4b1d      	ldr	r3, [pc, #116]	; (800d4c8 <FLASH_SetErrorCode+0xe8>)
 800d452:	699b      	ldr	r3, [r3, #24]
 800d454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d45c:	d109      	bne.n	800d472 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800d45e:	4b1b      	ldr	r3, [pc, #108]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d460:	695b      	ldr	r3, [r3, #20]
 800d462:	f043 0310 	orr.w	r3, r3, #16
 800d466:	4a19      	ldr	r2, [pc, #100]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d468:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_RDERR;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d470:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 800d472:	4b15      	ldr	r3, [pc, #84]	; (800d4c8 <FLASH_SetErrorCode+0xe8>)
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d47e:	d109      	bne.n	800d494 <FLASH_SetErrorCode+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 800d480:	4b12      	ldr	r3, [pc, #72]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d482:	695b      	ldr	r3, [r3, #20]
 800d484:	f043 0320 	orr.w	r3, r3, #32
 800d488:	4a10      	ldr	r2, [pc, #64]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d48a:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d492:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800d494:	4b0c      	ldr	r3, [pc, #48]	; (800d4c8 <FLASH_SetErrorCode+0xe8>)
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d49c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4a0:	d109      	bne.n	800d4b6 <FLASH_SetErrorCode+0xd6>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800d4a2:	4b0a      	ldr	r3, [pc, #40]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	f043 0308 	orr.w	r3, r3, #8
 800d4aa:	4a08      	ldr	r2, [pc, #32]	; (800d4cc <FLASH_SetErrorCode+0xec>)
 800d4ac:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d4b4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d4b6:	4a04      	ldr	r2, [pc, #16]	; (800d4c8 <FLASH_SetErrorCode+0xe8>)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6193      	str	r3, [r2, #24]
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bc80      	pop	{r7}
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	40023c00 	.word	0x40023c00
 800d4cc:	2000444c 	.word	0x2000444c

0800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d4d4:	4b09      	ldr	r3, [pc, #36]	; (800d4fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d007      	beq.n	800d4f0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800d4e0:	4b06      	ldr	r3, [pc, #24]	; (800d4fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800d4e2:	4a07      	ldr	r2, [pc, #28]	; (800d500 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800d4e4:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800d4e6:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800d4e8:	4a06      	ldr	r2, [pc, #24]	; (800d504 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 800d4ea:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e000      	b.n	800d4f2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 800d4f0:	2301      	movs	r3, #1
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bc80      	pop	{r7}
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	40023c00 	.word	0x40023c00
 800d500:	89abcdef 	.word	0x89abcdef
 800d504:	02030405 	.word	0x02030405

0800d508 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800d508:	b480      	push	{r7}
 800d50a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800d50c:	4b05      	ldr	r3, [pc, #20]	; (800d524 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	4a04      	ldr	r2, [pc, #16]	; (800d524 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 800d512:	f043 0301 	orr.w	r3, r3, #1
 800d516:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bc80      	pop	{r7}
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	40023c00 	.word	0x40023c00

0800d528 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d534:	2301      	movs	r3, #1
 800d536:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d538:	4b31      	ldr	r3, [pc, #196]	; (800d600 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800d53a:	7c1b      	ldrb	r3, [r3, #16]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d101      	bne.n	800d544 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 800d540:	2302      	movs	r3, #2
 800d542:	e058      	b.n	800d5f6 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 800d544:	4b2e      	ldr	r3, [pc, #184]	; (800d600 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800d546:	2201      	movs	r2, #1
 800d548:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d54a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d54e:	f7ff fee9 	bl	800d324 <FLASH_WaitForLastOperation>
 800d552:	4603      	mov	r3, r0
 800d554:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d556:	7dfb      	ldrb	r3, [r7, #23]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d148      	bne.n	800d5ee <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d55c:	4b28      	ldr	r3, [pc, #160]	; (800d600 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800d55e:	2200      	movs	r2, #0
 800d560:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2b02      	cmp	r3, #2
 800d566:	d106      	bne.n	800d576 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 800d568:	6879      	ldr	r1, [r7, #4]
 800d56a:	68b8      	ldr	r0, [r7, #8]
 800d56c:	f000 f8fe 	bl	800d76c <FLASH_DATAEEPROM_ProgramWord>
 800d570:	4603      	mov	r3, r0
 800d572:	75fb      	strb	r3, [r7, #23]
 800d574:	e03b      	b.n	800d5ee <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d108      	bne.n	800d58e <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	b29b      	uxth	r3, r3
 800d580:	4619      	mov	r1, r3
 800d582:	68b8      	ldr	r0, [r7, #8]
 800d584:	f000 f8d3 	bl	800d72e <FLASH_DATAEEPROM_ProgramHalfWord>
 800d588:	4603      	mov	r3, r0
 800d58a:	75fb      	strb	r3, [r7, #23]
 800d58c:	e02f      	b.n	800d5ee <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d108      	bne.n	800d5a6 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	b2db      	uxtb	r3, r3
 800d598:	4619      	mov	r1, r3
 800d59a:	68b8      	ldr	r0, [r7, #8]
 800d59c:	f000 f8a8 	bl	800d6f0 <FLASH_DATAEEPROM_ProgramByte>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	75fb      	strb	r3, [r7, #23]
 800d5a4:	e023      	b.n	800d5ee <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	d108      	bne.n	800d5be <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	68b8      	ldr	r0, [r7, #8]
 800d5b4:	f000 f826 	bl	800d604 <FLASH_DATAEEPROM_FastProgramByte>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	75fb      	strb	r3, [r7, #23]
 800d5bc:	e017      	b.n	800d5ee <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b08      	cmp	r3, #8
 800d5c2:	d108      	bne.n	800d5d6 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	68b8      	ldr	r0, [r7, #8]
 800d5cc:	f000 f842 	bl	800d654 <FLASH_DATAEEPROM_FastProgramHalfWord>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	75fb      	strb	r3, [r7, #23]
 800d5d4:	e00b      	b.n	800d5ee <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2b10      	cmp	r3, #16
 800d5da:	d106      	bne.n	800d5ea <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	68b8      	ldr	r0, [r7, #8]
 800d5e0:	f000 f860 	bl	800d6a4 <FLASH_DATAEEPROM_FastProgramWord>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	75fb      	strb	r3, [r7, #23]
 800d5e8:	e001      	b.n	800d5ee <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d5ee:	4b04      	ldr	r3, [pc, #16]	; (800d600 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	741a      	strb	r2, [r3, #16]

  return status;
 800d5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	2000444c 	.word	0x2000444c

0800d604 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	460b      	mov	r3, r1
 800d60e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800d610:	2300      	movs	r3, #0
 800d612:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d614:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d618:	f7ff fe84 	bl	800d324 <FLASH_WaitForLastOperation>
 800d61c:	4603      	mov	r3, r0
 800d61e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10e      	bne.n	800d644 <FLASH_DATAEEPROM_FastProgramByte+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800d626:	4b0a      	ldr	r3, [pc, #40]	; (800d650 <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	4a09      	ldr	r2, [pc, #36]	; (800d650 <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 800d62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d630:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /*!Cat1*/
    /* If the previous operation is completed, proceed to write the new Data */
    *(__IO uint8_t *)Address = Data;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	78fa      	ldrb	r2, [r7, #3]
 800d636:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d638:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d63c:	f7ff fe72 	bl	800d324 <FLASH_WaitForLastOperation>
 800d640:	4603      	mov	r3, r0
 800d642:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800d644:	7bfb      	ldrb	r3, [r7, #15]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	40023c00 	.word	0x40023c00

0800d654 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	460b      	mov	r3, r1
 800d65e:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d664:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d668:	f7ff fe5c 	bl	800d324 <FLASH_WaitForLastOperation>
 800d66c:	4603      	mov	r3, r0
 800d66e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10e      	bne.n	800d694 <FLASH_DATAEEPROM_FastProgramHalfWord+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800d676:	4b0a      	ldr	r3, [pc, #40]	; (800d6a0 <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	4a09      	ldr	r2, [pc, #36]	; (800d6a0 <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 800d67c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d680:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* !Cat1 */
    /* If the previous operation is completed, proceed to write the new data */
    *(__IO uint16_t *)Address = Data;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	887a      	ldrh	r2, [r7, #2]
 800d686:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d688:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d68c:	f7ff fe4a 	bl	800d324 <FLASH_WaitForLastOperation>
 800d690:	4603      	mov	r3, r0
 800d692:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800d694:	7bfb      	ldrb	r3, [r7, #15]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	40023c00 	.word	0x40023c00

0800d6a4 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d6b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d6b6:	f7ff fe35 	bl	800d324 <FLASH_WaitForLastOperation>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d6be:	7bfb      	ldrb	r3, [r7, #15]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10e      	bne.n	800d6e2 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800d6c4:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	4a08      	ldr	r2, [pc, #32]	; (800d6ec <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800d6ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6ce:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	683a      	ldr	r2, [r7, #0]
 800d6d4:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d6d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d6da:	f7ff fe23 	bl	800d324 <FLASH_WaitForLastOperation>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800d6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	40023c00 	.word	0x40023c00

0800d6f0 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d700:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d704:	f7ff fe0e 	bl	800d324 <FLASH_WaitForLastOperation>
 800d708:	4603      	mov	r3, r0
 800d70a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d108      	bne.n	800d724 <FLASH_DATAEEPROM_ProgramByte+0x34>
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint8_t *)Address = Data;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d718:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d71c:	f7ff fe02 	bl	800d324 <FLASH_WaitForLastOperation>
 800d720:	4603      	mov	r3, r0
 800d722:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800d724:	7bfb      	ldrb	r3, [r7, #15]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b084      	sub	sp, #16
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
 800d736:	460b      	mov	r3, r1
 800d738:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d73a:	2300      	movs	r3, #0
 800d73c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d73e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d742:	f7ff fdef 	bl	800d324 <FLASH_WaitForLastOperation>
 800d746:	4603      	mov	r3, r0
 800d748:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d74a:	7bfb      	ldrb	r3, [r7, #15]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d108      	bne.n	800d762 <FLASH_DATAEEPROM_ProgramHalfWord+0x34>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint16_t *)Address = Data;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	887a      	ldrh	r2, [r7, #2]
 800d754:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d756:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d75a:	f7ff fde3 	bl	800d324 <FLASH_WaitForLastOperation>
 800d75e:	4603      	mov	r3, r0
 800d760:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800d762:	7bfb      	ldrb	r3, [r7, #15]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d77a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d77e:	f7ff fdd1 	bl	800d324 <FLASH_WaitForLastOperation>
 800d782:	4603      	mov	r3, r0
 800d784:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d786:	7bfb      	ldrb	r3, [r7, #15]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d108      	bne.n	800d79e <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d792:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d796:	f7ff fdc5 	bl	800d324 <FLASH_WaitForLastOperation>
 800d79a:	4603      	mov	r3, r0
 800d79c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800d7be:	e154      	b.n	800da6a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	2101      	movs	r1, #1
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 8146 	beq.w	800da64 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	f003 0303 	and.w	r3, r3, #3
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d005      	beq.n	800d7f0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d130      	bne.n	800d852 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	005b      	lsls	r3, r3, #1
 800d7fa:	2203      	movs	r2, #3
 800d7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d800:	43db      	mvns	r3, r3
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	4013      	ands	r3, r2
 800d806:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	fa02 f303 	lsl.w	r3, r2, r3
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	4313      	orrs	r3, r2
 800d818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800d826:	2201      	movs	r2, #1
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	fa02 f303 	lsl.w	r3, r2, r3
 800d82e:	43db      	mvns	r3, r3
 800d830:	693a      	ldr	r2, [r7, #16]
 800d832:	4013      	ands	r3, r2
 800d834:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	091b      	lsrs	r3, r3, #4
 800d83c:	f003 0201 	and.w	r2, r3, #1
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	fa02 f303 	lsl.w	r3, r2, r3
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	4313      	orrs	r3, r2
 800d84a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	f003 0303 	and.w	r3, r3, #3
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d017      	beq.n	800d88e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	2203      	movs	r2, #3
 800d86a:	fa02 f303 	lsl.w	r3, r2, r3
 800d86e:	43db      	mvns	r3, r3
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	4013      	ands	r3, r2
 800d874:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	689a      	ldr	r2, [r3, #8]
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	fa02 f303 	lsl.w	r3, r2, r3
 800d882:	693a      	ldr	r2, [r7, #16]
 800d884:	4313      	orrs	r3, r2
 800d886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	693a      	ldr	r2, [r7, #16]
 800d88c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	f003 0303 	and.w	r3, r3, #3
 800d896:	2b02      	cmp	r3, #2
 800d898:	d123      	bne.n	800d8e2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	08da      	lsrs	r2, r3, #3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	3208      	adds	r2, #8
 800d8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	f003 0307 	and.w	r3, r3, #7
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	220f      	movs	r2, #15
 800d8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b6:	43db      	mvns	r3, r3
 800d8b8:	693a      	ldr	r2, [r7, #16]
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	691a      	ldr	r2, [r3, #16]
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f003 0307 	and.w	r3, r3, #7
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ce:	693a      	ldr	r2, [r7, #16]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	08da      	lsrs	r2, r3, #3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	3208      	adds	r2, #8
 800d8dc:	6939      	ldr	r1, [r7, #16]
 800d8de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	005b      	lsls	r3, r3, #1
 800d8ec:	2203      	movs	r2, #3
 800d8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f2:	43db      	mvns	r3, r3
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	f003 0203 	and.w	r2, r3, #3
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	005b      	lsls	r3, r3, #1
 800d906:	fa02 f303 	lsl.w	r3, r2, r3
 800d90a:	693a      	ldr	r2, [r7, #16]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	693a      	ldr	r2, [r7, #16]
 800d914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 80a0 	beq.w	800da64 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d924:	4b58      	ldr	r3, [pc, #352]	; (800da88 <HAL_GPIO_Init+0x2e0>)
 800d926:	6a1b      	ldr	r3, [r3, #32]
 800d928:	4a57      	ldr	r2, [pc, #348]	; (800da88 <HAL_GPIO_Init+0x2e0>)
 800d92a:	f043 0301 	orr.w	r3, r3, #1
 800d92e:	6213      	str	r3, [r2, #32]
 800d930:	4b55      	ldr	r3, [pc, #340]	; (800da88 <HAL_GPIO_Init+0x2e0>)
 800d932:	6a1b      	ldr	r3, [r3, #32]
 800d934:	f003 0301 	and.w	r3, r3, #1
 800d938:	60bb      	str	r3, [r7, #8]
 800d93a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800d93c:	4a53      	ldr	r2, [pc, #332]	; (800da8c <HAL_GPIO_Init+0x2e4>)
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	089b      	lsrs	r3, r3, #2
 800d942:	3302      	adds	r3, #2
 800d944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f003 0303 	and.w	r3, r3, #3
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	220f      	movs	r2, #15
 800d954:	fa02 f303 	lsl.w	r3, r2, r3
 800d958:	43db      	mvns	r3, r3
 800d95a:	693a      	ldr	r2, [r7, #16]
 800d95c:	4013      	ands	r3, r2
 800d95e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4a4b      	ldr	r2, [pc, #300]	; (800da90 <HAL_GPIO_Init+0x2e8>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d019      	beq.n	800d99c <HAL_GPIO_Init+0x1f4>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4a4a      	ldr	r2, [pc, #296]	; (800da94 <HAL_GPIO_Init+0x2ec>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d013      	beq.n	800d998 <HAL_GPIO_Init+0x1f0>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	4a49      	ldr	r2, [pc, #292]	; (800da98 <HAL_GPIO_Init+0x2f0>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d00d      	beq.n	800d994 <HAL_GPIO_Init+0x1ec>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4a48      	ldr	r2, [pc, #288]	; (800da9c <HAL_GPIO_Init+0x2f4>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d007      	beq.n	800d990 <HAL_GPIO_Init+0x1e8>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a47      	ldr	r2, [pc, #284]	; (800daa0 <HAL_GPIO_Init+0x2f8>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d101      	bne.n	800d98c <HAL_GPIO_Init+0x1e4>
 800d988:	2304      	movs	r3, #4
 800d98a:	e008      	b.n	800d99e <HAL_GPIO_Init+0x1f6>
 800d98c:	2305      	movs	r3, #5
 800d98e:	e006      	b.n	800d99e <HAL_GPIO_Init+0x1f6>
 800d990:	2303      	movs	r3, #3
 800d992:	e004      	b.n	800d99e <HAL_GPIO_Init+0x1f6>
 800d994:	2302      	movs	r3, #2
 800d996:	e002      	b.n	800d99e <HAL_GPIO_Init+0x1f6>
 800d998:	2301      	movs	r3, #1
 800d99a:	e000      	b.n	800d99e <HAL_GPIO_Init+0x1f6>
 800d99c:	2300      	movs	r3, #0
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	f002 0203 	and.w	r2, r2, #3
 800d9a4:	0092      	lsls	r2, r2, #2
 800d9a6:	4093      	lsls	r3, r2
 800d9a8:	693a      	ldr	r2, [r7, #16]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d9ae:	4937      	ldr	r1, [pc, #220]	; (800da8c <HAL_GPIO_Init+0x2e4>)
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	089b      	lsrs	r3, r3, #2
 800d9b4:	3302      	adds	r3, #2
 800d9b6:	693a      	ldr	r2, [r7, #16]
 800d9b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d9bc:	4b39      	ldr	r3, [pc, #228]	; (800daa4 <HAL_GPIO_Init+0x2fc>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	43db      	mvns	r3, r3
 800d9c6:	693a      	ldr	r2, [r7, #16]
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d003      	beq.n	800d9e0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800d9e0:	4a30      	ldr	r2, [pc, #192]	; (800daa4 <HAL_GPIO_Init+0x2fc>)
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d9e6:	4b2f      	ldr	r3, [pc, #188]	; (800daa4 <HAL_GPIO_Init+0x2fc>)
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	43db      	mvns	r3, r3
 800d9f0:	693a      	ldr	r2, [r7, #16]
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	4313      	orrs	r3, r2
 800da08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800da0a:	4a26      	ldr	r2, [pc, #152]	; (800daa4 <HAL_GPIO_Init+0x2fc>)
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800da10:	4b24      	ldr	r3, [pc, #144]	; (800daa4 <HAL_GPIO_Init+0x2fc>)
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	43db      	mvns	r3, r3
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	4013      	ands	r3, r2
 800da1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d003      	beq.n	800da34 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	4313      	orrs	r3, r2
 800da32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800da34:	4a1b      	ldr	r2, [pc, #108]	; (800daa4 <HAL_GPIO_Init+0x2fc>)
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800da3a:	4b1a      	ldr	r3, [pc, #104]	; (800daa4 <HAL_GPIO_Init+0x2fc>)
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	43db      	mvns	r3, r3
 800da44:	693a      	ldr	r2, [r7, #16]
 800da46:	4013      	ands	r3, r2
 800da48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da52:	2b00      	cmp	r3, #0
 800da54:	d003      	beq.n	800da5e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800da5e:	4a11      	ldr	r2, [pc, #68]	; (800daa4 <HAL_GPIO_Init+0x2fc>)
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	3301      	adds	r3, #1
 800da68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	fa22 f303 	lsr.w	r3, r2, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	f47f aea3 	bne.w	800d7c0 <HAL_GPIO_Init+0x18>
  }
}
 800da7a:	bf00      	nop
 800da7c:	bf00      	nop
 800da7e:	371c      	adds	r7, #28
 800da80:	46bd      	mov	sp, r7
 800da82:	bc80      	pop	{r7}
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	40023800 	.word	0x40023800
 800da8c:	40010000 	.word	0x40010000
 800da90:	40020000 	.word	0x40020000
 800da94:	40020400 	.word	0x40020400
 800da98:	40020800 	.word	0x40020800
 800da9c:	40020c00 	.word	0x40020c00
 800daa0:	40021000 	.word	0x40021000
 800daa4:	40010400 	.word	0x40010400

0800daa8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800dab6:	2300      	movs	r3, #0
 800dab8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800daba:	2300      	movs	r3, #0
 800dabc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800dabe:	e0b8      	b.n	800dc32 <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800dac0:	2201      	movs	r2, #1
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	fa02 f303 	lsl.w	r3, r2, r3
 800dac8:	683a      	ldr	r2, [r7, #0]
 800daca:	4013      	ands	r3, r2
 800dacc:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f000 80ab 	beq.w	800dc2c <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800dad6:	4a5d      	ldr	r2, [pc, #372]	; (800dc4c <HAL_GPIO_DeInit+0x1a4>)
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	089b      	lsrs	r3, r3, #2
 800dadc:	3302      	adds	r3, #2
 800dade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dae2:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f003 0303 	and.w	r3, r3, #3
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	220f      	movs	r2, #15
 800daee:	fa02 f303 	lsl.w	r3, r2, r3
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	4013      	ands	r3, r2
 800daf6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a55      	ldr	r2, [pc, #340]	; (800dc50 <HAL_GPIO_DeInit+0x1a8>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d019      	beq.n	800db34 <HAL_GPIO_DeInit+0x8c>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a54      	ldr	r2, [pc, #336]	; (800dc54 <HAL_GPIO_DeInit+0x1ac>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d013      	beq.n	800db30 <HAL_GPIO_DeInit+0x88>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a53      	ldr	r2, [pc, #332]	; (800dc58 <HAL_GPIO_DeInit+0x1b0>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d00d      	beq.n	800db2c <HAL_GPIO_DeInit+0x84>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a52      	ldr	r2, [pc, #328]	; (800dc5c <HAL_GPIO_DeInit+0x1b4>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d007      	beq.n	800db28 <HAL_GPIO_DeInit+0x80>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a51      	ldr	r2, [pc, #324]	; (800dc60 <HAL_GPIO_DeInit+0x1b8>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d101      	bne.n	800db24 <HAL_GPIO_DeInit+0x7c>
 800db20:	2304      	movs	r3, #4
 800db22:	e008      	b.n	800db36 <HAL_GPIO_DeInit+0x8e>
 800db24:	2305      	movs	r3, #5
 800db26:	e006      	b.n	800db36 <HAL_GPIO_DeInit+0x8e>
 800db28:	2303      	movs	r3, #3
 800db2a:	e004      	b.n	800db36 <HAL_GPIO_DeInit+0x8e>
 800db2c:	2302      	movs	r3, #2
 800db2e:	e002      	b.n	800db36 <HAL_GPIO_DeInit+0x8e>
 800db30:	2301      	movs	r3, #1
 800db32:	e000      	b.n	800db36 <HAL_GPIO_DeInit+0x8e>
 800db34:	2300      	movs	r3, #0
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	f002 0203 	and.w	r2, r2, #3
 800db3c:	0092      	lsls	r2, r2, #2
 800db3e:	4093      	lsls	r3, r2
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	429a      	cmp	r2, r3
 800db44:	d132      	bne.n	800dbac <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800db46:	4b47      	ldr	r3, [pc, #284]	; (800dc64 <HAL_GPIO_DeInit+0x1bc>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	43db      	mvns	r3, r3
 800db4e:	4945      	ldr	r1, [pc, #276]	; (800dc64 <HAL_GPIO_DeInit+0x1bc>)
 800db50:	4013      	ands	r3, r2
 800db52:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800db54:	4b43      	ldr	r3, [pc, #268]	; (800dc64 <HAL_GPIO_DeInit+0x1bc>)
 800db56:	685a      	ldr	r2, [r3, #4]
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	43db      	mvns	r3, r3
 800db5c:	4941      	ldr	r1, [pc, #260]	; (800dc64 <HAL_GPIO_DeInit+0x1bc>)
 800db5e:	4013      	ands	r3, r2
 800db60:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800db62:	4b40      	ldr	r3, [pc, #256]	; (800dc64 <HAL_GPIO_DeInit+0x1bc>)
 800db64:	689a      	ldr	r2, [r3, #8]
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	43db      	mvns	r3, r3
 800db6a:	493e      	ldr	r1, [pc, #248]	; (800dc64 <HAL_GPIO_DeInit+0x1bc>)
 800db6c:	4013      	ands	r3, r2
 800db6e:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800db70:	4b3c      	ldr	r3, [pc, #240]	; (800dc64 <HAL_GPIO_DeInit+0x1bc>)
 800db72:	68da      	ldr	r2, [r3, #12]
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	43db      	mvns	r3, r3
 800db78:	493a      	ldr	r1, [pc, #232]	; (800dc64 <HAL_GPIO_DeInit+0x1bc>)
 800db7a:	4013      	ands	r3, r2
 800db7c:	60cb      	str	r3, [r1, #12]

        tmp = (0x0FU) << (4 * (position & 0x03));
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	f003 0303 	and.w	r3, r3, #3
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	220f      	movs	r2, #15
 800db88:	fa02 f303 	lsl.w	r3, r2, r3
 800db8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800db8e:	4a2f      	ldr	r2, [pc, #188]	; (800dc4c <HAL_GPIO_DeInit+0x1a4>)
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	089b      	lsrs	r3, r3, #2
 800db94:	3302      	adds	r3, #2
 800db96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	43da      	mvns	r2, r3
 800db9e:	482b      	ldr	r0, [pc, #172]	; (800dc4c <HAL_GPIO_DeInit+0x1a4>)
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	089b      	lsrs	r3, r3, #2
 800dba4:	400a      	ands	r2, r1
 800dba6:	3302      	adds	r3, #2
 800dba8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	005b      	lsls	r3, r3, #1
 800dbb4:	2103      	movs	r1, #3
 800dbb6:	fa01 f303 	lsl.w	r3, r1, r3
 800dbba:	43db      	mvns	r3, r3
 800dbbc:	401a      	ands	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	08da      	lsrs	r2, r3, #3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	3208      	adds	r2, #8
 800dbca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	f003 0307 	and.w	r3, r3, #7
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	220f      	movs	r2, #15
 800dbd8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbdc:	43db      	mvns	r3, r3
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	08d2      	lsrs	r2, r2, #3
 800dbe2:	4019      	ands	r1, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	3208      	adds	r2, #8
 800dbe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68da      	ldr	r2, [r3, #12]
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	2103      	movs	r1, #3
 800dbf6:	fa01 f303 	lsl.w	r3, r1, r3
 800dbfa:	43db      	mvns	r3, r3
 800dbfc:	401a      	ands	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	685a      	ldr	r2, [r3, #4]
 800dc06:	2101      	movs	r1, #1
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc0e:	43db      	mvns	r3, r3
 800dc10:	401a      	ands	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	689a      	ldr	r2, [r3, #8]
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	005b      	lsls	r3, r3, #1
 800dc1e:	2103      	movs	r1, #3
 800dc20:	fa01 f303 	lsl.w	r3, r1, r3
 800dc24:	43db      	mvns	r3, r3
 800dc26:	401a      	ands	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	609a      	str	r2, [r3, #8]
    }

    position++;
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800dc32:	683a      	ldr	r2, [r7, #0]
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	fa22 f303 	lsr.w	r3, r2, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f47f af40 	bne.w	800dac0 <HAL_GPIO_DeInit+0x18>
  }
}
 800dc40:	bf00      	nop
 800dc42:	bf00      	nop
 800dc44:	371c      	adds	r7, #28
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bc80      	pop	{r7}
 800dc4a:	4770      	bx	lr
 800dc4c:	40010000 	.word	0x40010000
 800dc50:	40020000 	.word	0x40020000
 800dc54:	40020400 	.word	0x40020400
 800dc58:	40020800 	.word	0x40020800
 800dc5c:	40020c00 	.word	0x40020c00
 800dc60:	40021000 	.word	0x40021000
 800dc64:	40010400 	.word	0x40010400

0800dc68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b085      	sub	sp, #20
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	460b      	mov	r3, r1
 800dc72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	691a      	ldr	r2, [r3, #16]
 800dc78:	887b      	ldrh	r3, [r7, #2]
 800dc7a:	4013      	ands	r3, r2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dc80:	2301      	movs	r3, #1
 800dc82:	73fb      	strb	r3, [r7, #15]
 800dc84:	e001      	b.n	800dc8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dc86:	2300      	movs	r3, #0
 800dc88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bc80      	pop	{r7}
 800dc94:	4770      	bx	lr

0800dc96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dc96:	b480      	push	{r7}
 800dc98:	b083      	sub	sp, #12
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	807b      	strh	r3, [r7, #2]
 800dca2:	4613      	mov	r3, r2
 800dca4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dca6:	787b      	ldrb	r3, [r7, #1]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d003      	beq.n	800dcb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800dcac:	887a      	ldrh	r2, [r7, #2]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800dcb2:	e003      	b.n	800dcbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800dcb4:	887b      	ldrh	r3, [r7, #2]
 800dcb6:	041a      	lsls	r2, r3, #16
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	619a      	str	r2, [r3, #24]
}
 800dcbc:	bf00      	nop
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bc80      	pop	{r7}
 800dcc4:	4770      	bx	lr
	...

0800dcc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800dcd2:	4b08      	ldr	r3, [pc, #32]	; (800dcf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800dcd4:	695a      	ldr	r2, [r3, #20]
 800dcd6:	88fb      	ldrh	r3, [r7, #6]
 800dcd8:	4013      	ands	r3, r2
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d006      	beq.n	800dcec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dcde:	4a05      	ldr	r2, [pc, #20]	; (800dcf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dce4:	88fb      	ldrh	r3, [r7, #6]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f004 fac4 	bl	8012274 <HAL_GPIO_EXTI_Callback>
  }
}
 800dcec:	bf00      	nop
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	40010400 	.word	0x40010400

0800dcf8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 800dd04:	4b10      	ldr	r3, [pc, #64]	; (800dd48 <HAL_PWR_EnterSTOPMode+0x50>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f023 0203 	bic.w	r2, r3, #3
 800dd0c:	490e      	ldr	r1, [pc, #56]	; (800dd48 <HAL_PWR_EnterSTOPMode+0x50>)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800dd14:	4b0d      	ldr	r3, [pc, #52]	; (800dd4c <HAL_PWR_EnterSTOPMode+0x54>)
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	4a0c      	ldr	r2, [pc, #48]	; (800dd4c <HAL_PWR_EnterSTOPMode+0x54>)
 800dd1a:	f043 0304 	orr.w	r3, r3, #4
 800dd1e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800dd20:	78fb      	ldrb	r3, [r7, #3]
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d101      	bne.n	800dd2a <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800dd26:	bf30      	wfi
 800dd28:	e002      	b.n	800dd30 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800dd2a:	bf40      	sev
    __WFE();
 800dd2c:	bf20      	wfe
    __WFE();
 800dd2e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800dd30:	4b06      	ldr	r3, [pc, #24]	; (800dd4c <HAL_PWR_EnterSTOPMode+0x54>)
 800dd32:	691b      	ldr	r3, [r3, #16]
 800dd34:	4a05      	ldr	r2, [pc, #20]	; (800dd4c <HAL_PWR_EnterSTOPMode+0x54>)
 800dd36:	f023 0304 	bic.w	r3, r3, #4
 800dd3a:	6113      	str	r3, [r2, #16]
}
 800dd3c:	bf00      	nop
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bc80      	pop	{r7}
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	40007000 	.word	0x40007000
 800dd4c:	e000ed00 	.word	0xe000ed00

0800dd50 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Set MSIClockRange, HSITRIM and MSITRIM bits to the reset values */
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 800dd56:	4b3f      	ldr	r3, [pc, #252]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800dd5e:	4a3d      	ldr	r2, [pc, #244]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800dd60:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 800dd64:	6053      	str	r3, [r2, #4]
            ((RCC_MSICALIBRATION_DEFAULT << RCC_ICSCR_MSITRIM_Pos) | (RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos) | RCC_ICSCR_MSIRANGE_5));

  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800dd66:	4b3b      	ldr	r3, [pc, #236]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a3a      	ldr	r2, [pc, #232]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800dd6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd70:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd72:	f7fe fc75 	bl	800c660 <HAL_GetTick>
 800dd76:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800dd78:	e008      	b.n	800dd8c <HAL_RCC_DeInit+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800dd7a:	f7fe fc71 	bl	800c660 <HAL_GetTick>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d901      	bls.n	800dd8c <HAL_RCC_DeInit+0x3c>
    {
      return HAL_TIMEOUT;
 800dd88:	2303      	movs	r3, #3
 800dd8a:	e05e      	b.n	800de4a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800dd8c:	4b31      	ldr	r3, [pc, #196]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d0f0      	beq.n	800dd7a <HAL_RCC_DeInit+0x2a>
    }
  }

  /* Switch SYSCLK to MSI*/
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 800dd98:	4b2e      	ldr	r3, [pc, #184]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	4a2d      	ldr	r2, [pc, #180]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800dd9e:	f023 0303 	bic.w	r3, r3, #3
 800dda2:	6093      	str	r3, [r2, #8]

  /* Wait till MSI as SYSCLK status is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800dda4:	e00a      	b.n	800ddbc <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dda6:	f7fe fc5b 	bl	800c660 <HAL_GetTick>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d901      	bls.n	800ddbc <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800ddb8:	2303      	movs	r3, #3
 800ddba:	e046      	b.n	800de4a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800ddbc:	4b25      	ldr	r3, [pc, #148]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f003 030c 	and.w	r3, r3, #12
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1ee      	bne.n	800dda6 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 800ddc8:	4b23      	ldr	r3, [pc, #140]	; (800de58 <HAL_RCC_DeInit+0x108>)
 800ddca:	4a24      	ldr	r2, [pc, #144]	; (800de5c <HAL_RCC_DeInit+0x10c>)
 800ddcc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  status = HAL_InitTick(uwTickPrio);
 800ddce:	4b24      	ldr	r3, [pc, #144]	; (800de60 <HAL_RCC_DeInit+0x110>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fe fbf8 	bl	800c5c8 <HAL_InitTick>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	70fb      	strb	r3, [r7, #3]
  if(status != HAL_OK)
 800dddc:	78fb      	ldrb	r3, [r7, #3]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d001      	beq.n	800dde6 <HAL_RCC_DeInit+0x96>
  {
    return status;
 800dde2:	78fb      	ldrb	r3, [r7, #3]
 800dde4:	e031      	b.n	800de4a <HAL_RCC_DeInit+0xfa>
  }

  /* Reset HSION, HSEON, CSSON & PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 800dde6:	4b1b      	ldr	r3, [pc, #108]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a1a      	ldr	r2, [pc, #104]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800ddec:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800ddf0:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800ddf4:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800ddf6:	4b17      	ldr	r3, [pc, #92]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a16      	ldr	r2, [pc, #88]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800ddfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de00:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de02:	f7fe fc2d 	bl	800c660 <HAL_GetTick>
 800de06:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is not ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800de08:	e008      	b.n	800de1c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de0a:	f7fe fc29 	bl	800c660 <HAL_GetTick>
 800de0e:	4602      	mov	r2, r0
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	2b02      	cmp	r3, #2
 800de16:	d901      	bls.n	800de1c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800de18:	2303      	movs	r3, #3
 800de1a:	e016      	b.n	800de4a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800de1c:	4b0d      	ldr	r3, [pc, #52]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de24:	2b00      	cmp	r3, #0
 800de26:	d1f0      	bne.n	800de0a <HAL_RCC_DeInit+0xba>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800de28:	4b0a      	ldr	r3, [pc, #40]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	609a      	str	r2, [r3, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800de2e:	4b09      	ldr	r3, [pc, #36]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800de30:	2200      	movs	r2, #0
 800de32:	60da      	str	r2, [r3, #12]

  /* Clear all flags */
#if defined(RCC_LSECSS_SUPPORT)
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_LSECSSC | RCC_CIR_CSSC);
 800de34:	4b07      	ldr	r3, [pc, #28]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800de36:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800de3a:	60da      	str	r2, [r3, #12]
#else
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_CSSC);
#endif

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800de3c:	4b05      	ldr	r3, [pc, #20]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800de3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de40:	4a04      	ldr	r2, [pc, #16]	; (800de54 <HAL_RCC_DeInit+0x104>)
 800de42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de46:	6353      	str	r3, [r2, #52]	; 0x34

  return HAL_OK;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	40023800 	.word	0x40023800
 800de58:	20000008 	.word	0x20000008
 800de5c:	001fff68 	.word	0x001fff68
 800de60:	20000110 	.word	0x20000110

0800de64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d101      	bne.n	800de76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e31d      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de76:	4b94      	ldr	r3, [pc, #592]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	f003 030c 	and.w	r3, r3, #12
 800de7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800de80:	4b91      	ldr	r3, [pc, #580]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de88:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f003 0301 	and.w	r3, r3, #1
 800de92:	2b00      	cmp	r3, #0
 800de94:	d07b      	beq.n	800df8e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	2b08      	cmp	r3, #8
 800de9a:	d006      	beq.n	800deaa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	2b0c      	cmp	r3, #12
 800dea0:	d10f      	bne.n	800dec2 <HAL_RCC_OscConfig+0x5e>
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dea8:	d10b      	bne.n	800dec2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800deaa:	4b87      	ldr	r3, [pc, #540]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d06a      	beq.n	800df8c <HAL_RCC_OscConfig+0x128>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d166      	bne.n	800df8c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800debe:	2301      	movs	r3, #1
 800dec0:	e2f7      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d106      	bne.n	800ded8 <HAL_RCC_OscConfig+0x74>
 800deca:	4b7f      	ldr	r3, [pc, #508]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a7e      	ldr	r2, [pc, #504]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800ded0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	e02d      	b.n	800df34 <HAL_RCC_OscConfig+0xd0>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10c      	bne.n	800defa <HAL_RCC_OscConfig+0x96>
 800dee0:	4b79      	ldr	r3, [pc, #484]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a78      	ldr	r2, [pc, #480]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800dee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800deea:	6013      	str	r3, [r2, #0]
 800deec:	4b76      	ldr	r3, [pc, #472]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a75      	ldr	r2, [pc, #468]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800def2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800def6:	6013      	str	r3, [r2, #0]
 800def8:	e01c      	b.n	800df34 <HAL_RCC_OscConfig+0xd0>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	2b05      	cmp	r3, #5
 800df00:	d10c      	bne.n	800df1c <HAL_RCC_OscConfig+0xb8>
 800df02:	4b71      	ldr	r3, [pc, #452]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a70      	ldr	r2, [pc, #448]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	4b6e      	ldr	r3, [pc, #440]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a6d      	ldr	r2, [pc, #436]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df18:	6013      	str	r3, [r2, #0]
 800df1a:	e00b      	b.n	800df34 <HAL_RCC_OscConfig+0xd0>
 800df1c:	4b6a      	ldr	r3, [pc, #424]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a69      	ldr	r2, [pc, #420]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df26:	6013      	str	r3, [r2, #0]
 800df28:	4b67      	ldr	r3, [pc, #412]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a66      	ldr	r2, [pc, #408]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d013      	beq.n	800df64 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df3c:	f7fe fb90 	bl	800c660 <HAL_GetTick>
 800df40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df42:	e008      	b.n	800df56 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800df44:	f7fe fb8c 	bl	800c660 <HAL_GetTick>
 800df48:	4602      	mov	r2, r0
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	1ad3      	subs	r3, r2, r3
 800df4e:	2b64      	cmp	r3, #100	; 0x64
 800df50:	d901      	bls.n	800df56 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800df52:	2303      	movs	r3, #3
 800df54:	e2ad      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df56:	4b5c      	ldr	r3, [pc, #368]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d0f0      	beq.n	800df44 <HAL_RCC_OscConfig+0xe0>
 800df62:	e014      	b.n	800df8e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df64:	f7fe fb7c 	bl	800c660 <HAL_GetTick>
 800df68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df6a:	e008      	b.n	800df7e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800df6c:	f7fe fb78 	bl	800c660 <HAL_GetTick>
 800df70:	4602      	mov	r2, r0
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	2b64      	cmp	r3, #100	; 0x64
 800df78:	d901      	bls.n	800df7e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e299      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df7e:	4b52      	ldr	r3, [pc, #328]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df86:	2b00      	cmp	r3, #0
 800df88:	d1f0      	bne.n	800df6c <HAL_RCC_OscConfig+0x108>
 800df8a:	e000      	b.n	800df8e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f003 0302 	and.w	r3, r3, #2
 800df96:	2b00      	cmp	r3, #0
 800df98:	d05a      	beq.n	800e050 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	2b04      	cmp	r3, #4
 800df9e:	d005      	beq.n	800dfac <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	2b0c      	cmp	r3, #12
 800dfa4:	d119      	bne.n	800dfda <HAL_RCC_OscConfig+0x176>
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d116      	bne.n	800dfda <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dfac:	4b46      	ldr	r3, [pc, #280]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f003 0302 	and.w	r3, r3, #2
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d005      	beq.n	800dfc4 <HAL_RCC_OscConfig+0x160>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d001      	beq.n	800dfc4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e276      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dfc4:	4b40      	ldr	r3, [pc, #256]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	021b      	lsls	r3, r3, #8
 800dfd2:	493d      	ldr	r1, [pc, #244]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dfd8:	e03a      	b.n	800e050 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d020      	beq.n	800e024 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dfe2:	4b3a      	ldr	r3, [pc, #232]	; (800e0cc <HAL_RCC_OscConfig+0x268>)
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dfe8:	f7fe fb3a 	bl	800c660 <HAL_GetTick>
 800dfec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dfee:	e008      	b.n	800e002 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dff0:	f7fe fb36 	bl	800c660 <HAL_GetTick>
 800dff4:	4602      	mov	r2, r0
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	2b02      	cmp	r3, #2
 800dffc:	d901      	bls.n	800e002 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800dffe:	2303      	movs	r3, #3
 800e000:	e257      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e002:	4b31      	ldr	r3, [pc, #196]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f003 0302 	and.w	r3, r3, #2
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d0f0      	beq.n	800dff0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e00e:	4b2e      	ldr	r3, [pc, #184]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	021b      	lsls	r3, r3, #8
 800e01c:	492a      	ldr	r1, [pc, #168]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e01e:	4313      	orrs	r3, r2
 800e020:	604b      	str	r3, [r1, #4]
 800e022:	e015      	b.n	800e050 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e024:	4b29      	ldr	r3, [pc, #164]	; (800e0cc <HAL_RCC_OscConfig+0x268>)
 800e026:	2200      	movs	r2, #0
 800e028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e02a:	f7fe fb19 	bl	800c660 <HAL_GetTick>
 800e02e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e030:	e008      	b.n	800e044 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e032:	f7fe fb15 	bl	800c660 <HAL_GetTick>
 800e036:	4602      	mov	r2, r0
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d901      	bls.n	800e044 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800e040:	2303      	movs	r3, #3
 800e042:	e236      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e044:	4b20      	ldr	r3, [pc, #128]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f003 0302 	and.w	r3, r3, #2
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1f0      	bne.n	800e032 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f003 0310 	and.w	r3, r3, #16
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f000 80b8 	beq.w	800e1ce <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d170      	bne.n	800e146 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e064:	4b18      	ldr	r3, [pc, #96]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d005      	beq.n	800e07c <HAL_RCC_OscConfig+0x218>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d101      	bne.n	800e07c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	e21a      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6a1a      	ldr	r2, [r3, #32]
 800e080:	4b11      	ldr	r3, [pc, #68]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e088:	429a      	cmp	r2, r3
 800e08a:	d921      	bls.n	800e0d0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6a1b      	ldr	r3, [r3, #32]
 800e090:	4618      	mov	r0, r3
 800e092:	f000 fc71 	bl	800e978 <RCC_SetFlashLatencyFromMSIRange>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	e208      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e0a0:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a1b      	ldr	r3, [r3, #32]
 800e0ac:	4906      	ldr	r1, [pc, #24]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e0b2:	4b05      	ldr	r3, [pc, #20]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	69db      	ldr	r3, [r3, #28]
 800e0be:	061b      	lsls	r3, r3, #24
 800e0c0:	4901      	ldr	r1, [pc, #4]	; (800e0c8 <HAL_RCC_OscConfig+0x264>)
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	604b      	str	r3, [r1, #4]
 800e0c6:	e020      	b.n	800e10a <HAL_RCC_OscConfig+0x2a6>
 800e0c8:	40023800 	.word	0x40023800
 800e0cc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e0d0:	4ba4      	ldr	r3, [pc, #656]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a1b      	ldr	r3, [r3, #32]
 800e0dc:	49a1      	ldr	r1, [pc, #644]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e0e2:	4ba0      	ldr	r3, [pc, #640]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	69db      	ldr	r3, [r3, #28]
 800e0ee:	061b      	lsls	r3, r3, #24
 800e0f0:	499c      	ldr	r1, [pc, #624]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a1b      	ldr	r3, [r3, #32]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 fc3c 	bl	800e978 <RCC_SetFlashLatencyFromMSIRange>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800e106:	2301      	movs	r3, #1
 800e108:	e1d3      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	0b5b      	lsrs	r3, r3, #13
 800e110:	3301      	adds	r3, #1
 800e112:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e116:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800e11a:	4a92      	ldr	r2, [pc, #584]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e11c:	6892      	ldr	r2, [r2, #8]
 800e11e:	0912      	lsrs	r2, r2, #4
 800e120:	f002 020f 	and.w	r2, r2, #15
 800e124:	4990      	ldr	r1, [pc, #576]	; (800e368 <HAL_RCC_OscConfig+0x504>)
 800e126:	5c8a      	ldrb	r2, [r1, r2]
 800e128:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e12a:	4a90      	ldr	r2, [pc, #576]	; (800e36c <HAL_RCC_OscConfig+0x508>)
 800e12c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800e12e:	4b90      	ldr	r3, [pc, #576]	; (800e370 <HAL_RCC_OscConfig+0x50c>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4618      	mov	r0, r3
 800e134:	f7fe fa48 	bl	800c5c8 <HAL_InitTick>
 800e138:	4603      	mov	r3, r0
 800e13a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800e13c:	7bfb      	ldrb	r3, [r7, #15]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d045      	beq.n	800e1ce <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800e142:	7bfb      	ldrb	r3, [r7, #15]
 800e144:	e1b5      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d029      	beq.n	800e1a2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e14e:	4b89      	ldr	r3, [pc, #548]	; (800e374 <HAL_RCC_OscConfig+0x510>)
 800e150:	2201      	movs	r2, #1
 800e152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e154:	f7fe fa84 	bl	800c660 <HAL_GetTick>
 800e158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e15a:	e008      	b.n	800e16e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e15c:	f7fe fa80 	bl	800c660 <HAL_GetTick>
 800e160:	4602      	mov	r2, r0
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	2b02      	cmp	r3, #2
 800e168:	d901      	bls.n	800e16e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800e16a:	2303      	movs	r3, #3
 800e16c:	e1a1      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e16e:	4b7d      	ldr	r3, [pc, #500]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0f0      	beq.n	800e15c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e17a:	4b7a      	ldr	r3, [pc, #488]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a1b      	ldr	r3, [r3, #32]
 800e186:	4977      	ldr	r1, [pc, #476]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e188:	4313      	orrs	r3, r2
 800e18a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e18c:	4b75      	ldr	r3, [pc, #468]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	69db      	ldr	r3, [r3, #28]
 800e198:	061b      	lsls	r3, r3, #24
 800e19a:	4972      	ldr	r1, [pc, #456]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e19c:	4313      	orrs	r3, r2
 800e19e:	604b      	str	r3, [r1, #4]
 800e1a0:	e015      	b.n	800e1ce <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e1a2:	4b74      	ldr	r3, [pc, #464]	; (800e374 <HAL_RCC_OscConfig+0x510>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e1a8:	f7fe fa5a 	bl	800c660 <HAL_GetTick>
 800e1ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800e1ae:	e008      	b.n	800e1c2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e1b0:	f7fe fa56 	bl	800c660 <HAL_GetTick>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	1ad3      	subs	r3, r2, r3
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d901      	bls.n	800e1c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800e1be:	2303      	movs	r3, #3
 800e1c0:	e177      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800e1c2:	4b68      	ldr	r3, [pc, #416]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1f0      	bne.n	800e1b0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f003 0308 	and.w	r3, r3, #8
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d030      	beq.n	800e23c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	695b      	ldr	r3, [r3, #20]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d016      	beq.n	800e210 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e1e2:	4b65      	ldr	r3, [pc, #404]	; (800e378 <HAL_RCC_OscConfig+0x514>)
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e1e8:	f7fe fa3a 	bl	800c660 <HAL_GetTick>
 800e1ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e1ee:	e008      	b.n	800e202 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e1f0:	f7fe fa36 	bl	800c660 <HAL_GetTick>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	d901      	bls.n	800e202 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800e1fe:	2303      	movs	r3, #3
 800e200:	e157      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e202:	4b58      	ldr	r3, [pc, #352]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e206:	f003 0302 	and.w	r3, r3, #2
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d0f0      	beq.n	800e1f0 <HAL_RCC_OscConfig+0x38c>
 800e20e:	e015      	b.n	800e23c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e210:	4b59      	ldr	r3, [pc, #356]	; (800e378 <HAL_RCC_OscConfig+0x514>)
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e216:	f7fe fa23 	bl	800c660 <HAL_GetTick>
 800e21a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e21c:	e008      	b.n	800e230 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e21e:	f7fe fa1f 	bl	800c660 <HAL_GetTick>
 800e222:	4602      	mov	r2, r0
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	1ad3      	subs	r3, r2, r3
 800e228:	2b02      	cmp	r3, #2
 800e22a:	d901      	bls.n	800e230 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800e22c:	2303      	movs	r3, #3
 800e22e:	e140      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e230:	4b4c      	ldr	r3, [pc, #304]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e234:	f003 0302 	and.w	r3, r3, #2
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1f0      	bne.n	800e21e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f003 0304 	and.w	r3, r3, #4
 800e244:	2b00      	cmp	r3, #0
 800e246:	f000 80b5 	beq.w	800e3b4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e24a:	2300      	movs	r3, #0
 800e24c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e24e:	4b45      	ldr	r3, [pc, #276]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10d      	bne.n	800e276 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e25a:	4b42      	ldr	r3, [pc, #264]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25e:	4a41      	ldr	r2, [pc, #260]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e264:	6253      	str	r3, [r2, #36]	; 0x24
 800e266:	4b3f      	ldr	r3, [pc, #252]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e26e:	60bb      	str	r3, [r7, #8]
 800e270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e272:	2301      	movs	r3, #1
 800e274:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e276:	4b41      	ldr	r3, [pc, #260]	; (800e37c <HAL_RCC_OscConfig+0x518>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d118      	bne.n	800e2b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e282:	4b3e      	ldr	r3, [pc, #248]	; (800e37c <HAL_RCC_OscConfig+0x518>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a3d      	ldr	r2, [pc, #244]	; (800e37c <HAL_RCC_OscConfig+0x518>)
 800e288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e28c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e28e:	f7fe f9e7 	bl	800c660 <HAL_GetTick>
 800e292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e294:	e008      	b.n	800e2a8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e296:	f7fe f9e3 	bl	800c660 <HAL_GetTick>
 800e29a:	4602      	mov	r2, r0
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	2b64      	cmp	r3, #100	; 0x64
 800e2a2:	d901      	bls.n	800e2a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	e104      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e2a8:	4b34      	ldr	r3, [pc, #208]	; (800e37c <HAL_RCC_OscConfig+0x518>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d0f0      	beq.n	800e296 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d106      	bne.n	800e2ca <HAL_RCC_OscConfig+0x466>
 800e2bc:	4b29      	ldr	r3, [pc, #164]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c0:	4a28      	ldr	r2, [pc, #160]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e2c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2c6:	6353      	str	r3, [r2, #52]	; 0x34
 800e2c8:	e02d      	b.n	800e326 <HAL_RCC_OscConfig+0x4c2>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10c      	bne.n	800e2ec <HAL_RCC_OscConfig+0x488>
 800e2d2:	4b24      	ldr	r3, [pc, #144]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d6:	4a23      	ldr	r2, [pc, #140]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e2d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2dc:	6353      	str	r3, [r2, #52]	; 0x34
 800e2de:	4b21      	ldr	r3, [pc, #132]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e2:	4a20      	ldr	r2, [pc, #128]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e2e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e2e8:	6353      	str	r3, [r2, #52]	; 0x34
 800e2ea:	e01c      	b.n	800e326 <HAL_RCC_OscConfig+0x4c2>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	2b05      	cmp	r3, #5
 800e2f2:	d10c      	bne.n	800e30e <HAL_RCC_OscConfig+0x4aa>
 800e2f4:	4b1b      	ldr	r3, [pc, #108]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f8:	4a1a      	ldr	r2, [pc, #104]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e2fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e2fe:	6353      	str	r3, [r2, #52]	; 0x34
 800e300:	4b18      	ldr	r3, [pc, #96]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e304:	4a17      	ldr	r2, [pc, #92]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e30a:	6353      	str	r3, [r2, #52]	; 0x34
 800e30c:	e00b      	b.n	800e326 <HAL_RCC_OscConfig+0x4c2>
 800e30e:	4b15      	ldr	r3, [pc, #84]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e312:	4a14      	ldr	r2, [pc, #80]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e318:	6353      	str	r3, [r2, #52]	; 0x34
 800e31a:	4b12      	ldr	r3, [pc, #72]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31e:	4a11      	ldr	r2, [pc, #68]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e324:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d015      	beq.n	800e35a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e32e:	f7fe f997 	bl	800c660 <HAL_GetTick>
 800e332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e334:	e00a      	b.n	800e34c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e336:	f7fe f993 	bl	800c660 <HAL_GetTick>
 800e33a:	4602      	mov	r2, r0
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	1ad3      	subs	r3, r2, r3
 800e340:	f241 3288 	movw	r2, #5000	; 0x1388
 800e344:	4293      	cmp	r3, r2
 800e346:	d901      	bls.n	800e34c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e348:	2303      	movs	r3, #3
 800e34a:	e0b2      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <HAL_RCC_OscConfig+0x500>)
 800e34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e354:	2b00      	cmp	r3, #0
 800e356:	d0ee      	beq.n	800e336 <HAL_RCC_OscConfig+0x4d2>
 800e358:	e023      	b.n	800e3a2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e35a:	f7fe f981 	bl	800c660 <HAL_GetTick>
 800e35e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e360:	e019      	b.n	800e396 <HAL_RCC_OscConfig+0x532>
 800e362:	bf00      	nop
 800e364:	40023800 	.word	0x40023800
 800e368:	08015ce4 	.word	0x08015ce4
 800e36c:	20000008 	.word	0x20000008
 800e370:	20000110 	.word	0x20000110
 800e374:	42470020 	.word	0x42470020
 800e378:	42470680 	.word	0x42470680
 800e37c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e380:	f7fe f96e 	bl	800c660 <HAL_GetTick>
 800e384:	4602      	mov	r2, r0
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e38e:	4293      	cmp	r3, r2
 800e390:	d901      	bls.n	800e396 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800e392:	2303      	movs	r3, #3
 800e394:	e08d      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e396:	4b49      	ldr	r3, [pc, #292]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e39a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1ee      	bne.n	800e380 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800e3a2:	7ffb      	ldrb	r3, [r7, #31]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d105      	bne.n	800e3b4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e3a8:	4b44      	ldr	r3, [pc, #272]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ac:	4a43      	ldr	r2, [pc, #268]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e3ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e3b2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d079      	beq.n	800e4b0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	2b0c      	cmp	r3, #12
 800e3c0:	d056      	beq.n	800e470 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	d13b      	bne.n	800e442 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e3ca:	4b3d      	ldr	r3, [pc, #244]	; (800e4c0 <HAL_RCC_OscConfig+0x65c>)
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e3d0:	f7fe f946 	bl	800c660 <HAL_GetTick>
 800e3d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e3d6:	e008      	b.n	800e3ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e3d8:	f7fe f942 	bl	800c660 <HAL_GetTick>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	1ad3      	subs	r3, r2, r3
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d901      	bls.n	800e3ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	e063      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e3ea:	4b34      	ldr	r3, [pc, #208]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1f0      	bne.n	800e3d8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e3f6:	4b31      	ldr	r3, [pc, #196]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e406:	4319      	orrs	r1, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e40c:	430b      	orrs	r3, r1
 800e40e:	492b      	ldr	r1, [pc, #172]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e410:	4313      	orrs	r3, r2
 800e412:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e414:	4b2a      	ldr	r3, [pc, #168]	; (800e4c0 <HAL_RCC_OscConfig+0x65c>)
 800e416:	2201      	movs	r2, #1
 800e418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e41a:	f7fe f921 	bl	800c660 <HAL_GetTick>
 800e41e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e420:	e008      	b.n	800e434 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e422:	f7fe f91d 	bl	800c660 <HAL_GetTick>
 800e426:	4602      	mov	r2, r0
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	1ad3      	subs	r3, r2, r3
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	d901      	bls.n	800e434 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800e430:	2303      	movs	r3, #3
 800e432:	e03e      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e434:	4b21      	ldr	r3, [pc, #132]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d0f0      	beq.n	800e422 <HAL_RCC_OscConfig+0x5be>
 800e440:	e036      	b.n	800e4b0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e442:	4b1f      	ldr	r3, [pc, #124]	; (800e4c0 <HAL_RCC_OscConfig+0x65c>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e448:	f7fe f90a 	bl	800c660 <HAL_GetTick>
 800e44c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e44e:	e008      	b.n	800e462 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e450:	f7fe f906 	bl	800c660 <HAL_GetTick>
 800e454:	4602      	mov	r2, r0
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d901      	bls.n	800e462 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800e45e:	2303      	movs	r3, #3
 800e460:	e027      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e462:	4b16      	ldr	r3, [pc, #88]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1f0      	bne.n	800e450 <HAL_RCC_OscConfig+0x5ec>
 800e46e:	e01f      	b.n	800e4b0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e474:	2b01      	cmp	r3, #1
 800e476:	d101      	bne.n	800e47c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800e478:	2301      	movs	r3, #1
 800e47a:	e01a      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800e47c:	4b0f      	ldr	r3, [pc, #60]	; (800e4bc <HAL_RCC_OscConfig+0x658>)
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d10d      	bne.n	800e4ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d106      	bne.n	800e4ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d001      	beq.n	800e4b0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e000      	b.n	800e4b2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3720      	adds	r7, #32
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	40023800 	.word	0x40023800
 800e4c0:	42470060 	.word	0x42470060

0800e4c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e11a      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e4d8:	4b8f      	ldr	r3, [pc, #572]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f003 0301 	and.w	r3, r3, #1
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d919      	bls.n	800e51a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d105      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x34>
 800e4ec:	4b8a      	ldr	r3, [pc, #552]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a89      	ldr	r2, [pc, #548]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e4f2:	f043 0304 	orr.w	r3, r3, #4
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	4b87      	ldr	r3, [pc, #540]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f023 0201 	bic.w	r2, r3, #1
 800e500:	4985      	ldr	r1, [pc, #532]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	4313      	orrs	r3, r2
 800e506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e508:	4b83      	ldr	r3, [pc, #524]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	683a      	ldr	r2, [r7, #0]
 800e512:	429a      	cmp	r2, r3
 800e514:	d001      	beq.n	800e51a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	e0f9      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f003 0302 	and.w	r3, r3, #2
 800e522:	2b00      	cmp	r3, #0
 800e524:	d008      	beq.n	800e538 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e526:	4b7d      	ldr	r3, [pc, #500]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	497a      	ldr	r1, [pc, #488]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e534:	4313      	orrs	r3, r2
 800e536:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f003 0301 	and.w	r3, r3, #1
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 808e 	beq.w	800e662 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	2b02      	cmp	r3, #2
 800e54c:	d107      	bne.n	800e55e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e54e:	4b73      	ldr	r3, [pc, #460]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e556:	2b00      	cmp	r3, #0
 800e558:	d121      	bne.n	800e59e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800e55a:	2301      	movs	r3, #1
 800e55c:	e0d7      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	2b03      	cmp	r3, #3
 800e564:	d107      	bne.n	800e576 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e566:	4b6d      	ldr	r3, [pc, #436]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d115      	bne.n	800e59e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	e0cb      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d107      	bne.n	800e58e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e57e:	4b67      	ldr	r3, [pc, #412]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f003 0302 	and.w	r3, r3, #2
 800e586:	2b00      	cmp	r3, #0
 800e588:	d109      	bne.n	800e59e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e0bf      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e58e:	4b63      	ldr	r3, [pc, #396]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e596:	2b00      	cmp	r3, #0
 800e598:	d101      	bne.n	800e59e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	e0b7      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e59e:	4b5f      	ldr	r3, [pc, #380]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	f023 0203 	bic.w	r2, r3, #3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	495c      	ldr	r1, [pc, #368]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e5b0:	f7fe f856 	bl	800c660 <HAL_GetTick>
 800e5b4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d112      	bne.n	800e5e4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e5be:	e00a      	b.n	800e5d6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e5c0:	f7fe f84e 	bl	800c660 <HAL_GetTick>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d901      	bls.n	800e5d6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800e5d2:	2303      	movs	r3, #3
 800e5d4:	e09b      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e5d6:	4b51      	ldr	r3, [pc, #324]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	f003 030c 	and.w	r3, r3, #12
 800e5de:	2b08      	cmp	r3, #8
 800e5e0:	d1ee      	bne.n	800e5c0 <HAL_RCC_ClockConfig+0xfc>
 800e5e2:	e03e      	b.n	800e662 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	2b03      	cmp	r3, #3
 800e5ea:	d112      	bne.n	800e612 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e5ec:	e00a      	b.n	800e604 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e5ee:	f7fe f837 	bl	800c660 <HAL_GetTick>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d901      	bls.n	800e604 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800e600:	2303      	movs	r3, #3
 800e602:	e084      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e604:	4b45      	ldr	r3, [pc, #276]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f003 030c 	and.w	r3, r3, #12
 800e60c:	2b0c      	cmp	r3, #12
 800e60e:	d1ee      	bne.n	800e5ee <HAL_RCC_ClockConfig+0x12a>
 800e610:	e027      	b.n	800e662 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	2b01      	cmp	r3, #1
 800e618:	d11d      	bne.n	800e656 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e61a:	e00a      	b.n	800e632 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e61c:	f7fe f820 	bl	800c660 <HAL_GetTick>
 800e620:	4602      	mov	r2, r0
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	f241 3288 	movw	r2, #5000	; 0x1388
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d901      	bls.n	800e632 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800e62e:	2303      	movs	r3, #3
 800e630:	e06d      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e632:	4b3a      	ldr	r3, [pc, #232]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e634:	689b      	ldr	r3, [r3, #8]
 800e636:	f003 030c 	and.w	r3, r3, #12
 800e63a:	2b04      	cmp	r3, #4
 800e63c:	d1ee      	bne.n	800e61c <HAL_RCC_ClockConfig+0x158>
 800e63e:	e010      	b.n	800e662 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e640:	f7fe f80e 	bl	800c660 <HAL_GetTick>
 800e644:	4602      	mov	r2, r0
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e64e:	4293      	cmp	r3, r2
 800e650:	d901      	bls.n	800e656 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800e652:	2303      	movs	r3, #3
 800e654:	e05b      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800e656:	4b31      	ldr	r3, [pc, #196]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	f003 030c 	and.w	r3, r3, #12
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d1ee      	bne.n	800e640 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e662:	4b2d      	ldr	r3, [pc, #180]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d219      	bcs.n	800e6a4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d105      	bne.n	800e682 <HAL_RCC_ClockConfig+0x1be>
 800e676:	4b28      	ldr	r3, [pc, #160]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4a27      	ldr	r2, [pc, #156]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e67c:	f043 0304 	orr.w	r3, r3, #4
 800e680:	6013      	str	r3, [r2, #0]
 800e682:	4b25      	ldr	r3, [pc, #148]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f023 0201 	bic.w	r2, r3, #1
 800e68a:	4923      	ldr	r1, [pc, #140]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	4313      	orrs	r3, r2
 800e690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e692:	4b21      	ldr	r3, [pc, #132]	; (800e718 <HAL_RCC_ClockConfig+0x254>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d001      	beq.n	800e6a4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e034      	b.n	800e70e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f003 0304 	and.w	r3, r3, #4
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d008      	beq.n	800e6c2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e6b0:	4b1a      	ldr	r3, [pc, #104]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	4917      	ldr	r1, [pc, #92]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f003 0308 	and.w	r3, r3, #8
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d009      	beq.n	800e6e2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e6ce:	4b13      	ldr	r3, [pc, #76]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	490f      	ldr	r1, [pc, #60]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e6e2:	f000 f82f 	bl	800e744 <HAL_RCC_GetSysClockFreq>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	4b0c      	ldr	r3, [pc, #48]	; (800e71c <HAL_RCC_ClockConfig+0x258>)
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	091b      	lsrs	r3, r3, #4
 800e6ee:	f003 030f 	and.w	r3, r3, #15
 800e6f2:	490b      	ldr	r1, [pc, #44]	; (800e720 <HAL_RCC_ClockConfig+0x25c>)
 800e6f4:	5ccb      	ldrb	r3, [r1, r3]
 800e6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e6fa:	4a0a      	ldr	r2, [pc, #40]	; (800e724 <HAL_RCC_ClockConfig+0x260>)
 800e6fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800e6fe:	4b0a      	ldr	r3, [pc, #40]	; (800e728 <HAL_RCC_ClockConfig+0x264>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4618      	mov	r0, r3
 800e704:	f7fd ff60 	bl	800c5c8 <HAL_InitTick>
 800e708:	4603      	mov	r3, r0
 800e70a:	72fb      	strb	r3, [r7, #11]

  return status;
 800e70c:	7afb      	ldrb	r3, [r7, #11]
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	40023c00 	.word	0x40023c00
 800e71c:	40023800 	.word	0x40023800
 800e720:	08015ce4 	.word	0x08015ce4
 800e724:	20000008 	.word	0x20000008
 800e728:	20000110 	.word	0x20000110

0800e72c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800e730:	4b03      	ldr	r3, [pc, #12]	; (800e740 <HAL_RCC_EnableCSS+0x14>)
 800e732:	2201      	movs	r2, #1
 800e734:	601a      	str	r2, [r3, #0]
}
 800e736:	bf00      	nop
 800e738:	46bd      	mov	sp, r7
 800e73a:	bc80      	pop	{r7}
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	42470070 	.word	0x42470070

0800e744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e744:	b5b0      	push	{r4, r5, r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800e74a:	4b61      	ldr	r3, [pc, #388]	; (800e8d0 <HAL_RCC_GetSysClockFreq+0x18c>)
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f003 030c 	and.w	r3, r3, #12
 800e756:	2b0c      	cmp	r3, #12
 800e758:	d00d      	beq.n	800e776 <HAL_RCC_GetSysClockFreq+0x32>
 800e75a:	2b0c      	cmp	r3, #12
 800e75c:	f200 80a4 	bhi.w	800e8a8 <HAL_RCC_GetSysClockFreq+0x164>
 800e760:	2b04      	cmp	r3, #4
 800e762:	d002      	beq.n	800e76a <HAL_RCC_GetSysClockFreq+0x26>
 800e764:	2b08      	cmp	r3, #8
 800e766:	d003      	beq.n	800e770 <HAL_RCC_GetSysClockFreq+0x2c>
 800e768:	e09e      	b.n	800e8a8 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e76a:	4b5a      	ldr	r3, [pc, #360]	; (800e8d4 <HAL_RCC_GetSysClockFreq+0x190>)
 800e76c:	613b      	str	r3, [r7, #16]
      break;
 800e76e:	e0a9      	b.n	800e8c4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800e770:	4b59      	ldr	r3, [pc, #356]	; (800e8d8 <HAL_RCC_GetSysClockFreq+0x194>)
 800e772:	613b      	str	r3, [r7, #16]
      break;
 800e774:	e0a6      	b.n	800e8c4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	0c9b      	lsrs	r3, r3, #18
 800e77a:	f003 030f 	and.w	r3, r3, #15
 800e77e:	4a57      	ldr	r2, [pc, #348]	; (800e8dc <HAL_RCC_GetSysClockFreq+0x198>)
 800e780:	5cd3      	ldrb	r3, [r2, r3]
 800e782:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	0d9b      	lsrs	r3, r3, #22
 800e788:	f003 0303 	and.w	r3, r3, #3
 800e78c:	3301      	adds	r3, #1
 800e78e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e790:	4b4f      	ldr	r3, [pc, #316]	; (800e8d0 <HAL_RCC_GetSysClockFreq+0x18c>)
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d041      	beq.n	800e820 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	461c      	mov	r4, r3
 800e7a0:	f04f 0500 	mov.w	r5, #0
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	f04f 0200 	mov.w	r2, #0
 800e7ac:	f04f 0300 	mov.w	r3, #0
 800e7b0:	014b      	lsls	r3, r1, #5
 800e7b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e7b6:	0142      	lsls	r2, r0, #5
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	1b00      	subs	r0, r0, r4
 800e7be:	eb61 0105 	sbc.w	r1, r1, r5
 800e7c2:	f04f 0200 	mov.w	r2, #0
 800e7c6:	f04f 0300 	mov.w	r3, #0
 800e7ca:	018b      	lsls	r3, r1, #6
 800e7cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e7d0:	0182      	lsls	r2, r0, #6
 800e7d2:	1a12      	subs	r2, r2, r0
 800e7d4:	eb63 0301 	sbc.w	r3, r3, r1
 800e7d8:	f04f 0000 	mov.w	r0, #0
 800e7dc:	f04f 0100 	mov.w	r1, #0
 800e7e0:	00d9      	lsls	r1, r3, #3
 800e7e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e7e6:	00d0      	lsls	r0, r2, #3
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	1912      	adds	r2, r2, r4
 800e7ee:	eb45 0303 	adc.w	r3, r5, r3
 800e7f2:	f04f 0000 	mov.w	r0, #0
 800e7f6:	f04f 0100 	mov.w	r1, #0
 800e7fa:	0259      	lsls	r1, r3, #9
 800e7fc:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e800:	0250      	lsls	r0, r2, #9
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4610      	mov	r0, r2
 800e808:	4619      	mov	r1, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	461a      	mov	r2, r3
 800e80e:	f04f 0300 	mov.w	r3, #0
 800e812:	f7f7 f8bb 	bl	800598c <__aeabi_uldivmod>
 800e816:	4602      	mov	r2, r0
 800e818:	460b      	mov	r3, r1
 800e81a:	4613      	mov	r3, r2
 800e81c:	617b      	str	r3, [r7, #20]
 800e81e:	e040      	b.n	800e8a2 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	461c      	mov	r4, r3
 800e824:	f04f 0500 	mov.w	r5, #0
 800e828:	4620      	mov	r0, r4
 800e82a:	4629      	mov	r1, r5
 800e82c:	f04f 0200 	mov.w	r2, #0
 800e830:	f04f 0300 	mov.w	r3, #0
 800e834:	014b      	lsls	r3, r1, #5
 800e836:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e83a:	0142      	lsls	r2, r0, #5
 800e83c:	4610      	mov	r0, r2
 800e83e:	4619      	mov	r1, r3
 800e840:	1b00      	subs	r0, r0, r4
 800e842:	eb61 0105 	sbc.w	r1, r1, r5
 800e846:	f04f 0200 	mov.w	r2, #0
 800e84a:	f04f 0300 	mov.w	r3, #0
 800e84e:	018b      	lsls	r3, r1, #6
 800e850:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e854:	0182      	lsls	r2, r0, #6
 800e856:	1a12      	subs	r2, r2, r0
 800e858:	eb63 0301 	sbc.w	r3, r3, r1
 800e85c:	f04f 0000 	mov.w	r0, #0
 800e860:	f04f 0100 	mov.w	r1, #0
 800e864:	00d9      	lsls	r1, r3, #3
 800e866:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e86a:	00d0      	lsls	r0, r2, #3
 800e86c:	4602      	mov	r2, r0
 800e86e:	460b      	mov	r3, r1
 800e870:	1912      	adds	r2, r2, r4
 800e872:	eb45 0303 	adc.w	r3, r5, r3
 800e876:	f04f 0000 	mov.w	r0, #0
 800e87a:	f04f 0100 	mov.w	r1, #0
 800e87e:	0299      	lsls	r1, r3, #10
 800e880:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e884:	0290      	lsls	r0, r2, #10
 800e886:	4602      	mov	r2, r0
 800e888:	460b      	mov	r3, r1
 800e88a:	4610      	mov	r0, r2
 800e88c:	4619      	mov	r1, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	461a      	mov	r2, r3
 800e892:	f04f 0300 	mov.w	r3, #0
 800e896:	f7f7 f879 	bl	800598c <__aeabi_uldivmod>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4613      	mov	r3, r2
 800e8a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	613b      	str	r3, [r7, #16]
      break;
 800e8a6:	e00d      	b.n	800e8c4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800e8a8:	4b09      	ldr	r3, [pc, #36]	; (800e8d0 <HAL_RCC_GetSysClockFreq+0x18c>)
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	0b5b      	lsrs	r3, r3, #13
 800e8ae:	f003 0307 	and.w	r3, r3, #7
 800e8b2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e8c0:	613b      	str	r3, [r7, #16]
      break;
 800e8c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e8c4:	693b      	ldr	r3, [r7, #16]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3718      	adds	r7, #24
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	40023800 	.word	0x40023800
 800e8d4:	00f42400 	.word	0x00f42400
 800e8d8:	007a1200 	.word	0x007a1200
 800e8dc:	08015cd8 	.word	0x08015cd8

0800e8e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e8e4:	4b02      	ldr	r3, [pc, #8]	; (800e8f0 <HAL_RCC_GetHCLKFreq+0x10>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bc80      	pop	{r7}
 800e8ee:	4770      	bx	lr
 800e8f0:	20000008 	.word	0x20000008

0800e8f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e8f8:	f7ff fff2 	bl	800e8e0 <HAL_RCC_GetHCLKFreq>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	4b05      	ldr	r3, [pc, #20]	; (800e914 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	0a1b      	lsrs	r3, r3, #8
 800e904:	f003 0307 	and.w	r3, r3, #7
 800e908:	4903      	ldr	r1, [pc, #12]	; (800e918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e90a:	5ccb      	ldrb	r3, [r1, r3]
 800e90c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e910:	4618      	mov	r0, r3
 800e912:	bd80      	pop	{r7, pc}
 800e914:	40023800 	.word	0x40023800
 800e918:	08015cf4 	.word	0x08015cf4

0800e91c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e920:	f7ff ffde 	bl	800e8e0 <HAL_RCC_GetHCLKFreq>
 800e924:	4602      	mov	r2, r0
 800e926:	4b05      	ldr	r3, [pc, #20]	; (800e93c <HAL_RCC_GetPCLK2Freq+0x20>)
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	0adb      	lsrs	r3, r3, #11
 800e92c:	f003 0307 	and.w	r3, r3, #7
 800e930:	4903      	ldr	r1, [pc, #12]	; (800e940 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e932:	5ccb      	ldrb	r3, [r1, r3]
 800e934:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e938:	4618      	mov	r0, r3
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	40023800 	.word	0x40023800
 800e940:	08015cf4 	.word	0x08015cf4

0800e944 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800e948:	4b06      	ldr	r3, [pc, #24]	; (800e964 <HAL_RCC_NMI_IRQHandler+0x20>)
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e950:	2b80      	cmp	r3, #128	; 0x80
 800e952:	d104      	bne.n	800e95e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800e954:	f000 f80a 	bl	800e96c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800e958:	4b03      	ldr	r3, [pc, #12]	; (800e968 <HAL_RCC_NMI_IRQHandler+0x24>)
 800e95a:	2280      	movs	r2, #128	; 0x80
 800e95c:	701a      	strb	r2, [r3, #0]
  }
}
 800e95e:	bf00      	nop
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	40023800 	.word	0x40023800
 800e968:	4002380e 	.word	0x4002380e

0800e96c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800e96c:	b480      	push	{r7}
 800e96e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800e970:	bf00      	nop
 800e972:	46bd      	mov	sp, r7
 800e974:	bc80      	pop	{r7}
 800e976:	4770      	bx	lr

0800e978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800e978:	b480      	push	{r7}
 800e97a:	b087      	sub	sp, #28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e980:	2300      	movs	r3, #0
 800e982:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800e984:	4b29      	ldr	r3, [pc, #164]	; (800ea2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d12c      	bne.n	800e9ea <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e990:	4b26      	ldr	r3, [pc, #152]	; (800ea2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d005      	beq.n	800e9a8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800e99c:	4b24      	ldr	r3, [pc, #144]	; (800ea30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800e9a4:	617b      	str	r3, [r7, #20]
 800e9a6:	e016      	b.n	800e9d6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e9a8:	4b20      	ldr	r3, [pc, #128]	; (800ea2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ac:	4a1f      	ldr	r2, [pc, #124]	; (800ea2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e9ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9b2:	6253      	str	r3, [r2, #36]	; 0x24
 800e9b4:	4b1d      	ldr	r3, [pc, #116]	; (800ea2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e9bc:	60fb      	str	r3, [r7, #12]
 800e9be:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800e9c0:	4b1b      	ldr	r3, [pc, #108]	; (800ea30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800e9c8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800e9ca:	4b18      	ldr	r3, [pc, #96]	; (800ea2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ce:	4a17      	ldr	r2, [pc, #92]	; (800ea2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e9d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e9d4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800e9dc:	d105      	bne.n	800e9ea <RCC_SetFlashLatencyFromMSIRange+0x72>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e9e4:	d101      	bne.n	800e9ea <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d105      	bne.n	800e9fc <RCC_SetFlashLatencyFromMSIRange+0x84>
 800e9f0:	4b10      	ldr	r3, [pc, #64]	; (800ea34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a0f      	ldr	r2, [pc, #60]	; (800ea34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e9f6:	f043 0304 	orr.w	r3, r3, #4
 800e9fa:	6013      	str	r3, [r2, #0]
 800e9fc:	4b0d      	ldr	r3, [pc, #52]	; (800ea34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f023 0201 	bic.w	r2, r3, #1
 800ea04:	490b      	ldr	r1, [pc, #44]	; (800ea34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ea0c:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f003 0301 	and.w	r3, r3, #1
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d001      	beq.n	800ea1e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e000      	b.n	800ea20 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800ea1e:	2300      	movs	r3, #0
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	371c      	adds	r7, #28
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bc80      	pop	{r7}
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	40023800 	.word	0x40023800
 800ea30:	40007000 	.word	0x40007000
 800ea34:	40023c00 	.word	0x40023c00

0800ea38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b086      	sub	sp, #24
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f003 0301 	and.w	r3, r3, #1
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f000 80b8 	beq.w	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ea52:	4b5d      	ldr	r3, [pc, #372]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800ea54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d10d      	bne.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea5e:	4b5a      	ldr	r3, [pc, #360]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800ea60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea62:	4a59      	ldr	r2, [pc, #356]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800ea64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea68:	6253      	str	r3, [r2, #36]	; 0x24
 800ea6a:	4b57      	ldr	r3, [pc, #348]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800ea6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea72:	60bb      	str	r3, [r7, #8]
 800ea74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ea76:	2301      	movs	r3, #1
 800ea78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea7a:	4b54      	ldr	r3, [pc, #336]	; (800ebcc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d118      	bne.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ea86:	4b51      	ldr	r3, [pc, #324]	; (800ebcc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a50      	ldr	r2, [pc, #320]	; (800ebcc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800ea8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ea92:	f7fd fde5 	bl	800c660 <HAL_GetTick>
 800ea96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea98:	e008      	b.n	800eaac <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea9a:	f7fd fde1 	bl	800c660 <HAL_GetTick>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	2b64      	cmp	r3, #100	; 0x64
 800eaa6:	d901      	bls.n	800eaac <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800eaa8:	2303      	movs	r3, #3
 800eaaa:	e089      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eaac:	4b47      	ldr	r3, [pc, #284]	; (800ebcc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d0f0      	beq.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800eab8:	4b43      	ldr	r3, [pc, #268]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800eac0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d00f      	beq.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ead8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eadc:	d108      	bne.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eade:	4b3a      	ldr	r3, [pc, #232]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eaea:	d101      	bne.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800eaec:	2301      	movs	r3, #1
 800eaee:	e067      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800eaf0:	4b35      	ldr	r3, [pc, #212]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eaf8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d034      	beq.n	800eb6a <HAL_RCCEx_PeriphCLKConfig+0x132>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d02d      	beq.n	800eb6a <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f003 0301 	and.w	r3, r3, #1
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d027      	beq.n	800eb6a <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800eb1a:	4b2b      	ldr	r3, [pc, #172]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800eb22:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800eb24:	4b2a      	ldr	r3, [pc, #168]	; (800ebd0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800eb26:	2201      	movs	r2, #1
 800eb28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800eb2a:	4b29      	ldr	r3, [pc, #164]	; (800ebd0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800eb30:	4a25      	ldr	r2, [pc, #148]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d014      	beq.n	800eb6a <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb40:	f7fd fd8e 	bl	800c660 <HAL_GetTick>
 800eb44:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eb46:	e00a      	b.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eb48:	f7fd fd8a 	bl	800c660 <HAL_GetTick>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d901      	bls.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 800eb5a:	2303      	movs	r3, #3
 800eb5c:	e030      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eb5e:	4b1a      	ldr	r3, [pc, #104]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d0ee      	beq.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d01a      	beq.n	800ebac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eb7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eb82:	d10a      	bne.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x162>
 800eb84:	4b10      	ldr	r3, [pc, #64]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800eb94:	490c      	ldr	r1, [pc, #48]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eb96:	4313      	orrs	r3, r2
 800eb98:	600b      	str	r3, [r1, #0]
 800eb9a:	4b0b      	ldr	r3, [pc, #44]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eb9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eba6:	4908      	ldr	r1, [pc, #32]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ebac:	7dfb      	ldrb	r3, [r7, #23]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d105      	bne.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ebb2:	4b05      	ldr	r3, [pc, #20]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800ebb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb6:	4a04      	ldr	r2, [pc, #16]	; (800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800ebb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ebbc:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3718      	adds	r7, #24
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	40023800 	.word	0x40023800
 800ebcc:	40007000 	.word	0x40007000
 800ebd0:	424706dc 	.word	0x424706dc

0800ebd4 <HAL_RCCEx_EnableLSECSS>:
  *         RTCSEL), or take any required action to secure the application.
  * @note   LSE CSS available only for high density and medium+ devices
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CSR_LSECSSON_BB = (uint32_t)ENABLE;
 800ebd8:	4b03      	ldr	r3, [pc, #12]	; (800ebe8 <HAL_RCCEx_EnableLSECSS+0x14>)
 800ebda:	2201      	movs	r2, #1
 800ebdc:	601a      	str	r2, [r3, #0]
}
 800ebde:	bf00      	nop
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bc80      	pop	{r7}
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	424706ac 	.word	0x424706ac

0800ebec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d101      	bne.n	800ebfe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e083      	b.n	800ed06 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	7f5b      	ldrb	r3, [r3, #29]
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d105      	bne.n	800ec14 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7f7 fd44 	bl	800669c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2202      	movs	r2, #2
 800ec18:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	22ca      	movs	r2, #202	; 0xca
 800ec20:	625a      	str	r2, [r3, #36]	; 0x24
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	2253      	movs	r2, #83	; 0x53
 800ec28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 fc17 	bl	800f45e <RTC_EnterInitMode>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d008      	beq.n	800ec48 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	22ff      	movs	r2, #255	; 0xff
 800ec3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2204      	movs	r2, #4
 800ec42:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ec44:	2301      	movs	r3, #1
 800ec46:	e05e      	b.n	800ed06 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	6812      	ldr	r2, [r2, #0]
 800ec52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec5a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6899      	ldr	r1, [r3, #8]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	685a      	ldr	r2, [r3, #4]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	431a      	orrs	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	695b      	ldr	r3, [r3, #20]
 800ec70:	431a      	orrs	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	430a      	orrs	r2, r1
 800ec78:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	68d2      	ldr	r2, [r2, #12]
 800ec82:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	6919      	ldr	r1, [r3, #16]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	041a      	lsls	r2, r3, #16
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	430a      	orrs	r2, r1
 800ec96:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68da      	ldr	r2, [r3, #12]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eca6:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	f003 0320 	and.w	r3, r3, #32
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10e      	bne.n	800ecd4 <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 fba4 	bl	800f404 <HAL_RTC_WaitForSynchro>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d008      	beq.n	800ecd4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	22ff      	movs	r2, #255	; 0xff
 800ecc8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2204      	movs	r2, #4
 800ecce:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e018      	b.n	800ed06 <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ece2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	699a      	ldr	r2, [r3, #24]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	430a      	orrs	r2, r1
 800ecf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	22ff      	movs	r2, #255	; 0xff
 800ecfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2201      	movs	r2, #1
 800ed02:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ed04:	2300      	movs	r3, #0
  }
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3708      	adds	r7, #8
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ed0e:	b590      	push	{r4, r7, lr}
 800ed10:	b087      	sub	sp, #28
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	60f8      	str	r0, [r7, #12]
 800ed16:	60b9      	str	r1, [r7, #8]
 800ed18:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	7f1b      	ldrb	r3, [r3, #28]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d101      	bne.n	800ed26 <HAL_RTC_SetTime+0x18>
 800ed22:	2302      	movs	r3, #2
 800ed24:	e0a3      	b.n	800ee6e <HAL_RTC_SetTime+0x160>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2202      	movs	r2, #2
 800ed30:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d126      	bne.n	800ed86 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d102      	bne.n	800ed4c <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f000 fbae 	bl	800f4b2 <RTC_ByteToBcd2>
 800ed56:	4603      	mov	r3, r0
 800ed58:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	785b      	ldrb	r3, [r3, #1]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f000 fba7 	bl	800f4b2 <RTC_ByteToBcd2>
 800ed64:	4603      	mov	r3, r0
 800ed66:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ed68:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	789b      	ldrb	r3, [r3, #2]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 fb9f 	bl	800f4b2 <RTC_ByteToBcd2>
 800ed74:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ed76:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	78db      	ldrb	r3, [r3, #3]
 800ed7e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ed80:	4313      	orrs	r3, r2
 800ed82:	617b      	str	r3, [r7, #20]
 800ed84:	e018      	b.n	800edb8 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d102      	bne.n	800ed9a <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2200      	movs	r2, #0
 800ed98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	785b      	ldrb	r3, [r3, #1]
 800eda4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800eda6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800edac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	78db      	ldrb	r3, [r3, #3]
 800edb2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800edb4:	4313      	orrs	r3, r2
 800edb6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	22ca      	movs	r2, #202	; 0xca
 800edbe:	625a      	str	r2, [r3, #36]	; 0x24
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2253      	movs	r2, #83	; 0x53
 800edc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f000 fb48 	bl	800f45e <RTC_EnterInitMode>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d00b      	beq.n	800edec <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	22ff      	movs	r2, #255	; 0xff
 800edda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2204      	movs	r2, #4
 800ede0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2200      	movs	r2, #0
 800ede6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	e040      	b.n	800ee6e <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800edf6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800edfa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	689a      	ldr	r2, [r3, #8]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ee0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	6899      	ldr	r1, [r3, #8]
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	68da      	ldr	r2, [r3, #12]
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	691b      	ldr	r3, [r3, #16]
 800ee1a:	431a      	orrs	r2, r3
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	430a      	orrs	r2, r1
 800ee22:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68da      	ldr	r2, [r3, #12]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee32:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f000 fae5 	bl	800f404 <HAL_RTC_WaitForSynchro>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00b      	beq.n	800ee58 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	22ff      	movs	r2, #255	; 0xff
 800ee46:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2204      	movs	r2, #4
 800ee4c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	e00a      	b.n	800ee6e <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	22ff      	movs	r2, #255	; 0xff
 800ee5e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2201      	movs	r2, #1
 800ee64:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ee6c:	2300      	movs	r3, #0
  }
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	371c      	adds	r7, #28
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd90      	pop	{r4, r7, pc}

0800ee76 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b086      	sub	sp, #24
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	60f8      	str	r0, [r7, #12]
 800ee7e:	60b9      	str	r1, [r7, #8]
 800ee80:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	691b      	ldr	r3, [r3, #16]
 800ee94:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800eea6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800eeaa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	0c1b      	lsrs	r3, r3, #16
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eeb6:	b2da      	uxtb	r2, r3
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	0a1b      	lsrs	r3, r3, #8
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eed4:	b2da      	uxtb	r2, r3
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	0c1b      	lsrs	r3, r3, #16
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d11a      	bne.n	800ef26 <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	4618      	mov	r0, r3
 800eef6:	f000 fafb 	bl	800f4f0 <RTC_Bcd2ToByte>
 800eefa:	4603      	mov	r3, r0
 800eefc:	461a      	mov	r2, r3
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	785b      	ldrb	r3, [r3, #1]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f000 faf2 	bl	800f4f0 <RTC_Bcd2ToByte>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	461a      	mov	r2, r3
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	789b      	ldrb	r3, [r3, #2]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f000 fae9 	bl	800f4f0 <RTC_Bcd2ToByte>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	461a      	mov	r2, r3
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b087      	sub	sp, #28
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	7f1b      	ldrb	r3, [r3, #28]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d101      	bne.n	800ef48 <HAL_RTC_SetDate+0x18>
 800ef44:	2302      	movs	r3, #2
 800ef46:	e08d      	b.n	800f064 <HAL_RTC_SetDate+0x134>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2202      	movs	r2, #2
 800ef52:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d10e      	bne.n	800ef78 <HAL_RTC_SetDate+0x48>
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	785b      	ldrb	r3, [r3, #1]
 800ef5e:	f003 0310 	and.w	r3, r3, #16
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d008      	beq.n	800ef78 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	785b      	ldrb	r3, [r3, #1]
 800ef6a:	f023 0310 	bic.w	r3, r3, #16
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	330a      	adds	r3, #10
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d11c      	bne.n	800efb8 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	78db      	ldrb	r3, [r3, #3]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 fa95 	bl	800f4b2 <RTC_ByteToBcd2>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	785b      	ldrb	r3, [r3, #1]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f000 fa8e 	bl	800f4b2 <RTC_ByteToBcd2>
 800ef96:	4603      	mov	r3, r0
 800ef98:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ef9a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	789b      	ldrb	r3, [r3, #2]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 fa86 	bl	800f4b2 <RTC_ByteToBcd2>
 800efa6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800efa8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800efb2:	4313      	orrs	r3, r2
 800efb4:	617b      	str	r3, [r7, #20]
 800efb6:	e00e      	b.n	800efd6 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	78db      	ldrb	r3, [r3, #3]
 800efbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	785b      	ldrb	r3, [r3, #1]
 800efc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800efc4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800efc6:	68ba      	ldr	r2, [r7, #8]
 800efc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800efca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800efd2:	4313      	orrs	r3, r2
 800efd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	22ca      	movs	r2, #202	; 0xca
 800efdc:	625a      	str	r2, [r3, #36]	; 0x24
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2253      	movs	r2, #83	; 0x53
 800efe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f000 fa39 	bl	800f45e <RTC_EnterInitMode>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00b      	beq.n	800f00a <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	22ff      	movs	r2, #255	; 0xff
 800eff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2204      	movs	r2, #4
 800effe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f006:	2301      	movs	r3, #1
 800f008:	e02c      	b.n	800f064 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f014:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f018:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68da      	ldr	r2, [r3, #12]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f028:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f000 f9ea 	bl	800f404 <HAL_RTC_WaitForSynchro>
 800f030:	4603      	mov	r3, r0
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00b      	beq.n	800f04e <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	22ff      	movs	r2, #255	; 0xff
 800f03c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2204      	movs	r2, #4
 800f042:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800f04a:	2301      	movs	r3, #1
 800f04c:	e00a      	b.n	800f064 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	22ff      	movs	r2, #255	; 0xff
 800f054:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2201      	movs	r2, #1
 800f05a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f062:	2300      	movs	r3, #0
  }
}
 800f064:	4618      	mov	r0, r3
 800f066:	371c      	adds	r7, #28
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd90      	pop	{r4, r7, pc}

0800f06c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f082:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f086:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	0c1b      	lsrs	r3, r3, #16
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	0a1b      	lsrs	r3, r3, #8
 800f096:	b2db      	uxtb	r3, r3
 800f098:	f003 031f 	and.w	r3, r3, #31
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0aa:	b2da      	uxtb	r2, r3
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	0b5b      	lsrs	r3, r3, #13
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	f003 0307 	and.w	r3, r3, #7
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d11a      	bne.n	800f0fc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	78db      	ldrb	r3, [r3, #3]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f000 fa10 	bl	800f4f0 <RTC_Bcd2ToByte>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	785b      	ldrb	r3, [r3, #1]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 fa07 	bl	800f4f0 <RTC_Bcd2ToByte>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	789b      	ldrb	r3, [r3, #2]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 f9fe 	bl	800f4f0 <RTC_Bcd2ToByte>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3718      	adds	r7, #24
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
	...

0800f108 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800f108:	b590      	push	{r4, r7, lr}
 800f10a:	b089      	sub	sp, #36	; 0x24
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800f114:	2300      	movs	r3, #0
 800f116:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 800f118:	2300      	movs	r3, #0
 800f11a:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 800f11c:	2300      	movs	r3, #0
 800f11e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	7f1b      	ldrb	r3, [r3, #28]
 800f124:	2b01      	cmp	r3, #1
 800f126:	d101      	bne.n	800f12c <HAL_RTC_SetAlarm_IT+0x24>
 800f128:	2302      	movs	r3, #2
 800f12a:	e11f      	b.n	800f36c <HAL_RTC_SetAlarm_IT+0x264>
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2201      	movs	r2, #1
 800f130:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2202      	movs	r2, #2
 800f136:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d137      	bne.n	800f1ae <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d102      	bne.n	800f152 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	2200      	movs	r2, #0
 800f150:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	4618      	mov	r0, r3
 800f158:	f000 f9ab 	bl	800f4b2 <RTC_ByteToBcd2>
 800f15c:	4603      	mov	r3, r0
 800f15e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	785b      	ldrb	r3, [r3, #1]
 800f164:	4618      	mov	r0, r3
 800f166:	f000 f9a4 	bl	800f4b2 <RTC_ByteToBcd2>
 800f16a:	4603      	mov	r3, r0
 800f16c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f16e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	789b      	ldrb	r3, [r3, #2]
 800f174:	4618      	mov	r0, r3
 800f176:	f000 f99c 	bl	800f4b2 <RTC_ByteToBcd2>
 800f17a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f17c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	78db      	ldrb	r3, [r3, #3]
 800f184:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f186:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f190:	4618      	mov	r0, r3
 800f192:	f000 f98e 	bl	800f4b2 <RTC_ByteToBcd2>
 800f196:	4603      	mov	r3, r0
 800f198:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f19a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f1a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	61fb      	str	r3, [r7, #28]
 800f1ac:	e023      	b.n	800f1f6 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d102      	bne.n	800f1c2 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	785b      	ldrb	r3, [r3, #1]
 800f1cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f1ce:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f1d4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	78db      	ldrb	r3, [r3, #3]
 800f1da:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f1dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f1e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f1e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f1ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	685a      	ldr	r2, [r3, #4]
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	699b      	ldr	r3, [r3, #24]
 800f1fe:	4313      	orrs	r3, r2
 800f200:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	22ca      	movs	r2, #202	; 0xca
 800f208:	625a      	str	r2, [r3, #36]	; 0x24
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2253      	movs	r2, #83	; 0x53
 800f210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f21a:	d148      	bne.n	800f2ae <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	689a      	ldr	r2, [r3, #8]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f22a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	b2da      	uxtb	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800f23c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f23e:	f7fd fa0f 	bl	800c660 <HAL_GetTick>
 800f242:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f244:	e013      	b.n	800f26e <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800f246:	f7fd fa0b 	bl	800c660 <HAL_GetTick>
 800f24a:	4602      	mov	r2, r0
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	1ad3      	subs	r3, r2, r3
 800f250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f254:	d90b      	bls.n	800f26e <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	22ff      	movs	r2, #255	; 0xff
 800f25c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2203      	movs	r2, #3
 800f262:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2200      	movs	r2, #0
 800f268:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800f26a:	2303      	movs	r3, #3
 800f26c:	e07e      	b.n	800f36c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d0e4      	beq.n	800f246 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	69fa      	ldr	r2, [r7, #28]
 800f282:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	697a      	ldr	r2, [r7, #20]
 800f28a:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	689a      	ldr	r2, [r3, #8]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f29a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	689a      	ldr	r2, [r3, #8]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f2aa:	609a      	str	r2, [r3, #8]
 800f2ac:	e047      	b.n	800f33e <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	689a      	ldr	r2, [r3, #8]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f2bc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 800f2ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f2d0:	f7fd f9c6 	bl	800c660 <HAL_GetTick>
 800f2d4:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f2d6:	e013      	b.n	800f300 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800f2d8:	f7fd f9c2 	bl	800c660 <HAL_GetTick>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	1ad3      	subs	r3, r2, r3
 800f2e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f2e6:	d90b      	bls.n	800f300 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	22ff      	movs	r2, #255	; 0xff
 800f2ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2203      	movs	r2, #3
 800f2f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800f2fc:	2303      	movs	r3, #3
 800f2fe:	e035      	b.n	800f36c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	f003 0302 	and.w	r3, r3, #2
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d0e4      	beq.n	800f2d8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	69fa      	ldr	r2, [r7, #28]
 800f314:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	697a      	ldr	r2, [r7, #20]
 800f31c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	689a      	ldr	r2, [r3, #8]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f32c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	689a      	ldr	r2, [r3, #8]
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f33c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800f33e:	4b0d      	ldr	r3, [pc, #52]	; (800f374 <HAL_RTC_SetAlarm_IT+0x26c>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a0c      	ldr	r2, [pc, #48]	; (800f374 <HAL_RTC_SetAlarm_IT+0x26c>)
 800f344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f348:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800f34a:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <HAL_RTC_SetAlarm_IT+0x26c>)
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	4a09      	ldr	r2, [pc, #36]	; (800f374 <HAL_RTC_SetAlarm_IT+0x26c>)
 800f350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f354:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	22ff      	movs	r2, #255	; 0xff
 800f35c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2201      	movs	r2, #1
 800f362:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2200      	movs	r2, #0
 800f368:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3724      	adds	r7, #36	; 0x24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd90      	pop	{r4, r7, pc}
 800f374:	40010400 	.word	0x40010400

0800f378 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d012      	beq.n	800f3b4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00b      	beq.n	800f3b4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7f7 f877 	bl	8006490 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800f3b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d012      	beq.n	800f3e8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00b      	beq.n	800f3e8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 f8a8 	bl	800f526 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f462 7220 	orn	r2, r2, #640	; 0x280
 800f3e6:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800f3e8:	4b05      	ldr	r3, [pc, #20]	; (800f400 <HAL_RTC_AlarmIRQHandler+0x88>)
 800f3ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f3ee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	775a      	strb	r2, [r3, #29]
}
 800f3f6:	bf00      	nop
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	40010400 	.word	0x40010400

0800f404 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	689b      	ldr	r3, [r3, #8]
 800f412:	f003 0320 	and.w	r3, r3, #32
 800f416:	2b00      	cmp	r3, #0
 800f418:	d11c      	bne.n	800f454 <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	68da      	ldr	r2, [r3, #12]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f428:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f42a:	f7fd f919 	bl	800c660 <HAL_GetTick>
 800f42e:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f430:	e009      	b.n	800f446 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800f432:	f7fd f915 	bl	800c660 <HAL_GetTick>
 800f436:	4602      	mov	r2, r0
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	1ad3      	subs	r3, r2, r3
 800f43c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f440:	d901      	bls.n	800f446 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 800f442:	2303      	movs	r3, #3
 800f444:	e007      	b.n	800f456 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	f003 0320 	and.w	r3, r3, #32
 800f450:	2b00      	cmp	r3, #0
 800f452:	d0ee      	beq.n	800f432 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 800f454:	2300      	movs	r3, #0
}
 800f456:	4618      	mov	r0, r3
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f45e:	b580      	push	{r7, lr}
 800f460:	b084      	sub	sp, #16
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f470:	2b00      	cmp	r3, #0
 800f472:	d119      	bne.n	800f4a8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f04f 32ff 	mov.w	r2, #4294967295
 800f47c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f47e:	f7fd f8ef 	bl	800c660 <HAL_GetTick>
 800f482:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f484:	e009      	b.n	800f49a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800f486:	f7fd f8eb 	bl	800c660 <HAL_GetTick>
 800f48a:	4602      	mov	r2, r0
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f494:	d901      	bls.n	800f49a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800f496:	2303      	movs	r3, #3
 800f498:	e007      	b.n	800f4aa <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d0ee      	beq.n	800f486 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800f4a8:	2300      	movs	r3, #0
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f4b2:	b480      	push	{r7}
 800f4b4:	b085      	sub	sp, #20
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800f4c0:	79fb      	ldrb	r3, [r7, #7]
 800f4c2:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800f4c4:	e005      	b.n	800f4d2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800f4cc:	7afb      	ldrb	r3, [r7, #11]
 800f4ce:	3b0a      	subs	r3, #10
 800f4d0:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800f4d2:	7afb      	ldrb	r3, [r7, #11]
 800f4d4:	2b09      	cmp	r3, #9
 800f4d6:	d8f6      	bhi.n	800f4c6 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	011b      	lsls	r3, r3, #4
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	7afb      	ldrb	r3, [r7, #11]
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	b2db      	uxtb	r3, r3
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3714      	adds	r7, #20
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bc80      	pop	{r7}
 800f4ee:	4770      	bx	lr

0800f4f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b085      	sub	sp, #20
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f4fa:	79fb      	ldrb	r3, [r7, #7]
 800f4fc:	091b      	lsrs	r3, r3, #4
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	461a      	mov	r2, r3
 800f502:	4613      	mov	r3, r2
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	4413      	add	r3, r2
 800f508:	005b      	lsls	r3, r3, #1
 800f50a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	b2da      	uxtb	r2, r3
 800f510:	79fb      	ldrb	r3, [r7, #7]
 800f512:	f003 030f 	and.w	r3, r3, #15
 800f516:	b2db      	uxtb	r3, r3
 800f518:	4413      	add	r3, r2
 800f51a:	b2db      	uxtb	r3, r3
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3714      	adds	r7, #20
 800f520:	46bd      	mov	sp, r7
 800f522:	bc80      	pop	{r7}
 800f524:	4770      	bx	lr

0800f526 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800f526:	b480      	push	{r7}
 800f528:	b083      	sub	sp, #12
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800f52e:	bf00      	nop
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	bc80      	pop	{r7}
 800f536:	4770      	bx	lr

0800f538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d101      	bne.n	800f54a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f546:	2301      	movs	r3, #1
 800f548:	e031      	b.n	800f5ae <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f550:	b2db      	uxtb	r3, r3
 800f552:	2b00      	cmp	r3, #0
 800f554:	d106      	bne.n	800f564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7f7 f8b8 	bl	80066d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2202      	movs	r2, #2
 800f568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3304      	adds	r3, #4
 800f574:	4619      	mov	r1, r3
 800f576:	4610      	mov	r0, r2
 800f578:	f000 fafe 	bl	800fb78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2201      	movs	r2, #1
 800f598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
	...

0800f5b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b085      	sub	sp, #20
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d001      	beq.n	800f5d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e032      	b.n	800f636 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5e0:	d00e      	beq.n	800f600 <HAL_TIM_Base_Start+0x48>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4a16      	ldr	r2, [pc, #88]	; (800f640 <HAL_TIM_Base_Start+0x88>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d009      	beq.n	800f600 <HAL_TIM_Base_Start+0x48>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a14      	ldr	r2, [pc, #80]	; (800f644 <HAL_TIM_Base_Start+0x8c>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d004      	beq.n	800f600 <HAL_TIM_Base_Start+0x48>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4a13      	ldr	r2, [pc, #76]	; (800f648 <HAL_TIM_Base_Start+0x90>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d111      	bne.n	800f624 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	689b      	ldr	r3, [r3, #8]
 800f606:	f003 0307 	and.w	r3, r3, #7
 800f60a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2b06      	cmp	r3, #6
 800f610:	d010      	beq.n	800f634 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f042 0201 	orr.w	r2, r2, #1
 800f620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f622:	e007      	b.n	800f634 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f042 0201 	orr.w	r2, r2, #1
 800f632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bc80      	pop	{r7}
 800f63e:	4770      	bx	lr
 800f640:	40000400 	.word	0x40000400
 800f644:	40000800 	.word	0x40000800
 800f648:	40010800 	.word	0x40010800

0800f64c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d101      	bne.n	800f65e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f65a:	2301      	movs	r3, #1
 800f65c:	e031      	b.n	800f6c2 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d106      	bne.n	800f678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7f7 f872 	bl	800675c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2202      	movs	r2, #2
 800f67c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3304      	adds	r3, #4
 800f688:	4619      	mov	r1, r3
 800f68a:	4610      	mov	r0, r2
 800f68c:	f000 fa74 	bl	800fb78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2201      	movs	r2, #1
 800f694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
	...

0800f6cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d109      	bne.n	800f6f0 <HAL_TIM_PWM_Start+0x24>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	bf14      	ite	ne
 800f6e8:	2301      	movne	r3, #1
 800f6ea:	2300      	moveq	r3, #0
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	e022      	b.n	800f736 <HAL_TIM_PWM_Start+0x6a>
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	2b04      	cmp	r3, #4
 800f6f4:	d109      	bne.n	800f70a <HAL_TIM_PWM_Start+0x3e>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	bf14      	ite	ne
 800f702:	2301      	movne	r3, #1
 800f704:	2300      	moveq	r3, #0
 800f706:	b2db      	uxtb	r3, r3
 800f708:	e015      	b.n	800f736 <HAL_TIM_PWM_Start+0x6a>
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	2b08      	cmp	r3, #8
 800f70e:	d109      	bne.n	800f724 <HAL_TIM_PWM_Start+0x58>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f716:	b2db      	uxtb	r3, r3
 800f718:	2b01      	cmp	r3, #1
 800f71a:	bf14      	ite	ne
 800f71c:	2301      	movne	r3, #1
 800f71e:	2300      	moveq	r3, #0
 800f720:	b2db      	uxtb	r3, r3
 800f722:	e008      	b.n	800f736 <HAL_TIM_PWM_Start+0x6a>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	bf14      	ite	ne
 800f730:	2301      	movne	r3, #1
 800f732:	2300      	moveq	r3, #0
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b00      	cmp	r3, #0
 800f738:	d001      	beq.n	800f73e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f73a:	2301      	movs	r3, #1
 800f73c:	e051      	b.n	800f7e2 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d104      	bne.n	800f74e <HAL_TIM_PWM_Start+0x82>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2202      	movs	r2, #2
 800f748:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f74c:	e013      	b.n	800f776 <HAL_TIM_PWM_Start+0xaa>
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	2b04      	cmp	r3, #4
 800f752:	d104      	bne.n	800f75e <HAL_TIM_PWM_Start+0x92>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2202      	movs	r2, #2
 800f758:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800f75c:	e00b      	b.n	800f776 <HAL_TIM_PWM_Start+0xaa>
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	2b08      	cmp	r3, #8
 800f762:	d104      	bne.n	800f76e <HAL_TIM_PWM_Start+0xa2>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2202      	movs	r2, #2
 800f768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f76c:	e003      	b.n	800f776 <HAL_TIM_PWM_Start+0xaa>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2202      	movs	r2, #2
 800f772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2201      	movs	r2, #1
 800f77c:	6839      	ldr	r1, [r7, #0]
 800f77e:	4618      	mov	r0, r3
 800f780:	f000 fbf5 	bl	800ff6e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f78c:	d00e      	beq.n	800f7ac <HAL_TIM_PWM_Start+0xe0>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4a16      	ldr	r2, [pc, #88]	; (800f7ec <HAL_TIM_PWM_Start+0x120>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d009      	beq.n	800f7ac <HAL_TIM_PWM_Start+0xe0>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a14      	ldr	r2, [pc, #80]	; (800f7f0 <HAL_TIM_PWM_Start+0x124>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d004      	beq.n	800f7ac <HAL_TIM_PWM_Start+0xe0>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a13      	ldr	r2, [pc, #76]	; (800f7f4 <HAL_TIM_PWM_Start+0x128>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d111      	bne.n	800f7d0 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	689b      	ldr	r3, [r3, #8]
 800f7b2:	f003 0307 	and.w	r3, r3, #7
 800f7b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	2b06      	cmp	r3, #6
 800f7bc:	d010      	beq.n	800f7e0 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f042 0201 	orr.w	r2, r2, #1
 800f7cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7ce:	e007      	b.n	800f7e0 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f042 0201 	orr.w	r2, r2, #1
 800f7de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	40000400 	.word	0x40000400
 800f7f0:	40000800 	.word	0x40000800
 800f7f4:	40010800 	.word	0x40010800

0800f7f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2200      	movs	r2, #0
 800f808:	6839      	ldr	r1, [r7, #0]
 800f80a:	4618      	mov	r0, r3
 800f80c:	f000 fbaf 	bl	800ff6e <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	6a1a      	ldr	r2, [r3, #32]
 800f816:	f241 1311 	movw	r3, #4369	; 0x1111
 800f81a:	4013      	ands	r3, r2
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d107      	bne.n	800f830 <HAL_TIM_PWM_Stop+0x38>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f022 0201 	bic.w	r2, r2, #1
 800f82e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d104      	bne.n	800f840 <HAL_TIM_PWM_Stop+0x48>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2201      	movs	r2, #1
 800f83a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f83e:	e013      	b.n	800f868 <HAL_TIM_PWM_Stop+0x70>
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	2b04      	cmp	r3, #4
 800f844:	d104      	bne.n	800f850 <HAL_TIM_PWM_Stop+0x58>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800f84e:	e00b      	b.n	800f868 <HAL_TIM_PWM_Stop+0x70>
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	2b08      	cmp	r3, #8
 800f854:	d104      	bne.n	800f860 <HAL_TIM_PWM_Stop+0x68>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2201      	movs	r2, #1
 800f85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f85e:	e003      	b.n	800f868 <HAL_TIM_PWM_Stop+0x70>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2201      	movs	r2, #1
 800f864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f868:	2300      	movs	r3, #0
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3708      	adds	r7, #8
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
	...

0800f874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f886:	2b01      	cmp	r3, #1
 800f888:	d101      	bne.n	800f88e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f88a:	2302      	movs	r3, #2
 800f88c:	e0ac      	b.n	800f9e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2201      	movs	r2, #1
 800f892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b0c      	cmp	r3, #12
 800f89a:	f200 809f 	bhi.w	800f9dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800f89e:	a201      	add	r2, pc, #4	; (adr r2, 800f8a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a4:	0800f8d9 	.word	0x0800f8d9
 800f8a8:	0800f9dd 	.word	0x0800f9dd
 800f8ac:	0800f9dd 	.word	0x0800f9dd
 800f8b0:	0800f9dd 	.word	0x0800f9dd
 800f8b4:	0800f919 	.word	0x0800f919
 800f8b8:	0800f9dd 	.word	0x0800f9dd
 800f8bc:	0800f9dd 	.word	0x0800f9dd
 800f8c0:	0800f9dd 	.word	0x0800f9dd
 800f8c4:	0800f95b 	.word	0x0800f95b
 800f8c8:	0800f9dd 	.word	0x0800f9dd
 800f8cc:	0800f9dd 	.word	0x0800f9dd
 800f8d0:	0800f9dd 	.word	0x0800f9dd
 800f8d4:	0800f99b 	.word	0x0800f99b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	68b9      	ldr	r1, [r7, #8]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f000 f9ba 	bl	800fc58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	699a      	ldr	r2, [r3, #24]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f042 0208 	orr.w	r2, r2, #8
 800f8f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	699a      	ldr	r2, [r3, #24]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f022 0204 	bic.w	r2, r2, #4
 800f902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	6999      	ldr	r1, [r3, #24]
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	68da      	ldr	r2, [r3, #12]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	430a      	orrs	r2, r1
 800f914:	619a      	str	r2, [r3, #24]
      break;
 800f916:	e062      	b.n	800f9de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	68b9      	ldr	r1, [r7, #8]
 800f91e:	4618      	mov	r0, r3
 800f920:	f000 f9d6 	bl	800fcd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	699a      	ldr	r2, [r3, #24]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	699a      	ldr	r2, [r3, #24]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	6999      	ldr	r1, [r3, #24]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	021a      	lsls	r2, r3, #8
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	430a      	orrs	r2, r1
 800f956:	619a      	str	r2, [r3, #24]
      break;
 800f958:	e041      	b.n	800f9de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	68b9      	ldr	r1, [r7, #8]
 800f960:	4618      	mov	r0, r3
 800f962:	f000 f9f3 	bl	800fd4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	69da      	ldr	r2, [r3, #28]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f042 0208 	orr.w	r2, r2, #8
 800f974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	69da      	ldr	r2, [r3, #28]
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f022 0204 	bic.w	r2, r2, #4
 800f984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	69d9      	ldr	r1, [r3, #28]
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	68da      	ldr	r2, [r3, #12]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	430a      	orrs	r2, r1
 800f996:	61da      	str	r2, [r3, #28]
      break;
 800f998:	e021      	b.n	800f9de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	68b9      	ldr	r1, [r7, #8]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f000 fa10 	bl	800fdc6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	69da      	ldr	r2, [r3, #28]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	69da      	ldr	r2, [r3, #28]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	69d9      	ldr	r1, [r3, #28]
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	021a      	lsls	r2, r3, #8
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	430a      	orrs	r2, r1
 800f9d8:	61da      	str	r2, [r3, #28]
      break;
 800f9da:	e000      	b.n	800f9de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800f9dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800f9e6:	2300      	movs	r3, #0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d101      	bne.n	800fa08 <HAL_TIM_ConfigClockSource+0x18>
 800fa04:	2302      	movs	r3, #2
 800fa06:	e0b3      	b.n	800fb70 <HAL_TIM_ConfigClockSource+0x180>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2202      	movs	r2, #2
 800fa14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	689b      	ldr	r3, [r3, #8]
 800fa1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fa26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fa2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa40:	d03e      	beq.n	800fac0 <HAL_TIM_ConfigClockSource+0xd0>
 800fa42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa46:	f200 8087 	bhi.w	800fb58 <HAL_TIM_ConfigClockSource+0x168>
 800fa4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa4e:	f000 8085 	beq.w	800fb5c <HAL_TIM_ConfigClockSource+0x16c>
 800fa52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa56:	d87f      	bhi.n	800fb58 <HAL_TIM_ConfigClockSource+0x168>
 800fa58:	2b70      	cmp	r3, #112	; 0x70
 800fa5a:	d01a      	beq.n	800fa92 <HAL_TIM_ConfigClockSource+0xa2>
 800fa5c:	2b70      	cmp	r3, #112	; 0x70
 800fa5e:	d87b      	bhi.n	800fb58 <HAL_TIM_ConfigClockSource+0x168>
 800fa60:	2b60      	cmp	r3, #96	; 0x60
 800fa62:	d050      	beq.n	800fb06 <HAL_TIM_ConfigClockSource+0x116>
 800fa64:	2b60      	cmp	r3, #96	; 0x60
 800fa66:	d877      	bhi.n	800fb58 <HAL_TIM_ConfigClockSource+0x168>
 800fa68:	2b50      	cmp	r3, #80	; 0x50
 800fa6a:	d03c      	beq.n	800fae6 <HAL_TIM_ConfigClockSource+0xf6>
 800fa6c:	2b50      	cmp	r3, #80	; 0x50
 800fa6e:	d873      	bhi.n	800fb58 <HAL_TIM_ConfigClockSource+0x168>
 800fa70:	2b40      	cmp	r3, #64	; 0x40
 800fa72:	d058      	beq.n	800fb26 <HAL_TIM_ConfigClockSource+0x136>
 800fa74:	2b40      	cmp	r3, #64	; 0x40
 800fa76:	d86f      	bhi.n	800fb58 <HAL_TIM_ConfigClockSource+0x168>
 800fa78:	2b30      	cmp	r3, #48	; 0x30
 800fa7a:	d064      	beq.n	800fb46 <HAL_TIM_ConfigClockSource+0x156>
 800fa7c:	2b30      	cmp	r3, #48	; 0x30
 800fa7e:	d86b      	bhi.n	800fb58 <HAL_TIM_ConfigClockSource+0x168>
 800fa80:	2b20      	cmp	r3, #32
 800fa82:	d060      	beq.n	800fb46 <HAL_TIM_ConfigClockSource+0x156>
 800fa84:	2b20      	cmp	r3, #32
 800fa86:	d867      	bhi.n	800fb58 <HAL_TIM_ConfigClockSource+0x168>
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d05c      	beq.n	800fb46 <HAL_TIM_ConfigClockSource+0x156>
 800fa8c:	2b10      	cmp	r3, #16
 800fa8e:	d05a      	beq.n	800fb46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800fa90:	e062      	b.n	800fb58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6818      	ldr	r0, [r3, #0]
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	6899      	ldr	r1, [r3, #8]
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	f000 fa45 	bl	800ff30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fab4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	609a      	str	r2, [r3, #8]
      break;
 800fabe:	e04e      	b.n	800fb5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6818      	ldr	r0, [r3, #0]
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	6899      	ldr	r1, [r3, #8]
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	685a      	ldr	r2, [r3, #4]
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	f000 fa2e 	bl	800ff30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	689a      	ldr	r2, [r3, #8]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fae2:	609a      	str	r2, [r3, #8]
      break;
 800fae4:	e03b      	b.n	800fb5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6818      	ldr	r0, [r3, #0]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	6859      	ldr	r1, [r3, #4]
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	461a      	mov	r2, r3
 800faf4:	f000 f9a5 	bl	800fe42 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2150      	movs	r1, #80	; 0x50
 800fafe:	4618      	mov	r0, r3
 800fb00:	f000 f9fc 	bl	800fefc <TIM_ITRx_SetConfig>
      break;
 800fb04:	e02b      	b.n	800fb5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6818      	ldr	r0, [r3, #0]
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	6859      	ldr	r1, [r3, #4]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	461a      	mov	r2, r3
 800fb14:	f000 f9c3 	bl	800fe9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2160      	movs	r1, #96	; 0x60
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 f9ec 	bl	800fefc <TIM_ITRx_SetConfig>
      break;
 800fb24:	e01b      	b.n	800fb5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6818      	ldr	r0, [r3, #0]
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	6859      	ldr	r1, [r3, #4]
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	461a      	mov	r2, r3
 800fb34:	f000 f985 	bl	800fe42 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2140      	movs	r1, #64	; 0x40
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f000 f9dc 	bl	800fefc <TIM_ITRx_SetConfig>
      break;
 800fb44:	e00b      	b.n	800fb5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4619      	mov	r1, r3
 800fb50:	4610      	mov	r0, r2
 800fb52:	f000 f9d3 	bl	800fefc <TIM_ITRx_SetConfig>
        break;
 800fb56:	e002      	b.n	800fb5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800fb58:	bf00      	nop
 800fb5a:	e000      	b.n	800fb5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800fb5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2201      	movs	r2, #1
 800fb62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb8e:	d00f      	beq.n	800fbb0 <TIM_Base_SetConfig+0x38>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4a2b      	ldr	r2, [pc, #172]	; (800fc40 <TIM_Base_SetConfig+0xc8>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d00b      	beq.n	800fbb0 <TIM_Base_SetConfig+0x38>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4a2a      	ldr	r2, [pc, #168]	; (800fc44 <TIM_Base_SetConfig+0xcc>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d007      	beq.n	800fbb0 <TIM_Base_SetConfig+0x38>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4a29      	ldr	r2, [pc, #164]	; (800fc48 <TIM_Base_SetConfig+0xd0>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d003      	beq.n	800fbb0 <TIM_Base_SetConfig+0x38>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a28      	ldr	r2, [pc, #160]	; (800fc4c <TIM_Base_SetConfig+0xd4>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d108      	bne.n	800fbc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbc8:	d017      	beq.n	800fbfa <TIM_Base_SetConfig+0x82>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4a1c      	ldr	r2, [pc, #112]	; (800fc40 <TIM_Base_SetConfig+0xc8>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d013      	beq.n	800fbfa <TIM_Base_SetConfig+0x82>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a1b      	ldr	r2, [pc, #108]	; (800fc44 <TIM_Base_SetConfig+0xcc>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d00f      	beq.n	800fbfa <TIM_Base_SetConfig+0x82>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4a1a      	ldr	r2, [pc, #104]	; (800fc48 <TIM_Base_SetConfig+0xd0>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d00b      	beq.n	800fbfa <TIM_Base_SetConfig+0x82>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a19      	ldr	r2, [pc, #100]	; (800fc4c <TIM_Base_SetConfig+0xd4>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d007      	beq.n	800fbfa <TIM_Base_SetConfig+0x82>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4a18      	ldr	r2, [pc, #96]	; (800fc50 <TIM_Base_SetConfig+0xd8>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d003      	beq.n	800fbfa <TIM_Base_SetConfig+0x82>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4a17      	ldr	r2, [pc, #92]	; (800fc54 <TIM_Base_SetConfig+0xdc>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d108      	bne.n	800fc0c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	68fa      	ldr	r2, [r7, #12]
 800fc1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	689a      	ldr	r2, [r3, #8]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2201      	movs	r2, #1
 800fc34:	615a      	str	r2, [r3, #20]
}
 800fc36:	bf00      	nop
 800fc38:	3714      	adds	r7, #20
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bc80      	pop	{r7}
 800fc3e:	4770      	bx	lr
 800fc40:	40000400 	.word	0x40000400
 800fc44:	40000800 	.word	0x40000800
 800fc48:	40000c00 	.word	0x40000c00
 800fc4c:	40010800 	.word	0x40010800
 800fc50:	40010c00 	.word	0x40010c00
 800fc54:	40011000 	.word	0x40011000

0800fc58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b087      	sub	sp, #28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6a1b      	ldr	r3, [r3, #32]
 800fc66:	f023 0201 	bic.w	r2, r3, #1
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	699b      	ldr	r3, [r3, #24]
 800fc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f023 0303 	bic.w	r3, r3, #3
 800fc8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	68fa      	ldr	r2, [r7, #12]
 800fc96:	4313      	orrs	r3, r2
 800fc98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	f023 0302 	bic.w	r3, r3, #2
 800fca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	697a      	ldr	r2, [r7, #20]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	693a      	ldr	r2, [r7, #16]
 800fcb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	697a      	ldr	r2, [r7, #20]
 800fcc4:	621a      	str	r2, [r3, #32]
}
 800fcc6:	bf00      	nop
 800fcc8:	371c      	adds	r7, #28
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bc80      	pop	{r7}
 800fcce:	4770      	bx	lr

0800fcd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b087      	sub	sp, #28
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6a1b      	ldr	r3, [r3, #32]
 800fcde:	f023 0210 	bic.w	r2, r3, #16
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	021b      	lsls	r3, r3, #8
 800fd0e:	68fa      	ldr	r2, [r7, #12]
 800fd10:	4313      	orrs	r3, r2
 800fd12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	f023 0320 	bic.w	r3, r3, #32
 800fd1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	011b      	lsls	r3, r3, #4
 800fd22:	697a      	ldr	r2, [r7, #20]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	693a      	ldr	r2, [r7, #16]
 800fd2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	685a      	ldr	r2, [r3, #4]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	697a      	ldr	r2, [r7, #20]
 800fd40:	621a      	str	r2, [r3, #32]
}
 800fd42:	bf00      	nop
 800fd44:	371c      	adds	r7, #28
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bc80      	pop	{r7}
 800fd4a:	4770      	bx	lr

0800fd4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b087      	sub	sp, #28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6a1b      	ldr	r3, [r3, #32]
 800fd5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a1b      	ldr	r3, [r3, #32]
 800fd66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	69db      	ldr	r3, [r3, #28]
 800fd72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f023 0303 	bic.w	r3, r3, #3
 800fd82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	689b      	ldr	r3, [r3, #8]
 800fd9a:	021b      	lsls	r3, r3, #8
 800fd9c:	697a      	ldr	r2, [r7, #20]
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	693a      	ldr	r2, [r7, #16]
 800fda6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	68fa      	ldr	r2, [r7, #12]
 800fdac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	685a      	ldr	r2, [r3, #4]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	621a      	str	r2, [r3, #32]
}
 800fdbc:	bf00      	nop
 800fdbe:	371c      	adds	r7, #28
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bc80      	pop	{r7}
 800fdc4:	4770      	bx	lr

0800fdc6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fdc6:	b480      	push	{r7}
 800fdc8:	b087      	sub	sp, #28
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
 800fdce:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a1b      	ldr	r3, [r3, #32]
 800fdd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6a1b      	ldr	r3, [r3, #32]
 800fde0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	69db      	ldr	r3, [r3, #28]
 800fdec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdf4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdfc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	021b      	lsls	r3, r3, #8
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	031b      	lsls	r3, r3, #12
 800fe18:	697a      	ldr	r2, [r7, #20]
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	685a      	ldr	r2, [r3, #4]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	697a      	ldr	r2, [r7, #20]
 800fe36:	621a      	str	r2, [r3, #32]
}
 800fe38:	bf00      	nop
 800fe3a:	371c      	adds	r7, #28
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bc80      	pop	{r7}
 800fe40:	4770      	bx	lr

0800fe42 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe42:	b480      	push	{r7}
 800fe44:	b087      	sub	sp, #28
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	60f8      	str	r0, [r7, #12]
 800fe4a:	60b9      	str	r1, [r7, #8]
 800fe4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	6a1b      	ldr	r3, [r3, #32]
 800fe52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6a1b      	ldr	r3, [r3, #32]
 800fe58:	f023 0201 	bic.w	r2, r3, #1
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	699b      	ldr	r3, [r3, #24]
 800fe64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	011b      	lsls	r3, r3, #4
 800fe72:	693a      	ldr	r2, [r7, #16]
 800fe74:	4313      	orrs	r3, r2
 800fe76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	f023 030a 	bic.w	r3, r3, #10
 800fe7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	4313      	orrs	r3, r2
 800fe86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	693a      	ldr	r2, [r7, #16]
 800fe8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	621a      	str	r2, [r3, #32]
}
 800fe94:	bf00      	nop
 800fe96:	371c      	adds	r7, #28
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bc80      	pop	{r7}
 800fe9c:	4770      	bx	lr

0800fe9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe9e:	b480      	push	{r7}
 800fea0:	b087      	sub	sp, #28
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	60f8      	str	r0, [r7, #12]
 800fea6:	60b9      	str	r1, [r7, #8]
 800fea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6a1b      	ldr	r3, [r3, #32]
 800feae:	f023 0210 	bic.w	r2, r3, #16
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	699b      	ldr	r3, [r3, #24]
 800feba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6a1b      	ldr	r3, [r3, #32]
 800fec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	031b      	lsls	r3, r3, #12
 800fece:	697a      	ldr	r2, [r7, #20]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800feda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	011b      	lsls	r3, r3, #4
 800fee0:	693a      	ldr	r2, [r7, #16]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	697a      	ldr	r2, [r7, #20]
 800feea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	693a      	ldr	r2, [r7, #16]
 800fef0:	621a      	str	r2, [r3, #32]
}
 800fef2:	bf00      	nop
 800fef4:	371c      	adds	r7, #28
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bc80      	pop	{r7}
 800fefa:	4770      	bx	lr

0800fefc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	689b      	ldr	r3, [r3, #8]
 800ff0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff14:	683a      	ldr	r2, [r7, #0]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	f043 0307 	orr.w	r3, r3, #7
 800ff1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	68fa      	ldr	r2, [r7, #12]
 800ff24:	609a      	str	r2, [r3, #8]
}
 800ff26:	bf00      	nop
 800ff28:	3714      	adds	r7, #20
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bc80      	pop	{r7}
 800ff2e:	4770      	bx	lr

0800ff30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b087      	sub	sp, #28
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	021a      	lsls	r2, r3, #8
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	431a      	orrs	r2, r3
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	697a      	ldr	r2, [r7, #20]
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	697a      	ldr	r2, [r7, #20]
 800ff62:	609a      	str	r2, [r3, #8]
}
 800ff64:	bf00      	nop
 800ff66:	371c      	adds	r7, #28
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bc80      	pop	{r7}
 800ff6c:	4770      	bx	lr

0800ff6e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff6e:	b480      	push	{r7}
 800ff70:	b087      	sub	sp, #28
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	60f8      	str	r0, [r7, #12]
 800ff76:	60b9      	str	r1, [r7, #8]
 800ff78:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	f003 031f 	and.w	r3, r3, #31
 800ff80:	2201      	movs	r2, #1
 800ff82:	fa02 f303 	lsl.w	r3, r2, r3
 800ff86:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	6a1a      	ldr	r2, [r3, #32]
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	43db      	mvns	r3, r3
 800ff90:	401a      	ands	r2, r3
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	6a1a      	ldr	r2, [r3, #32]
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	f003 031f 	and.w	r3, r3, #31
 800ffa0:	6879      	ldr	r1, [r7, #4]
 800ffa2:	fa01 f303 	lsl.w	r3, r1, r3
 800ffa6:	431a      	orrs	r2, r3
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	621a      	str	r2, [r3, #32]
}
 800ffac:	bf00      	nop
 800ffae:	371c      	adds	r7, #28
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bc80      	pop	{r7}
 800ffb4:	4770      	bx	lr
	...

0800ffb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b085      	sub	sp, #20
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d101      	bne.n	800ffd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ffcc:	2302      	movs	r3, #2
 800ffce:	e046      	b.n	801005e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2202      	movs	r2, #2
 800ffdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68fa      	ldr	r2, [r7, #12]
 800fffe:	4313      	orrs	r3, r2
 8010000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	68fa      	ldr	r2, [r7, #12]
 8010008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010012:	d00e      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a13      	ldr	r2, [pc, #76]	; (8010068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d009      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a12      	ldr	r2, [pc, #72]	; (801006c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d004      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a10      	ldr	r2, [pc, #64]	; (8010070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d10c      	bne.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	68ba      	ldr	r2, [r7, #8]
 8010040:	4313      	orrs	r3, r2
 8010042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	68ba      	ldr	r2, [r7, #8]
 801004a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 801005c:	2300      	movs	r3, #0
}
 801005e:	4618      	mov	r0, r3
 8010060:	3714      	adds	r7, #20
 8010062:	46bd      	mov	sp, r7
 8010064:	bc80      	pop	{r7}
 8010066:	4770      	bx	lr
 8010068:	40000400 	.word	0x40000400
 801006c:	40000800 	.word	0x40000800
 8010070:	40010800 	.word	0x40010800

08010074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d101      	bne.n	8010086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010082:	2301      	movs	r3, #1
 8010084:	e03f      	b.n	8010106 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801008c:	b2db      	uxtb	r3, r3
 801008e:	2b00      	cmp	r3, #0
 8010090:	d106      	bne.n	80100a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f7f6 fbb4 	bl	8006808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2224      	movs	r2, #36	; 0x24
 80100a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68da      	ldr	r2, [r3, #12]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80100b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 fd79 	bl	8010bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	691a      	ldr	r2, [r3, #16]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80100cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	695a      	ldr	r2, [r3, #20]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80100dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	68da      	ldr	r2, [r3, #12]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80100ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2220      	movs	r2, #32
 80100f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2220      	movs	r2, #32
 8010100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b082      	sub	sp, #8
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d101      	bne.n	8010120 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 801011c:	2301      	movs	r3, #1
 801011e:	e021      	b.n	8010164 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2224      	movs	r2, #36	; 0x24
 8010124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	68da      	ldr	r2, [r3, #12]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010136:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7f6 fc25 	bl	8006988 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2200      	movs	r2, #0
 8010148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b08a      	sub	sp, #40	; 0x28
 8010170:	af02      	add	r7, sp, #8
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	603b      	str	r3, [r7, #0]
 8010178:	4613      	mov	r3, r2
 801017a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801017c:	2300      	movs	r3, #0
 801017e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010186:	b2db      	uxtb	r3, r3
 8010188:	2b20      	cmp	r3, #32
 801018a:	d17c      	bne.n	8010286 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d002      	beq.n	8010198 <HAL_UART_Transmit+0x2c>
 8010192:	88fb      	ldrh	r3, [r7, #6]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d101      	bne.n	801019c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010198:	2301      	movs	r3, #1
 801019a:	e075      	b.n	8010288 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d101      	bne.n	80101aa <HAL_UART_Transmit+0x3e>
 80101a6:	2302      	movs	r3, #2
 80101a8:	e06e      	b.n	8010288 <HAL_UART_Transmit+0x11c>
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2200      	movs	r2, #0
 80101b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2221      	movs	r2, #33	; 0x21
 80101bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80101c0:	f7fc fa4e 	bl	800c660 <HAL_GetTick>
 80101c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	88fa      	ldrh	r2, [r7, #6]
 80101ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	88fa      	ldrh	r2, [r7, #6]
 80101d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101da:	d108      	bne.n	80101ee <HAL_UART_Transmit+0x82>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d104      	bne.n	80101ee <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80101e4:	2300      	movs	r3, #0
 80101e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	61bb      	str	r3, [r7, #24]
 80101ec:	e003      	b.n	80101f6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80101f2:	2300      	movs	r3, #0
 80101f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80101fe:	e02a      	b.n	8010256 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	2200      	movs	r2, #0
 8010208:	2180      	movs	r1, #128	; 0x80
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f000 fae5 	bl	80107da <UART_WaitOnFlagUntilTimeout>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010216:	2303      	movs	r3, #3
 8010218:	e036      	b.n	8010288 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10b      	bne.n	8010238 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	461a      	mov	r2, r3
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801022e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	3302      	adds	r3, #2
 8010234:	61bb      	str	r3, [r7, #24]
 8010236:	e007      	b.n	8010248 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	781a      	ldrb	r2, [r3, #0]
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	3301      	adds	r3, #1
 8010246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801024c:	b29b      	uxth	r3, r3
 801024e:	3b01      	subs	r3, #1
 8010250:	b29a      	uxth	r2, r3
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801025a:	b29b      	uxth	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1cf      	bne.n	8010200 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	2200      	movs	r2, #0
 8010268:	2140      	movs	r1, #64	; 0x40
 801026a:	68f8      	ldr	r0, [r7, #12]
 801026c:	f000 fab5 	bl	80107da <UART_WaitOnFlagUntilTimeout>
 8010270:	4603      	mov	r3, r0
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010276:	2303      	movs	r3, #3
 8010278:	e006      	b.n	8010288 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2220      	movs	r2, #32
 801027e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010282:	2300      	movs	r3, #0
 8010284:	e000      	b.n	8010288 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010286:	2302      	movs	r3, #2
  }
}
 8010288:	4618      	mov	r0, r3
 801028a:	3720      	adds	r7, #32
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	4613      	mov	r3, r2
 801029c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	2b20      	cmp	r3, #32
 80102a8:	d130      	bne.n	801030c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d002      	beq.n	80102b6 <HAL_UART_Transmit_IT+0x26>
 80102b0:	88fb      	ldrh	r3, [r7, #6]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d101      	bne.n	80102ba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80102b6:	2301      	movs	r3, #1
 80102b8:	e029      	b.n	801030e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d101      	bne.n	80102c8 <HAL_UART_Transmit_IT+0x38>
 80102c4:	2302      	movs	r3, #2
 80102c6:	e022      	b.n	801030e <HAL_UART_Transmit_IT+0x7e>
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2201      	movs	r2, #1
 80102cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	88fa      	ldrh	r2, [r7, #6]
 80102da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	88fa      	ldrh	r2, [r7, #6]
 80102e0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2200      	movs	r2, #0
 80102e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2221      	movs	r2, #33	; 0x21
 80102ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2200      	movs	r2, #0
 80102f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	68da      	ldr	r2, [r3, #12]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010306:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010308:	2300      	movs	r3, #0
 801030a:	e000      	b.n	801030e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 801030c:	2302      	movs	r3, #2
  }
}
 801030e:	4618      	mov	r0, r3
 8010310:	3714      	adds	r7, #20
 8010312:	46bd      	mov	sp, r7
 8010314:	bc80      	pop	{r7}
 8010316:	4770      	bx	lr

08010318 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	4613      	mov	r3, r2
 8010324:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b20      	cmp	r3, #32
 8010330:	d11d      	bne.n	801036e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <HAL_UART_Receive_IT+0x26>
 8010338:	88fb      	ldrh	r3, [r7, #6]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d101      	bne.n	8010342 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801033e:	2301      	movs	r3, #1
 8010340:	e016      	b.n	8010370 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010348:	2b01      	cmp	r3, #1
 801034a:	d101      	bne.n	8010350 <HAL_UART_Receive_IT+0x38>
 801034c:	2302      	movs	r3, #2
 801034e:	e00f      	b.n	8010370 <HAL_UART_Receive_IT+0x58>
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2201      	movs	r2, #1
 8010354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2200      	movs	r2, #0
 801035c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 801035e:	88fb      	ldrh	r3, [r7, #6]
 8010360:	461a      	mov	r2, r3
 8010362:	68b9      	ldr	r1, [r7, #8]
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f000 fa82 	bl	801086e <UART_Start_Receive_IT>
 801036a:	4603      	mov	r3, r0
 801036c:	e000      	b.n	8010370 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 801036e:	2302      	movs	r3, #2
  }
}
 8010370:	4618      	mov	r0, r3
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	68da      	ldr	r2, [r3, #12]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801038e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	695a      	ldr	r2, [r3, #20]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f022 0201 	bic.w	r2, r2, #1
 801039e:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d107      	bne.n	80103b8 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	68da      	ldr	r2, [r3, #12]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f022 0210 	bic.w	r2, r2, #16
 80103b6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	695b      	ldr	r3, [r3, #20]
 80103be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103c2:	2b40      	cmp	r3, #64	; 0x40
 80103c4:	d12d      	bne.n	8010422 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	695a      	ldr	r2, [r3, #20]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80103d4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d013      	beq.n	8010406 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e2:	4a19      	ldr	r2, [pc, #100]	; (8010448 <HAL_UART_AbortReceive_IT+0xd0>)
 80103e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fc ff58 	bl	800d2a0 <HAL_DMA_Abort_IT>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d022      	beq.n	801043c <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103fc:	687a      	ldr	r2, [r7, #4]
 80103fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010400:	4610      	mov	r0, r2
 8010402:	4798      	blx	r3
 8010404:	e01a      	b.n	801043c <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2220      	movs	r2, #32
 8010410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 f9c9 	bl	80107b2 <HAL_UART_AbortReceiveCpltCallback>
 8010420:	e00c      	b.n	801043c <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2220      	movs	r2, #32
 801042c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 f9bb 	bl	80107b2 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	08010961 	.word	0x08010961

0801044c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b08a      	sub	sp, #40	; 0x28
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	695b      	ldr	r3, [r3, #20]
 801046a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 801046c:	2300      	movs	r3, #0
 801046e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8010470:	2300      	movs	r3, #0
 8010472:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010476:	f003 030f 	and.w	r3, r3, #15
 801047a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d10d      	bne.n	801049e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010484:	f003 0320 	and.w	r3, r3, #32
 8010488:	2b00      	cmp	r3, #0
 801048a:	d008      	beq.n	801049e <HAL_UART_IRQHandler+0x52>
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	f003 0320 	and.w	r3, r3, #32
 8010492:	2b00      	cmp	r3, #0
 8010494:	d003      	beq.n	801049e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 fae1 	bl	8010a5e <UART_Receive_IT>
      return;
 801049c:	e17b      	b.n	8010796 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f000 80b1 	beq.w	8010608 <HAL_UART_IRQHandler+0x1bc>
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	f003 0301 	and.w	r3, r3, #1
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d105      	bne.n	80104bc <HAL_UART_IRQHandler+0x70>
 80104b0:	6a3b      	ldr	r3, [r7, #32]
 80104b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f000 80a6 	beq.w	8010608 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80104bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104be:	f003 0301 	and.w	r3, r3, #1
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00a      	beq.n	80104dc <HAL_UART_IRQHandler+0x90>
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d005      	beq.n	80104dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104d4:	f043 0201 	orr.w	r2, r3, #1
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80104dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104de:	f003 0304 	and.w	r3, r3, #4
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00a      	beq.n	80104fc <HAL_UART_IRQHandler+0xb0>
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	f003 0301 	and.w	r3, r3, #1
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d005      	beq.n	80104fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f4:	f043 0202 	orr.w	r2, r3, #2
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	f003 0302 	and.w	r3, r3, #2
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00a      	beq.n	801051c <HAL_UART_IRQHandler+0xd0>
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	f003 0301 	and.w	r3, r3, #1
 801050c:	2b00      	cmp	r3, #0
 801050e:	d005      	beq.n	801051c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010514:	f043 0204 	orr.w	r2, r3, #4
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	f003 0308 	and.w	r3, r3, #8
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00f      	beq.n	8010546 <HAL_UART_IRQHandler+0xfa>
 8010526:	6a3b      	ldr	r3, [r7, #32]
 8010528:	f003 0320 	and.w	r3, r3, #32
 801052c:	2b00      	cmp	r3, #0
 801052e:	d104      	bne.n	801053a <HAL_UART_IRQHandler+0xee>
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	f003 0301 	and.w	r3, r3, #1
 8010536:	2b00      	cmp	r3, #0
 8010538:	d005      	beq.n	8010546 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801053e:	f043 0208 	orr.w	r2, r3, #8
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801054a:	2b00      	cmp	r3, #0
 801054c:	f000 811e 	beq.w	801078c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010552:	f003 0320 	and.w	r3, r3, #32
 8010556:	2b00      	cmp	r3, #0
 8010558:	d007      	beq.n	801056a <HAL_UART_IRQHandler+0x11e>
 801055a:	6a3b      	ldr	r3, [r7, #32]
 801055c:	f003 0320 	and.w	r3, r3, #32
 8010560:	2b00      	cmp	r3, #0
 8010562:	d002      	beq.n	801056a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 fa7a 	bl	8010a5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	695b      	ldr	r3, [r3, #20]
 8010570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010574:	2b40      	cmp	r3, #64	; 0x40
 8010576:	bf0c      	ite	eq
 8010578:	2301      	moveq	r3, #1
 801057a:	2300      	movne	r3, #0
 801057c:	b2db      	uxtb	r3, r3
 801057e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010584:	f003 0308 	and.w	r3, r3, #8
 8010588:	2b00      	cmp	r3, #0
 801058a:	d102      	bne.n	8010592 <HAL_UART_IRQHandler+0x146>
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d031      	beq.n	80105f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 f9a4 	bl	80108e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	695b      	ldr	r3, [r3, #20]
 801059e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105a2:	2b40      	cmp	r3, #64	; 0x40
 80105a4:	d123      	bne.n	80105ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	695a      	ldr	r2, [r3, #20]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d013      	beq.n	80105e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c2:	4a76      	ldr	r2, [pc, #472]	; (801079c <HAL_UART_IRQHandler+0x350>)
 80105c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fc fe68 	bl	800d2a0 <HAL_DMA_Abort_IT>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d016      	beq.n	8010604 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80105e0:	4610      	mov	r0, r2
 80105e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105e4:	e00e      	b.n	8010604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 f8da 	bl	80107a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105ec:	e00a      	b.n	8010604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 f8d6 	bl	80107a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105f4:	e006      	b.n	8010604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 f8d2 	bl	80107a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2200      	movs	r2, #0
 8010600:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010602:	e0c3      	b.n	801078c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010604:	bf00      	nop
    return;
 8010606:	e0c1      	b.n	801078c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801060c:	2b01      	cmp	r3, #1
 801060e:	f040 80a1 	bne.w	8010754 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	f003 0310 	and.w	r3, r3, #16
 8010618:	2b00      	cmp	r3, #0
 801061a:	f000 809b 	beq.w	8010754 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 801061e:	6a3b      	ldr	r3, [r7, #32]
 8010620:	f003 0310 	and.w	r3, r3, #16
 8010624:	2b00      	cmp	r3, #0
 8010626:	f000 8095 	beq.w	8010754 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801062a:	2300      	movs	r3, #0
 801062c:	60fb      	str	r3, [r7, #12]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	60fb      	str	r3, [r7, #12]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	60fb      	str	r3, [r7, #12]
 801063e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	695b      	ldr	r3, [r3, #20]
 8010646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801064a:	2b40      	cmp	r3, #64	; 0x40
 801064c:	d14e      	bne.n	80106ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8010658:	8a3b      	ldrh	r3, [r7, #16]
 801065a:	2b00      	cmp	r3, #0
 801065c:	f000 8098 	beq.w	8010790 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010664:	8a3a      	ldrh	r2, [r7, #16]
 8010666:	429a      	cmp	r2, r3
 8010668:	f080 8092 	bcs.w	8010790 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	8a3a      	ldrh	r2, [r7, #16]
 8010670:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010676:	699b      	ldr	r3, [r3, #24]
 8010678:	2b20      	cmp	r3, #32
 801067a:	d02b      	beq.n	80106d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	68da      	ldr	r2, [r3, #12]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801068a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	695a      	ldr	r2, [r3, #20]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f022 0201 	bic.w	r2, r2, #1
 801069a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	695a      	ldr	r2, [r3, #20]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80106aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2220      	movs	r2, #32
 80106b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	68da      	ldr	r2, [r3, #12]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f022 0210 	bic.w	r2, r2, #16
 80106c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fc fda9 	bl	800d226 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80106dc:	b29b      	uxth	r3, r3
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	4619      	mov	r1, r3
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f000 f86d 	bl	80107c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80106ea:	e051      	b.n	8010790 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80106fe:	b29b      	uxth	r3, r3
 8010700:	2b00      	cmp	r3, #0
 8010702:	d047      	beq.n	8010794 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8010704:	8a7b      	ldrh	r3, [r7, #18]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d044      	beq.n	8010794 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	68da      	ldr	r2, [r3, #12]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010718:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	695a      	ldr	r2, [r3, #20]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f022 0201 	bic.w	r2, r2, #1
 8010728:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2220      	movs	r2, #32
 801072e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68da      	ldr	r2, [r3, #12]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f022 0210 	bic.w	r2, r2, #16
 8010746:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010748:	8a7b      	ldrh	r3, [r7, #18]
 801074a:	4619      	mov	r1, r3
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 f839 	bl	80107c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010752:	e01f      	b.n	8010794 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801075a:	2b00      	cmp	r3, #0
 801075c:	d008      	beq.n	8010770 <HAL_UART_IRQHandler+0x324>
 801075e:	6a3b      	ldr	r3, [r7, #32]
 8010760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010764:	2b00      	cmp	r3, #0
 8010766:	d003      	beq.n	8010770 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 f911 	bl	8010990 <UART_Transmit_IT>
    return;
 801076e:	e012      	b.n	8010796 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010776:	2b00      	cmp	r3, #0
 8010778:	d00d      	beq.n	8010796 <HAL_UART_IRQHandler+0x34a>
 801077a:	6a3b      	ldr	r3, [r7, #32]
 801077c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010780:	2b00      	cmp	r3, #0
 8010782:	d008      	beq.n	8010796 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 f952 	bl	8010a2e <UART_EndTransmit_IT>
    return;
 801078a:	e004      	b.n	8010796 <HAL_UART_IRQHandler+0x34a>
    return;
 801078c:	bf00      	nop
 801078e:	e002      	b.n	8010796 <HAL_UART_IRQHandler+0x34a>
      return;
 8010790:	bf00      	nop
 8010792:	e000      	b.n	8010796 <HAL_UART_IRQHandler+0x34a>
      return;
 8010794:	bf00      	nop
  }
}
 8010796:	3728      	adds	r7, #40	; 0x28
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	08010939 	.word	0x08010939

080107a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bc80      	pop	{r7}
 80107b0:	4770      	bx	lr

080107b2 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80107b2:	b480      	push	{r7}
 80107b4:	b083      	sub	sp, #12
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80107ba:	bf00      	nop
 80107bc:	370c      	adds	r7, #12
 80107be:	46bd      	mov	sp, r7
 80107c0:	bc80      	pop	{r7}
 80107c2:	4770      	bx	lr

080107c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	460b      	mov	r3, r1
 80107ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bc80      	pop	{r7}
 80107d8:	4770      	bx	lr

080107da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80107da:	b580      	push	{r7, lr}
 80107dc:	b084      	sub	sp, #16
 80107de:	af00      	add	r7, sp, #0
 80107e0:	60f8      	str	r0, [r7, #12]
 80107e2:	60b9      	str	r1, [r7, #8]
 80107e4:	603b      	str	r3, [r7, #0]
 80107e6:	4613      	mov	r3, r2
 80107e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107ea:	e02c      	b.n	8010846 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f2:	d028      	beq.n	8010846 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d007      	beq.n	801080a <UART_WaitOnFlagUntilTimeout+0x30>
 80107fa:	f7fb ff31 	bl	800c660 <HAL_GetTick>
 80107fe:	4602      	mov	r2, r0
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	1ad3      	subs	r3, r2, r3
 8010804:	69ba      	ldr	r2, [r7, #24]
 8010806:	429a      	cmp	r2, r3
 8010808:	d21d      	bcs.n	8010846 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	68da      	ldr	r2, [r3, #12]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010818:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	695a      	ldr	r2, [r3, #20]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f022 0201 	bic.w	r2, r2, #1
 8010828:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2220      	movs	r2, #32
 801082e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2220      	movs	r2, #32
 8010836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2200      	movs	r2, #0
 801083e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8010842:	2303      	movs	r3, #3
 8010844:	e00f      	b.n	8010866 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	4013      	ands	r3, r2
 8010850:	68ba      	ldr	r2, [r7, #8]
 8010852:	429a      	cmp	r2, r3
 8010854:	bf0c      	ite	eq
 8010856:	2301      	moveq	r3, #1
 8010858:	2300      	movne	r3, #0
 801085a:	b2db      	uxtb	r3, r3
 801085c:	461a      	mov	r2, r3
 801085e:	79fb      	ldrb	r3, [r7, #7]
 8010860:	429a      	cmp	r2, r3
 8010862:	d0c3      	beq.n	80107ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010864:	2300      	movs	r3, #0
}
 8010866:	4618      	mov	r0, r3
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}

0801086e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801086e:	b480      	push	{r7}
 8010870:	b085      	sub	sp, #20
 8010872:	af00      	add	r7, sp, #0
 8010874:	60f8      	str	r0, [r7, #12]
 8010876:	60b9      	str	r1, [r7, #8]
 8010878:	4613      	mov	r3, r2
 801087a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	88fa      	ldrh	r2, [r7, #6]
 8010886:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	88fa      	ldrh	r2, [r7, #6]
 801088c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2200      	movs	r2, #0
 8010892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2222      	movs	r2, #34	; 0x22
 8010898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	68da      	ldr	r2, [r3, #12]
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	695a      	ldr	r2, [r3, #20]
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f042 0201 	orr.w	r2, r2, #1
 80108c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	68da      	ldr	r2, [r3, #12]
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f042 0220 	orr.w	r2, r2, #32
 80108d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	bc80      	pop	{r7}
 80108de:	4770      	bx	lr

080108e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	68da      	ldr	r2, [r3, #12]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80108f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	695a      	ldr	r2, [r3, #20]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f022 0201 	bic.w	r2, r2, #1
 8010906:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801090c:	2b01      	cmp	r3, #1
 801090e:	d107      	bne.n	8010920 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	68da      	ldr	r2, [r3, #12]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f022 0210 	bic.w	r2, r2, #16
 801091e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2220      	movs	r2, #32
 8010924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801092e:	bf00      	nop
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	bc80      	pop	{r7}
 8010936:	4770      	bx	lr

08010938 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010944:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2200      	movs	r2, #0
 801094a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	2200      	movs	r2, #0
 8010950:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f7ff ff24 	bl	80107a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010958:	bf00      	nop
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	2200      	movs	r2, #0
 8010972:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2220      	movs	r2, #32
 8010978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2200      	movs	r2, #0
 8010980:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f7ff ff15 	bl	80107b2 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010988:	bf00      	nop
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010990:	b480      	push	{r7}
 8010992:	b085      	sub	sp, #20
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	2b21      	cmp	r3, #33	; 0x21
 80109a2:	d13e      	bne.n	8010a22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	689b      	ldr	r3, [r3, #8]
 80109a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109ac:	d114      	bne.n	80109d8 <UART_Transmit_IT+0x48>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	691b      	ldr	r3, [r3, #16]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d110      	bne.n	80109d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6a1b      	ldr	r3, [r3, #32]
 80109ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	881b      	ldrh	r3, [r3, #0]
 80109c0:	461a      	mov	r2, r3
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80109ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a1b      	ldr	r3, [r3, #32]
 80109d0:	1c9a      	adds	r2, r3, #2
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	621a      	str	r2, [r3, #32]
 80109d6:	e008      	b.n	80109ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6a1b      	ldr	r3, [r3, #32]
 80109dc:	1c59      	adds	r1, r3, #1
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	6211      	str	r1, [r2, #32]
 80109e2:	781a      	ldrb	r2, [r3, #0]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	3b01      	subs	r3, #1
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	4619      	mov	r1, r3
 80109f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10f      	bne.n	8010a1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	68da      	ldr	r2, [r3, #12]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	68da      	ldr	r2, [r3, #12]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010a1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	e000      	b.n	8010a24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010a22:	2302      	movs	r3, #2
  }
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3714      	adds	r7, #20
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bc80      	pop	{r7}
 8010a2c:	4770      	bx	lr

08010a2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b082      	sub	sp, #8
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68da      	ldr	r2, [r3, #12]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2220      	movs	r2, #32
 8010a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f001 fc02 	bl	8012258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010a54:	2300      	movs	r3, #0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010a5e:	b580      	push	{r7, lr}
 8010a60:	b086      	sub	sp, #24
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	2b22      	cmp	r3, #34	; 0x22
 8010a70:	f040 8099 	bne.w	8010ba6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	689b      	ldr	r3, [r3, #8]
 8010a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a7c:	d117      	bne.n	8010aae <UART_Receive_IT+0x50>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	691b      	ldr	r3, [r3, #16]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d113      	bne.n	8010aae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010a86:	2300      	movs	r3, #0
 8010a88:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a8e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aa6:	1c9a      	adds	r2, r3, #2
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8010aac:	e026      	b.n	8010afc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ab2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ac0:	d007      	beq.n	8010ad2 <UART_Receive_IT+0x74>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d10a      	bne.n	8010ae0 <UART_Receive_IT+0x82>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	691b      	ldr	r3, [r3, #16]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	701a      	strb	r2, [r3, #0]
 8010ade:	e008      	b.n	8010af2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	685b      	ldr	r3, [r3, #4]
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010af6:	1c5a      	adds	r2, r3, #1
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	3b01      	subs	r3, #1
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d148      	bne.n	8010ba2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68da      	ldr	r2, [r3, #12]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f022 0220 	bic.w	r2, r2, #32
 8010b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	68da      	ldr	r2, [r3, #12]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	695a      	ldr	r2, [r3, #20]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f022 0201 	bic.w	r2, r2, #1
 8010b3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2220      	movs	r2, #32
 8010b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d123      	bne.n	8010b98 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2200      	movs	r2, #0
 8010b54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	68da      	ldr	r2, [r3, #12]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f022 0210 	bic.w	r2, r2, #16
 8010b64:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f003 0310 	and.w	r3, r3, #16
 8010b70:	2b10      	cmp	r3, #16
 8010b72:	d10a      	bne.n	8010b8a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010b74:	2300      	movs	r3, #0
 8010b76:	60fb      	str	r3, [r7, #12]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	60fb      	str	r3, [r7, #12]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	60fb      	str	r3, [r7, #12]
 8010b88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010b8e:	4619      	mov	r1, r3
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7ff fe17 	bl	80107c4 <HAL_UARTEx_RxEventCallback>
 8010b96:	e002      	b.n	8010b9e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f001 faf5 	bl	8012188 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	e002      	b.n	8010ba8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	e000      	b.n	8010ba8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8010ba6:	2302      	movs	r3, #2
  }
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3718      	adds	r7, #24
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	68da      	ldr	r2, [r3, #12]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	430a      	orrs	r2, r1
 8010bcc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	689a      	ldr	r2, [r3, #8]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	431a      	orrs	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	695b      	ldr	r3, [r3, #20]
 8010bdc:	431a      	orrs	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	69db      	ldr	r3, [r3, #28]
 8010be2:	4313      	orrs	r3, r2
 8010be4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010bf0:	f023 030c 	bic.w	r3, r3, #12
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	6812      	ldr	r2, [r2, #0]
 8010bf8:	68b9      	ldr	r1, [r7, #8]
 8010bfa:	430b      	orrs	r3, r1
 8010bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	695b      	ldr	r3, [r3, #20]
 8010c04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	699a      	ldr	r2, [r3, #24]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	430a      	orrs	r2, r1
 8010c12:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	4a55      	ldr	r2, [pc, #340]	; (8010d70 <UART_SetConfig+0x1c0>)
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d103      	bne.n	8010c26 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010c1e:	f7fd fe7d 	bl	800e91c <HAL_RCC_GetPCLK2Freq>
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	e002      	b.n	8010c2c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8010c26:	f7fd fe65 	bl	800e8f4 <HAL_RCC_GetPCLK1Freq>
 8010c2a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	69db      	ldr	r3, [r3, #28]
 8010c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c34:	d14c      	bne.n	8010cd0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010c36:	68fa      	ldr	r2, [r7, #12]
 8010c38:	4613      	mov	r3, r2
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	4413      	add	r3, r2
 8010c3e:	009a      	lsls	r2, r3, #2
 8010c40:	441a      	add	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c4c:	4a49      	ldr	r2, [pc, #292]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c52:	095b      	lsrs	r3, r3, #5
 8010c54:	0119      	lsls	r1, r3, #4
 8010c56:	68fa      	ldr	r2, [r7, #12]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	009a      	lsls	r2, r3, #2
 8010c60:	441a      	add	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	005b      	lsls	r3, r3, #1
 8010c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8010c6c:	4b41      	ldr	r3, [pc, #260]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8010c72:	095b      	lsrs	r3, r3, #5
 8010c74:	2064      	movs	r0, #100	; 0x64
 8010c76:	fb00 f303 	mul.w	r3, r0, r3
 8010c7a:	1ad3      	subs	r3, r2, r3
 8010c7c:	00db      	lsls	r3, r3, #3
 8010c7e:	3332      	adds	r3, #50	; 0x32
 8010c80:	4a3c      	ldr	r2, [pc, #240]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010c82:	fba2 2303 	umull	r2, r3, r2, r3
 8010c86:	095b      	lsrs	r3, r3, #5
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010c8e:	4419      	add	r1, r3
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	4613      	mov	r3, r2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	4413      	add	r3, r2
 8010c98:	009a      	lsls	r2, r3, #2
 8010c9a:	441a      	add	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	005b      	lsls	r3, r3, #1
 8010ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8010ca6:	4b33      	ldr	r3, [pc, #204]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010ca8:	fba3 0302 	umull	r0, r3, r3, r2
 8010cac:	095b      	lsrs	r3, r3, #5
 8010cae:	2064      	movs	r0, #100	; 0x64
 8010cb0:	fb00 f303 	mul.w	r3, r0, r3
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	00db      	lsls	r3, r3, #3
 8010cb8:	3332      	adds	r3, #50	; 0x32
 8010cba:	4a2e      	ldr	r2, [pc, #184]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc0:	095b      	lsrs	r3, r3, #5
 8010cc2:	f003 0207 	and.w	r2, r3, #7
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	440a      	add	r2, r1
 8010ccc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010cce:	e04a      	b.n	8010d66 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	009a      	lsls	r2, r3, #2
 8010cda:	441a      	add	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ce6:	4a23      	ldr	r2, [pc, #140]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8010cec:	095b      	lsrs	r3, r3, #5
 8010cee:	0119      	lsls	r1, r3, #4
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	4413      	add	r3, r2
 8010cf8:	009a      	lsls	r2, r3, #2
 8010cfa:	441a      	add	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	fbb2 f2f3 	udiv	r2, r2, r3
 8010d06:	4b1b      	ldr	r3, [pc, #108]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010d08:	fba3 0302 	umull	r0, r3, r3, r2
 8010d0c:	095b      	lsrs	r3, r3, #5
 8010d0e:	2064      	movs	r0, #100	; 0x64
 8010d10:	fb00 f303 	mul.w	r3, r0, r3
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	011b      	lsls	r3, r3, #4
 8010d18:	3332      	adds	r3, #50	; 0x32
 8010d1a:	4a16      	ldr	r2, [pc, #88]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8010d20:	095b      	lsrs	r3, r3, #5
 8010d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d26:	4419      	add	r1, r3
 8010d28:	68fa      	ldr	r2, [r7, #12]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	4413      	add	r3, r2
 8010d30:	009a      	lsls	r2, r3, #2
 8010d32:	441a      	add	r2, r3
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8010d3e:	4b0d      	ldr	r3, [pc, #52]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010d40:	fba3 0302 	umull	r0, r3, r3, r2
 8010d44:	095b      	lsrs	r3, r3, #5
 8010d46:	2064      	movs	r0, #100	; 0x64
 8010d48:	fb00 f303 	mul.w	r3, r0, r3
 8010d4c:	1ad3      	subs	r3, r2, r3
 8010d4e:	011b      	lsls	r3, r3, #4
 8010d50:	3332      	adds	r3, #50	; 0x32
 8010d52:	4a08      	ldr	r2, [pc, #32]	; (8010d74 <UART_SetConfig+0x1c4>)
 8010d54:	fba2 2303 	umull	r2, r3, r2, r3
 8010d58:	095b      	lsrs	r3, r3, #5
 8010d5a:	f003 020f 	and.w	r2, r3, #15
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	440a      	add	r2, r1
 8010d64:	609a      	str	r2, [r3, #8]
}
 8010d66:	bf00      	nop
 8010d68:	3710      	adds	r7, #16
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	40013800 	.word	0x40013800
 8010d74:	51eb851f 	.word	0x51eb851f

08010d78 <measureAll>:
#include <string.h>
#include "clock.h"
#include "sim868.h"
#include "main.h"
#include "bluetooth.h"
void measureAll(){
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	af00      	add	r7, sp, #0
	getSath();
 8010d7c:	f000 f86c 	bl	8010e58 <getSath>
	getPNUM();
 8010d80:	f000 fff4 	bl	8011d6c <getPNUM>
	getSig();
 8010d84:	f001 f8fa 	bl	8011f7c <getSig>
	getTemp();
 8010d88:	f001 f820 	bl	8011dcc <getTemp>
	getADC();
 8010d8c:	f001 f860 	bl	8011e50 <getADC>
	getTime();
 8010d90:	f7f7 fd46 	bl	8008820 <getTime>
	getBTRSII();
 8010d94:	f7f7 fcc6 	bl	8008724 <getBTRSII>
}
 8010d98:	bf00      	nop
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <setHeight>:
void setHeight(){
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	af00      	add	r7, sp, #0
	getSath();
 8010da0:	f000 f85a 	bl	8010e58 <getSath>
	if(strcmp((char*)SENSORTYPE,"WellVer") == 0){
 8010da4:	4924      	ldr	r1, [pc, #144]	; (8010e38 <setHeight+0x9c>)
 8010da6:	4825      	ldr	r0, [pc, #148]	; (8010e3c <setHeight+0xa0>)
 8010da8:	f7f4 f9e8 	bl	800517c <strcmp>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d11f      	bne.n	8010df2 <setHeight+0x56>
		sensorOn();
 8010db2:	f000 fe91 	bl	8011ad8 <sensorOn>
		HAL_Delay(2000);
 8010db6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010dba:	f7fb fc5b 	bl	800c674 <HAL_Delay>
		tx(uartSensor, (uint8_t*)"SetH");
 8010dbe:	4b20      	ldr	r3, [pc, #128]	; (8010e40 <setHeight+0xa4>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	4920      	ldr	r1, [pc, #128]	; (8010e44 <setHeight+0xa8>)
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f001 fb89 	bl	80124dc <tx>
		tx(uartSensor, SETH);
 8010dca:	4b1d      	ldr	r3, [pc, #116]	; (8010e40 <setHeight+0xa4>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	491e      	ldr	r1, [pc, #120]	; (8010e48 <setHeight+0xac>)
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f001 fb83 	bl	80124dc <tx>
		rx(uartSensor, (uint8_t*)"OK", 5);
 8010dd6:	4b1a      	ldr	r3, [pc, #104]	; (8010e40 <setHeight+0xa4>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2205      	movs	r2, #5
 8010ddc:	491b      	ldr	r1, [pc, #108]	; (8010e4c <setHeight+0xb0>)
 8010dde:	4618      	mov	r0, r3
 8010de0:	f001 fbae 	bl	8012540 <rx>
		HAL_Delay(1000);
 8010de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010de8:	f7fb fc44 	bl	800c674 <HAL_Delay>
		sensorOff();
 8010dec:	f000 fe80 	bl	8011af0 <sensorOff>
		HAL_FLASHEx_DATAEEPROM_Lock();
		HAL_FLASHEx_DATAEEPROM_Unlock();
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080300, distance + atoi((char*)SETH));
		HAL_FLASHEx_DATAEEPROM_Lock();
	}
}
 8010df0:	e01f      	b.n	8010e32 <setHeight+0x96>
		HAL_FLASHEx_DATAEEPROM_Unlock();
 8010df2:	f7fc fb6d 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080300, distance + atoi((char*)SETH));
 8010df6:	4814      	ldr	r0, [pc, #80]	; (8010e48 <setHeight+0xac>)
 8010df8:	f001 fe66 	bl	8012ac8 <atoi>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	4b14      	ldr	r3, [pc, #80]	; (8010e50 <setHeight+0xb4>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4413      	add	r3, r2
 8010e04:	461a      	mov	r2, r3
 8010e06:	4913      	ldr	r1, [pc, #76]	; (8010e54 <setHeight+0xb8>)
 8010e08:	2002      	movs	r0, #2
 8010e0a:	f7fc fb8d 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Lock();
 8010e0e:	f7fc fb7b 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
		HAL_FLASHEx_DATAEEPROM_Unlock();
 8010e12:	f7fc fb5d 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080300, distance + atoi((char*)SETH));
 8010e16:	480c      	ldr	r0, [pc, #48]	; (8010e48 <setHeight+0xac>)
 8010e18:	f001 fe56 	bl	8012ac8 <atoi>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	4b0c      	ldr	r3, [pc, #48]	; (8010e50 <setHeight+0xb4>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	4413      	add	r3, r2
 8010e24:	461a      	mov	r2, r3
 8010e26:	490b      	ldr	r1, [pc, #44]	; (8010e54 <setHeight+0xb8>)
 8010e28:	2002      	movs	r0, #2
 8010e2a:	f7fc fb7d 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Lock();
 8010e2e:	f7fc fb6b 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8010e32:	bf00      	nop
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	08015b44 	.word	0x08015b44
 8010e3c:	200040f8 	.word	0x200040f8
 8010e40:	200044a8 	.word	0x200044a8
 8010e44:	08015b4c 	.word	0x08015b4c
 8010e48:	200002a0 	.word	0x200002a0
 8010e4c:	08015b54 	.word	0x08015b54
 8010e50:	20003d98 	.word	0x20003d98
 8010e54:	08080300 	.word	0x08080300

08010e58 <getSath>:

void getSath(){
 8010e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010e5c:	b09a      	sub	sp, #104	; 0x68
 8010e5e:	af00      	add	r7, sp, #0
	int di;
	int dif;
	if(strstr((char*)SENSORTYPE,"MB7588")!=NULL){
 8010e60:	49a8      	ldr	r1, [pc, #672]	; (8011104 <getSath+0x2ac>)
 8010e62:	48a9      	ldr	r0, [pc, #676]	; (8011108 <getSath+0x2b0>)
 8010e64:	f001 ff56 	bl	8012d14 <strstr>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f000 81df 	beq.w	801122e <getSath+0x3d6>
		GPIO_InitTypeDef gp;
		gp.Pin = GPIO_PIN_10;
 8010e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e74:	633b      	str	r3, [r7, #48]	; 0x30
		gp.Mode = GPIO_MODE_OUTPUT_PP;
 8010e76:	2301      	movs	r3, #1
 8010e78:	637b      	str	r3, [r7, #52]	; 0x34
		gp.Pull = GPIO_PULLUP;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	63bb      	str	r3, [r7, #56]	; 0x38
		gp.Speed = GPIO_SPEED_FREQ_LOW;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOB, &gp);
 8010e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010e86:	4619      	mov	r1, r3
 8010e88:	48a0      	ldr	r0, [pc, #640]	; (801110c <getSath+0x2b4>)
 8010e8a:	f7fc fc8d 	bl	800d7a8 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8010e8e:	2201      	movs	r2, #1
 8010e90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010e94:	489d      	ldr	r0, [pc, #628]	; (801110c <getSath+0x2b4>)
 8010e96:	f7fc fefe 	bl	800dc96 <HAL_GPIO_WritePin>
		sensorOn();
 8010e9a:	f000 fe1d 	bl	8011ad8 <sensorOn>
		if(rx(uartSensor, (uint8_t*)"TempI\r", 3) == UART_OK){
 8010e9e:	4b9c      	ldr	r3, [pc, #624]	; (8011110 <getSath+0x2b8>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	2203      	movs	r2, #3
 8010ea4:	499b      	ldr	r1, [pc, #620]	; (8011114 <getSath+0x2bc>)
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f001 fb4a 	bl	8012540 <rx>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b32      	cmp	r3, #50	; 0x32
 8010eb0:	f040 81a9 	bne.w	8011206 <getSath+0x3ae>
			rx(uartSensor, (uint8_t*)"\r", 2);
 8010eb4:	4b96      	ldr	r3, [pc, #600]	; (8011110 <getSath+0x2b8>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2202      	movs	r2, #2
 8010eba:	4997      	ldr	r1, [pc, #604]	; (8011118 <getSath+0x2c0>)
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f001 fb3f 	bl	8012540 <rx>
			rx(uartSensor, (uint8_t*)"\r", 2);
 8010ec2:	4b93      	ldr	r3, [pc, #588]	; (8011110 <getSath+0x2b8>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2202      	movs	r2, #2
 8010ec8:	4993      	ldr	r1, [pc, #588]	; (8011118 <getSath+0x2c0>)
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f001 fb38 	bl	8012540 <rx>
			rx(uartSensor, (uint8_t*)"\r", 2);
 8010ed0:	4b8f      	ldr	r3, [pc, #572]	; (8011110 <getSath+0x2b8>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2202      	movs	r2, #2
 8010ed6:	4990      	ldr	r1, [pc, #576]	; (8011118 <getSath+0x2c0>)
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f001 fb31 	bl	8012540 <rx>
			rx(uartSensor, (uint8_t*)"\r", 2);
 8010ede:	4b8c      	ldr	r3, [pc, #560]	; (8011110 <getSath+0x2b8>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2202      	movs	r2, #2
 8010ee4:	498c      	ldr	r1, [pc, #560]	; (8011118 <getSath+0x2c0>)
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f001 fb2a 	bl	8012540 <rx>

			distanceSum = 0;
 8010eec:	4b8b      	ldr	r3, [pc, #556]	; (801111c <getSath+0x2c4>)
 8010eee:	2200      	movs	r2, #0
 8010ef0:	601a      	str	r2, [r3, #0]
			rx(uartSensor, (uint8_t*)"\r", 2);
 8010ef2:	4b87      	ldr	r3, [pc, #540]	; (8011110 <getSath+0x2b8>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	2202      	movs	r2, #2
 8010ef8:	4987      	ldr	r1, [pc, #540]	; (8011118 <getSath+0x2c0>)
 8010efa:	4618      	mov	r0, r3
 8010efc:	f001 fb20 	bl	8012540 <rx>
			da[0] = rx_buf[1];
 8010f00:	4b87      	ldr	r3, [pc, #540]	; (8011120 <getSath+0x2c8>)
 8010f02:	785a      	ldrb	r2, [r3, #1]
 8010f04:	4b87      	ldr	r3, [pc, #540]	; (8011124 <getSath+0x2cc>)
 8010f06:	701a      	strb	r2, [r3, #0]
			da[1] = rx_buf[2];
 8010f08:	4b85      	ldr	r3, [pc, #532]	; (8011120 <getSath+0x2c8>)
 8010f0a:	789a      	ldrb	r2, [r3, #2]
 8010f0c:	4b85      	ldr	r3, [pc, #532]	; (8011124 <getSath+0x2cc>)
 8010f0e:	705a      	strb	r2, [r3, #1]
			da[2] = rx_buf[3];
 8010f10:	4b83      	ldr	r3, [pc, #524]	; (8011120 <getSath+0x2c8>)
 8010f12:	78da      	ldrb	r2, [r3, #3]
 8010f14:	4b83      	ldr	r3, [pc, #524]	; (8011124 <getSath+0x2cc>)
 8010f16:	709a      	strb	r2, [r3, #2]
			da[3] = rx_buf[4];
 8010f18:	4b81      	ldr	r3, [pc, #516]	; (8011120 <getSath+0x2c8>)
 8010f1a:	791a      	ldrb	r2, [r3, #4]
 8010f1c:	4b81      	ldr	r3, [pc, #516]	; (8011124 <getSath+0x2cc>)
 8010f1e:	70da      	strb	r2, [r3, #3]
			da[4] = '\0';
 8010f20:	4b80      	ldr	r3, [pc, #512]	; (8011124 <getSath+0x2cc>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	711a      	strb	r2, [r3, #4]
			distanceSum += atoi((char*)da);
 8010f26:	487f      	ldr	r0, [pc, #508]	; (8011124 <getSath+0x2cc>)
 8010f28:	f001 fdce 	bl	8012ac8 <atoi>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	4b7b      	ldr	r3, [pc, #492]	; (801111c <getSath+0x2c4>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4413      	add	r3, r2
 8010f34:	4a79      	ldr	r2, [pc, #484]	; (801111c <getSath+0x2c4>)
 8010f36:	6013      	str	r3, [r2, #0]
			rx(uartSensor, (uint8_t*)"\r", 2);
 8010f38:	4b75      	ldr	r3, [pc, #468]	; (8011110 <getSath+0x2b8>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2202      	movs	r2, #2
 8010f3e:	4976      	ldr	r1, [pc, #472]	; (8011118 <getSath+0x2c0>)
 8010f40:	4618      	mov	r0, r3
 8010f42:	f001 fafd 	bl	8012540 <rx>
			da[0] = rx_buf[1];
 8010f46:	4b76      	ldr	r3, [pc, #472]	; (8011120 <getSath+0x2c8>)
 8010f48:	785a      	ldrb	r2, [r3, #1]
 8010f4a:	4b76      	ldr	r3, [pc, #472]	; (8011124 <getSath+0x2cc>)
 8010f4c:	701a      	strb	r2, [r3, #0]
			da[1] = rx_buf[2];
 8010f4e:	4b74      	ldr	r3, [pc, #464]	; (8011120 <getSath+0x2c8>)
 8010f50:	789a      	ldrb	r2, [r3, #2]
 8010f52:	4b74      	ldr	r3, [pc, #464]	; (8011124 <getSath+0x2cc>)
 8010f54:	705a      	strb	r2, [r3, #1]
			da[2] = rx_buf[3];
 8010f56:	4b72      	ldr	r3, [pc, #456]	; (8011120 <getSath+0x2c8>)
 8010f58:	78da      	ldrb	r2, [r3, #3]
 8010f5a:	4b72      	ldr	r3, [pc, #456]	; (8011124 <getSath+0x2cc>)
 8010f5c:	709a      	strb	r2, [r3, #2]
			da[3] = rx_buf[4];
 8010f5e:	4b70      	ldr	r3, [pc, #448]	; (8011120 <getSath+0x2c8>)
 8010f60:	791a      	ldrb	r2, [r3, #4]
 8010f62:	4b70      	ldr	r3, [pc, #448]	; (8011124 <getSath+0x2cc>)
 8010f64:	70da      	strb	r2, [r3, #3]
			da[4] = '\0';
 8010f66:	4b6f      	ldr	r3, [pc, #444]	; (8011124 <getSath+0x2cc>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	711a      	strb	r2, [r3, #4]
			distanceSum += atoi((char*)da);
 8010f6c:	486d      	ldr	r0, [pc, #436]	; (8011124 <getSath+0x2cc>)
 8010f6e:	f001 fdab 	bl	8012ac8 <atoi>
 8010f72:	4602      	mov	r2, r0
 8010f74:	4b69      	ldr	r3, [pc, #420]	; (801111c <getSath+0x2c4>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4413      	add	r3, r2
 8010f7a:	4a68      	ldr	r2, [pc, #416]	; (801111c <getSath+0x2c4>)
 8010f7c:	6013      	str	r3, [r2, #0]
			rx(uartSensor, (uint8_t*)"\r", 2);
 8010f7e:	4b64      	ldr	r3, [pc, #400]	; (8011110 <getSath+0x2b8>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2202      	movs	r2, #2
 8010f84:	4964      	ldr	r1, [pc, #400]	; (8011118 <getSath+0x2c0>)
 8010f86:	4618      	mov	r0, r3
 8010f88:	f001 fada 	bl	8012540 <rx>
			da[0] = rx_buf[1];
 8010f8c:	4b64      	ldr	r3, [pc, #400]	; (8011120 <getSath+0x2c8>)
 8010f8e:	785a      	ldrb	r2, [r3, #1]
 8010f90:	4b64      	ldr	r3, [pc, #400]	; (8011124 <getSath+0x2cc>)
 8010f92:	701a      	strb	r2, [r3, #0]
			da[1] = rx_buf[2];
 8010f94:	4b62      	ldr	r3, [pc, #392]	; (8011120 <getSath+0x2c8>)
 8010f96:	789a      	ldrb	r2, [r3, #2]
 8010f98:	4b62      	ldr	r3, [pc, #392]	; (8011124 <getSath+0x2cc>)
 8010f9a:	705a      	strb	r2, [r3, #1]
			da[2] = rx_buf[3];
 8010f9c:	4b60      	ldr	r3, [pc, #384]	; (8011120 <getSath+0x2c8>)
 8010f9e:	78da      	ldrb	r2, [r3, #3]
 8010fa0:	4b60      	ldr	r3, [pc, #384]	; (8011124 <getSath+0x2cc>)
 8010fa2:	709a      	strb	r2, [r3, #2]
			da[3] = rx_buf[4];
 8010fa4:	4b5e      	ldr	r3, [pc, #376]	; (8011120 <getSath+0x2c8>)
 8010fa6:	791a      	ldrb	r2, [r3, #4]
 8010fa8:	4b5e      	ldr	r3, [pc, #376]	; (8011124 <getSath+0x2cc>)
 8010faa:	70da      	strb	r2, [r3, #3]
			da[4] = '\0';
 8010fac:	4b5d      	ldr	r3, [pc, #372]	; (8011124 <getSath+0x2cc>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	711a      	strb	r2, [r3, #4]
			distanceSum += atoi((char*)da);
 8010fb2:	485c      	ldr	r0, [pc, #368]	; (8011124 <getSath+0x2cc>)
 8010fb4:	f001 fd88 	bl	8012ac8 <atoi>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	4b58      	ldr	r3, [pc, #352]	; (801111c <getSath+0x2c4>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	4a56      	ldr	r2, [pc, #344]	; (801111c <getSath+0x2c4>)
 8010fc2:	6013      	str	r3, [r2, #0]
			rx(uartSensor, (uint8_t*)"\r", 2);
 8010fc4:	4b52      	ldr	r3, [pc, #328]	; (8011110 <getSath+0x2b8>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2202      	movs	r2, #2
 8010fca:	4953      	ldr	r1, [pc, #332]	; (8011118 <getSath+0x2c0>)
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f001 fab7 	bl	8012540 <rx>
			da[0] = rx_buf[1];
 8010fd2:	4b53      	ldr	r3, [pc, #332]	; (8011120 <getSath+0x2c8>)
 8010fd4:	785a      	ldrb	r2, [r3, #1]
 8010fd6:	4b53      	ldr	r3, [pc, #332]	; (8011124 <getSath+0x2cc>)
 8010fd8:	701a      	strb	r2, [r3, #0]
			da[1] = rx_buf[2];
 8010fda:	4b51      	ldr	r3, [pc, #324]	; (8011120 <getSath+0x2c8>)
 8010fdc:	789a      	ldrb	r2, [r3, #2]
 8010fde:	4b51      	ldr	r3, [pc, #324]	; (8011124 <getSath+0x2cc>)
 8010fe0:	705a      	strb	r2, [r3, #1]
			da[2] = rx_buf[3];
 8010fe2:	4b4f      	ldr	r3, [pc, #316]	; (8011120 <getSath+0x2c8>)
 8010fe4:	78da      	ldrb	r2, [r3, #3]
 8010fe6:	4b4f      	ldr	r3, [pc, #316]	; (8011124 <getSath+0x2cc>)
 8010fe8:	709a      	strb	r2, [r3, #2]
			da[3] = rx_buf[4];
 8010fea:	4b4d      	ldr	r3, [pc, #308]	; (8011120 <getSath+0x2c8>)
 8010fec:	791a      	ldrb	r2, [r3, #4]
 8010fee:	4b4d      	ldr	r3, [pc, #308]	; (8011124 <getSath+0x2cc>)
 8010ff0:	70da      	strb	r2, [r3, #3]
			da[4] = '\0';
 8010ff2:	4b4c      	ldr	r3, [pc, #304]	; (8011124 <getSath+0x2cc>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	711a      	strb	r2, [r3, #4]
			distanceSum += atoi((char*)da);
 8010ff8:	484a      	ldr	r0, [pc, #296]	; (8011124 <getSath+0x2cc>)
 8010ffa:	f001 fd65 	bl	8012ac8 <atoi>
 8010ffe:	4602      	mov	r2, r0
 8011000:	4b46      	ldr	r3, [pc, #280]	; (801111c <getSath+0x2c4>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4413      	add	r3, r2
 8011006:	4a45      	ldr	r2, [pc, #276]	; (801111c <getSath+0x2c4>)
 8011008:	6013      	str	r3, [r2, #0]
			rx(uartSensor, (uint8_t*)"\r", 2);
 801100a:	4b41      	ldr	r3, [pc, #260]	; (8011110 <getSath+0x2b8>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2202      	movs	r2, #2
 8011010:	4941      	ldr	r1, [pc, #260]	; (8011118 <getSath+0x2c0>)
 8011012:	4618      	mov	r0, r3
 8011014:	f001 fa94 	bl	8012540 <rx>
			da[0] = rx_buf[1];
 8011018:	4b41      	ldr	r3, [pc, #260]	; (8011120 <getSath+0x2c8>)
 801101a:	785a      	ldrb	r2, [r3, #1]
 801101c:	4b41      	ldr	r3, [pc, #260]	; (8011124 <getSath+0x2cc>)
 801101e:	701a      	strb	r2, [r3, #0]
			da[1] = rx_buf[2];
 8011020:	4b3f      	ldr	r3, [pc, #252]	; (8011120 <getSath+0x2c8>)
 8011022:	789a      	ldrb	r2, [r3, #2]
 8011024:	4b3f      	ldr	r3, [pc, #252]	; (8011124 <getSath+0x2cc>)
 8011026:	705a      	strb	r2, [r3, #1]
			da[2] = rx_buf[3];
 8011028:	4b3d      	ldr	r3, [pc, #244]	; (8011120 <getSath+0x2c8>)
 801102a:	78da      	ldrb	r2, [r3, #3]
 801102c:	4b3d      	ldr	r3, [pc, #244]	; (8011124 <getSath+0x2cc>)
 801102e:	709a      	strb	r2, [r3, #2]
			da[3] = rx_buf[4];
 8011030:	4b3b      	ldr	r3, [pc, #236]	; (8011120 <getSath+0x2c8>)
 8011032:	791a      	ldrb	r2, [r3, #4]
 8011034:	4b3b      	ldr	r3, [pc, #236]	; (8011124 <getSath+0x2cc>)
 8011036:	70da      	strb	r2, [r3, #3]
			da[4] = '\0';
 8011038:	4b3a      	ldr	r3, [pc, #232]	; (8011124 <getSath+0x2cc>)
 801103a:	2200      	movs	r2, #0
 801103c:	711a      	strb	r2, [r3, #4]
			distanceSum += atoi((char*)da);
 801103e:	4839      	ldr	r0, [pc, #228]	; (8011124 <getSath+0x2cc>)
 8011040:	f001 fd42 	bl	8012ac8 <atoi>
 8011044:	4602      	mov	r2, r0
 8011046:	4b35      	ldr	r3, [pc, #212]	; (801111c <getSath+0x2c4>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4413      	add	r3, r2
 801104c:	4a33      	ldr	r2, [pc, #204]	; (801111c <getSath+0x2c4>)
 801104e:	6013      	str	r3, [r2, #0]
			rx(uartSensor, (uint8_t*)"\r", 2);
 8011050:	4b2f      	ldr	r3, [pc, #188]	; (8011110 <getSath+0x2b8>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	2202      	movs	r2, #2
 8011056:	4930      	ldr	r1, [pc, #192]	; (8011118 <getSath+0x2c0>)
 8011058:	4618      	mov	r0, r3
 801105a:	f001 fa71 	bl	8012540 <rx>
			da[0] = rx_buf[1];
 801105e:	4b30      	ldr	r3, [pc, #192]	; (8011120 <getSath+0x2c8>)
 8011060:	785a      	ldrb	r2, [r3, #1]
 8011062:	4b30      	ldr	r3, [pc, #192]	; (8011124 <getSath+0x2cc>)
 8011064:	701a      	strb	r2, [r3, #0]
			da[1] = rx_buf[2];
 8011066:	4b2e      	ldr	r3, [pc, #184]	; (8011120 <getSath+0x2c8>)
 8011068:	789a      	ldrb	r2, [r3, #2]
 801106a:	4b2e      	ldr	r3, [pc, #184]	; (8011124 <getSath+0x2cc>)
 801106c:	705a      	strb	r2, [r3, #1]
			da[2] = rx_buf[3];
 801106e:	4b2c      	ldr	r3, [pc, #176]	; (8011120 <getSath+0x2c8>)
 8011070:	78da      	ldrb	r2, [r3, #3]
 8011072:	4b2c      	ldr	r3, [pc, #176]	; (8011124 <getSath+0x2cc>)
 8011074:	709a      	strb	r2, [r3, #2]
			da[3] = rx_buf[4];
 8011076:	4b2a      	ldr	r3, [pc, #168]	; (8011120 <getSath+0x2c8>)
 8011078:	791a      	ldrb	r2, [r3, #4]
 801107a:	4b2a      	ldr	r3, [pc, #168]	; (8011124 <getSath+0x2cc>)
 801107c:	70da      	strb	r2, [r3, #3]
			da[4] = '\0';
 801107e:	4b29      	ldr	r3, [pc, #164]	; (8011124 <getSath+0x2cc>)
 8011080:	2200      	movs	r2, #0
 8011082:	711a      	strb	r2, [r3, #4]
			distanceSum += atoi((char*)da);
 8011084:	4827      	ldr	r0, [pc, #156]	; (8011124 <getSath+0x2cc>)
 8011086:	f001 fd1f 	bl	8012ac8 <atoi>
 801108a:	4602      	mov	r2, r0
 801108c:	4b23      	ldr	r3, [pc, #140]	; (801111c <getSath+0x2c4>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4413      	add	r3, r2
 8011092:	4a22      	ldr	r2, [pc, #136]	; (801111c <getSath+0x2c4>)
 8011094:	6013      	str	r3, [r2, #0]

			distance = distanceSum/6.0;
 8011096:	4b21      	ldr	r3, [pc, #132]	; (801111c <getSath+0x2c4>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4618      	mov	r0, r3
 801109c:	f7f4 f9d2 	bl	8005444 <__aeabi_i2d>
 80110a0:	f04f 0200 	mov.w	r2, #0
 80110a4:	4b20      	ldr	r3, [pc, #128]	; (8011128 <getSath+0x2d0>)
 80110a6:	f7f4 fb61 	bl	800576c <__aeabi_ddiv>
 80110aa:	4602      	mov	r2, r0
 80110ac:	460b      	mov	r3, r1
 80110ae:	4610      	mov	r0, r2
 80110b0:	4619      	mov	r1, r3
 80110b2:	f7f4 fc43 	bl	800593c <__aeabi_d2iz>
 80110b6:	4603      	mov	r3, r0
 80110b8:	4a1c      	ldr	r2, [pc, #112]	; (801112c <getSath+0x2d4>)
 80110ba:	6013      	str	r3, [r2, #0]
			di = *(int*)0x08080300 - distance;
 80110bc:	4b1c      	ldr	r3, [pc, #112]	; (8011130 <getSath+0x2d8>)
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	4b1a      	ldr	r3, [pc, #104]	; (801112c <getSath+0x2d4>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	1ad3      	subs	r3, r2, r3
 80110c6:	667b      	str	r3, [r7, #100]	; 0x64
			if(di<0){
 80110c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	da01      	bge.n	80110d2 <getSath+0x27a>
				di = 0;
 80110ce:	2300      	movs	r3, #0
 80110d0:	667b      	str	r3, [r7, #100]	; 0x64
			}
			itoa(di,(char*)SATH,10);
 80110d2:	220a      	movs	r2, #10
 80110d4:	4917      	ldr	r1, [pc, #92]	; (8011134 <getSath+0x2dc>)
 80110d6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80110d8:	f001 fd40 	bl	8012b5c <itoa>
			itoa(distance,(char*)DIST,10);
 80110dc:	4b13      	ldr	r3, [pc, #76]	; (801112c <getSath+0x2d4>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	220a      	movs	r2, #10
 80110e2:	4915      	ldr	r1, [pc, #84]	; (8011138 <getSath+0x2e0>)
 80110e4:	4618      	mov	r0, r3
 80110e6:	f001 fd39 	bl	8012b5c <itoa>
			di+=atoi((char*)COR)*10;
 80110ea:	4814      	ldr	r0, [pc, #80]	; (801113c <getSath+0x2e4>)
 80110ec:	f001 fcec 	bl	8012ac8 <atoi>
 80110f0:	4602      	mov	r2, r0
 80110f2:	4613      	mov	r3, r2
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	4413      	add	r3, r2
 80110f8:	005b      	lsls	r3, r3, #1
 80110fa:	461a      	mov	r2, r3
 80110fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110fe:	4413      	add	r3, r2
 8011100:	e01e      	b.n	8011140 <getSath+0x2e8>
 8011102:	bf00      	nop
 8011104:	08015b58 	.word	0x08015b58
 8011108:	200040f8 	.word	0x200040f8
 801110c:	40020400 	.word	0x40020400
 8011110:	200044a8 	.word	0x200044a8
 8011114:	08015b60 	.word	0x08015b60
 8011118:	08015b68 	.word	0x08015b68
 801111c:	20000394 	.word	0x20000394
 8011120:	20004588 	.word	0x20004588
 8011124:	20003e80 	.word	0x20003e80
 8011128:	40180000 	.word	0x40180000
 801112c:	20003d98 	.word	0x20003d98
 8011130:	08080300 	.word	0x08080300
 8011134:	20003cf8 	.word	0x20003cf8
 8011138:	20003e14 	.word	0x20003e14
 801113c:	20004428 	.word	0x20004428
 8011140:	667b      	str	r3, [r7, #100]	; 0x64
			if(di < 0){
 8011142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011144:	2b00      	cmp	r3, #0
 8011146:	da06      	bge.n	8011156 <getSath+0x2fe>
				strcpy((char*)SARF,"-1000");
 8011148:	4b97      	ldr	r3, [pc, #604]	; (80113a8 <getSath+0x550>)
 801114a:	4a98      	ldr	r2, [pc, #608]	; (80113ac <getSath+0x554>)
 801114c:	6810      	ldr	r0, [r2, #0]
 801114e:	6018      	str	r0, [r3, #0]
 8011150:	8892      	ldrh	r2, [r2, #4]
 8011152:	809a      	strh	r2, [r3, #4]
 8011154:	e063      	b.n	801121e <getSath+0x3c6>
			}
			else{
				dif = TABLE[(di/10)+1]-TABLE[di/10];
 8011156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011158:	4a95      	ldr	r2, [pc, #596]	; (80113b0 <getSath+0x558>)
 801115a:	fb82 1203 	smull	r1, r2, r2, r3
 801115e:	1092      	asrs	r2, r2, #2
 8011160:	17db      	asrs	r3, r3, #31
 8011162:	1ad3      	subs	r3, r2, r3
 8011164:	3301      	adds	r3, #1
 8011166:	4a93      	ldr	r2, [pc, #588]	; (80113b4 <getSath+0x55c>)
 8011168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801116c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801116e:	4990      	ldr	r1, [pc, #576]	; (80113b0 <getSath+0x558>)
 8011170:	fb81 0103 	smull	r0, r1, r1, r3
 8011174:	1089      	asrs	r1, r1, #2
 8011176:	17db      	asrs	r3, r3, #31
 8011178:	1acb      	subs	r3, r1, r3
 801117a:	498e      	ldr	r1, [pc, #568]	; (80113b4 <getSath+0x55c>)
 801117c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011180:	1ad3      	subs	r3, r2, r3
 8011182:	653b      	str	r3, [r7, #80]	; 0x50
				itoa(TABLE[di/10]+((di%10)*(dif/10.0)),(char*)SARF,10);
 8011184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011186:	4a8a      	ldr	r2, [pc, #552]	; (80113b0 <getSath+0x558>)
 8011188:	fb82 1203 	smull	r1, r2, r2, r3
 801118c:	1092      	asrs	r2, r2, #2
 801118e:	17db      	asrs	r3, r3, #31
 8011190:	1ad3      	subs	r3, r2, r3
 8011192:	4a88      	ldr	r2, [pc, #544]	; (80113b4 <getSath+0x55c>)
 8011194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011198:	4618      	mov	r0, r3
 801119a:	f7f4 f953 	bl	8005444 <__aeabi_i2d>
 801119e:	4604      	mov	r4, r0
 80111a0:	460d      	mov	r5, r1
 80111a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80111a4:	4b82      	ldr	r3, [pc, #520]	; (80113b0 <getSath+0x558>)
 80111a6:	fb83 1302 	smull	r1, r3, r3, r2
 80111aa:	1099      	asrs	r1, r3, #2
 80111ac:	17d3      	asrs	r3, r2, #31
 80111ae:	1ac9      	subs	r1, r1, r3
 80111b0:	460b      	mov	r3, r1
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	440b      	add	r3, r1
 80111b6:	005b      	lsls	r3, r3, #1
 80111b8:	1ad1      	subs	r1, r2, r3
 80111ba:	4608      	mov	r0, r1
 80111bc:	f7f4 f942 	bl	8005444 <__aeabi_i2d>
 80111c0:	4680      	mov	r8, r0
 80111c2:	4689      	mov	r9, r1
 80111c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80111c6:	f7f4 f93d 	bl	8005444 <__aeabi_i2d>
 80111ca:	f04f 0200 	mov.w	r2, #0
 80111ce:	4b7a      	ldr	r3, [pc, #488]	; (80113b8 <getSath+0x560>)
 80111d0:	f7f4 facc 	bl	800576c <__aeabi_ddiv>
 80111d4:	4602      	mov	r2, r0
 80111d6:	460b      	mov	r3, r1
 80111d8:	4640      	mov	r0, r8
 80111da:	4649      	mov	r1, r9
 80111dc:	f7f4 f99c 	bl	8005518 <__aeabi_dmul>
 80111e0:	4602      	mov	r2, r0
 80111e2:	460b      	mov	r3, r1
 80111e4:	4620      	mov	r0, r4
 80111e6:	4629      	mov	r1, r5
 80111e8:	f7f3 ffe0 	bl	80051ac <__adddf3>
 80111ec:	4602      	mov	r2, r0
 80111ee:	460b      	mov	r3, r1
 80111f0:	4610      	mov	r0, r2
 80111f2:	4619      	mov	r1, r3
 80111f4:	f7f4 fba2 	bl	800593c <__aeabi_d2iz>
 80111f8:	4603      	mov	r3, r0
 80111fa:	220a      	movs	r2, #10
 80111fc:	496a      	ldr	r1, [pc, #424]	; (80113a8 <getSath+0x550>)
 80111fe:	4618      	mov	r0, r3
 8011200:	f001 fcac 	bl	8012b5c <itoa>
 8011204:	e00b      	b.n	801121e <getSath+0x3c6>
			}
		}
		else{
			itoa(-10,(char*)SATH,10);
 8011206:	220a      	movs	r2, #10
 8011208:	496c      	ldr	r1, [pc, #432]	; (80113bc <getSath+0x564>)
 801120a:	f06f 0009 	mvn.w	r0, #9
 801120e:	f001 fca5 	bl	8012b5c <itoa>
			strcpy((char*)SARF,(char*)"-1000");
 8011212:	4b65      	ldr	r3, [pc, #404]	; (80113a8 <getSath+0x550>)
 8011214:	4a65      	ldr	r2, [pc, #404]	; (80113ac <getSath+0x554>)
 8011216:	6810      	ldr	r0, [r2, #0]
 8011218:	6018      	str	r0, [r3, #0]
 801121a:	8892      	ldrh	r2, [r2, #4]
 801121c:	809a      	strh	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 801121e:	2200      	movs	r2, #0
 8011220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011224:	4866      	ldr	r0, [pc, #408]	; (80113c0 <getSath+0x568>)
 8011226:	f7fc fd36 	bl	800dc96 <HAL_GPIO_WritePin>
		sensorOff();
 801122a:	f000 fc61 	bl	8011af0 <sensorOff>
	}
	if(strstr((char*)SENSORTYPE,"WellVer")!=NULL){
 801122e:	4965      	ldr	r1, [pc, #404]	; (80113c4 <getSath+0x56c>)
 8011230:	4865      	ldr	r0, [pc, #404]	; (80113c8 <getSath+0x570>)
 8011232:	f001 fd6f 	bl	8012d14 <strstr>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	f000 824f 	beq.w	80116dc <getSath+0x884>
		usart3Init();
 801123e:	f7f5 f9a7 	bl	8006590 <usart3Init>
		sensorOn();
 8011242:	f000 fc49 	bl	8011ad8 <sensorOn>
		HAL_Delay(2000);
 8011246:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801124a:	f7fb fa13 	bl	800c674 <HAL_Delay>
		if(strstr((char*)SENSORTYPE,"WellVer2")!=NULL){
 801124e:	495f      	ldr	r1, [pc, #380]	; (80113cc <getSath+0x574>)
 8011250:	485d      	ldr	r0, [pc, #372]	; (80113c8 <getSath+0x570>)
 8011252:	f001 fd5f 	bl	8012d14 <strstr>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	f000 80e1 	beq.w	8011420 <getSath+0x5c8>
			uint8_t ssd[8] = {0x01,0x03,0x00,0x00,0x00,0x06,0xC5,0xC8};
 801125e:	4a5c      	ldr	r2, [pc, #368]	; (80113d0 <getSath+0x578>)
 8011260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011268:	e883 0003 	stmia.w	r3, {r0, r1}
			HAL_UART_Transmit(uartSensor, ssd, 8, 1000);
 801126c:	4b59      	ldr	r3, [pc, #356]	; (80113d4 <getSath+0x57c>)
 801126e:	6818      	ldr	r0, [r3, #0]
 8011270:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011278:	2208      	movs	r2, #8
 801127a:	f7fe ff77 	bl	801016c <HAL_UART_Transmit>
			rx(uartSensor, (uint8_t*)"\r\n", 2);
 801127e:	4b55      	ldr	r3, [pc, #340]	; (80113d4 <getSath+0x57c>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2202      	movs	r2, #2
 8011284:	4954      	ldr	r1, [pc, #336]	; (80113d8 <getSath+0x580>)
 8011286:	4618      	mov	r0, r3
 8011288:	f001 f95a 	bl	8012540 <rx>
			if(rx_buf[0] != '\0'){
 801128c:	4b53      	ldr	r3, [pc, #332]	; (80113dc <getSath+0x584>)
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	f000 80b7 	beq.w	8011404 <getSath+0x5ac>
				char shor[10];
				uint32_t sh;
				int tens;

				tens = rx_buf[6];
 8011296:	4b51      	ldr	r3, [pc, #324]	; (80113dc <getSath+0x584>)
 8011298:	799b      	ldrb	r3, [r3, #6]
 801129a:	65fb      	str	r3, [r7, #92]	; 0x5c
				sh = (rx_buf[3] << 8) + rx_buf[4];
 801129c:	4b4f      	ldr	r3, [pc, #316]	; (80113dc <getSath+0x584>)
 801129e:	78db      	ldrb	r3, [r3, #3]
 80112a0:	021b      	lsls	r3, r3, #8
 80112a2:	4a4e      	ldr	r2, [pc, #312]	; (80113dc <getSath+0x584>)
 80112a4:	7912      	ldrb	r2, [r2, #4]
 80112a6:	4413      	add	r3, r2
 80112a8:	663b      	str	r3, [r7, #96]	; 0x60
				while(tens < 3){
 80112aa:	e008      	b.n	80112be <getSath+0x466>
				  sh*=10;
 80112ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80112ae:	4613      	mov	r3, r2
 80112b0:	009b      	lsls	r3, r3, #2
 80112b2:	4413      	add	r3, r2
 80112b4:	005b      	lsls	r3, r3, #1
 80112b6:	663b      	str	r3, [r7, #96]	; 0x60
				  tens++;
 80112b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80112ba:	3301      	adds	r3, #1
 80112bc:	65fb      	str	r3, [r7, #92]	; 0x5c
				while(tens < 3){
 80112be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80112c0:	2b02      	cmp	r3, #2
 80112c2:	ddf3      	ble.n	80112ac <getSath+0x454>
				}
				itoa((int)sh,shor,10);
 80112c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80112c6:	f107 011c 	add.w	r1, r7, #28
 80112ca:	220a      	movs	r2, #10
 80112cc:	4618      	mov	r0, r3
 80112ce:	f001 fc45 	bl	8012b5c <itoa>
				strcpy((char*)MCON,shor);
 80112d2:	f107 031c 	add.w	r3, r7, #28
 80112d6:	4619      	mov	r1, r3
 80112d8:	4841      	ldr	r0, [pc, #260]	; (80113e0 <getSath+0x588>)
 80112da:	f001 fd02 	bl	8012ce2 <strcpy>
			    sh = (rx_buf[7] << 8) + rx_buf[8];
 80112de:	4b3f      	ldr	r3, [pc, #252]	; (80113dc <getSath+0x584>)
 80112e0:	79db      	ldrb	r3, [r3, #7]
 80112e2:	021b      	lsls	r3, r3, #8
 80112e4:	4a3d      	ldr	r2, [pc, #244]	; (80113dc <getSath+0x584>)
 80112e6:	7a12      	ldrb	r2, [r2, #8]
 80112e8:	4413      	add	r3, r2
 80112ea:	663b      	str	r3, [r7, #96]	; 0x60
				itoa((int)sh,shor,10);
 80112ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80112ee:	f107 011c 	add.w	r1, r7, #28
 80112f2:	220a      	movs	r2, #10
 80112f4:	4618      	mov	r0, r3
 80112f6:	f001 fc31 	bl	8012b5c <itoa>
				strcpy((char*)MTEMP,shor);
 80112fa:	f107 031c 	add.w	r3, r7, #28
 80112fe:	4619      	mov	r1, r3
 8011300:	4838      	ldr	r0, [pc, #224]	; (80113e4 <getSath+0x58c>)
 8011302:	f001 fcee 	bl	8012ce2 <strcpy>

				tens = 0;
 8011306:	2300      	movs	r3, #0
 8011308:	65fb      	str	r3, [r7, #92]	; 0x5c
				sh = (rx_buf[11] << 8) + rx_buf[12];
 801130a:	4b34      	ldr	r3, [pc, #208]	; (80113dc <getSath+0x584>)
 801130c:	7adb      	ldrb	r3, [r3, #11]
 801130e:	021b      	lsls	r3, r3, #8
 8011310:	4a32      	ldr	r2, [pc, #200]	; (80113dc <getSath+0x584>)
 8011312:	7b12      	ldrb	r2, [r2, #12]
 8011314:	4413      	add	r3, r2
 8011316:	663b      	str	r3, [r7, #96]	; 0x60
				while(tens < rx_buf[14]){
 8011318:	e008      	b.n	801132c <getSath+0x4d4>
				sh*=10;
 801131a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801131c:	4613      	mov	r3, r2
 801131e:	009b      	lsls	r3, r3, #2
 8011320:	4413      	add	r3, r2
 8011322:	005b      	lsls	r3, r3, #1
 8011324:	663b      	str	r3, [r7, #96]	; 0x60
				  tens++;
 8011326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011328:	3301      	adds	r3, #1
 801132a:	65fb      	str	r3, [r7, #92]	; 0x5c
				while(tens < rx_buf[14]){
 801132c:	4b2b      	ldr	r3, [pc, #172]	; (80113dc <getSath+0x584>)
 801132e:	7b9b      	ldrb	r3, [r3, #14]
 8011330:	461a      	mov	r2, r3
 8011332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011334:	4293      	cmp	r3, r2
 8011336:	dbf0      	blt.n	801131a <getSath+0x4c2>
				}
				itoa((int)sh,shor,10);
 8011338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801133a:	f107 011c 	add.w	r1, r7, #28
 801133e:	220a      	movs	r2, #10
 8011340:	4618      	mov	r0, r3
 8011342:	f001 fc0b 	bl	8012b5c <itoa>
				strcpy((char*)MSATH,shor);
 8011346:	f107 031c 	add.w	r3, r7, #28
 801134a:	4619      	mov	r1, r3
 801134c:	4826      	ldr	r0, [pc, #152]	; (80113e8 <getSath+0x590>)
 801134e:	f001 fcc8 	bl	8012ce2 <strcpy>
				long int a= atol((char*)MSATH);
 8011352:	4825      	ldr	r0, [pc, #148]	; (80113e8 <getSath+0x590>)
 8011354:	f001 fbbc 	bl	8012ad0 <atol>
 8011358:	64f8      	str	r0, [r7, #76]	; 0x4c
				if(a>2000000000){
 801135a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801135c:	4a23      	ldr	r2, [pc, #140]	; (80113ec <getSath+0x594>)
 801135e:	4293      	cmp	r3, r2
 8011360:	dd05      	ble.n	801136e <getSath+0x516>
				  tx(uartDebug, (uint8_t*)"QUDIQQA_TIQING\r\n");
 8011362:	4b23      	ldr	r3, [pc, #140]	; (80113f0 <getSath+0x598>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4923      	ldr	r1, [pc, #140]	; (80113f4 <getSath+0x59c>)
 8011368:	4618      	mov	r0, r3
 801136a:	f001 f8b7 	bl	80124dc <tx>
				}
				distance = atoi((char*)MSATH);
 801136e:	481e      	ldr	r0, [pc, #120]	; (80113e8 <getSath+0x590>)
 8011370:	f001 fbaa 	bl	8012ac8 <atoi>
 8011374:	4603      	mov	r3, r0
 8011376:	4a20      	ldr	r2, [pc, #128]	; (80113f8 <getSath+0x5a0>)
 8011378:	6013      	str	r3, [r2, #0]
				di = *(int*)0x08080300 - atoi((char*)MSATH);
 801137a:	4b20      	ldr	r3, [pc, #128]	; (80113fc <getSath+0x5a4>)
 801137c:	681c      	ldr	r4, [r3, #0]
 801137e:	481a      	ldr	r0, [pc, #104]	; (80113e8 <getSath+0x590>)
 8011380:	f001 fba2 	bl	8012ac8 <atoi>
 8011384:	4603      	mov	r3, r0
 8011386:	1ae3      	subs	r3, r4, r3
 8011388:	667b      	str	r3, [r7, #100]	; 0x64
				itoa(di,(char*)MSATH,10);
 801138a:	220a      	movs	r2, #10
 801138c:	4916      	ldr	r1, [pc, #88]	; (80113e8 <getSath+0x590>)
 801138e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011390:	f001 fbe4 	bl	8012b5c <itoa>
				if(di < 0){
 8011394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011396:	2b00      	cmp	r3, #0
 8011398:	da42      	bge.n	8011420 <getSath+0x5c8>
					strcpy((char*)MSATH,"-1");
 801139a:	4b13      	ldr	r3, [pc, #76]	; (80113e8 <getSath+0x590>)
 801139c:	4a18      	ldr	r2, [pc, #96]	; (8011400 <getSath+0x5a8>)
 801139e:	8811      	ldrh	r1, [r2, #0]
 80113a0:	7892      	ldrb	r2, [r2, #2]
 80113a2:	8019      	strh	r1, [r3, #0]
 80113a4:	709a      	strb	r2, [r3, #2]
 80113a6:	e03b      	b.n	8011420 <getSath+0x5c8>
 80113a8:	20000398 	.word	0x20000398
 80113ac:	08015b6c 	.word	0x08015b6c
 80113b0:	66666667 	.word	0x66666667
 80113b4:	20000644 	.word	0x20000644
 80113b8:	40240000 	.word	0x40240000
 80113bc:	20003cf8 	.word	0x20003cf8
 80113c0:	40020400 	.word	0x40020400
 80113c4:	08015b44 	.word	0x08015b44
 80113c8:	200040f8 	.word	0x200040f8
 80113cc:	08015b74 	.word	0x08015b74
 80113d0:	08015bcc 	.word	0x08015bcc
 80113d4:	200044a8 	.word	0x200044a8
 80113d8:	08015b80 	.word	0x08015b80
 80113dc:	20004588 	.word	0x20004588
 80113e0:	20004418 	.word	0x20004418
 80113e4:	200002ac 	.word	0x200002ac
 80113e8:	200002b8 	.word	0x200002b8
 80113ec:	77359400 	.word	0x77359400
 80113f0:	200044a4 	.word	0x200044a4
 80113f4:	08015b84 	.word	0x08015b84
 80113f8:	20003d98 	.word	0x20003d98
 80113fc:	08080300 	.word	0x08080300
 8011400:	08015b98 	.word	0x08015b98
				}
			}
			else{
				strcpy((char*)MSATH,"-10");
 8011404:	4b97      	ldr	r3, [pc, #604]	; (8011664 <getSath+0x80c>)
 8011406:	4a98      	ldr	r2, [pc, #608]	; (8011668 <getSath+0x810>)
 8011408:	6810      	ldr	r0, [r2, #0]
 801140a:	6018      	str	r0, [r3, #0]
				strcpy((char*)MCON,"-1000");
 801140c:	4b97      	ldr	r3, [pc, #604]	; (801166c <getSath+0x814>)
 801140e:	4a98      	ldr	r2, [pc, #608]	; (8011670 <getSath+0x818>)
 8011410:	6810      	ldr	r0, [r2, #0]
 8011412:	6018      	str	r0, [r3, #0]
 8011414:	8892      	ldrh	r2, [r2, #4]
 8011416:	809a      	strh	r2, [r3, #4]
				strcpy((char*)MTEMP,"-10");
 8011418:	4b96      	ldr	r3, [pc, #600]	; (8011674 <getSath+0x81c>)
 801141a:	4a93      	ldr	r2, [pc, #588]	; (8011668 <getSath+0x810>)
 801141c:	6810      	ldr	r0, [r2, #0]
 801141e:	6018      	str	r0, [r3, #0]
			}
		}
		if(strstr((char*)SENSORTYPE,"WellVer3")!=NULL){
 8011420:	4995      	ldr	r1, [pc, #596]	; (8011678 <getSath+0x820>)
 8011422:	4896      	ldr	r0, [pc, #600]	; (801167c <getSath+0x824>)
 8011424:	f001 fc76 	bl	8012d14 <strstr>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	f000 80c7 	beq.w	80115be <getSath+0x766>
			//HAL_Delay(1000);//2000
			uint8_t ssd[8] = {0x01,0x03,0x00,0x00,0x00,0x06,0xC5,0xC8};
 8011430:	4a93      	ldr	r2, [pc, #588]	; (8011680 <getSath+0x828>)
 8011432:	f107 0314 	add.w	r3, r7, #20
 8011436:	e892 0003 	ldmia.w	r2, {r0, r1}
 801143a:	e883 0003 	stmia.w	r3, {r0, r1}
			HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);//10
 801143e:	2201      	movs	r2, #1
 8011440:	2120      	movs	r1, #32
 8011442:	4890      	ldr	r0, [pc, #576]	; (8011684 <getSath+0x82c>)
 8011444:	f7fc fc27 	bl	800dc96 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8011448:	200a      	movs	r0, #10
 801144a:	f7fb f913 	bl	800c674 <HAL_Delay>
			HAL_UART_Transmit(uartDebug, ssd, 8, 100);//3
 801144e:	4b8e      	ldr	r3, [pc, #568]	; (8011688 <getSath+0x830>)
 8011450:	6818      	ldr	r0, [r3, #0]
 8011452:	f107 0114 	add.w	r1, r7, #20
 8011456:	2364      	movs	r3, #100	; 0x64
 8011458:	2208      	movs	r2, #8
 801145a:	f7fe fe87 	bl	801016c <HAL_UART_Transmit>
			HAL_Delay(3);
 801145e:	2003      	movs	r0, #3
 8011460:	f7fb f908 	bl	800c674 <HAL_Delay>
			HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET);
 8011464:	2200      	movs	r2, #0
 8011466:	2120      	movs	r1, #32
 8011468:	4886      	ldr	r0, [pc, #536]	; (8011684 <getSath+0x82c>)
 801146a:	f7fc fc14 	bl	800dc96 <HAL_GPIO_WritePin>
			rx_buf[0] = '\0';
 801146e:	4b87      	ldr	r3, [pc, #540]	; (801168c <getSath+0x834>)
 8011470:	2200      	movs	r2, #0
 8011472:	701a      	strb	r2, [r3, #0]
			rx(uartDebug, (uint8_t*)"\r\n", 2);//6
 8011474:	4b84      	ldr	r3, [pc, #528]	; (8011688 <getSath+0x830>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	2202      	movs	r2, #2
 801147a:	4985      	ldr	r1, [pc, #532]	; (8011690 <getSath+0x838>)
 801147c:	4618      	mov	r0, r3
 801147e:	f001 f85f 	bl	8012540 <rx>

			if(rx_buf[0] != '\0'){
 8011482:	4b82      	ldr	r3, [pc, #520]	; (801168c <getSath+0x834>)
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	f000 808a 	beq.w	80115a0 <getSath+0x748>
				char shor[10];
				uint32_t sh;
				int tens;

				tens = rx_buf[6];
 801148c:	4b7f      	ldr	r3, [pc, #508]	; (801168c <getSath+0x834>)
 801148e:	799b      	ldrb	r3, [r3, #6]
 8011490:	657b      	str	r3, [r7, #84]	; 0x54
				sh = (rx_buf[3] << 8) + rx_buf[4];
 8011492:	4b7e      	ldr	r3, [pc, #504]	; (801168c <getSath+0x834>)
 8011494:	78db      	ldrb	r3, [r3, #3]
 8011496:	021b      	lsls	r3, r3, #8
 8011498:	4a7c      	ldr	r2, [pc, #496]	; (801168c <getSath+0x834>)
 801149a:	7912      	ldrb	r2, [r2, #4]
 801149c:	4413      	add	r3, r2
 801149e:	65bb      	str	r3, [r7, #88]	; 0x58
				while(tens < 3){
 80114a0:	e008      	b.n	80114b4 <getSath+0x65c>
				  sh*=10;
 80114a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80114a4:	4613      	mov	r3, r2
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	4413      	add	r3, r2
 80114aa:	005b      	lsls	r3, r3, #1
 80114ac:	65bb      	str	r3, [r7, #88]	; 0x58
				  tens++;
 80114ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114b0:	3301      	adds	r3, #1
 80114b2:	657b      	str	r3, [r7, #84]	; 0x54
				while(tens < 3){
 80114b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114b6:	2b02      	cmp	r3, #2
 80114b8:	ddf3      	ble.n	80114a2 <getSath+0x64a>
				}
				itoa((int)sh,shor,10);
 80114ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114bc:	f107 0108 	add.w	r1, r7, #8
 80114c0:	220a      	movs	r2, #10
 80114c2:	4618      	mov	r0, r3
 80114c4:	f001 fb4a 	bl	8012b5c <itoa>
				strcpy((char*)MCON,shor);
 80114c8:	f107 0308 	add.w	r3, r7, #8
 80114cc:	4619      	mov	r1, r3
 80114ce:	4867      	ldr	r0, [pc, #412]	; (801166c <getSath+0x814>)
 80114d0:	f001 fc07 	bl	8012ce2 <strcpy>
			    sh = (rx_buf[7] << 8) + rx_buf[8];
 80114d4:	4b6d      	ldr	r3, [pc, #436]	; (801168c <getSath+0x834>)
 80114d6:	79db      	ldrb	r3, [r3, #7]
 80114d8:	021b      	lsls	r3, r3, #8
 80114da:	4a6c      	ldr	r2, [pc, #432]	; (801168c <getSath+0x834>)
 80114dc:	7a12      	ldrb	r2, [r2, #8]
 80114de:	4413      	add	r3, r2
 80114e0:	65bb      	str	r3, [r7, #88]	; 0x58
				itoa((int)sh,shor,10);
 80114e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114e4:	f107 0108 	add.w	r1, r7, #8
 80114e8:	220a      	movs	r2, #10
 80114ea:	4618      	mov	r0, r3
 80114ec:	f001 fb36 	bl	8012b5c <itoa>
				strcpy((char*)MTEMP,shor);
 80114f0:	f107 0308 	add.w	r3, r7, #8
 80114f4:	4619      	mov	r1, r3
 80114f6:	485f      	ldr	r0, [pc, #380]	; (8011674 <getSath+0x81c>)
 80114f8:	f001 fbf3 	bl	8012ce2 <strcpy>

				tens = 0;
 80114fc:	2300      	movs	r3, #0
 80114fe:	657b      	str	r3, [r7, #84]	; 0x54
				sh = (rx_buf[11] << 8) + rx_buf[12];
 8011500:	4b62      	ldr	r3, [pc, #392]	; (801168c <getSath+0x834>)
 8011502:	7adb      	ldrb	r3, [r3, #11]
 8011504:	021b      	lsls	r3, r3, #8
 8011506:	4a61      	ldr	r2, [pc, #388]	; (801168c <getSath+0x834>)
 8011508:	7b12      	ldrb	r2, [r2, #12]
 801150a:	4413      	add	r3, r2
 801150c:	65bb      	str	r3, [r7, #88]	; 0x58
				while(tens < rx_buf[14]){
 801150e:	e008      	b.n	8011522 <getSath+0x6ca>
				sh*=10;
 8011510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011512:	4613      	mov	r3, r2
 8011514:	009b      	lsls	r3, r3, #2
 8011516:	4413      	add	r3, r2
 8011518:	005b      	lsls	r3, r3, #1
 801151a:	65bb      	str	r3, [r7, #88]	; 0x58
				  tens++;
 801151c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801151e:	3301      	adds	r3, #1
 8011520:	657b      	str	r3, [r7, #84]	; 0x54
				while(tens < rx_buf[14]){
 8011522:	4b5a      	ldr	r3, [pc, #360]	; (801168c <getSath+0x834>)
 8011524:	7b9b      	ldrb	r3, [r3, #14]
 8011526:	461a      	mov	r2, r3
 8011528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801152a:	4293      	cmp	r3, r2
 801152c:	dbf0      	blt.n	8011510 <getSath+0x6b8>
				}
				itoa((int)sh,shor,10);
 801152e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011530:	f107 0108 	add.w	r1, r7, #8
 8011534:	220a      	movs	r2, #10
 8011536:	4618      	mov	r0, r3
 8011538:	f001 fb10 	bl	8012b5c <itoa>
				strcpy((char*)MSATH,shor);
 801153c:	f107 0308 	add.w	r3, r7, #8
 8011540:	4619      	mov	r1, r3
 8011542:	4848      	ldr	r0, [pc, #288]	; (8011664 <getSath+0x80c>)
 8011544:	f001 fbcd 	bl	8012ce2 <strcpy>
				long int a= atol((char*)MSATH);
 8011548:	4846      	ldr	r0, [pc, #280]	; (8011664 <getSath+0x80c>)
 801154a:	f001 fac1 	bl	8012ad0 <atol>
 801154e:	6478      	str	r0, [r7, #68]	; 0x44
				if(a>2000000000){
 8011550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011552:	4a50      	ldr	r2, [pc, #320]	; (8011694 <getSath+0x83c>)
 8011554:	4293      	cmp	r3, r2
 8011556:	dd05      	ble.n	8011564 <getSath+0x70c>
				  tx(uartDebug, (uint8_t*)"QUDIQQA_TIQING\r\n");
 8011558:	4b4b      	ldr	r3, [pc, #300]	; (8011688 <getSath+0x830>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	494e      	ldr	r1, [pc, #312]	; (8011698 <getSath+0x840>)
 801155e:	4618      	mov	r0, r3
 8011560:	f000 ffbc 	bl	80124dc <tx>
				}
				distance = atoi((char*)MSATH);
 8011564:	483f      	ldr	r0, [pc, #252]	; (8011664 <getSath+0x80c>)
 8011566:	f001 faaf 	bl	8012ac8 <atoi>
 801156a:	4603      	mov	r3, r0
 801156c:	4a4b      	ldr	r2, [pc, #300]	; (801169c <getSath+0x844>)
 801156e:	6013      	str	r3, [r2, #0]
				di = *(int*)0x08080300 - atoi((char*)MSATH);
 8011570:	4b4b      	ldr	r3, [pc, #300]	; (80116a0 <getSath+0x848>)
 8011572:	681c      	ldr	r4, [r3, #0]
 8011574:	483b      	ldr	r0, [pc, #236]	; (8011664 <getSath+0x80c>)
 8011576:	f001 faa7 	bl	8012ac8 <atoi>
 801157a:	4603      	mov	r3, r0
 801157c:	1ae3      	subs	r3, r4, r3
 801157e:	667b      	str	r3, [r7, #100]	; 0x64
				itoa(di,(char*)MSATH,10);
 8011580:	220a      	movs	r2, #10
 8011582:	4938      	ldr	r1, [pc, #224]	; (8011664 <getSath+0x80c>)
 8011584:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011586:	f001 fae9 	bl	8012b5c <itoa>
				if(di < 0){
 801158a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801158c:	2b00      	cmp	r3, #0
 801158e:	f280 80a3 	bge.w	80116d8 <getSath+0x880>
					strcpy((char*)MSATH,"-1");
 8011592:	4b34      	ldr	r3, [pc, #208]	; (8011664 <getSath+0x80c>)
 8011594:	4a43      	ldr	r2, [pc, #268]	; (80116a4 <getSath+0x84c>)
 8011596:	8811      	ldrh	r1, [r2, #0]
 8011598:	7892      	ldrb	r2, [r2, #2]
 801159a:	8019      	strh	r1, [r3, #0]
 801159c:	709a      	strb	r2, [r3, #2]
 801159e:	e09b      	b.n	80116d8 <getSath+0x880>
				}
			}else{
				strcpy((char*)MSATH,"-10");
 80115a0:	4b30      	ldr	r3, [pc, #192]	; (8011664 <getSath+0x80c>)
 80115a2:	4a31      	ldr	r2, [pc, #196]	; (8011668 <getSath+0x810>)
 80115a4:	6810      	ldr	r0, [r2, #0]
 80115a6:	6018      	str	r0, [r3, #0]
				strcpy((char*)MCON,"-1000");
 80115a8:	4b30      	ldr	r3, [pc, #192]	; (801166c <getSath+0x814>)
 80115aa:	4a31      	ldr	r2, [pc, #196]	; (8011670 <getSath+0x818>)
 80115ac:	6810      	ldr	r0, [r2, #0]
 80115ae:	6018      	str	r0, [r3, #0]
 80115b0:	8892      	ldrh	r2, [r2, #4]
 80115b2:	809a      	strh	r2, [r3, #4]
				strcpy((char*)MTEMP,"-10");
 80115b4:	4b2f      	ldr	r3, [pc, #188]	; (8011674 <getSath+0x81c>)
 80115b6:	4a2c      	ldr	r2, [pc, #176]	; (8011668 <getSath+0x810>)
 80115b8:	6810      	ldr	r0, [r2, #0]
 80115ba:	6018      	str	r0, [r3, #0]
 80115bc:	e08c      	b.n	80116d8 <getSath+0x880>
			}
		}
		else{
			tx(uartSensor, (uint8_t*)"ALL");
 80115be:	4b3a      	ldr	r3, [pc, #232]	; (80116a8 <getSath+0x850>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	493a      	ldr	r1, [pc, #232]	; (80116ac <getSath+0x854>)
 80115c4:	4618      	mov	r0, r3
 80115c6:	f000 ff89 	bl	80124dc <tx>
			rx(uartSensor, (uint8_t*)"%$&*", 6);
 80115ca:	4b37      	ldr	r3, [pc, #220]	; (80116a8 <getSath+0x850>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2206      	movs	r2, #6
 80115d0:	4937      	ldr	r1, [pc, #220]	; (80116b0 <getSath+0x858>)
 80115d2:	4618      	mov	r0, r3
 80115d4:	f000 ffb4 	bl	8012540 <rx>
			if(rx_buf[0] != '\0'){
 80115d8:	4b2c      	ldr	r3, [pc, #176]	; (801168c <getSath+0x834>)
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d06d      	beq.n	80116bc <getSath+0x864>
				strcpy((char*)MSATH,strtok((char*)rx_buf,"-"));
 80115e0:	4934      	ldr	r1, [pc, #208]	; (80116b4 <getSath+0x85c>)
 80115e2:	482a      	ldr	r0, [pc, #168]	; (801168c <getSath+0x834>)
 80115e4:	f001 fbae 	bl	8012d44 <strtok>
 80115e8:	4603      	mov	r3, r0
 80115ea:	4619      	mov	r1, r3
 80115ec:	481d      	ldr	r0, [pc, #116]	; (8011664 <getSath+0x80c>)
 80115ee:	f001 fb78 	bl	8012ce2 <strcpy>
				strcpy((char*)MTEMP,strtok((char*)NULL,"-"));
 80115f2:	4930      	ldr	r1, [pc, #192]	; (80116b4 <getSath+0x85c>)
 80115f4:	2000      	movs	r0, #0
 80115f6:	f001 fba5 	bl	8012d44 <strtok>
 80115fa:	4603      	mov	r3, r0
 80115fc:	4619      	mov	r1, r3
 80115fe:	481d      	ldr	r0, [pc, #116]	; (8011674 <getSath+0x81c>)
 8011600:	f001 fb6f 	bl	8012ce2 <strcpy>
				strcpy((char*)MCON,strtok((char*)NULL,"OK"));
 8011604:	492c      	ldr	r1, [pc, #176]	; (80116b8 <getSath+0x860>)
 8011606:	2000      	movs	r0, #0
 8011608:	f001 fb9c 	bl	8012d44 <strtok>
 801160c:	4603      	mov	r3, r0
 801160e:	4619      	mov	r1, r3
 8011610:	4816      	ldr	r0, [pc, #88]	; (801166c <getSath+0x814>)
 8011612:	f001 fb66 	bl	8012ce2 <strcpy>
				long int a= atol((char*)MSATH);
 8011616:	4813      	ldr	r0, [pc, #76]	; (8011664 <getSath+0x80c>)
 8011618:	f001 fa5a 	bl	8012ad0 <atol>
 801161c:	64b8      	str	r0, [r7, #72]	; 0x48
				if(a>2000000000){
 801161e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011620:	4a1c      	ldr	r2, [pc, #112]	; (8011694 <getSath+0x83c>)
 8011622:	4293      	cmp	r3, r2
 8011624:	dd05      	ble.n	8011632 <getSath+0x7da>
					tx(uartDebug, (uint8_t*)"QUDIQQA_TIQING\r\n");
 8011626:	4b18      	ldr	r3, [pc, #96]	; (8011688 <getSath+0x830>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	491b      	ldr	r1, [pc, #108]	; (8011698 <getSath+0x840>)
 801162c:	4618      	mov	r0, r3
 801162e:	f000 ff55 	bl	80124dc <tx>
				}
				distance = atoi((char*)MSATH);
 8011632:	480c      	ldr	r0, [pc, #48]	; (8011664 <getSath+0x80c>)
 8011634:	f001 fa48 	bl	8012ac8 <atoi>
 8011638:	4603      	mov	r3, r0
 801163a:	4a18      	ldr	r2, [pc, #96]	; (801169c <getSath+0x844>)
 801163c:	6013      	str	r3, [r2, #0]
				di = atoi((char*)MSATH);
 801163e:	4809      	ldr	r0, [pc, #36]	; (8011664 <getSath+0x80c>)
 8011640:	f001 fa42 	bl	8012ac8 <atoi>
 8011644:	6678      	str	r0, [r7, #100]	; 0x64
				itoa(di,(char*)MSATH,10);
 8011646:	220a      	movs	r2, #10
 8011648:	4906      	ldr	r1, [pc, #24]	; (8011664 <getSath+0x80c>)
 801164a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801164c:	f001 fa86 	bl	8012b5c <itoa>
				if(di < 0){
 8011650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011652:	2b00      	cmp	r3, #0
 8011654:	da40      	bge.n	80116d8 <getSath+0x880>
					strcpy((char*)MSATH,"-1");
 8011656:	4b03      	ldr	r3, [pc, #12]	; (8011664 <getSath+0x80c>)
 8011658:	4a12      	ldr	r2, [pc, #72]	; (80116a4 <getSath+0x84c>)
 801165a:	8811      	ldrh	r1, [r2, #0]
 801165c:	7892      	ldrb	r2, [r2, #2]
 801165e:	8019      	strh	r1, [r3, #0]
 8011660:	709a      	strb	r2, [r3, #2]
 8011662:	e039      	b.n	80116d8 <getSath+0x880>
 8011664:	200002b8 	.word	0x200002b8
 8011668:	08015b9c 	.word	0x08015b9c
 801166c:	20004418 	.word	0x20004418
 8011670:	08015b6c 	.word	0x08015b6c
 8011674:	200002ac 	.word	0x200002ac
 8011678:	08015ba0 	.word	0x08015ba0
 801167c:	200040f8 	.word	0x200040f8
 8011680:	08015bcc 	.word	0x08015bcc
 8011684:	40020400 	.word	0x40020400
 8011688:	200044a4 	.word	0x200044a4
 801168c:	20004588 	.word	0x20004588
 8011690:	08015b80 	.word	0x08015b80
 8011694:	77359400 	.word	0x77359400
 8011698:	08015b84 	.word	0x08015b84
 801169c:	20003d98 	.word	0x20003d98
 80116a0:	08080300 	.word	0x08080300
 80116a4:	08015b98 	.word	0x08015b98
 80116a8:	200044a8 	.word	0x200044a8
 80116ac:	08015bac 	.word	0x08015bac
 80116b0:	08015bb0 	.word	0x08015bb0
 80116b4:	08015bb8 	.word	0x08015bb8
 80116b8:	08015b54 	.word	0x08015b54
				}
			}
			else{
				strcpy((char*)MSATH,"-10");
 80116bc:	4b74      	ldr	r3, [pc, #464]	; (8011890 <getSath+0xa38>)
 80116be:	4a75      	ldr	r2, [pc, #468]	; (8011894 <getSath+0xa3c>)
 80116c0:	6810      	ldr	r0, [r2, #0]
 80116c2:	6018      	str	r0, [r3, #0]
				strcpy((char*)MCON,"-1000");
 80116c4:	4b74      	ldr	r3, [pc, #464]	; (8011898 <getSath+0xa40>)
 80116c6:	4a75      	ldr	r2, [pc, #468]	; (801189c <getSath+0xa44>)
 80116c8:	6810      	ldr	r0, [r2, #0]
 80116ca:	6018      	str	r0, [r3, #0]
 80116cc:	8892      	ldrh	r2, [r2, #4]
 80116ce:	809a      	strh	r2, [r3, #4]
				strcpy((char*)MTEMP,"-10");
 80116d0:	4b73      	ldr	r3, [pc, #460]	; (80118a0 <getSath+0xa48>)
 80116d2:	4a70      	ldr	r2, [pc, #448]	; (8011894 <getSath+0xa3c>)
 80116d4:	6810      	ldr	r0, [r2, #0]
 80116d6:	6018      	str	r0, [r3, #0]
			}
		}
		sensorOff();
 80116d8:	f000 fa0a 	bl	8011af0 <sensorOff>
	}
	if(strstr((char*)SENSORTYPE,"A011617")){
 80116dc:	4971      	ldr	r1, [pc, #452]	; (80118a4 <getSath+0xa4c>)
 80116de:	4872      	ldr	r0, [pc, #456]	; (80118a8 <getSath+0xa50>)
 80116e0:	f001 fb18 	bl	8012d14 <strstr>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f000 80cd 	beq.w	8011886 <getSath+0xa2e>
		uint8_t ssd2[8] = {0x01,0x03,0x01,0x01,0x00,0x01,0xD4,0x36};
 80116ec:	4a6f      	ldr	r2, [pc, #444]	; (80118ac <getSath+0xa54>)
 80116ee:	463b      	mov	r3, r7
 80116f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116f4:	e883 0003 	stmia.w	r3, {r0, r1}
		sensorOn();
 80116f8:	f000 f9ee 	bl	8011ad8 <sensorOn>
		HAL_Delay(3000);
 80116fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011700:	f7fa ffb8 	bl	800c674 <HAL_Delay>
		HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_SET);
 8011704:	2201      	movs	r2, #1
 8011706:	2120      	movs	r1, #32
 8011708:	4869      	ldr	r0, [pc, #420]	; (80118b0 <getSath+0xa58>)
 801170a:	f7fc fac4 	bl	800dc96 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 801170e:	200a      	movs	r0, #10
 8011710:	f7fa ffb0 	bl	800c674 <HAL_Delay>
		HAL_UART_Transmit(uartDebug, ssd2, 8, 100);
 8011714:	4b67      	ldr	r3, [pc, #412]	; (80118b4 <getSath+0xa5c>)
 8011716:	6818      	ldr	r0, [r3, #0]
 8011718:	4639      	mov	r1, r7
 801171a:	2364      	movs	r3, #100	; 0x64
 801171c:	2208      	movs	r2, #8
 801171e:	f7fe fd25 	bl	801016c <HAL_UART_Transmit>
		HAL_Delay(10);
 8011722:	200a      	movs	r0, #10
 8011724:	f7fa ffa6 	bl	800c674 <HAL_Delay>
		HAL_GPIO_WritePin(RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET);
 8011728:	2200      	movs	r2, #0
 801172a:	2120      	movs	r1, #32
 801172c:	4860      	ldr	r0, [pc, #384]	; (80118b0 <getSath+0xa58>)
 801172e:	f7fc fab2 	bl	800dc96 <HAL_GPIO_WritePin>
		rx_buf[0] = '\0';
 8011732:	4b61      	ldr	r3, [pc, #388]	; (80118b8 <getSath+0xa60>)
 8011734:	2200      	movs	r2, #0
 8011736:	701a      	strb	r2, [r3, #0]
		rx(uartDebug, (uint8_t*)"&$*&", 3);
 8011738:	4b5e      	ldr	r3, [pc, #376]	; (80118b4 <getSath+0xa5c>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2203      	movs	r2, #3
 801173e:	495f      	ldr	r1, [pc, #380]	; (80118bc <getSath+0xa64>)
 8011740:	4618      	mov	r0, r3
 8011742:	f000 fefd 	bl	8012540 <rx>
		if(rx_buf[0] != '\0'){
 8011746:	4b5c      	ldr	r3, [pc, #368]	; (80118b8 <getSath+0xa60>)
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	f000 808d 	beq.w	801186a <getSath+0xa12>
			distance = (rx_buf[3] << 8) + rx_buf[4];
 8011750:	4b59      	ldr	r3, [pc, #356]	; (80118b8 <getSath+0xa60>)
 8011752:	78db      	ldrb	r3, [r3, #3]
 8011754:	021b      	lsls	r3, r3, #8
 8011756:	4a58      	ldr	r2, [pc, #352]	; (80118b8 <getSath+0xa60>)
 8011758:	7912      	ldrb	r2, [r2, #4]
 801175a:	4413      	add	r3, r2
 801175c:	4a58      	ldr	r2, [pc, #352]	; (80118c0 <getSath+0xa68>)
 801175e:	6013      	str	r3, [r2, #0]
			di = *(int*)0x08080300 - distance;
 8011760:	4b58      	ldr	r3, [pc, #352]	; (80118c4 <getSath+0xa6c>)
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	4b56      	ldr	r3, [pc, #344]	; (80118c0 <getSath+0xa68>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	1ad3      	subs	r3, r2, r3
 801176a:	667b      	str	r3, [r7, #100]	; 0x64
			if(di<0){
 801176c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801176e:	2b00      	cmp	r3, #0
 8011770:	da01      	bge.n	8011776 <getSath+0x91e>
				di = 0;
 8011772:	2300      	movs	r3, #0
 8011774:	667b      	str	r3, [r7, #100]	; 0x64
			}
			itoa(di,(char*)SATH,10);
 8011776:	220a      	movs	r2, #10
 8011778:	4953      	ldr	r1, [pc, #332]	; (80118c8 <getSath+0xa70>)
 801177a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801177c:	f001 f9ee 	bl	8012b5c <itoa>
			itoa(distance,(char*)DIST,10);
 8011780:	4b4f      	ldr	r3, [pc, #316]	; (80118c0 <getSath+0xa68>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	220a      	movs	r2, #10
 8011786:	4951      	ldr	r1, [pc, #324]	; (80118cc <getSath+0xa74>)
 8011788:	4618      	mov	r0, r3
 801178a:	f001 f9e7 	bl	8012b5c <itoa>
			di+=atoi((char*)COR)*10;
 801178e:	4850      	ldr	r0, [pc, #320]	; (80118d0 <getSath+0xa78>)
 8011790:	f001 f99a 	bl	8012ac8 <atoi>
 8011794:	4602      	mov	r2, r0
 8011796:	4613      	mov	r3, r2
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	4413      	add	r3, r2
 801179c:	005b      	lsls	r3, r3, #1
 801179e:	461a      	mov	r2, r3
 80117a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117a2:	4413      	add	r3, r2
 80117a4:	667b      	str	r3, [r7, #100]	; 0x64
			if(di < 0){
 80117a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	da06      	bge.n	80117ba <getSath+0x962>
				strcpy((char*)SARF,"-1000");
 80117ac:	4b49      	ldr	r3, [pc, #292]	; (80118d4 <getSath+0xa7c>)
 80117ae:	4a3b      	ldr	r2, [pc, #236]	; (801189c <getSath+0xa44>)
 80117b0:	6810      	ldr	r0, [r2, #0]
 80117b2:	6018      	str	r0, [r3, #0]
 80117b4:	8892      	ldrh	r2, [r2, #4]
 80117b6:	809a      	strh	r2, [r3, #4]
 80117b8:	e063      	b.n	8011882 <getSath+0xa2a>
			}
			else{
				dif = TABLE[(di/10)+1]-TABLE[di/10];
 80117ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117bc:	4a46      	ldr	r2, [pc, #280]	; (80118d8 <getSath+0xa80>)
 80117be:	fb82 1203 	smull	r1, r2, r2, r3
 80117c2:	1092      	asrs	r2, r2, #2
 80117c4:	17db      	asrs	r3, r3, #31
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	3301      	adds	r3, #1
 80117ca:	4a44      	ldr	r2, [pc, #272]	; (80118dc <getSath+0xa84>)
 80117cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80117d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117d2:	4941      	ldr	r1, [pc, #260]	; (80118d8 <getSath+0xa80>)
 80117d4:	fb81 0103 	smull	r0, r1, r1, r3
 80117d8:	1089      	asrs	r1, r1, #2
 80117da:	17db      	asrs	r3, r3, #31
 80117dc:	1acb      	subs	r3, r1, r3
 80117de:	493f      	ldr	r1, [pc, #252]	; (80118dc <getSath+0xa84>)
 80117e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80117e4:	1ad3      	subs	r3, r2, r3
 80117e6:	653b      	str	r3, [r7, #80]	; 0x50
				itoa(TABLE[di/10]+((di%10)*(dif/10.0)),(char*)SARF,10);
 80117e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117ea:	4a3b      	ldr	r2, [pc, #236]	; (80118d8 <getSath+0xa80>)
 80117ec:	fb82 1203 	smull	r1, r2, r2, r3
 80117f0:	1092      	asrs	r2, r2, #2
 80117f2:	17db      	asrs	r3, r3, #31
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	4a39      	ldr	r2, [pc, #228]	; (80118dc <getSath+0xa84>)
 80117f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7f3 fe21 	bl	8005444 <__aeabi_i2d>
 8011802:	4604      	mov	r4, r0
 8011804:	460d      	mov	r5, r1
 8011806:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011808:	4b33      	ldr	r3, [pc, #204]	; (80118d8 <getSath+0xa80>)
 801180a:	fb83 1302 	smull	r1, r3, r3, r2
 801180e:	1099      	asrs	r1, r3, #2
 8011810:	17d3      	asrs	r3, r2, #31
 8011812:	1ac9      	subs	r1, r1, r3
 8011814:	460b      	mov	r3, r1
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	440b      	add	r3, r1
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	1ad1      	subs	r1, r2, r3
 801181e:	4608      	mov	r0, r1
 8011820:	f7f3 fe10 	bl	8005444 <__aeabi_i2d>
 8011824:	4680      	mov	r8, r0
 8011826:	4689      	mov	r9, r1
 8011828:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801182a:	f7f3 fe0b 	bl	8005444 <__aeabi_i2d>
 801182e:	f04f 0200 	mov.w	r2, #0
 8011832:	4b2b      	ldr	r3, [pc, #172]	; (80118e0 <getSath+0xa88>)
 8011834:	f7f3 ff9a 	bl	800576c <__aeabi_ddiv>
 8011838:	4602      	mov	r2, r0
 801183a:	460b      	mov	r3, r1
 801183c:	4640      	mov	r0, r8
 801183e:	4649      	mov	r1, r9
 8011840:	f7f3 fe6a 	bl	8005518 <__aeabi_dmul>
 8011844:	4602      	mov	r2, r0
 8011846:	460b      	mov	r3, r1
 8011848:	4620      	mov	r0, r4
 801184a:	4629      	mov	r1, r5
 801184c:	f7f3 fcae 	bl	80051ac <__adddf3>
 8011850:	4602      	mov	r2, r0
 8011852:	460b      	mov	r3, r1
 8011854:	4610      	mov	r0, r2
 8011856:	4619      	mov	r1, r3
 8011858:	f7f4 f870 	bl	800593c <__aeabi_d2iz>
 801185c:	4603      	mov	r3, r0
 801185e:	220a      	movs	r2, #10
 8011860:	491c      	ldr	r1, [pc, #112]	; (80118d4 <getSath+0xa7c>)
 8011862:	4618      	mov	r0, r3
 8011864:	f001 f97a 	bl	8012b5c <itoa>
 8011868:	e00b      	b.n	8011882 <getSath+0xa2a>
			}
		}
		else{
			itoa(-10,(char*)SATH,10);
 801186a:	220a      	movs	r2, #10
 801186c:	4916      	ldr	r1, [pc, #88]	; (80118c8 <getSath+0xa70>)
 801186e:	f06f 0009 	mvn.w	r0, #9
 8011872:	f001 f973 	bl	8012b5c <itoa>
			strcpy((char*)SARF,(char*)"-1000");
 8011876:	4b17      	ldr	r3, [pc, #92]	; (80118d4 <getSath+0xa7c>)
 8011878:	4a08      	ldr	r2, [pc, #32]	; (801189c <getSath+0xa44>)
 801187a:	6810      	ldr	r0, [r2, #0]
 801187c:	6018      	str	r0, [r3, #0]
 801187e:	8892      	ldrh	r2, [r2, #4]
 8011880:	809a      	strh	r2, [r3, #4]
		}
		sensorOff();
 8011882:	f000 f935 	bl	8011af0 <sensorOff>
	}
}
 8011886:	bf00      	nop
 8011888:	3768      	adds	r7, #104	; 0x68
 801188a:	46bd      	mov	sp, r7
 801188c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8011890:	200002b8 	.word	0x200002b8
 8011894:	08015b9c 	.word	0x08015b9c
 8011898:	20004418 	.word	0x20004418
 801189c:	08015b6c 	.word	0x08015b6c
 80118a0:	200002ac 	.word	0x200002ac
 80118a4:	08015bbc 	.word	0x08015bbc
 80118a8:	200040f8 	.word	0x200040f8
 80118ac:	08015bd4 	.word	0x08015bd4
 80118b0:	40020400 	.word	0x40020400
 80118b4:	200044a4 	.word	0x200044a4
 80118b8:	20004588 	.word	0x20004588
 80118bc:	08015bc4 	.word	0x08015bc4
 80118c0:	20003d98 	.word	0x20003d98
 80118c4:	08080300 	.word	0x08080300
 80118c8:	20003cf8 	.word	0x20003cf8
 80118cc:	20003e14 	.word	0x20003e14
 80118d0:	20004428 	.word	0x20004428
 80118d4:	20000398 	.word	0x20000398
 80118d8:	66666667 	.word	0x66666667
 80118dc:	20000644 	.word	0x20000644
 80118e0:	40240000 	.word	0x40240000

080118e4 <debug>:

void debug(uint8_t* data){
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
	int f;
	uint8_t bit;
	while(*data != '\0'){
 80118ec:	e037      	b.n	801195e <debug+0x7a>
		bit = *data;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	72fb      	strb	r3, [r7, #11]
		for(f=0;f<9;f++){
 80118f4:	2300      	movs	r3, #0
 80118f6:	60fb      	str	r3, [r7, #12]
 80118f8:	e02b      	b.n	8011952 <debug+0x6e>
			if(f == 0){
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d105      	bne.n	801190c <debug+0x28>
				HAL_GPIO_WritePin(debug_GPIO_Port, debug_Pin, GPIO_PIN_RESET);
 8011900:	2200      	movs	r2, #0
 8011902:	2104      	movs	r1, #4
 8011904:	481a      	ldr	r0, [pc, #104]	; (8011970 <debug+0x8c>)
 8011906:	f7fc f9c6 	bl	800dc96 <HAL_GPIO_WritePin>
 801190a:	e01c      	b.n	8011946 <debug+0x62>
			}
			else if(f > 7){
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2b07      	cmp	r3, #7
 8011910:	dd05      	ble.n	801191e <debug+0x3a>
				HAL_GPIO_WritePin(debug_GPIO_Port, debug_Pin, GPIO_PIN_SET);
 8011912:	2201      	movs	r2, #1
 8011914:	2104      	movs	r1, #4
 8011916:	4816      	ldr	r0, [pc, #88]	; (8011970 <debug+0x8c>)
 8011918:	f7fc f9bd 	bl	800dc96 <HAL_GPIO_WritePin>
 801191c:	e013      	b.n	8011946 <debug+0x62>
			}
			else{
				if(bit & (1 << (f-1))){
 801191e:	7afa      	ldrb	r2, [r7, #11]
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	3b01      	subs	r3, #1
 8011924:	fa42 f303 	asr.w	r3, r2, r3
 8011928:	f003 0301 	and.w	r3, r3, #1
 801192c:	2b00      	cmp	r3, #0
 801192e:	d005      	beq.n	801193c <debug+0x58>
					HAL_GPIO_WritePin(debug_GPIO_Port, debug_Pin, GPIO_PIN_SET);
 8011930:	2201      	movs	r2, #1
 8011932:	2104      	movs	r1, #4
 8011934:	480e      	ldr	r0, [pc, #56]	; (8011970 <debug+0x8c>)
 8011936:	f7fc f9ae 	bl	800dc96 <HAL_GPIO_WritePin>
 801193a:	e004      	b.n	8011946 <debug+0x62>
				}
				else{
					HAL_GPIO_WritePin(debug_GPIO_Port, debug_Pin, GPIO_PIN_RESET);
 801193c:	2200      	movs	r2, #0
 801193e:	2104      	movs	r1, #4
 8011940:	480b      	ldr	r0, [pc, #44]	; (8011970 <debug+0x8c>)
 8011942:	f7fc f9a8 	bl	800dc96 <HAL_GPIO_WritePin>
				}
			}
			delay(97);
 8011946:	2061      	movs	r0, #97	; 0x61
 8011948:	f000 f814 	bl	8011974 <delay>
		for(f=0;f<9;f++){
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	3301      	adds	r3, #1
 8011950:	60fb      	str	r3, [r7, #12]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2b08      	cmp	r3, #8
 8011956:	ddd0      	ble.n	80118fa <debug+0x16>
		}
		data ++;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	3301      	adds	r3, #1
 801195c:	607b      	str	r3, [r7, #4]
	while(*data != '\0'){
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1c3      	bne.n	80118ee <debug+0xa>
	}
}
 8011966:	bf00      	nop
 8011968:	bf00      	nop
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	40020400 	.word	0x40020400

08011974 <delay>:
void delay(int timeout){
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&uart7T,0);
 801197c:	4b08      	ldr	r3, [pc, #32]	; (80119a0 <delay+0x2c>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2200      	movs	r2, #0
 8011982:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&uart7T) < timeout)
 8011984:	bf00      	nop
 8011986:	4b06      	ldr	r3, [pc, #24]	; (80119a0 <delay+0x2c>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	429a      	cmp	r2, r3
 8011990:	d3f9      	bcc.n	8011986 <delay+0x12>
		;
}
 8011992:	bf00      	nop
 8011994:	bf00      	nop
 8011996:	370c      	adds	r7, #12
 8011998:	46bd      	mov	sp, r7
 801199a:	bc80      	pop	{r7}
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop
 80119a0:	200044ac 	.word	0x200044ac

080119a4 <__NVIC_SystemReset>:
{
 80119a4:	b480      	push	{r7}
 80119a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80119a8:	f3bf 8f4f 	dsb	sy
}
 80119ac:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80119ae:	4b06      	ldr	r3, [pc, #24]	; (80119c8 <__NVIC_SystemReset+0x24>)
 80119b0:	68db      	ldr	r3, [r3, #12]
 80119b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80119b6:	4904      	ldr	r1, [pc, #16]	; (80119c8 <__NVIC_SystemReset+0x24>)
 80119b8:	4b04      	ldr	r3, [pc, #16]	; (80119cc <__NVIC_SystemReset+0x28>)
 80119ba:	4313      	orrs	r3, r2
 80119bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80119be:	f3bf 8f4f 	dsb	sy
}
 80119c2:	bf00      	nop
    __NOP();
 80119c4:	bf00      	nop
 80119c6:	e7fd      	b.n	80119c4 <__NVIC_SystemReset+0x20>
 80119c8:	e000ed00 	.word	0xe000ed00
 80119cc:	05fa0004 	.word	0x05fa0004

080119d0 <ledsOn>:
}
void l2Off(){
	HAL_GPIO_WritePin(l2_GPIO_Port, l2_Pin, GPIO_PIN_RESET);
}

void ledsOn(){
 80119d0:	b580      	push	{r7, lr}
 80119d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(gnde_GPIO_Port, gnde_Pin, GPIO_PIN_SET);
 80119d4:	2201      	movs	r2, #1
 80119d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80119da:	4802      	ldr	r0, [pc, #8]	; (80119e4 <ledsOn+0x14>)
 80119dc:	f7fc f95b 	bl	800dc96 <HAL_GPIO_WritePin>
}
 80119e0:	bf00      	nop
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	40020800 	.word	0x40020800

080119e8 <ledsOff>:
void ledsOff(){
 80119e8:	b580      	push	{r7, lr}
 80119ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(gnde_GPIO_Port, gnde_Pin, GPIO_PIN_RESET);
 80119ec:	2200      	movs	r2, #0
 80119ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80119f2:	4802      	ldr	r0, [pc, #8]	; (80119fc <ledsOff+0x14>)
 80119f4:	f7fc f94f 	bl	800dc96 <HAL_GPIO_WritePin>
}
 80119f8:	bf00      	nop
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	40020800 	.word	0x40020800

08011a00 <sim868On>:
void sim868On(void){
 8011a00:	b580      	push	{r7, lr}
 8011a02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pwrs_GPIO_Port, pwrs_Pin, GPIO_PIN_SET);
 8011a04:	2201      	movs	r2, #1
 8011a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011a0a:	4815      	ldr	r0, [pc, #84]	; (8011a60 <sim868On+0x60>)
 8011a0c:	f7fc f943 	bl	800dc96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(l2_GPIO_Port, l2_Pin, GPIO_PIN_SET);
 8011a10:	2201      	movs	r2, #1
 8011a12:	2180      	movs	r1, #128	; 0x80
 8011a14:	4813      	ldr	r0, [pc, #76]	; (8011a64 <sim868On+0x64>)
 8011a16:	f7fc f93e 	bl	800dc96 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&uartT,0);
 8011a1a:	4b13      	ldr	r3, [pc, #76]	; (8011a68 <sim868On+0x68>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(status_GPIO_Port, status_Pin) == GPIO_PIN_RESET){
 8011a22:	e008      	b.n	8011a36 <sim868On+0x36>
		if((__HAL_TIM_GET_COUNTER(&uartT) > 10000)){
 8011a24:	4b10      	ldr	r3, [pc, #64]	; (8011a68 <sim868On+0x68>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d901      	bls.n	8011a36 <sim868On+0x36>
			NVIC_SystemReset();
 8011a32:	f7ff ffb7 	bl	80119a4 <__NVIC_SystemReset>
	while(HAL_GPIO_ReadPin(status_GPIO_Port, status_Pin) == GPIO_PIN_RESET){
 8011a36:	2102      	movs	r1, #2
 8011a38:	480a      	ldr	r0, [pc, #40]	; (8011a64 <sim868On+0x64>)
 8011a3a:	f7fc f915 	bl	800dc68 <HAL_GPIO_ReadPin>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d0ef      	beq.n	8011a24 <sim868On+0x24>
		}
	}
	HAL_GPIO_WritePin(pwrs_GPIO_Port, pwrs_Pin, GPIO_PIN_RESET);
 8011a44:	2200      	movs	r2, #0
 8011a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011a4a:	4805      	ldr	r0, [pc, #20]	; (8011a60 <sim868On+0x60>)
 8011a4c:	f7fc f923 	bl	800dc96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(l2_GPIO_Port, l2_Pin, GPIO_PIN_RESET);
 8011a50:	2200      	movs	r2, #0
 8011a52:	2180      	movs	r1, #128	; 0x80
 8011a54:	4803      	ldr	r0, [pc, #12]	; (8011a64 <sim868On+0x64>)
 8011a56:	f7fc f91e 	bl	800dc96 <HAL_GPIO_WritePin>
}
 8011a5a:	bf00      	nop
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	40020800 	.word	0x40020800
 8011a64:	40020400 	.word	0x40020400
 8011a68:	20004464 	.word	0x20004464

08011a6c <sim868Off>:
void sim868Off(void){
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pwrs_GPIO_Port, pwrs_Pin, GPIO_PIN_SET);
 8011a70:	2201      	movs	r2, #1
 8011a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011a76:	4815      	ldr	r0, [pc, #84]	; (8011acc <sim868Off+0x60>)
 8011a78:	f7fc f90d 	bl	800dc96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(l2_GPIO_Port, l2_Pin, GPIO_PIN_SET);
 8011a7c:	2201      	movs	r2, #1
 8011a7e:	2180      	movs	r1, #128	; 0x80
 8011a80:	4813      	ldr	r0, [pc, #76]	; (8011ad0 <sim868Off+0x64>)
 8011a82:	f7fc f908 	bl	800dc96 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&uartT,0);
 8011a86:	4b13      	ldr	r3, [pc, #76]	; (8011ad4 <sim868Off+0x68>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(status_GPIO_Port, status_Pin) == GPIO_PIN_SET){
 8011a8e:	e008      	b.n	8011aa2 <sim868Off+0x36>
		if((__HAL_TIM_GET_COUNTER(&uartT) > 10000)){
 8011a90:	4b10      	ldr	r3, [pc, #64]	; (8011ad4 <sim868Off+0x68>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a96:	f242 7210 	movw	r2, #10000	; 0x2710
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d901      	bls.n	8011aa2 <sim868Off+0x36>
			NVIC_SystemReset();
 8011a9e:	f7ff ff81 	bl	80119a4 <__NVIC_SystemReset>
	while(HAL_GPIO_ReadPin(status_GPIO_Port, status_Pin) == GPIO_PIN_SET){
 8011aa2:	2102      	movs	r1, #2
 8011aa4:	480a      	ldr	r0, [pc, #40]	; (8011ad0 <sim868Off+0x64>)
 8011aa6:	f7fc f8df 	bl	800dc68 <HAL_GPIO_ReadPin>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d0ef      	beq.n	8011a90 <sim868Off+0x24>
		}
	}
	HAL_GPIO_WritePin(pwrs_GPIO_Port, pwrs_Pin, GPIO_PIN_RESET);
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011ab6:	4805      	ldr	r0, [pc, #20]	; (8011acc <sim868Off+0x60>)
 8011ab8:	f7fc f8ed 	bl	800dc96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(l2_GPIO_Port, l2_Pin, GPIO_PIN_RESET);
 8011abc:	2200      	movs	r2, #0
 8011abe:	2180      	movs	r1, #128	; 0x80
 8011ac0:	4803      	ldr	r0, [pc, #12]	; (8011ad0 <sim868Off+0x64>)
 8011ac2:	f7fc f8e8 	bl	800dc96 <HAL_GPIO_WritePin>
}
 8011ac6:	bf00      	nop
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	40020800 	.word	0x40020800
 8011ad0:	40020400 	.word	0x40020400
 8011ad4:	20004464 	.word	0x20004464

08011ad8 <sensorOn>:
void sensorOn(void){
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(onc_GPIO_Port, onc_Pin, GPIO_PIN_SET);//SW1.10
 8011adc:	2201      	movs	r2, #1
 8011ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011ae2:	4802      	ldr	r0, [pc, #8]	; (8011aec <sensorOn+0x14>)
 8011ae4:	f7fc f8d7 	bl	800dc96 <HAL_GPIO_WritePin>
}
 8011ae8:	bf00      	nop
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	40020800 	.word	0x40020800

08011af0 <sensorOff>:
void sensorOff(void){
 8011af0:	b580      	push	{r7, lr}
 8011af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(onc_GPIO_Port, onc_Pin, GPIO_PIN_RESET);//SW1.10
 8011af4:	2200      	movs	r2, #0
 8011af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011afa:	4802      	ldr	r0, [pc, #8]	; (8011b04 <sensorOff+0x14>)
 8011afc:	f7fc f8cb 	bl	800dc96 <HAL_GPIO_WritePin>
}
 8011b00:	bf00      	nop
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	40020800 	.word	0x40020800

08011b08 <loraOff>:
void loraOn(void){
	HAL_GPIO_WritePin(onb_GPIO_Port, onb_Pin, GPIO_PIN_SET);//SW1.10
}
void loraOff(void){
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(onb_GPIO_Port, onb_Pin, GPIO_PIN_RESET);//SW1.10
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011b12:	4802      	ldr	r0, [pc, #8]	; (8011b1c <loraOff+0x14>)
 8011b14:	f7fc f8bf 	bl	800dc96 <HAL_GPIO_WritePin>
}
 8011b18:	bf00      	nop
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	40020800 	.word	0x40020800

08011b20 <sim868Init>:
int sim868Init(void){
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
	int s=0;
 8011b26:	2300      	movs	r3, #0
 8011b28:	607b      	str	r3, [r7, #4]
	while(1){
		tx(uartModem, SIM);
 8011b2a:	4b46      	ldr	r3, [pc, #280]	; (8011c44 <sim868Init+0x124>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	4a46      	ldr	r2, [pc, #280]	; (8011c48 <sim868Init+0x128>)
 8011b30:	6812      	ldr	r2, [r2, #0]
 8011b32:	4611      	mov	r1, r2
 8011b34:	4618      	mov	r0, r3
 8011b36:	f000 fcd1 	bl	80124dc <tx>
		if(rx(uartModem, SIMR, 1) == UART_OK){
 8011b3a:	4b42      	ldr	r3, [pc, #264]	; (8011c44 <sim868Init+0x124>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4a43      	ldr	r2, [pc, #268]	; (8011c4c <sim868Init+0x12c>)
 8011b40:	6811      	ldr	r1, [r2, #0]
 8011b42:	2201      	movs	r2, #1
 8011b44:	4618      	mov	r0, r3
 8011b46:	f000 fcfb 	bl	8012540 <rx>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b32      	cmp	r3, #50	; 0x32
 8011b4e:	d008      	beq.n	8011b62 <sim868Init+0x42>
			break;
		}
		if(s == 10){
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2b0a      	cmp	r3, #10
 8011b54:	d101      	bne.n	8011b5a <sim868Init+0x3a>
			return MODEM_ERROR;
 8011b56:	2337      	movs	r3, #55	; 0x37
 8011b58:	e06f      	b.n	8011c3a <sim868Init+0x11a>
		}
		s++;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	607b      	str	r3, [r7, #4]
		tx(uartModem, SIM);
 8011b60:	e7e3      	b.n	8011b2a <sim868Init+0xa>
			break;
 8011b62:	bf00      	nop
	}
	getTime();
 8011b64:	f7f6 fe5c 	bl	8008820 <getTime>
	txr(uartModem, SIM01);
 8011b68:	4b36      	ldr	r3, [pc, #216]	; (8011c44 <sim868Init+0x124>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	4a38      	ldr	r2, [pc, #224]	; (8011c50 <sim868Init+0x130>)
 8011b6e:	6812      	ldr	r2, [r2, #0]
 8011b70:	4611      	mov	r1, r2
 8011b72:	4618      	mov	r0, r3
 8011b74:	f000 fda8 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8011b78:	4b32      	ldr	r3, [pc, #200]	; (8011c44 <sim868Init+0x124>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a33      	ldr	r2, [pc, #204]	; (8011c4c <sim868Init+0x12c>)
 8011b7e:	6811      	ldr	r1, [r2, #0]
 8011b80:	2201      	movs	r2, #1
 8011b82:	4618      	mov	r0, r3
 8011b84:	f000 fd76 	bl	8012674 <rxr>
	txr(uartModem, SIM02);
 8011b88:	4b2e      	ldr	r3, [pc, #184]	; (8011c44 <sim868Init+0x124>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	4a31      	ldr	r2, [pc, #196]	; (8011c54 <sim868Init+0x134>)
 8011b8e:	6812      	ldr	r2, [r2, #0]
 8011b90:	4611      	mov	r1, r2
 8011b92:	4618      	mov	r0, r3
 8011b94:	f000 fd98 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8011b98:	4b2a      	ldr	r3, [pc, #168]	; (8011c44 <sim868Init+0x124>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	4a2b      	ldr	r2, [pc, #172]	; (8011c4c <sim868Init+0x12c>)
 8011b9e:	6811      	ldr	r1, [r2, #0]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 fd66 	bl	8012674 <rxr>
	if(TIME[0] == '0'){
 8011ba8:	4b2b      	ldr	r3, [pc, #172]	; (8011c58 <sim868Init+0x138>)
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	2b30      	cmp	r3, #48	; 0x30
 8011bae:	d10b      	bne.n	8011bc8 <sim868Init+0xa8>
		getMV();
 8011bb0:	f000 fa56 	bl	8012060 <getMV>
		getIMEI();
 8011bb4:	f000 f8b0 	bl	8011d18 <getIMEI>
		debug(IMEI);
 8011bb8:	4828      	ldr	r0, [pc, #160]	; (8011c5c <sim868Init+0x13c>)
 8011bba:	f7ff fe93 	bl	80118e4 <debug>
		debug(SIMN);
 8011bbe:	4b28      	ldr	r3, [pc, #160]	; (8011c60 <sim868Init+0x140>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7ff fe8e 	bl	80118e4 <debug>
	}
	HAL_Delay(1000);
 8011bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011bcc:	f7fa fd52 	bl	800c674 <HAL_Delay>
	txr(uartModem, SIM8);
 8011bd0:	4b1c      	ldr	r3, [pc, #112]	; (8011c44 <sim868Init+0x124>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a23      	ldr	r2, [pc, #140]	; (8011c64 <sim868Init+0x144>)
 8011bd6:	6812      	ldr	r2, [r2, #0]
 8011bd8:	4611      	mov	r1, r2
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f000 fd74 	bl	80126c8 <txr>
	if(rx(uartModem, SIMR2, 2) == UART_TIMEOUT){
 8011be0:	4b18      	ldr	r3, [pc, #96]	; (8011c44 <sim868Init+0x124>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4a20      	ldr	r2, [pc, #128]	; (8011c68 <sim868Init+0x148>)
 8011be6:	6811      	ldr	r1, [r2, #0]
 8011be8:	2202      	movs	r2, #2
 8011bea:	4618      	mov	r0, r3
 8011bec:	f000 fca8 	bl	8012540 <rx>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b33      	cmp	r3, #51	; 0x33
 8011bf4:	d101      	bne.n	8011bfa <sim868Init+0xda>
		return NO_SIM;
 8011bf6:	2334      	movs	r3, #52	; 0x34
 8011bf8:	e01f      	b.n	8011c3a <sim868Init+0x11a>
	}
	s = 0;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	607b      	str	r3, [r7, #4]
	while(1){
		txr(uartModem, SIM1);
 8011bfe:	4b11      	ldr	r3, [pc, #68]	; (8011c44 <sim868Init+0x124>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4a1a      	ldr	r2, [pc, #104]	; (8011c6c <sim868Init+0x14c>)
 8011c04:	6812      	ldr	r2, [r2, #0]
 8011c06:	4611      	mov	r1, r2
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f000 fd5d 	bl	80126c8 <txr>
		if(rx(uartModem, SIMR1, 1) == UART_OK){
 8011c0e:	4b0d      	ldr	r3, [pc, #52]	; (8011c44 <sim868Init+0x124>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	4a17      	ldr	r2, [pc, #92]	; (8011c70 <sim868Init+0x150>)
 8011c14:	6811      	ldr	r1, [r2, #0]
 8011c16:	2201      	movs	r2, #1
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f000 fc91 	bl	8012540 <rx>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b32      	cmp	r3, #50	; 0x32
 8011c22:	d101      	bne.n	8011c28 <sim868Init+0x108>
			return REGISTERED;
 8011c24:	2336      	movs	r3, #54	; 0x36
 8011c26:	e008      	b.n	8011c3a <sim868Init+0x11a>
		}
		if(s == 40){
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2b28      	cmp	r3, #40	; 0x28
 8011c2c:	d101      	bne.n	8011c32 <sim868Init+0x112>
			return NOT_REGISTERED;
 8011c2e:	2335      	movs	r3, #53	; 0x35
 8011c30:	e003      	b.n	8011c3a <sim868Init+0x11a>
		}
		s++;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	3301      	adds	r3, #1
 8011c36:	607b      	str	r3, [r7, #4]
		txr(uartModem, SIM1);
 8011c38:	e7e1      	b.n	8011bfe <sim868Init+0xde>
	}
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3708      	adds	r7, #8
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	20004d5c 	.word	0x20004d5c
 8011c48:	20000124 	.word	0x20000124
 8011c4c:	20000118 	.word	0x20000118
 8011c50:	20000128 	.word	0x20000128
 8011c54:	2000012c 	.word	0x2000012c
 8011c58:	20000268 	.word	0x20000268
 8011c5c:	20003d9c 	.word	0x20003d9c
 8011c60:	20000134 	.word	0x20000134
 8011c64:	20000154 	.word	0x20000154
 8011c68:	20000120 	.word	0x20000120
 8011c6c:	20000130 	.word	0x20000130
 8011c70:	2000011c 	.word	0x2000011c

08011c74 <sim868onPrep>:
int sim868onPrep(){
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
	int s=0;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	607b      	str	r3, [r7, #4]
	while(1){
		tx(uartModem, SIM);
 8011c7e:	4b21      	ldr	r3, [pc, #132]	; (8011d04 <sim868onPrep+0x90>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	4a21      	ldr	r2, [pc, #132]	; (8011d08 <sim868onPrep+0x94>)
 8011c84:	6812      	ldr	r2, [r2, #0]
 8011c86:	4611      	mov	r1, r2
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f000 fc27 	bl	80124dc <tx>
		if(rx(uartModem, SIMR, 1) == UART_OK){
 8011c8e:	4b1d      	ldr	r3, [pc, #116]	; (8011d04 <sim868onPrep+0x90>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4a1e      	ldr	r2, [pc, #120]	; (8011d0c <sim868onPrep+0x98>)
 8011c94:	6811      	ldr	r1, [r2, #0]
 8011c96:	2201      	movs	r2, #1
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f000 fc51 	bl	8012540 <rx>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b32      	cmp	r3, #50	; 0x32
 8011ca2:	d008      	beq.n	8011cb6 <sim868onPrep+0x42>
			break;
		}
		if(s == 10){
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2b0a      	cmp	r3, #10
 8011ca8:	d101      	bne.n	8011cae <sim868onPrep+0x3a>
			return MODEM_ERROR;
 8011caa:	2337      	movs	r3, #55	; 0x37
 8011cac:	e025      	b.n	8011cfa <sim868onPrep+0x86>
		}
		s++;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	607b      	str	r3, [r7, #4]
		tx(uartModem, SIM);
 8011cb4:	e7e3      	b.n	8011c7e <sim868onPrep+0xa>
			break;
 8011cb6:	bf00      	nop
	}
	txr(uartModem, SIM01);
 8011cb8:	4b12      	ldr	r3, [pc, #72]	; (8011d04 <sim868onPrep+0x90>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4a14      	ldr	r2, [pc, #80]	; (8011d10 <sim868onPrep+0x9c>)
 8011cbe:	6812      	ldr	r2, [r2, #0]
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f000 fd00 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8011cc8:	4b0e      	ldr	r3, [pc, #56]	; (8011d04 <sim868onPrep+0x90>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	4a0f      	ldr	r2, [pc, #60]	; (8011d0c <sim868onPrep+0x98>)
 8011cce:	6811      	ldr	r1, [r2, #0]
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f000 fcce 	bl	8012674 <rxr>
	txr(uartModem, SIM02);
 8011cd8:	4b0a      	ldr	r3, [pc, #40]	; (8011d04 <sim868onPrep+0x90>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4a0d      	ldr	r2, [pc, #52]	; (8011d14 <sim868onPrep+0xa0>)
 8011cde:	6812      	ldr	r2, [r2, #0]
 8011ce0:	4611      	mov	r1, r2
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f000 fcf0 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8011ce8:	4b06      	ldr	r3, [pc, #24]	; (8011d04 <sim868onPrep+0x90>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4a07      	ldr	r2, [pc, #28]	; (8011d0c <sim868onPrep+0x98>)
 8011cee:	6811      	ldr	r1, [r2, #0]
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f000 fcbe 	bl	8012674 <rxr>
	return NOT_REGISTERED;
 8011cf8:	2335      	movs	r3, #53	; 0x35
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20004d5c 	.word	0x20004d5c
 8011d08:	20000124 	.word	0x20000124
 8011d0c:	20000118 	.word	0x20000118
 8011d10:	20000128 	.word	0x20000128
 8011d14:	2000012c 	.word	0x2000012c

08011d18 <getIMEI>:
void getIMEI(){
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	af00      	add	r7, sp, #0
	txr(uartModem, SIM2);
 8011d1c:	4b0d      	ldr	r3, [pc, #52]	; (8011d54 <getIMEI+0x3c>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4a0d      	ldr	r2, [pc, #52]	; (8011d58 <getIMEI+0x40>)
 8011d22:	6812      	ldr	r2, [r2, #0]
 8011d24:	4611      	mov	r1, r2
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 fcce 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 1);
 8011d2c:	4b09      	ldr	r3, [pc, #36]	; (8011d54 <getIMEI+0x3c>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4a0a      	ldr	r2, [pc, #40]	; (8011d5c <getIMEI+0x44>)
 8011d32:	6811      	ldr	r1, [r2, #0]
 8011d34:	2201      	movs	r2, #1
 8011d36:	4618      	mov	r0, r3
 8011d38:	f000 fc9c 	bl	8012674 <rxr>
	strcpy((char*)IMEI,strtok((char*)rx_buf,"\r\n"));
 8011d3c:	4908      	ldr	r1, [pc, #32]	; (8011d60 <getIMEI+0x48>)
 8011d3e:	4809      	ldr	r0, [pc, #36]	; (8011d64 <getIMEI+0x4c>)
 8011d40:	f001 f800 	bl	8012d44 <strtok>
 8011d44:	4603      	mov	r3, r0
 8011d46:	4619      	mov	r1, r3
 8011d48:	4807      	ldr	r0, [pc, #28]	; (8011d68 <getIMEI+0x50>)
 8011d4a:	f000 ffca 	bl	8012ce2 <strcpy>
}
 8011d4e:	bf00      	nop
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	20004d5c 	.word	0x20004d5c
 8011d58:	20000140 	.word	0x20000140
 8011d5c:	20000118 	.word	0x20000118
 8011d60:	08015c24 	.word	0x08015c24
 8011d64:	20004588 	.word	0x20004588
 8011d68:	20003d9c 	.word	0x20003d9c

08011d6c <getPNUM>:
void getPNUM(){
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	af00      	add	r7, sp, #0
	if(REGESTRATION != NO_SIM){
 8011d70:	4b0f      	ldr	r3, [pc, #60]	; (8011db0 <getPNUM+0x44>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2b34      	cmp	r3, #52	; 0x34
 8011d76:	d018      	beq.n	8011daa <getPNUM+0x3e>
		txr(uartModem, SIM3);
 8011d78:	4b0e      	ldr	r3, [pc, #56]	; (8011db4 <getPNUM+0x48>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	4a0e      	ldr	r2, [pc, #56]	; (8011db8 <getPNUM+0x4c>)
 8011d7e:	6812      	ldr	r2, [r2, #0]
 8011d80:	4611      	mov	r1, r2
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 fca0 	bl	80126c8 <txr>
		rxr(uartModem, SIMR, 1);
 8011d88:	4b0a      	ldr	r3, [pc, #40]	; (8011db4 <getPNUM+0x48>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4a0b      	ldr	r2, [pc, #44]	; (8011dbc <getPNUM+0x50>)
 8011d8e:	6811      	ldr	r1, [r2, #0]
 8011d90:	2201      	movs	r2, #1
 8011d92:	4618      	mov	r0, r3
 8011d94:	f000 fc6e 	bl	8012674 <rxr>
		strcpy((char*)PNUM,strtok((char*)rx_buf,"\r\n"));
 8011d98:	4909      	ldr	r1, [pc, #36]	; (8011dc0 <getPNUM+0x54>)
 8011d9a:	480a      	ldr	r0, [pc, #40]	; (8011dc4 <getPNUM+0x58>)
 8011d9c:	f000 ffd2 	bl	8012d44 <strtok>
 8011da0:	4603      	mov	r3, r0
 8011da2:	4619      	mov	r1, r3
 8011da4:	4808      	ldr	r0, [pc, #32]	; (8011dc8 <getPNUM+0x5c>)
 8011da6:	f000 ff9c 	bl	8012ce2 <strcpy>
	}
}
 8011daa:	bf00      	nop
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	20000158 	.word	0x20000158
 8011db4:	20004d5c 	.word	0x20004d5c
 8011db8:	20000144 	.word	0x20000144
 8011dbc:	20000118 	.word	0x20000118
 8011dc0:	08015c24 	.word	0x08015c24
 8011dc4:	20004588 	.word	0x20004588
 8011dc8:	20004348 	.word	0x20004348

08011dcc <getTemp>:
void getTemp(){
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	af00      	add	r7, sp, #0
	txr(uartModem, SIM4);
 8011dd0:	4b17      	ldr	r3, [pc, #92]	; (8011e30 <getTemp+0x64>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	4a17      	ldr	r2, [pc, #92]	; (8011e34 <getTemp+0x68>)
 8011dd6:	6812      	ldr	r2, [r2, #0]
 8011dd8:	4611      	mov	r1, r2
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 fc74 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 5);
 8011de0:	4b13      	ldr	r3, [pc, #76]	; (8011e30 <getTemp+0x64>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	4a14      	ldr	r2, [pc, #80]	; (8011e38 <getTemp+0x6c>)
 8011de6:	6811      	ldr	r1, [r2, #0]
 8011de8:	2205      	movs	r2, #5
 8011dea:	4618      	mov	r0, r3
 8011dec:	f000 fc42 	bl	8012674 <rxr>
	txr(uartModem, SIM5);
 8011df0:	4b0f      	ldr	r3, [pc, #60]	; (8011e30 <getTemp+0x64>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	4a11      	ldr	r2, [pc, #68]	; (8011e3c <getTemp+0x70>)
 8011df6:	6812      	ldr	r2, [r2, #0]
 8011df8:	4611      	mov	r1, r2
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f000 fc64 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 5);
 8011e00:	4b0b      	ldr	r3, [pc, #44]	; (8011e30 <getTemp+0x64>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	4a0c      	ldr	r2, [pc, #48]	; (8011e38 <getTemp+0x6c>)
 8011e06:	6811      	ldr	r1, [r2, #0]
 8011e08:	2205      	movs	r2, #5
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f000 fc32 	bl	8012674 <rxr>
	strtok((char*)rx_buf,",");
 8011e10:	490b      	ldr	r1, [pc, #44]	; (8011e40 <getTemp+0x74>)
 8011e12:	480c      	ldr	r0, [pc, #48]	; (8011e44 <getTemp+0x78>)
 8011e14:	f000 ff96 	bl	8012d44 <strtok>
	strcpy((char*)TEMP,strtok((char*)NULL,"\r\n"));
 8011e18:	490b      	ldr	r1, [pc, #44]	; (8011e48 <getTemp+0x7c>)
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	f000 ff92 	bl	8012d44 <strtok>
 8011e20:	4603      	mov	r3, r0
 8011e22:	4619      	mov	r1, r3
 8011e24:	4809      	ldr	r0, [pc, #36]	; (8011e4c <getTemp+0x80>)
 8011e26:	f000 ff5c 	bl	8012ce2 <strcpy>
}
 8011e2a:	bf00      	nop
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	20004d5c 	.word	0x20004d5c
 8011e34:	20000148 	.word	0x20000148
 8011e38:	20000118 	.word	0x20000118
 8011e3c:	2000014c 	.word	0x2000014c
 8011e40:	08015c28 	.word	0x08015c28
 8011e44:	20004588 	.word	0x20004588
 8011e48:	08015c24 	.word	0x08015c24
 8011e4c:	20003df4 	.word	0x20003df4

08011e50 <getADC>:
void getADC(){
 8011e50:	b5b0      	push	{r4, r5, r7, lr}
 8011e52:	b08e      	sub	sp, #56	; 0x38
 8011e54:	af00      	add	r7, sp, #0
	int adcCount;
	long sum=0;
 8011e56:	2300      	movs	r3, #0
 8011e58:	633b      	str	r3, [r7, #48]	; 0x30
	int batP[11]={3400,3500,3650,3700,3710,3720,3730,3740,3750,3800,4300};
 8011e5a:	4b44      	ldr	r3, [pc, #272]	; (8011f6c <getADC+0x11c>)
 8011e5c:	463c      	mov	r4, r7
 8011e5e:	461d      	mov	r5, r3
 8011e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011e6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(adcCount=0;adcCount<1000;adcCount++){
 8011e70:	2300      	movs	r3, #0
 8011e72:	637b      	str	r3, [r7, #52]	; 0x34
 8011e74:	e013      	b.n	8011e9e <getADC+0x4e>
		HAL_ADC_Start(&adcB);
 8011e76:	483e      	ldr	r0, [pc, #248]	; (8011f70 <getADC+0x120>)
 8011e78:	f7fa fd80 	bl	800c97c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&adcB, 1);
 8011e7c:	2101      	movs	r1, #1
 8011e7e:	483c      	ldr	r0, [pc, #240]	; (8011f70 <getADC+0x120>)
 8011e80:	f7fa fe08 	bl	800ca94 <HAL_ADC_PollForConversion>
		sum+= HAL_ADC_GetValue(&adcB);
 8011e84:	483a      	ldr	r0, [pc, #232]	; (8011f70 <getADC+0x120>)
 8011e86:	f7fa fe95 	bl	800cbb4 <HAL_ADC_GetValue>
 8011e8a:	4602      	mov	r2, r0
 8011e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8e:	4413      	add	r3, r2
 8011e90:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_Delay(1);
 8011e92:	2001      	movs	r0, #1
 8011e94:	f7fa fbee 	bl	800c674 <HAL_Delay>
	for(adcCount=0;adcCount<1000;adcCount++){
 8011e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8011e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011ea4:	dbe7      	blt.n	8011e76 <getADC+0x26>
	}
	HAL_ADC_Stop(&adcB);
 8011ea6:	4832      	ldr	r0, [pc, #200]	; (8011f70 <getADC+0x120>)
 8011ea8:	f7fa fdc8 	bl	800ca3c <HAL_ADC_Stop>
	int b = sum/1000.0;
 8011eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eae:	f7f3 fac9 	bl	8005444 <__aeabi_i2d>
 8011eb2:	f04f 0200 	mov.w	r2, #0
 8011eb6:	4b2f      	ldr	r3, [pc, #188]	; (8011f74 <getADC+0x124>)
 8011eb8:	f7f3 fc58 	bl	800576c <__aeabi_ddiv>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	4610      	mov	r0, r2
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	f7f3 fd3a 	bl	800593c <__aeabi_d2iz>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	62fb      	str	r3, [r7, #44]	; 0x2c
	b*= 6600;
 8011ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ece:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8011ed2:	fb02 f303 	mul.w	r3, r2, r3
 8011ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	b/=	4096;
 8011ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	da01      	bge.n	8011ee2 <getADC+0x92>
 8011ede:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8011ee2:	131b      	asrs	r3, r3, #12
 8011ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	adcCount=0;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	637b      	str	r3, [r7, #52]	; 0x34
	while(batP[adcCount++] < b)
 8011eea:	bf00      	nop
 8011eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eee:	1c5a      	adds	r2, r3, #1
 8011ef0:	637a      	str	r2, [r7, #52]	; 0x34
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8011ef8:	4413      	add	r3, r2
 8011efa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8011efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f00:	429a      	cmp	r2, r3
 8011f02:	dcf3      	bgt.n	8011eec <getADC+0x9c>
	;
	adcCount-=2;
 8011f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f06:	3b02      	subs	r3, #2
 8011f08:	637b      	str	r3, [r7, #52]	; 0x34
	b = (adcCount*10) +	((b-batP[adcCount])*10)/(batP[adcCount+1]-batP[adcCount]);
 8011f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	009b      	lsls	r3, r3, #2
 8011f10:	4413      	add	r3, r2
 8011f12:	005b      	lsls	r3, r3, #1
 8011f14:	4619      	mov	r1, r3
 8011f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8011f1e:	4413      	add	r3, r2
 8011f20:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8011f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f26:	1ad2      	subs	r2, r2, r3
 8011f28:	4613      	mov	r3, r2
 8011f2a:	009b      	lsls	r3, r3, #2
 8011f2c:	4413      	add	r3, r2
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	4618      	mov	r0, r3
 8011f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f34:	3301      	adds	r3, #1
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8011f3c:	4413      	add	r3, r2
 8011f3e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8011f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8011f4a:	4423      	add	r3, r4
 8011f4c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	fb90 f3f3 	sdiv	r3, r0, r3
 8011f56:	440b      	add	r3, r1
 8011f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	itoa(b,(char*)BAT,10);
 8011f5a:	220a      	movs	r2, #10
 8011f5c:	4906      	ldr	r1, [pc, #24]	; (8011f78 <getADC+0x128>)
 8011f5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f60:	f000 fdfc 	bl	8012b5c <itoa>
}
 8011f64:	bf00      	nop
 8011f66:	3738      	adds	r7, #56	; 0x38
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8011f6c:	08015c84 	.word	0x08015c84
 8011f70:	2000452c 	.word	0x2000452c
 8011f74:	408f4000 	.word	0x408f4000
 8011f78:	20000290 	.word	0x20000290

08011f7c <getSig>:
void getSig(){
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	af00      	add	r7, sp, #0
	txr(uartModem, SIM7);
 8011f80:	4b0f      	ldr	r3, [pc, #60]	; (8011fc0 <getSig+0x44>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4a0f      	ldr	r2, [pc, #60]	; (8011fc4 <getSig+0x48>)
 8011f86:	6812      	ldr	r2, [r2, #0]
 8011f88:	4611      	mov	r1, r2
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f000 fb9c 	bl	80126c8 <txr>
	rxr(uartModem, SIMR, 5);
 8011f90:	4b0b      	ldr	r3, [pc, #44]	; (8011fc0 <getSig+0x44>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4a0c      	ldr	r2, [pc, #48]	; (8011fc8 <getSig+0x4c>)
 8011f96:	6811      	ldr	r1, [r2, #0]
 8011f98:	2205      	movs	r2, #5
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f000 fb6a 	bl	8012674 <rxr>
	strtok((char*)rx_buf," ");
 8011fa0:	490a      	ldr	r1, [pc, #40]	; (8011fcc <getSig+0x50>)
 8011fa2:	480b      	ldr	r0, [pc, #44]	; (8011fd0 <getSig+0x54>)
 8011fa4:	f000 fece 	bl	8012d44 <strtok>
	strcpy((char*)SIG,strtok((char*)NULL,"\r\n"));
 8011fa8:	490a      	ldr	r1, [pc, #40]	; (8011fd4 <getSig+0x58>)
 8011faa:	2000      	movs	r0, #0
 8011fac:	f000 feca 	bl	8012d44 <strtok>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	4808      	ldr	r0, [pc, #32]	; (8011fd8 <getSig+0x5c>)
 8011fb6:	f000 fe94 	bl	8012ce2 <strcpy>
}
 8011fba:	bf00      	nop
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	20004d5c 	.word	0x20004d5c
 8011fc4:	20000150 	.word	0x20000150
 8011fc8:	20000118 	.word	0x20000118
 8011fcc:	08015cb0 	.word	0x08015cb0
 8011fd0:	20004588 	.word	0x20004588
 8011fd4:	08015c24 	.word	0x08015c24
 8011fd8:	200041cc 	.word	0x200041cc

08011fdc <getPG>:
void getPG(){
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	af00      	add	r7, sp, #0
	pgCounterEnd++;
 8011fe0:	4b1a      	ldr	r3, [pc, #104]	; (801204c <getPG+0x70>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	4a19      	ldr	r2, [pc, #100]	; (801204c <getPG+0x70>)
 8011fe8:	6013      	str	r3, [r2, #0]
	if(pgCounterEnd == 1440/minSendPeriod){
 8011fea:	4b19      	ldr	r3, [pc, #100]	; (8012050 <getPG+0x74>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8011ff2:	fb92 f2f3 	sdiv	r2, r2, r3
 8011ff6:	4b15      	ldr	r3, [pc, #84]	; (801204c <getPG+0x70>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d117      	bne.n	801202e <getPG+0x52>
		itoa((pgCounter*100)/(1440/minSendPeriod),(char*)PG,10);
 8011ffe:	4b15      	ldr	r3, [pc, #84]	; (8012054 <getPG+0x78>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2264      	movs	r2, #100	; 0x64
 8012004:	fb02 f203 	mul.w	r2, r2, r3
 8012008:	4b11      	ldr	r3, [pc, #68]	; (8012050 <getPG+0x74>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8012010:	fb91 f3f3 	sdiv	r3, r1, r3
 8012014:	fb92 f3f3 	sdiv	r3, r2, r3
 8012018:	220a      	movs	r2, #10
 801201a:	490f      	ldr	r1, [pc, #60]	; (8012058 <getPG+0x7c>)
 801201c:	4618      	mov	r0, r3
 801201e:	f000 fd9d 	bl	8012b5c <itoa>
		pgCounter = 0;
 8012022:	4b0c      	ldr	r3, [pc, #48]	; (8012054 <getPG+0x78>)
 8012024:	2200      	movs	r2, #0
 8012026:	601a      	str	r2, [r3, #0]
		pgCounterEnd = 0;
 8012028:	4b08      	ldr	r3, [pc, #32]	; (801204c <getPG+0x70>)
 801202a:	2200      	movs	r2, #0
 801202c:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(pg_GPIO_Port, pg_Pin) == GPIO_PIN_SET){
 801202e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012032:	480a      	ldr	r0, [pc, #40]	; (801205c <getPG+0x80>)
 8012034:	f7fb fe18 	bl	800dc68 <HAL_GPIO_ReadPin>
 8012038:	4603      	mov	r3, r0
 801203a:	2b01      	cmp	r3, #1
 801203c:	d104      	bne.n	8012048 <getPG+0x6c>
		pgCounter ++;
 801203e:	4b05      	ldr	r3, [pc, #20]	; (8012054 <getPG+0x78>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	3301      	adds	r3, #1
 8012044:	4a03      	ldr	r2, [pc, #12]	; (8012054 <getPG+0x78>)
 8012046:	6013      	str	r3, [r2, #0]
	}
}
 8012048:	bf00      	nop
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20003e7c 	.word	0x20003e7c
 8012050:	20000200 	.word	0x20000200
 8012054:	20003e48 	.word	0x20003e48
 8012058:	2000440c 	.word	0x2000440c
 801205c:	40020400 	.word	0x40020400

08012060 <getMV>:
void getMV(){
 8012060:	b580      	push	{r7, lr}
 8012062:	af00      	add	r7, sp, #0
	tx(uartModem, (uint8_t*)"AT+CGMR\r\n");
 8012064:	4b12      	ldr	r3, [pc, #72]	; (80120b0 <getMV+0x50>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	4912      	ldr	r1, [pc, #72]	; (80120b4 <getMV+0x54>)
 801206a:	4618      	mov	r0, r3
 801206c:	f000 fa36 	bl	80124dc <tx>
	rx(uartModem, SIMR, 1);
 8012070:	4b0f      	ldr	r3, [pc, #60]	; (80120b0 <getMV+0x50>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4a10      	ldr	r2, [pc, #64]	; (80120b8 <getMV+0x58>)
 8012076:	6811      	ldr	r1, [r2, #0]
 8012078:	2201      	movs	r2, #1
 801207a:	4618      	mov	r0, r3
 801207c:	f000 fa60 	bl	8012540 <rx>
	strtok((char*)rx_buf,":");
 8012080:	490e      	ldr	r1, [pc, #56]	; (80120bc <getMV+0x5c>)
 8012082:	480f      	ldr	r0, [pc, #60]	; (80120c0 <getMV+0x60>)
 8012084:	f000 fe5e 	bl	8012d44 <strtok>
	strcpy((char*)MV,strtok(NULL,"\r\n"));
 8012088:	490e      	ldr	r1, [pc, #56]	; (80120c4 <getMV+0x64>)
 801208a:	2000      	movs	r0, #0
 801208c:	f000 fe5a 	bl	8012d44 <strtok>
 8012090:	4603      	mov	r3, r0
 8012092:	4619      	mov	r1, r3
 8012094:	480c      	ldr	r0, [pc, #48]	; (80120c8 <getMV+0x68>)
 8012096:	f000 fe24 	bl	8012ce2 <strcpy>
	debug(MV);
 801209a:	480b      	ldr	r0, [pc, #44]	; (80120c8 <getMV+0x68>)
 801209c:	f7ff fc22 	bl	80118e4 <debug>
	debug(SIMN);
 80120a0:	4b0a      	ldr	r3, [pc, #40]	; (80120cc <getMV+0x6c>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7ff fc1d 	bl	80118e4 <debug>
}
 80120aa:	bf00      	nop
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	20004d5c 	.word	0x20004d5c
 80120b4:	08015cb4 	.word	0x08015cb4
 80120b8:	20000118 	.word	0x20000118
 80120bc:	08015cc0 	.word	0x08015cc0
 80120c0:	20004588 	.word	0x20004588
 80120c4:	08015c24 	.word	0x08015c24
 80120c8:	20004370 	.word	0x20004370
 80120cc:	20000134 	.word	0x20000134

080120d0 <getSleepParametrs>:
#include "sim868.h"
int minDistance = 0;
int minSendPeriod = 0;
int minMeasurement = 0;
int minMeasurePeriod = 0;
void getSleepParametrs(){
 80120d0:	b580      	push	{r7, lr}
 80120d2:	af00      	add	r7, sp, #0
	minDistance = atoi((char*)MINDISTANCE);
 80120d4:	4817      	ldr	r0, [pc, #92]	; (8012134 <getSleepParametrs+0x64>)
 80120d6:	f000 fcf7 	bl	8012ac8 <atoi>
 80120da:	4603      	mov	r3, r0
 80120dc:	4a16      	ldr	r2, [pc, #88]	; (8012138 <getSleepParametrs+0x68>)
 80120de:	6013      	str	r3, [r2, #0]
	minMeasurement = atoi((char*)MINMEASUREMENT);
 80120e0:	4816      	ldr	r0, [pc, #88]	; (801213c <getSleepParametrs+0x6c>)
 80120e2:	f000 fcf1 	bl	8012ac8 <atoi>
 80120e6:	4603      	mov	r3, r0
 80120e8:	4a15      	ldr	r2, [pc, #84]	; (8012140 <getSleepParametrs+0x70>)
 80120ea:	6013      	str	r3, [r2, #0]
	minMeasurePeriod = atoi((char*)MINMEASUREPERIOD);
 80120ec:	4815      	ldr	r0, [pc, #84]	; (8012144 <getSleepParametrs+0x74>)
 80120ee:	f000 fceb 	bl	8012ac8 <atoi>
 80120f2:	4603      	mov	r3, r0
 80120f4:	4a14      	ldr	r2, [pc, #80]	; (8012148 <getSleepParametrs+0x78>)
 80120f6:	6013      	str	r3, [r2, #0]
	minSendPeriod = atoi((char*)MINSENDPERIOD);
 80120f8:	4814      	ldr	r0, [pc, #80]	; (801214c <getSleepParametrs+0x7c>)
 80120fa:	f000 fce5 	bl	8012ac8 <atoi>
 80120fe:	4603      	mov	r3, r0
 8012100:	4a13      	ldr	r2, [pc, #76]	; (8012150 <getSleepParametrs+0x80>)
 8012102:	6013      	str	r3, [r2, #0]
	ftpinterval = atoi((char*)FTPINTERVAL);
 8012104:	4813      	ldr	r0, [pc, #76]	; (8012154 <getSleepParametrs+0x84>)
 8012106:	f000 fcdf 	bl	8012ac8 <atoi>
 801210a:	4603      	mov	r3, r0
 801210c:	4a12      	ldr	r2, [pc, #72]	; (8012158 <getSleepParametrs+0x88>)
 801210e:	6013      	str	r3, [r2, #0]
	if(minSendPeriod > ftpinterval){
 8012110:	4b0f      	ldr	r3, [pc, #60]	; (8012150 <getSleepParametrs+0x80>)
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	4b10      	ldr	r3, [pc, #64]	; (8012158 <getSleepParametrs+0x88>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	429a      	cmp	r2, r3
 801211a:	dd08      	ble.n	801212e <getSleepParametrs+0x5e>
		itoa(ftpinterval,(char*)MINSENDPERIOD,10);
 801211c:	4b0e      	ldr	r3, [pc, #56]	; (8012158 <getSleepParametrs+0x88>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	220a      	movs	r2, #10
 8012122:	490a      	ldr	r1, [pc, #40]	; (801214c <getSleepParametrs+0x7c>)
 8012124:	4618      	mov	r0, r3
 8012126:	f000 fd19 	bl	8012b5c <itoa>
		getSleepParametrs();
 801212a:	f7ff ffd1 	bl	80120d0 <getSleepParametrs>
	}
}
 801212e:	bf00      	nop
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	20003fac 	.word	0x20003fac
 8012138:	200001fc 	.word	0x200001fc
 801213c:	20004400 	.word	0x20004400
 8012140:	20000204 	.word	0x20000204
 8012144:	200004e4 	.word	0x200004e4
 8012148:	20000208 	.word	0x20000208
 801214c:	2000412c 	.word	0x2000412c
 8012150:	20000200 	.word	0x20000200
 8012154:	200003a8 	.word	0x200003a8
 8012158:	200004a8 	.word	0x200004a8

0801215c <__NVIC_SystemReset>:
{
 801215c:	b480      	push	{r7}
 801215e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8012160:	f3bf 8f4f 	dsb	sy
}
 8012164:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8012166:	4b06      	ldr	r3, [pc, #24]	; (8012180 <__NVIC_SystemReset+0x24>)
 8012168:	68db      	ldr	r3, [r3, #12]
 801216a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801216e:	4904      	ldr	r1, [pc, #16]	; (8012180 <__NVIC_SystemReset+0x24>)
 8012170:	4b04      	ldr	r3, [pc, #16]	; (8012184 <__NVIC_SystemReset+0x28>)
 8012172:	4313      	orrs	r3, r2
 8012174:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8012176:	f3bf 8f4f 	dsb	sy
}
 801217a:	bf00      	nop
    __NOP();
 801217c:	bf00      	nop
 801217e:	e7fd      	b.n	801217c <__NVIC_SystemReset+0x20>
 8012180:	e000ed00 	.word	0xe000ed00
 8012184:	05fa0004 	.word	0x05fa0004

08012188 <HAL_UART_RxCpltCallback>:
RTC_HandleTypeDef 	*rtc;


#define STM32_UUID ((uint32_t *)0x1FF800D0)

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8012188:	b580      	push	{r7, lr}
 801218a:	b082      	sub	sp, #8
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4a26      	ldr	r2, [pc, #152]	; (8012230 <HAL_UART_RxCpltCallback+0xa8>)
 8012196:	4293      	cmp	r3, r2
 8012198:	d113      	bne.n	80121c2 <HAL_UART_RxCpltCallback+0x3a>
		if(rx_channel == 1){
 801219a:	4b26      	ldr	r3, [pc, #152]	; (8012234 <HAL_UART_RxCpltCallback+0xac>)
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d108      	bne.n	80121b4 <HAL_UART_RxCpltCallback+0x2c>
			rx_buf[rx_count++] = rx_data;
 80121a2:	4b25      	ldr	r3, [pc, #148]	; (8012238 <HAL_UART_RxCpltCallback+0xb0>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	1c5a      	adds	r2, r3, #1
 80121a8:	4923      	ldr	r1, [pc, #140]	; (8012238 <HAL_UART_RxCpltCallback+0xb0>)
 80121aa:	600a      	str	r2, [r1, #0]
 80121ac:	4a23      	ldr	r2, [pc, #140]	; (801223c <HAL_UART_RxCpltCallback+0xb4>)
 80121ae:	7811      	ldrb	r1, [r2, #0]
 80121b0:	4a23      	ldr	r2, [pc, #140]	; (8012240 <HAL_UART_RxCpltCallback+0xb8>)
 80121b2:	54d1      	strb	r1, [r2, r3]
		}
		HAL_UART_Receive_IT(uartModem, &rx_data, 1);
 80121b4:	4b23      	ldr	r3, [pc, #140]	; (8012244 <HAL_UART_RxCpltCallback+0xbc>)
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2201      	movs	r2, #1
 80121ba:	4920      	ldr	r1, [pc, #128]	; (801223c <HAL_UART_RxCpltCallback+0xb4>)
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fe f8ab 	bl	8010318 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART2){
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4a20      	ldr	r2, [pc, #128]	; (8012248 <HAL_UART_RxCpltCallback+0xc0>)
 80121c8:	4293      	cmp	r3, r2
 80121ca:	d113      	bne.n	80121f4 <HAL_UART_RxCpltCallback+0x6c>
		if(rx_channel == 2){
 80121cc:	4b19      	ldr	r3, [pc, #100]	; (8012234 <HAL_UART_RxCpltCallback+0xac>)
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	2b02      	cmp	r3, #2
 80121d2:	d108      	bne.n	80121e6 <HAL_UART_RxCpltCallback+0x5e>
			rx_buf[rx_count++] = rx_data;
 80121d4:	4b18      	ldr	r3, [pc, #96]	; (8012238 <HAL_UART_RxCpltCallback+0xb0>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	1c5a      	adds	r2, r3, #1
 80121da:	4917      	ldr	r1, [pc, #92]	; (8012238 <HAL_UART_RxCpltCallback+0xb0>)
 80121dc:	600a      	str	r2, [r1, #0]
 80121de:	4a17      	ldr	r2, [pc, #92]	; (801223c <HAL_UART_RxCpltCallback+0xb4>)
 80121e0:	7811      	ldrb	r1, [r2, #0]
 80121e2:	4a17      	ldr	r2, [pc, #92]	; (8012240 <HAL_UART_RxCpltCallback+0xb8>)
 80121e4:	54d1      	strb	r1, [r2, r3]
		}
		HAL_UART_Receive_IT(uartDebug, &rx_data, 1);
 80121e6:	4b19      	ldr	r3, [pc, #100]	; (801224c <HAL_UART_RxCpltCallback+0xc4>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2201      	movs	r2, #1
 80121ec:	4913      	ldr	r1, [pc, #76]	; (801223c <HAL_UART_RxCpltCallback+0xb4>)
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fe f892 	bl	8010318 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	4a15      	ldr	r2, [pc, #84]	; (8012250 <HAL_UART_RxCpltCallback+0xc8>)
 80121fa:	4293      	cmp	r3, r2
 80121fc:	d113      	bne.n	8012226 <HAL_UART_RxCpltCallback+0x9e>
		if(rx_channel == 3){
 80121fe:	4b0d      	ldr	r3, [pc, #52]	; (8012234 <HAL_UART_RxCpltCallback+0xac>)
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	2b03      	cmp	r3, #3
 8012204:	d108      	bne.n	8012218 <HAL_UART_RxCpltCallback+0x90>
			rx_buf[rx_count++] = rx_data;
 8012206:	4b0c      	ldr	r3, [pc, #48]	; (8012238 <HAL_UART_RxCpltCallback+0xb0>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	490a      	ldr	r1, [pc, #40]	; (8012238 <HAL_UART_RxCpltCallback+0xb0>)
 801220e:	600a      	str	r2, [r1, #0]
 8012210:	4a0a      	ldr	r2, [pc, #40]	; (801223c <HAL_UART_RxCpltCallback+0xb4>)
 8012212:	7811      	ldrb	r1, [r2, #0]
 8012214:	4a0a      	ldr	r2, [pc, #40]	; (8012240 <HAL_UART_RxCpltCallback+0xb8>)
 8012216:	54d1      	strb	r1, [r2, r3]
		}
		HAL_UART_Receive_IT(uartSensor, &rx_data, 1);
 8012218:	4b0e      	ldr	r3, [pc, #56]	; (8012254 <HAL_UART_RxCpltCallback+0xcc>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	2201      	movs	r2, #1
 801221e:	4907      	ldr	r1, [pc, #28]	; (801223c <HAL_UART_RxCpltCallback+0xb4>)
 8012220:	4618      	mov	r0, r3
 8012222:	f7fe f879 	bl	8010318 <HAL_UART_Receive_IT>
	}
}
 8012226:	bf00      	nop
 8012228:	3708      	adds	r7, #8
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	40013800 	.word	0x40013800
 8012234:	20004580 	.word	0x20004580
 8012238:	20004d64 	.word	0x20004d64
 801223c:	20004d58 	.word	0x20004d58
 8012240:	20004588 	.word	0x20004588
 8012244:	20004d5c 	.word	0x20004d5c
 8012248:	40004400 	.word	0x40004400
 801224c:	200044a4 	.word	0x200044a4
 8012250:	40004800 	.word	0x40004800
 8012254:	200044a8 	.word	0x200044a8

08012258 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8012258:	b480      	push	{r7}
 801225a:	b083      	sub	sp, #12
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
	tx_end = 1;
 8012260:	4b03      	ldr	r3, [pc, #12]	; (8012270 <HAL_UART_TxCpltCallback+0x18>)
 8012262:	2201      	movs	r2, #1
 8012264:	601a      	str	r2, [r3, #0]
}
 8012266:	bf00      	nop
 8012268:	370c      	adds	r7, #12
 801226a:	46bd      	mov	sp, r7
 801226c:	bc80      	pop	{r7}
 801226e:	4770      	bx	lr
 8012270:	20004d60 	.word	0x20004d60

08012274 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	80fb      	strh	r3, [r7, #6]
}
 801227e:	bf00      	nop
 8012280:	370c      	adds	r7, #12
 8012282:	46bd      	mov	sp, r7
 8012284:	bc80      	pop	{r7}
 8012286:	4770      	bx	lr

08012288 <Initialize>:

void Initialize(UART_HandleTypeDef *myuart1,UART_HandleTypeDef *myuart2,UART_HandleTypeDef *myuart3,TIM_HandleTypeDef *mytim2,TIM_HandleTypeDef *mytim5,TIM_HandleTypeDef *mytim3,TIM_HandleTypeDef *mytim4,RTC_HandleTypeDef *myrtc,ADC_HandleTypeDef *adc){
 8012288:	b5b0      	push	{r4, r5, r7, lr}
 801228a:	b088      	sub	sp, #32
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
 8012294:	603b      	str	r3, [r7, #0]
	uartModem = myuart1;
 8012296:	4a73      	ldr	r2, [pc, #460]	; (8012464 <Initialize+0x1dc>)
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	6013      	str	r3, [r2, #0]
	uartDebug = myuart2;
 801229c:	4a72      	ldr	r2, [pc, #456]	; (8012468 <Initialize+0x1e0>)
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	6013      	str	r3, [r2, #0]
	uartSensor = myuart3;
 80122a2:	4a72      	ldr	r2, [pc, #456]	; (801246c <Initialize+0x1e4>)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6013      	str	r3, [r2, #0]
	uartT = *mytim2;
 80122a8:	4a71      	ldr	r2, [pc, #452]	; (8012470 <Initialize+0x1e8>)
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	4614      	mov	r4, r2
 80122ae:	461d      	mov	r5, r3
 80122b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80122c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	buzzT = *mytim5;
 80122c4:	4a6b      	ldr	r2, [pc, #428]	; (8012474 <Initialize+0x1ec>)
 80122c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c8:	4614      	mov	r4, r2
 80122ca:	461d      	mov	r5, r3
 80122cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80122dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	callT = *mytim3;
 80122e0:	4a65      	ldr	r2, [pc, #404]	; (8012478 <Initialize+0x1f0>)
 80122e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e4:	4614      	mov	r4, r2
 80122e6:	461d      	mov	r5, r3
 80122e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80122f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uart7T = *mytim4;
 80122fc:	4a5f      	ldr	r2, [pc, #380]	; (801247c <Initialize+0x1f4>)
 80122fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012300:	4614      	mov	r4, r2
 8012302:	461d      	mov	r5, r3
 8012304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801230a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801230c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801230e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012310:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	adcB = *adc;
 8012318:	4a59      	ldr	r2, [pc, #356]	; (8012480 <Initialize+0x1f8>)
 801231a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801231c:	4610      	mov	r0, r2
 801231e:	4619      	mov	r1, r3
 8012320:	2354      	movs	r3, #84	; 0x54
 8012322:	461a      	mov	r2, r3
 8012324:	f000 fc1c 	bl	8012b60 <memcpy>
	rtc = myrtc;
 8012328:	4a56      	ldr	r2, [pc, #344]	; (8012484 <Initialize+0x1fc>)
 801232a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801232c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(&uart7T);
 801232e:	4853      	ldr	r0, [pc, #332]	; (801247c <Initialize+0x1f4>)
 8012330:	f7fd f942 	bl	800f5b8 <HAL_TIM_Base_Start>
	HAL_UART_Receive_IT(uartModem, &rx_data, 1);
 8012334:	4b4b      	ldr	r3, [pc, #300]	; (8012464 <Initialize+0x1dc>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2201      	movs	r2, #1
 801233a:	4953      	ldr	r1, [pc, #332]	; (8012488 <Initialize+0x200>)
 801233c:	4618      	mov	r0, r3
 801233e:	f7fd ffeb 	bl	8010318 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uartSensor, &rx_data, 1);
 8012342:	4b4a      	ldr	r3, [pc, #296]	; (801246c <Initialize+0x1e4>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2201      	movs	r2, #1
 8012348:	494f      	ldr	r1, [pc, #316]	; (8012488 <Initialize+0x200>)
 801234a:	4618      	mov	r0, r3
 801234c:	f7fd ffe4 	bl	8010318 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uartDebug, &rx_data, 1);
 8012350:	4b45      	ldr	r3, [pc, #276]	; (8012468 <Initialize+0x1e0>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2201      	movs	r2, #1
 8012356:	494c      	ldr	r1, [pc, #304]	; (8012488 <Initialize+0x200>)
 8012358:	4618      	mov	r0, r3
 801235a:	f7fd ffdd 	bl	8010318 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start(&uartT);
 801235e:	4844      	ldr	r0, [pc, #272]	; (8012470 <Initialize+0x1e8>)
 8012360:	f7fd f92a 	bl	800f5b8 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&buzzT,TIM_CHANNEL_2,100);
 8012364:	4b43      	ldr	r3, [pc, #268]	; (8012474 <Initialize+0x1ec>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	2264      	movs	r2, #100	; 0x64
 801236a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(&buzzT,366);
 801236c:	4b41      	ldr	r3, [pc, #260]	; (8012474 <Initialize+0x1ec>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012374:	625a      	str	r2, [r3, #36]	; 0x24

	pgCounter = 0;
 8012376:	4b45      	ldr	r3, [pc, #276]	; (801248c <Initialize+0x204>)
 8012378:	2200      	movs	r2, #0
 801237a:	601a      	str	r2, [r3, #0]
	pgCounterEnd = 0;
 801237c:	4b44      	ldr	r3, [pc, #272]	; (8012490 <Initialize+0x208>)
 801237e:	2200      	movs	r2, #0
 8012380:	601a      	str	r2, [r3, #0]
	savebattery = 0;
 8012382:	4b44      	ldr	r3, [pc, #272]	; (8012494 <Initialize+0x20c>)
 8012384:	2200      	movs	r2, #0
 8012386:	601a      	str	r2, [r3, #0]
	REGESTRATION = NOT_REGISTERED;
 8012388:	4b43      	ldr	r3, [pc, #268]	; (8012498 <Initialize+0x210>)
 801238a:	2235      	movs	r2, #53	; 0x35
 801238c:	601a      	str	r2, [r3, #0]
	CONNECTION = NOT_CONNECTED;
 801238e:	4b43      	ldr	r3, [pc, #268]	; (801249c <Initialize+0x214>)
 8012390:	2239      	movs	r2, #57	; 0x39
 8012392:	601a      	str	r2, [r3, #0]
	MQTTCONNECTION = NOT_CONNECTED;
 8012394:	4b42      	ldr	r3, [pc, #264]	; (80124a0 <Initialize+0x218>)
 8012396:	2239      	movs	r2, #57	; 0x39
 8012398:	601a      	str	r2, [r3, #0]
	GSMLOCATION = NOT_LOCKED;
 801239a:	4b42      	ldr	r3, [pc, #264]	; (80124a4 <Initialize+0x21c>)
 801239c:	223b      	movs	r2, #59	; 0x3b
 801239e:	601a      	str	r2, [r3, #0]
	GPSLOCATION = NOT_LOCKED;
 80123a0:	4b41      	ldr	r3, [pc, #260]	; (80124a8 <Initialize+0x220>)
 80123a2:	223b      	movs	r2, #59	; 0x3b
 80123a4:	601a      	str	r2, [r3, #0]
	BATTERYSAVER = BATTERYSAVER_OFF;
 80123a6:	4b41      	ldr	r3, [pc, #260]	; (80124ac <Initialize+0x224>)
 80123a8:	223f      	movs	r2, #63	; 0x3f
 80123aa:	601a      	str	r2, [r3, #0]
	strcpy((char*)DEVICEPASSWORD,"hello");
 80123ac:	4b40      	ldr	r3, [pc, #256]	; (80124b0 <Initialize+0x228>)
 80123ae:	4a41      	ldr	r2, [pc, #260]	; (80124b4 <Initialize+0x22c>)
 80123b0:	6810      	ldr	r0, [r2, #0]
 80123b2:	6018      	str	r0, [r3, #0]
 80123b4:	8892      	ldrh	r2, [r2, #4]
 80123b6:	809a      	strh	r2, [r3, #4]
	  removeBoot();
 80123b8:	f7f6 ff60 	bl	800927c <removeBoot>
	  uint32_t d1 = STM32_UUID[0];
 80123bc:	4b3e      	ldr	r3, [pc, #248]	; (80124b8 <Initialize+0x230>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	61fb      	str	r3, [r7, #28]
	  uint32_t d2 = STM32_UUID[1];
 80123c2:	4b3e      	ldr	r3, [pc, #248]	; (80124bc <Initialize+0x234>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	61bb      	str	r3, [r7, #24]
	  uint32_t d3 = STM32_UUID[2];
 80123c8:	4b3d      	ldr	r3, [pc, #244]	; (80124c0 <Initialize+0x238>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	617b      	str	r3, [r7, #20]
	  itoa(d1+d2+d3,(char*)ID,16);
 80123ce:	69fa      	ldr	r2, [r7, #28]
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	441a      	add	r2, r3
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	4413      	add	r3, r2
 80123d8:	2210      	movs	r2, #16
 80123da:	493a      	ldr	r1, [pc, #232]	; (80124c4 <Initialize+0x23c>)
 80123dc:	4618      	mov	r0, r3
 80123de:	f000 fbbd 	bl	8012b5c <itoa>
	  getTime();
 80123e2:	f7f6 fa1d 	bl	8008820 <getTime>
	  debug(TIME);
 80123e6:	4838      	ldr	r0, [pc, #224]	; (80124c8 <Initialize+0x240>)
 80123e8:	f7ff fa7c 	bl	80118e4 <debug>
	  debug(SIMN);
 80123ec:	4b37      	ldr	r3, [pc, #220]	; (80124cc <Initialize+0x244>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7ff fa77 	bl	80118e4 <debug>
	  debug(ID);
 80123f6:	4833      	ldr	r0, [pc, #204]	; (80124c4 <Initialize+0x23c>)
 80123f8:	f7ff fa74 	bl	80118e4 <debug>
	  debug(SIMN);
 80123fc:	4b33      	ldr	r3, [pc, #204]	; (80124cc <Initialize+0x244>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4618      	mov	r0, r3
 8012402:	f7ff fa6f 	bl	80118e4 <debug>
	  debug(FW);
 8012406:	4b32      	ldr	r3, [pc, #200]	; (80124d0 <Initialize+0x248>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	4618      	mov	r0, r3
 801240c:	f7ff fa6a 	bl	80118e4 <debug>
	  debug(SIMN);
 8012410:	4b2e      	ldr	r3, [pc, #184]	; (80124cc <Initialize+0x244>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	4618      	mov	r0, r3
 8012416:	f7ff fa65 	bl	80118e4 <debug>
	  if(HAL_GPIO_ReadPin(ON1_GPIO_Port, ON1_Pin) == GPIO_PIN_RESET){
 801241a:	2101      	movs	r1, #1
 801241c:	482d      	ldr	r0, [pc, #180]	; (80124d4 <Initialize+0x24c>)
 801241e:	f7fb fc23 	bl	800dc68 <HAL_GPIO_ReadPin>
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	d102      	bne.n	801242e <Initialize+0x1a6>
		  resetDevice = 1;
 8012428:	4b2b      	ldr	r3, [pc, #172]	; (80124d8 <Initialize+0x250>)
 801242a:	2201      	movs	r2, #1
 801242c:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(2000);
 801242e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012432:	f7fa f91f 	bl	800c674 <HAL_Delay>
	  buzzOn();
 8012436:	f000 f909 	bl	801264c <buzzOn>
	  HAL_Delay(200);
 801243a:	20c8      	movs	r0, #200	; 0xc8
 801243c:	f7fa f91a 	bl	800c674 <HAL_Delay>
	  buzzOff();
 8012440:	f000 f90e 	bl	8012660 <buzzOff>
	  HAL_Delay(200);
 8012444:	20c8      	movs	r0, #200	; 0xc8
 8012446:	f7fa f915 	bl	800c674 <HAL_Delay>
	  buzzOn();
 801244a:	f000 f8ff 	bl	801264c <buzzOn>
	  HAL_Delay(200);
 801244e:	20c8      	movs	r0, #200	; 0xc8
 8012450:	f7fa f910 	bl	800c674 <HAL_Delay>
	  buzzOff();
 8012454:	f000 f904 	bl	8012660 <buzzOff>
	  loraOff();
 8012458:	f7ff fb56 	bl	8011b08 <loraOff>
}
 801245c:	bf00      	nop
 801245e:	3720      	adds	r7, #32
 8012460:	46bd      	mov	sp, r7
 8012462:	bdb0      	pop	{r4, r5, r7, pc}
 8012464:	20004d5c 	.word	0x20004d5c
 8012468:	200044a4 	.word	0x200044a4
 801246c:	200044a8 	.word	0x200044a8
 8012470:	20004464 	.word	0x20004464
 8012474:	200044ec 	.word	0x200044ec
 8012478:	20004d68 	.word	0x20004d68
 801247c:	200044ac 	.word	0x200044ac
 8012480:	2000452c 	.word	0x2000452c
 8012484:	20004584 	.word	0x20004584
 8012488:	20004d58 	.word	0x20004d58
 801248c:	20003e48 	.word	0x20003e48
 8012490:	20003e7c 	.word	0x20003e7c
 8012494:	2000028c 	.word	0x2000028c
 8012498:	20000158 	.word	0x20000158
 801249c:	2000015c 	.word	0x2000015c
 80124a0:	20000160 	.word	0x20000160
 80124a4:	20000164 	.word	0x20000164
 80124a8:	20000168 	.word	0x20000168
 80124ac:	2000016c 	.word	0x2000016c
 80124b0:	20003e88 	.word	0x20003e88
 80124b4:	08015cc4 	.word	0x08015cc4
 80124b8:	1ff800d0 	.word	0x1ff800d0
 80124bc:	1ff800d4 	.word	0x1ff800d4
 80124c0:	1ff800d8 	.word	0x1ff800d8
 80124c4:	200004b0 	.word	0x200004b0
 80124c8:	20000268 	.word	0x20000268
 80124cc:	20000134 	.word	0x20000134
 80124d0:	20000000 	.word	0x20000000
 80124d4:	40020000 	.word	0x40020000
 80124d8:	200040b0 	.word	0x200040b0

080124dc <tx>:
int tx(UART_HandleTypeDef *huart,uint8_t* data){
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
	if(strlen((char*)data) != 0){
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d01e      	beq.n	801252c <tx+0x50>
		HAL_UART_Transmit_IT(huart, data, (uint16_t)strlen((char*)data));
 80124ee:	6838      	ldr	r0, [r7, #0]
 80124f0:	f7f2 fe4e 	bl	8005190 <strlen>
 80124f4:	4603      	mov	r3, r0
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	461a      	mov	r2, r3
 80124fa:	6839      	ldr	r1, [r7, #0]
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7fd fec7 	bl	8010290 <HAL_UART_Transmit_IT>
		tx_end = 0;
 8012502:	4b0d      	ldr	r3, [pc, #52]	; (8012538 <tx+0x5c>)
 8012504:	2200      	movs	r2, #0
 8012506:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&uartT,0);
 8012508:	4b0c      	ldr	r3, [pc, #48]	; (801253c <tx+0x60>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2200      	movs	r2, #0
 801250e:	625a      	str	r2, [r3, #36]	; 0x24
		while(tx_end == 0){
 8012510:	e008      	b.n	8012524 <tx+0x48>
			if(__HAL_TIM_GET_COUNTER(&uartT) > 20000){
 8012512:	4b0a      	ldr	r3, [pc, #40]	; (801253c <tx+0x60>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012518:	f644 6220 	movw	r2, #20000	; 0x4e20
 801251c:	4293      	cmp	r3, r2
 801251e:	d901      	bls.n	8012524 <tx+0x48>
				return UART_TIMEOUT;
 8012520:	2333      	movs	r3, #51	; 0x33
 8012522:	e004      	b.n	801252e <tx+0x52>
		while(tx_end == 0){
 8012524:	4b04      	ldr	r3, [pc, #16]	; (8012538 <tx+0x5c>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d0f2      	beq.n	8012512 <tx+0x36>
			}
		}
	}
	return UART_OK;
 801252c:	2332      	movs	r3, #50	; 0x32
}
 801252e:	4618      	mov	r0, r3
 8012530:	3708      	adds	r7, #8
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	20004d60 	.word	0x20004d60
 801253c:	20004464 	.word	0x20004464

08012540 <rx>:
int rx(UART_HandleTypeDef *huart,uint8_t* term,uint16_t timeout){
 8012540:	b580      	push	{r7, lr}
 8012542:	b088      	sub	sp, #32
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	4613      	mov	r3, r2
 801254c:	80fb      	strh	r3, [r7, #6]
	rx_buf[0]='\0';
 801254e:	4b37      	ldr	r3, [pc, #220]	; (801262c <rx+0xec>)
 8012550:	2200      	movs	r2, #0
 8012552:	701a      	strb	r2, [r3, #0]
	rx_count = 0;
 8012554:	4b36      	ldr	r3, [pc, #216]	; (8012630 <rx+0xf0>)
 8012556:	2200      	movs	r2, #0
 8012558:	601a      	str	r2, [r3, #0]
	int i;
	int len = strlen((char *)term);
 801255a:	68b8      	ldr	r0, [r7, #8]
 801255c:	f7f2 fe18 	bl	8005190 <strlen>
 8012560:	4603      	mov	r3, r0
 8012562:	613b      	str	r3, [r7, #16]
	int endCount=0;
 8012564:	2300      	movs	r3, #0
 8012566:	61bb      	str	r3, [r7, #24]
	int seconCount = 0;
 8012568:	2300      	movs	r3, #0
 801256a:	617b      	str	r3, [r7, #20]
	if(huart->Instance == USART1){
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4a30      	ldr	r2, [pc, #192]	; (8012634 <rx+0xf4>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d102      	bne.n	801257c <rx+0x3c>
		rx_channel = 1;
 8012576:	4b30      	ldr	r3, [pc, #192]	; (8012638 <rx+0xf8>)
 8012578:	2201      	movs	r2, #1
 801257a:	701a      	strb	r2, [r3, #0]
	}
	if(huart->Instance == USART2){
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	4a2e      	ldr	r2, [pc, #184]	; (801263c <rx+0xfc>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d102      	bne.n	801258c <rx+0x4c>
		rx_channel = 2;
 8012586:	4b2c      	ldr	r3, [pc, #176]	; (8012638 <rx+0xf8>)
 8012588:	2202      	movs	r2, #2
 801258a:	701a      	strb	r2, [r3, #0]
	}
	if(huart->Instance == USART3){
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	4a2b      	ldr	r2, [pc, #172]	; (8012640 <rx+0x100>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d102      	bne.n	801259c <rx+0x5c>
		rx_channel = 3;
 8012596:	4b28      	ldr	r3, [pc, #160]	; (8012638 <rx+0xf8>)
 8012598:	2203      	movs	r2, #3
 801259a:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COUNTER(&uartT,0);
 801259c:	4b29      	ldr	r3, [pc, #164]	; (8012644 <rx+0x104>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	2200      	movs	r2, #0
 80125a2:	625a      	str	r2, [r3, #36]	; 0x24
	while(1){
		if(__HAL_TIM_GET_COUNTER(&uartT) > 999){
 80125a4:	4b27      	ldr	r3, [pc, #156]	; (8012644 <rx+0x104>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80125ae:	d30c      	bcc.n	80125ca <rx+0x8a>
			__HAL_TIM_SET_COUNTER(&uartT,0);
 80125b0:	4b24      	ldr	r3, [pc, #144]	; (8012644 <rx+0x104>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	2200      	movs	r2, #0
 80125b6:	625a      	str	r2, [r3, #36]	; 0x24
			seconCount++;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	3301      	adds	r3, #1
 80125bc:	617b      	str	r3, [r7, #20]
			if(seconCount == timeout){
 80125be:	88fb      	ldrh	r3, [r7, #6]
 80125c0:	697a      	ldr	r2, [r7, #20]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d101      	bne.n	80125ca <rx+0x8a>
				return UART_TIMEOUT;
 80125c6:	2333      	movs	r3, #51	; 0x33
 80125c8:	e02c      	b.n	8012624 <rx+0xe4>
			}
		}
		for(i=0;i<len;i++){
 80125ca:	2300      	movs	r3, #0
 80125cc:	61fb      	str	r3, [r7, #28]
 80125ce:	e024      	b.n	801261a <rx+0xda>
			if(rx_buf[rx_count - len + i] == term[i]){
 80125d0:	4b17      	ldr	r3, [pc, #92]	; (8012630 <rx+0xf0>)
 80125d2:	681a      	ldr	r2, [r3, #0]
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	1ad2      	subs	r2, r2, r3
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	4413      	add	r3, r2
 80125dc:	4a13      	ldr	r2, [pc, #76]	; (801262c <rx+0xec>)
 80125de:	5cd2      	ldrb	r2, [r2, r3]
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	68b9      	ldr	r1, [r7, #8]
 80125e4:	440b      	add	r3, r1
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d111      	bne.n	8012610 <rx+0xd0>
				endCount++;
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	3301      	adds	r3, #1
 80125f0:	61bb      	str	r3, [r7, #24]
				if(endCount == len){
 80125f2:	69ba      	ldr	r2, [r7, #24]
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d10c      	bne.n	8012614 <rx+0xd4>
					rx_buf[rx_count] = '\0';
 80125fa:	4b0d      	ldr	r3, [pc, #52]	; (8012630 <rx+0xf0>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	4a0b      	ldr	r2, [pc, #44]	; (801262c <rx+0xec>)
 8012600:	2100      	movs	r1, #0
 8012602:	54d1      	strb	r1, [r2, r3]
					rx_c = rx_count;
 8012604:	4b0a      	ldr	r3, [pc, #40]	; (8012630 <rx+0xf0>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	4a0f      	ldr	r2, [pc, #60]	; (8012648 <rx+0x108>)
 801260a:	6013      	str	r3, [r2, #0]
					return UART_OK;
 801260c:	2332      	movs	r3, #50	; 0x32
 801260e:	e009      	b.n	8012624 <rx+0xe4>
				}
			}
			else{
				endCount = 0;
 8012610:	2300      	movs	r3, #0
 8012612:	61bb      	str	r3, [r7, #24]
		for(i=0;i<len;i++){
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	3301      	adds	r3, #1
 8012618:	61fb      	str	r3, [r7, #28]
 801261a:	69fa      	ldr	r2, [r7, #28]
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	429a      	cmp	r2, r3
 8012620:	dbd6      	blt.n	80125d0 <rx+0x90>
		if(__HAL_TIM_GET_COUNTER(&uartT) > 999){
 8012622:	e7bf      	b.n	80125a4 <rx+0x64>
			}
		}
	}
}
 8012624:	4618      	mov	r0, r3
 8012626:	3720      	adds	r7, #32
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	20004588 	.word	0x20004588
 8012630:	20004d64 	.word	0x20004d64
 8012634:	40013800 	.word	0x40013800
 8012638:	20004580 	.word	0x20004580
 801263c:	40004400 	.word	0x40004400
 8012640:	40004800 	.word	0x40004800
 8012644:	20004464 	.word	0x20004464
 8012648:	200001f8 	.word	0x200001f8

0801264c <buzzOn>:
	int h;
	for(h=0;h<w;h++){
		HAL_Delay(1000);
	}
}
void buzzOn(){
 801264c:	b580      	push	{r7, lr}
 801264e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&buzzT, TIM_CHANNEL_2);
 8012650:	2104      	movs	r1, #4
 8012652:	4802      	ldr	r0, [pc, #8]	; (801265c <buzzOn+0x10>)
 8012654:	f7fd f83a 	bl	800f6cc <HAL_TIM_PWM_Start>
}
 8012658:	bf00      	nop
 801265a:	bd80      	pop	{r7, pc}
 801265c:	200044ec 	.word	0x200044ec

08012660 <buzzOff>:
void buzzOff(){
 8012660:	b580      	push	{r7, lr}
 8012662:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&buzzT, TIM_CHANNEL_2);
 8012664:	2104      	movs	r1, #4
 8012666:	4802      	ldr	r0, [pc, #8]	; (8012670 <buzzOff+0x10>)
 8012668:	f7fd f8c6 	bl	800f7f8 <HAL_TIM_PWM_Stop>
}
 801266c:	bf00      	nop
 801266e:	bd80      	pop	{r7, pc}
 8012670:	200044ec 	.word	0x200044ec

08012674 <rxr>:
void rxr(UART_HandleTypeDef *huart,uint8_t* term,uint16_t timeout){
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	4613      	mov	r3, r2
 8012680:	80fb      	strh	r3, [r7, #6]
	if(rx(huart, term, timeout) == UART_TIMEOUT){
 8012682:	88fb      	ldrh	r3, [r7, #6]
 8012684:	461a      	mov	r2, r3
 8012686:	68b9      	ldr	r1, [r7, #8]
 8012688:	68f8      	ldr	r0, [r7, #12]
 801268a:	f7ff ff59 	bl	8012540 <rx>
 801268e:	4603      	mov	r3, r0
 8012690:	2b33      	cmp	r3, #51	; 0x33
 8012692:	d10d      	bne.n	80126b0 <rxr+0x3c>
		debug(ERROR_LOG1);
 8012694:	4808      	ldr	r0, [pc, #32]	; (80126b8 <rxr+0x44>)
 8012696:	f7ff f925 	bl	80118e4 <debug>
		debug(ERROR_LOG2);
 801269a:	4808      	ldr	r0, [pc, #32]	; (80126bc <rxr+0x48>)
 801269c:	f7ff f922 	bl	80118e4 <debug>
		debug(ERROR_LOG3);
 80126a0:	4807      	ldr	r0, [pc, #28]	; (80126c0 <rxr+0x4c>)
 80126a2:	f7ff f91f 	bl	80118e4 <debug>
		debug(ERROR_LOG4);
 80126a6:	4807      	ldr	r0, [pc, #28]	; (80126c4 <rxr+0x50>)
 80126a8:	f7ff f91c 	bl	80118e4 <debug>
		NVIC_SystemReset();
 80126ac:	f7ff fd56 	bl	801215c <__NVIC_SystemReset>
	}
}
 80126b0:	bf00      	nop
 80126b2:	3710      	adds	r7, #16
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	20003fe8 	.word	0x20003fe8
 80126bc:	2000439c 	.word	0x2000439c
 80126c0:	2000404c 	.word	0x2000404c
 80126c4:	200005e0 	.word	0x200005e0

080126c8 <txr>:
void txr(UART_HandleTypeDef *huart,uint8_t* data){
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
	static int erl = 1;
	if(erl == 1){
 80126d2:	4b20      	ldr	r3, [pc, #128]	; (8012754 <txr+0x8c>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d103      	bne.n	80126e2 <txr+0x1a>
		strcpy((char*)ERROR_LOG1,(char*)data);
 80126da:	6839      	ldr	r1, [r7, #0]
 80126dc:	481e      	ldr	r0, [pc, #120]	; (8012758 <txr+0x90>)
 80126de:	f000 fb00 	bl	8012ce2 <strcpy>
	}
	if(erl == 2){
 80126e2:	4b1c      	ldr	r3, [pc, #112]	; (8012754 <txr+0x8c>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b02      	cmp	r3, #2
 80126e8:	d103      	bne.n	80126f2 <txr+0x2a>
		strcpy((char*)ERROR_LOG2,(char*)data);
 80126ea:	6839      	ldr	r1, [r7, #0]
 80126ec:	481b      	ldr	r0, [pc, #108]	; (801275c <txr+0x94>)
 80126ee:	f000 faf8 	bl	8012ce2 <strcpy>
	}
	if(erl == 3){
 80126f2:	4b18      	ldr	r3, [pc, #96]	; (8012754 <txr+0x8c>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b03      	cmp	r3, #3
 80126f8:	d103      	bne.n	8012702 <txr+0x3a>
		strcpy((char*)ERROR_LOG3,(char*)data);
 80126fa:	6839      	ldr	r1, [r7, #0]
 80126fc:	4818      	ldr	r0, [pc, #96]	; (8012760 <txr+0x98>)
 80126fe:	f000 faf0 	bl	8012ce2 <strcpy>
	}
	if(erl == 4){
 8012702:	4b14      	ldr	r3, [pc, #80]	; (8012754 <txr+0x8c>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2b04      	cmp	r3, #4
 8012708:	d106      	bne.n	8012718 <txr+0x50>
		strcpy((char*)ERROR_LOG4,(char*)data);
 801270a:	6839      	ldr	r1, [r7, #0]
 801270c:	4815      	ldr	r0, [pc, #84]	; (8012764 <txr+0x9c>)
 801270e:	f000 fae8 	bl	8012ce2 <strcpy>
		erl = 0;
 8012712:	4b10      	ldr	r3, [pc, #64]	; (8012754 <txr+0x8c>)
 8012714:	2200      	movs	r2, #0
 8012716:	601a      	str	r2, [r3, #0]
	}
	erl++;
 8012718:	4b0e      	ldr	r3, [pc, #56]	; (8012754 <txr+0x8c>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	3301      	adds	r3, #1
 801271e:	4a0d      	ldr	r2, [pc, #52]	; (8012754 <txr+0x8c>)
 8012720:	6013      	str	r3, [r2, #0]
	if(tx(huart, data) == UART_TIMEOUT){
 8012722:	6839      	ldr	r1, [r7, #0]
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f7ff fed9 	bl	80124dc <tx>
 801272a:	4603      	mov	r3, r0
 801272c:	2b33      	cmp	r3, #51	; 0x33
 801272e:	d10d      	bne.n	801274c <txr+0x84>
		debug(ERROR_LOG1);
 8012730:	4809      	ldr	r0, [pc, #36]	; (8012758 <txr+0x90>)
 8012732:	f7ff f8d7 	bl	80118e4 <debug>
		debug(ERROR_LOG2);
 8012736:	4809      	ldr	r0, [pc, #36]	; (801275c <txr+0x94>)
 8012738:	f7ff f8d4 	bl	80118e4 <debug>
		debug(ERROR_LOG3);
 801273c:	4808      	ldr	r0, [pc, #32]	; (8012760 <txr+0x98>)
 801273e:	f7ff f8d1 	bl	80118e4 <debug>
		debug(ERROR_LOG4);
 8012742:	4808      	ldr	r0, [pc, #32]	; (8012764 <txr+0x9c>)
 8012744:	f7ff f8ce 	bl	80118e4 <debug>
		NVIC_SystemReset();
 8012748:	f7ff fd08 	bl	801215c <__NVIC_SystemReset>
	}
}
 801274c:	bf00      	nop
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	20000170 	.word	0x20000170
 8012758:	20003fe8 	.word	0x20003fe8
 801275c:	2000439c 	.word	0x2000439c
 8012760:	2000404c 	.word	0x2000404c
 8012764:	200005e0 	.word	0x200005e0

08012768 <bootUp>:
int bootUp(){
 8012768:	b580      	push	{r7, lr}
 801276a:	af00      	add	r7, sp, #0
	ledsOn();
 801276c:	f7ff f930 	bl	80119d0 <ledsOn>
	sim868On();
 8012770:	f7ff f946 	bl	8011a00 <sim868On>
	REGESTRATION = sim868Init();
 8012774:	f7ff f9d4 	bl	8011b20 <sim868Init>
 8012778:	4603      	mov	r3, r0
 801277a:	4a3a      	ldr	r2, [pc, #232]	; (8012864 <bootUp+0xfc>)
 801277c:	6013      	str	r3, [r2, #0]
	getIMEI();
 801277e:	f7ff facb 	bl	8011d18 <getIMEI>
		//tx(uartDebug, (uint8_t*)"NO_SIM\r\n");
	}
	if(REGESTRATION == NOT_REGISTERED){
		//tx(uartDebug, (uint8_t*)"NOT_REGISTERED\r\n");
	}
	if(REGESTRATION == REGISTERED){
 8012782:	4b38      	ldr	r3, [pc, #224]	; (8012864 <bootUp+0xfc>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b36      	cmp	r3, #54	; 0x36
 8012788:	d101      	bne.n	801278e <bootUp+0x26>
		//tx(uartDebug, (uint8_t*)"REGISTERED\r\n");
		removeFirst();
 801278a:	f7f6 fd9b 	bl	80092c4 <removeFirst>
	}
	readConfig(0);
 801278e:	2000      	movs	r0, #0
 8012790:	f7f6 fde6 	bl	8009360 <readConfig>
	readTable(0);
 8012794:	2000      	movs	r0, #0
 8012796:	f7f7 fad3 	bl	8009d40 <readTable>
	if(HAL_GPIO_ReadPin(ON1_GPIO_Port, ON1_Pin) == GPIO_PIN_RESET){
 801279a:	2101      	movs	r1, #1
 801279c:	4832      	ldr	r0, [pc, #200]	; (8012868 <bootUp+0x100>)
 801279e:	f7fb fa63 	bl	800dc68 <HAL_GPIO_ReadPin>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <bootUp+0x46>
		resetDevice = 0;
 80127a8:	4b30      	ldr	r3, [pc, #192]	; (801286c <bootUp+0x104>)
 80127aa:	2200      	movs	r2, #0
 80127ac:	601a      	str	r2, [r3, #0]
	}
	if(resetDevice == 1){
 80127ae:	4b2f      	ldr	r3, [pc, #188]	; (801286c <bootUp+0x104>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	2b01      	cmp	r3, #1
 80127b4:	d11b      	bne.n	80127ee <bootUp+0x86>
		  HAL_FLASHEx_DATAEEPROM_Unlock();
 80127b6:	f7fa fe8b 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
		  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080200, 0xFEEDC0DD);
 80127ba:	4a2d      	ldr	r2, [pc, #180]	; (8012870 <bootUp+0x108>)
 80127bc:	492d      	ldr	r1, [pc, #180]	; (8012874 <bootUp+0x10c>)
 80127be:	2002      	movs	r0, #2
 80127c0:	f7fa feb2 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
		  HAL_FLASHEx_DATAEEPROM_Lock();
 80127c4:	f7fa fea0 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
		  HAL_FLASHEx_DATAEEPROM_Unlock();
 80127c8:	f7fa fe82 	bl	800d4d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
		  HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080200, 0xFEEDC0DD);
 80127cc:	4a28      	ldr	r2, [pc, #160]	; (8012870 <bootUp+0x108>)
 80127ce:	4929      	ldr	r1, [pc, #164]	; (8012874 <bootUp+0x10c>)
 80127d0:	2002      	movs	r0, #2
 80127d2:	f7fa fea9 	bl	800d528 <HAL_FLASHEx_DATAEEPROM_Program>
		  HAL_FLASHEx_DATAEEPROM_Lock();
 80127d6:	f7fa fe97 	bl	800d508 <HAL_FLASHEx_DATAEEPROM_Lock>
		  buzzOn();
 80127da:	f7ff ff37 	bl	801264c <buzzOn>
		  HAL_Delay(2000);
 80127de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80127e2:	f7f9 ff47 	bl	800c674 <HAL_Delay>
		  buzzOff();
 80127e6:	f7ff ff3b 	bl	8012660 <buzzOff>
		  NVIC_SystemReset();
 80127ea:	f7ff fcb7 	bl	801215c <__NVIC_SystemReset>
	}
	if(TIME[0] == '0'){
 80127ee:	4b22      	ldr	r3, [pc, #136]	; (8012878 <bootUp+0x110>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	2b30      	cmp	r3, #48	; 0x30
 80127f4:	d125      	bne.n	8012842 <bootUp+0xda>
		dataConnect();
 80127f6:	f7f7 fe4d 	bl	800a494 <dataConnect>
		if(CONNECTION == CONNECTED){
 80127fa:	4b20      	ldr	r3, [pc, #128]	; (801287c <bootUp+0x114>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2b38      	cmp	r3, #56	; 0x38
 8012800:	d103      	bne.n	801280a <bootUp+0xa2>
			getgsmloc();
 8012802:	f7f7 fccd 	bl	800a1a0 <getgsmloc>
			updateTime();
 8012806:	f7f7 fd19 	bl	800a23c <updateTime>
		}
		dataDisconnect();
 801280a:	f7f7 ffa1 	bl	800a750 <dataDisconnect>
		bluetoothMode(180);
 801280e:	20b4      	movs	r0, #180	; 0xb4
 8012810:	f7f4 fad4 	bl	8006dbc <bluetoothMode>
		BTPowerOff();
 8012814:	f7f4 faba 	bl	8006d8c <BTPowerOff>
		getADC();
 8012818:	f7ff fb1a 	bl	8011e50 <getADC>
		getTemp();
 801281c:	f7ff fad6 	bl	8011dcc <getTemp>
		getSig();
 8012820:	f7ff fbac 	bl	8011f7c <getSig>
		getPNUM();
 8012824:	f7ff faa2 	bl	8011d6c <getPNUM>
		dataConnect();
 8012828:	f7f7 fe34 	bl	800a494 <dataConnect>
		mqttConnect();
 801282c:	f7f7 ffe6 	bl	800a7fc <mqttConnect>
		mqttSend(2);
 8012830:	2002      	movs	r0, #2
 8012832:	f7f8 f9c1 	bl	800abb8 <mqttSend>
		mqttReceive();
 8012836:	f7f9 f9c7 	bl	800bbc8 <mqttReceive>
		mqttDisconnect();
 801283a:	f7f8 f955 	bl	800aae8 <mqttDisconnect>
		dataDisconnect();
 801283e:	f7f7 ff87 	bl	800a750 <dataDisconnect>
	}
	sim868Off();
 8012842:	f7ff f913 	bl	8011a6c <sim868Off>
	getSleepParametrs();
 8012846:	f7ff fc43 	bl	80120d0 <getSleepParametrs>
	getPos();
 801284a:	f7f9 fe3d 	bl	800c4c8 <getPos>
	sleepCounter = 0;
 801284e:	4b0c      	ldr	r3, [pc, #48]	; (8012880 <bootUp+0x118>)
 8012850:	2200      	movs	r2, #0
 8012852:	601a      	str	r2, [r3, #0]
	checksleepCount=1;
 8012854:	4b0b      	ldr	r3, [pc, #44]	; (8012884 <bootUp+0x11c>)
 8012856:	2201      	movs	r2, #1
 8012858:	601a      	str	r2, [r3, #0]
	return REGESTRATION;
 801285a:	4b02      	ldr	r3, [pc, #8]	; (8012864 <bootUp+0xfc>)
 801285c:	681b      	ldr	r3, [r3, #0]
}
 801285e:	4618      	mov	r0, r3
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	20000158 	.word	0x20000158
 8012868:	40020000 	.word	0x40020000
 801286c:	200040b0 	.word	0x200040b0
 8012870:	feedc0dd 	.word	0xfeedc0dd
 8012874:	08080200 	.word	0x08080200
 8012878:	20000268 	.word	0x20000268
 801287c:	2000015c 	.word	0x2000015c
 8012880:	200040d8 	.word	0x200040d8
 8012884:	20003df0 	.word	0x20003df0

08012888 <modemOn>:
void modemOn(){
 8012888:	b580      	push	{r7, lr}
 801288a:	af00      	add	r7, sp, #0
	sim868On();
 801288c:	f7ff f8b8 	bl	8011a00 <sim868On>
	if(BATTERYSAVER == BATTERYSAVER_OFF){
 8012890:	4b08      	ldr	r3, [pc, #32]	; (80128b4 <modemOn+0x2c>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b3f      	cmp	r3, #63	; 0x3f
 8012896:	d104      	bne.n	80128a2 <modemOn+0x1a>
		REGESTRATION = sim868Init();
 8012898:	f7ff f942 	bl	8011b20 <sim868Init>
 801289c:	4603      	mov	r3, r0
 801289e:	4a06      	ldr	r2, [pc, #24]	; (80128b8 <modemOn+0x30>)
 80128a0:	6013      	str	r3, [r2, #0]
	}
	if(BATTERYSAVER == BATTERYSAVER_ON){
 80128a2:	4b04      	ldr	r3, [pc, #16]	; (80128b4 <modemOn+0x2c>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2b3e      	cmp	r3, #62	; 0x3e
 80128a8:	d101      	bne.n	80128ae <modemOn+0x26>
		sim868onPrep();
 80128aa:	f7ff f9e3 	bl	8011c74 <sim868onPrep>
	}
}
 80128ae:	bf00      	nop
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	2000016c 	.word	0x2000016c
 80128b8:	20000158 	.word	0x20000158

080128bc <robbery>:
 */

#include "working.h"


void robbery(){
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(ON_GPIO_Port, ON_Pin) == GPIO_PIN_RESET){
 80128c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80128c6:	482d      	ldr	r0, [pc, #180]	; (801297c <robbery+0xc0>)
 80128c8:	f7fb f9ce 	bl	800dc68 <HAL_GPIO_ReadPin>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d150      	bne.n	8012974 <robbery+0xb8>
		  ledsOn();
 80128d2:	f7ff f87d 	bl	80119d0 <ledsOn>
		  int robcounter;
		  HAL_GPIO_WritePin(l2_GPIO_Port, l2_Pin, GPIO_PIN_SET);
 80128d6:	2201      	movs	r2, #1
 80128d8:	2180      	movs	r1, #128	; 0x80
 80128da:	4829      	ldr	r0, [pc, #164]	; (8012980 <robbery+0xc4>)
 80128dc:	f7fb f9db 	bl	800dc96 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80128e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80128e4:	f7f9 fec6 	bl	800c674 <HAL_Delay>
		  for(robcounter=0;robcounter<100;robcounter++){
 80128e8:	2300      	movs	r3, #0
 80128ea:	607b      	str	r3, [r7, #4]
 80128ec:	e011      	b.n	8012912 <robbery+0x56>
			  SystemClock_Config();
 80128ee:	f7f3 fa1b 	bl	8005d28 <SystemClock_Config>
			  HAL_ResumeTick();
 80128f2:	f7f9 feef 	bl	800c6d4 <HAL_ResumeTick>
			  HAL_Delay(20);
 80128f6:	2014      	movs	r0, #20
 80128f8:	f7f9 febc 	bl	800c674 <HAL_Delay>
			  if(HAL_GPIO_ReadPin(ON_GPIO_Port, ON_Pin) == GPIO_PIN_SET){
 80128fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012900:	481e      	ldr	r0, [pc, #120]	; (801297c <robbery+0xc0>)
 8012902:	f7fb f9b1 	bl	800dc68 <HAL_GPIO_ReadPin>
 8012906:	4603      	mov	r3, r0
 8012908:	2b01      	cmp	r3, #1
 801290a:	d006      	beq.n	801291a <robbery+0x5e>
		  for(robcounter=0;robcounter<100;robcounter++){
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	3301      	adds	r3, #1
 8012910:	607b      	str	r3, [r7, #4]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b63      	cmp	r3, #99	; 0x63
 8012916:	ddea      	ble.n	80128ee <robbery+0x32>
 8012918:	e000      	b.n	801291c <robbery+0x60>
				  break;
 801291a:	bf00      	nop
			  }
		  }
		  HAL_GPIO_WritePin(l2_GPIO_Port, l2_Pin, GPIO_PIN_RESET);
 801291c:	2200      	movs	r2, #0
 801291e:	2180      	movs	r1, #128	; 0x80
 8012920:	4817      	ldr	r0, [pc, #92]	; (8012980 <robbery+0xc4>)
 8012922:	f7fb f9b8 	bl	800dc96 <HAL_GPIO_WritePin>
		  if(robcounter == 100){
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2b64      	cmp	r3, #100	; 0x64
 801292a:	d121      	bne.n	8012970 <robbery+0xb4>
			  BATTERYSAVER = BATTERYSAVER_OFF;
 801292c:	4b15      	ldr	r3, [pc, #84]	; (8012984 <robbery+0xc8>)
 801292e:	223f      	movs	r2, #63	; 0x3f
 8012930:	601a      	str	r2, [r3, #0]
			  savebattery = 0;
 8012932:	4b15      	ldr	r3, [pc, #84]	; (8012988 <robbery+0xcc>)
 8012934:	2200      	movs	r2, #0
 8012936:	601a      	str	r2, [r3, #0]
			  sim868On();
 8012938:	f7ff f862 	bl	8011a00 <sim868On>
			  REGESTRATION = sim868Init();
 801293c:	f7ff f8f0 	bl	8011b20 <sim868Init>
 8012940:	4603      	mov	r3, r0
 8012942:	4a12      	ldr	r2, [pc, #72]	; (801298c <robbery+0xd0>)
 8012944:	6013      	str	r3, [r2, #0]
			  dataConnect();
 8012946:	f7f7 fda5 	bl	800a494 <dataConnect>
			  mqttConnect();
 801294a:	f7f7 ff57 	bl	800a7fc <mqttConnect>
			  mqttSend(3);
 801294e:	2003      	movs	r0, #3
 8012950:	f7f8 f932 	bl	800abb8 <mqttSend>
			  NMEA(10);
 8012954:	200a      	movs	r0, #10
 8012956:	f7f7 fd23 	bl	800a3a0 <NMEA>
			  mqttSend(4);
 801295a:	2004      	movs	r0, #4
 801295c:	f7f8 f92c 	bl	800abb8 <mqttSend>
			  mqttReceive();
 8012960:	f7f9 f932 	bl	800bbc8 <mqttReceive>
			  mqttDisconnect();
 8012964:	f7f8 f8c0 	bl	800aae8 <mqttDisconnect>
			  dataDisconnect();
 8012968:	f7f7 fef2 	bl	800a750 <dataDisconnect>
			  sim868Off();
 801296c:	f7ff f87e 	bl	8011a6c <sim868Off>
		  }
		  ledsOff();
 8012970:	f7ff f83a 	bl	80119e8 <ledsOff>
	  }
}
 8012974:	bf00      	nop
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	40020800 	.word	0x40020800
 8012980:	40020400 	.word	0x40020400
 8012984:	2000016c 	.word	0x2000016c
 8012988:	2000028c 	.word	0x2000028c
 801298c:	20000158 	.word	0x20000158

08012990 <working>:
void working(){
 8012990:	b580      	push	{r7, lr}
 8012992:	af00      	add	r7, sp, #0
	  if(sleepCounter%minSendPeriod == 0 && checksleepCount == 1){
 8012994:	4b3d      	ldr	r3, [pc, #244]	; (8012a8c <working+0xfc>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	4a3d      	ldr	r2, [pc, #244]	; (8012a90 <working+0x100>)
 801299a:	6812      	ldr	r2, [r2, #0]
 801299c:	fb93 f1f2 	sdiv	r1, r3, r2
 80129a0:	fb02 f201 	mul.w	r2, r2, r1
 80129a4:	1a9b      	subs	r3, r3, r2
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d16d      	bne.n	8012a86 <working+0xf6>
 80129aa:	4b3a      	ldr	r3, [pc, #232]	; (8012a94 <working+0x104>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b01      	cmp	r3, #1
 80129b0:	d169      	bne.n	8012a86 <working+0xf6>
		  getPG();
 80129b2:	f7ff fb13 	bl	8011fdc <getPG>
		  ledsOff();
 80129b6:	f7ff f817 	bl	80119e8 <ledsOff>
		  getSath();
 80129ba:	f7fe fa4d 	bl	8010e58 <getSath>
		  modemOn();
 80129be:	f7ff ff63 	bl	8012888 <modemOn>
		  getTime();
 80129c2:	f7f5 ff2d 	bl	8008820 <getTime>
		  if(TIME[0] != '0'){
 80129c6:	4b34      	ldr	r3, [pc, #208]	; (8012a98 <working+0x108>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	2b30      	cmp	r3, #48	; 0x30
 80129cc:	d011      	beq.n	80129f2 <working+0x62>
			  addToLog();
 80129ce:	f7f9 fc31 	bl	800c234 <addToLog>
		  }
		  while(sendPosition < logPosition){
 80129d2:	e00e      	b.n	80129f2 <working+0x62>
			  readFromLog(sendPosition);
 80129d4:	4b31      	ldr	r3, [pc, #196]	; (8012a9c <working+0x10c>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7f9 fcdd 	bl	800c398 <readFromLog>
			  dataConnect();
 80129de:	f7f7 fd59 	bl	800a494 <dataConnect>
			  mqttConnect();
 80129e2:	f7f7 ff0b 	bl	800a7fc <mqttConnect>
			  if(mqttSend(1) == MQTTSEND_ERROR){
 80129e6:	2001      	movs	r0, #1
 80129e8:	f7f8 f8e6 	bl	800abb8 <mqttSend>
 80129ec:	4603      	mov	r3, r0
 80129ee:	2b3d      	cmp	r3, #61	; 0x3d
 80129f0:	d006      	beq.n	8012a00 <working+0x70>
		  while(sendPosition < logPosition){
 80129f2:	4b2a      	ldr	r3, [pc, #168]	; (8012a9c <working+0x10c>)
 80129f4:	681a      	ldr	r2, [r3, #0]
 80129f6:	4b2a      	ldr	r3, [pc, #168]	; (8012aa0 <working+0x110>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	dbea      	blt.n	80129d4 <working+0x44>
 80129fe:	e000      	b.n	8012a02 <working+0x72>
				  break;
 8012a00:	bf00      	nop
			  }
		  }
		  checksleepCount = 0;
 8012a02:	4b24      	ldr	r3, [pc, #144]	; (8012a94 <working+0x104>)
 8012a04:	2200      	movs	r2, #0
 8012a06:	601a      	str	r2, [r3, #0]
		  if(sleepCounter>ftpinterval){
 8012a08:	4b20      	ldr	r3, [pc, #128]	; (8012a8c <working+0xfc>)
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	4b25      	ldr	r3, [pc, #148]	; (8012aa4 <working+0x114>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	dd32      	ble.n	8012a7a <working+0xea>
			  BATTERYSAVER = BATTERYSAVER_OFF;
 8012a14:	4b24      	ldr	r3, [pc, #144]	; (8012aa8 <working+0x118>)
 8012a16:	223f      	movs	r2, #63	; 0x3f
 8012a18:	601a      	str	r2, [r3, #0]
			  modemOn();
 8012a1a:	f7ff ff35 	bl	8012888 <modemOn>
			  getADC();
 8012a1e:	f7ff fa17 	bl	8011e50 <getADC>
			  getTemp();
 8012a22:	f7ff f9d3 	bl	8011dcc <getTemp>
			  getSig();
 8012a26:	f7ff faa9 	bl	8011f7c <getSig>
			  getPNUM();
 8012a2a:	f7ff f99f 	bl	8011d6c <getPNUM>
			  dataConnect();
 8012a2e:	f7f7 fd31 	bl	800a494 <dataConnect>
			  getgsmloc();
 8012a32:	f7f7 fbb5 	bl	800a1a0 <getgsmloc>
			  mqttConnect();
 8012a36:	f7f7 fee1 	bl	800a7fc <mqttConnect>
			  mqttSend(2);
 8012a3a:	2002      	movs	r0, #2
 8012a3c:	f7f8 f8bc 	bl	800abb8 <mqttSend>
			  mqttDisconnect();
 8012a40:	f7f8 f852 	bl	800aae8 <mqttDisconnect>
			  mqttConnect();
 8012a44:	f7f7 feda 	bl	800a7fc <mqttConnect>
			  mqttReceive();
 8012a48:	f7f9 f8be 	bl	800bbc8 <mqttReceive>
			  sleepCounter = 0;
 8012a4c:	4b0f      	ldr	r3, [pc, #60]	; (8012a8c <working+0xfc>)
 8012a4e:	2200      	movs	r2, #0
 8012a50:	601a      	str	r2, [r3, #0]
			  setPos(sendPosition);
 8012a52:	4b12      	ldr	r3, [pc, #72]	; (8012a9c <working+0x10c>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7f9 fd46 	bl	800c4e8 <setPos>
			  if(CONNECTION == CONNECTED && MQTTCONNECTION == CONNECTED){
 8012a5c:	4b13      	ldr	r3, [pc, #76]	; (8012aac <working+0x11c>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2b38      	cmp	r3, #56	; 0x38
 8012a62:	d107      	bne.n	8012a74 <working+0xe4>
 8012a64:	4b12      	ldr	r3, [pc, #72]	; (8012ab0 <working+0x120>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	2b38      	cmp	r3, #56	; 0x38
 8012a6a:	d103      	bne.n	8012a74 <working+0xe4>
				  savebattery = 0;
 8012a6c:	4b11      	ldr	r3, [pc, #68]	; (8012ab4 <working+0x124>)
 8012a6e:	2200      	movs	r2, #0
 8012a70:	601a      	str	r2, [r3, #0]
 8012a72:	e002      	b.n	8012a7a <working+0xea>
			  }
			  else{
				  BATTERYSAVER = BATTERYSAVER_ON;
 8012a74:	4b0c      	ldr	r3, [pc, #48]	; (8012aa8 <working+0x118>)
 8012a76:	223e      	movs	r2, #62	; 0x3e
 8012a78:	601a      	str	r2, [r3, #0]
			  }
		  }
		  mqttDisconnect();
 8012a7a:	f7f8 f835 	bl	800aae8 <mqttDisconnect>
		  dataDisconnect();
 8012a7e:	f7f7 fe67 	bl	800a750 <dataDisconnect>
		  sim868Off();
 8012a82:	f7fe fff3 	bl	8011a6c <sim868Off>
	  }
}
 8012a86:	bf00      	nop
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	200040d8 	.word	0x200040d8
 8012a90:	20000200 	.word	0x20000200
 8012a94:	20003df0 	.word	0x20003df0
 8012a98:	20000268 	.word	0x20000268
 8012a9c:	20004124 	.word	0x20004124
 8012aa0:	20004424 	.word	0x20004424
 8012aa4:	200004a8 	.word	0x200004a8
 8012aa8:	2000016c 	.word	0x2000016c
 8012aac:	2000015c 	.word	0x2000015c
 8012ab0:	20000160 	.word	0x20000160
 8012ab4:	2000028c 	.word	0x2000028c

08012ab8 <sleeping>:
void sleeping(){
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	af00      	add	r7, sp, #0
	sleep();
 8012abc:	f7f3 fcfe 	bl	80064bc <sleep>
	wakeUp();
 8012ac0:	f7f3 fd2e 	bl	8006520 <wakeUp>
}
 8012ac4:	bf00      	nop
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <atoi>:
 8012ac8:	220a      	movs	r2, #10
 8012aca:	2100      	movs	r1, #0
 8012acc:	f000 ba1e 	b.w	8012f0c <strtol>

08012ad0 <atol>:
 8012ad0:	220a      	movs	r2, #10
 8012ad2:	2100      	movs	r1, #0
 8012ad4:	f000 ba1a 	b.w	8012f0c <strtol>

08012ad8 <__errno>:
 8012ad8:	4b01      	ldr	r3, [pc, #4]	; (8012ae0 <__errno+0x8>)
 8012ada:	6818      	ldr	r0, [r3, #0]
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	20000174 	.word	0x20000174

08012ae4 <__libc_init_array>:
 8012ae4:	b570      	push	{r4, r5, r6, lr}
 8012ae6:	2600      	movs	r6, #0
 8012ae8:	4d0c      	ldr	r5, [pc, #48]	; (8012b1c <__libc_init_array+0x38>)
 8012aea:	4c0d      	ldr	r4, [pc, #52]	; (8012b20 <__libc_init_array+0x3c>)
 8012aec:	1b64      	subs	r4, r4, r5
 8012aee:	10a4      	asrs	r4, r4, #2
 8012af0:	42a6      	cmp	r6, r4
 8012af2:	d109      	bne.n	8012b08 <__libc_init_array+0x24>
 8012af4:	f001 ff90 	bl	8014a18 <_init>
 8012af8:	2600      	movs	r6, #0
 8012afa:	4d0a      	ldr	r5, [pc, #40]	; (8012b24 <__libc_init_array+0x40>)
 8012afc:	4c0a      	ldr	r4, [pc, #40]	; (8012b28 <__libc_init_array+0x44>)
 8012afe:	1b64      	subs	r4, r4, r5
 8012b00:	10a4      	asrs	r4, r4, #2
 8012b02:	42a6      	cmp	r6, r4
 8012b04:	d105      	bne.n	8012b12 <__libc_init_array+0x2e>
 8012b06:	bd70      	pop	{r4, r5, r6, pc}
 8012b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b0c:	4798      	blx	r3
 8012b0e:	3601      	adds	r6, #1
 8012b10:	e7ee      	b.n	8012af0 <__libc_init_array+0xc>
 8012b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b16:	4798      	blx	r3
 8012b18:	3601      	adds	r6, #1
 8012b1a:	e7f2      	b.n	8012b02 <__libc_init_array+0x1e>
 8012b1c:	08015f90 	.word	0x08015f90
 8012b20:	08015f90 	.word	0x08015f90
 8012b24:	08015f90 	.word	0x08015f90
 8012b28:	08015f94 	.word	0x08015f94

08012b2c <__itoa>:
 8012b2c:	1e93      	subs	r3, r2, #2
 8012b2e:	2b22      	cmp	r3, #34	; 0x22
 8012b30:	b510      	push	{r4, lr}
 8012b32:	460c      	mov	r4, r1
 8012b34:	d904      	bls.n	8012b40 <__itoa+0x14>
 8012b36:	2300      	movs	r3, #0
 8012b38:	461c      	mov	r4, r3
 8012b3a:	700b      	strb	r3, [r1, #0]
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	bd10      	pop	{r4, pc}
 8012b40:	2a0a      	cmp	r2, #10
 8012b42:	d109      	bne.n	8012b58 <__itoa+0x2c>
 8012b44:	2800      	cmp	r0, #0
 8012b46:	da07      	bge.n	8012b58 <__itoa+0x2c>
 8012b48:	232d      	movs	r3, #45	; 0x2d
 8012b4a:	700b      	strb	r3, [r1, #0]
 8012b4c:	2101      	movs	r1, #1
 8012b4e:	4240      	negs	r0, r0
 8012b50:	4421      	add	r1, r4
 8012b52:	f000 f9e5 	bl	8012f20 <__utoa>
 8012b56:	e7f1      	b.n	8012b3c <__itoa+0x10>
 8012b58:	2100      	movs	r1, #0
 8012b5a:	e7f9      	b.n	8012b50 <__itoa+0x24>

08012b5c <itoa>:
 8012b5c:	f7ff bfe6 	b.w	8012b2c <__itoa>

08012b60 <memcpy>:
 8012b60:	440a      	add	r2, r1
 8012b62:	4291      	cmp	r1, r2
 8012b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b68:	d100      	bne.n	8012b6c <memcpy+0xc>
 8012b6a:	4770      	bx	lr
 8012b6c:	b510      	push	{r4, lr}
 8012b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b72:	4291      	cmp	r1, r2
 8012b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b78:	d1f9      	bne.n	8012b6e <memcpy+0xe>
 8012b7a:	bd10      	pop	{r4, pc}

08012b7c <memset>:
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	4402      	add	r2, r0
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d100      	bne.n	8012b86 <memset+0xa>
 8012b84:	4770      	bx	lr
 8012b86:	f803 1b01 	strb.w	r1, [r3], #1
 8012b8a:	e7f9      	b.n	8012b80 <memset+0x4>

08012b8c <siprintf>:
 8012b8c:	b40e      	push	{r1, r2, r3}
 8012b8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b92:	b500      	push	{lr}
 8012b94:	b09c      	sub	sp, #112	; 0x70
 8012b96:	ab1d      	add	r3, sp, #116	; 0x74
 8012b98:	9002      	str	r0, [sp, #8]
 8012b9a:	9006      	str	r0, [sp, #24]
 8012b9c:	9107      	str	r1, [sp, #28]
 8012b9e:	9104      	str	r1, [sp, #16]
 8012ba0:	4808      	ldr	r0, [pc, #32]	; (8012bc4 <siprintf+0x38>)
 8012ba2:	4909      	ldr	r1, [pc, #36]	; (8012bc8 <siprintf+0x3c>)
 8012ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ba8:	9105      	str	r1, [sp, #20]
 8012baa:	6800      	ldr	r0, [r0, #0]
 8012bac:	a902      	add	r1, sp, #8
 8012bae:	9301      	str	r3, [sp, #4]
 8012bb0:	f000 fb66 	bl	8013280 <_svfiprintf_r>
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	9b02      	ldr	r3, [sp, #8]
 8012bb8:	701a      	strb	r2, [r3, #0]
 8012bba:	b01c      	add	sp, #112	; 0x70
 8012bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bc0:	b003      	add	sp, #12
 8012bc2:	4770      	bx	lr
 8012bc4:	20000174 	.word	0x20000174
 8012bc8:	ffff0208 	.word	0xffff0208

08012bcc <siscanf>:
 8012bcc:	b40e      	push	{r1, r2, r3}
 8012bce:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012bd2:	b530      	push	{r4, r5, lr}
 8012bd4:	b09c      	sub	sp, #112	; 0x70
 8012bd6:	ac1f      	add	r4, sp, #124	; 0x7c
 8012bd8:	f854 5b04 	ldr.w	r5, [r4], #4
 8012bdc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012be0:	9002      	str	r0, [sp, #8]
 8012be2:	9006      	str	r0, [sp, #24]
 8012be4:	f7f2 fad4 	bl	8005190 <strlen>
 8012be8:	4b0b      	ldr	r3, [pc, #44]	; (8012c18 <siscanf+0x4c>)
 8012bea:	9003      	str	r0, [sp, #12]
 8012bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8012bee:	2300      	movs	r3, #0
 8012bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8012bf2:	9314      	str	r3, [sp, #80]	; 0x50
 8012bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012bf8:	9007      	str	r0, [sp, #28]
 8012bfa:	4808      	ldr	r0, [pc, #32]	; (8012c1c <siscanf+0x50>)
 8012bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012c00:	462a      	mov	r2, r5
 8012c02:	4623      	mov	r3, r4
 8012c04:	a902      	add	r1, sp, #8
 8012c06:	6800      	ldr	r0, [r0, #0]
 8012c08:	9401      	str	r4, [sp, #4]
 8012c0a:	f000 fc93 	bl	8013534 <__ssvfiscanf_r>
 8012c0e:	b01c      	add	sp, #112	; 0x70
 8012c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c14:	b003      	add	sp, #12
 8012c16:	4770      	bx	lr
 8012c18:	08012c43 	.word	0x08012c43
 8012c1c:	20000174 	.word	0x20000174

08012c20 <__sread>:
 8012c20:	b510      	push	{r4, lr}
 8012c22:	460c      	mov	r4, r1
 8012c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c28:	f001 fa36 	bl	8014098 <_read_r>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	bfab      	itete	ge
 8012c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c32:	89a3      	ldrhlt	r3, [r4, #12]
 8012c34:	181b      	addge	r3, r3, r0
 8012c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c3a:	bfac      	ite	ge
 8012c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c3e:	81a3      	strhlt	r3, [r4, #12]
 8012c40:	bd10      	pop	{r4, pc}

08012c42 <__seofread>:
 8012c42:	2000      	movs	r0, #0
 8012c44:	4770      	bx	lr

08012c46 <__swrite>:
 8012c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c4a:	461f      	mov	r7, r3
 8012c4c:	898b      	ldrh	r3, [r1, #12]
 8012c4e:	4605      	mov	r5, r0
 8012c50:	05db      	lsls	r3, r3, #23
 8012c52:	460c      	mov	r4, r1
 8012c54:	4616      	mov	r6, r2
 8012c56:	d505      	bpl.n	8012c64 <__swrite+0x1e>
 8012c58:	2302      	movs	r3, #2
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c60:	f000 f9f2 	bl	8013048 <_lseek_r>
 8012c64:	89a3      	ldrh	r3, [r4, #12]
 8012c66:	4632      	mov	r2, r6
 8012c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c6c:	81a3      	strh	r3, [r4, #12]
 8012c6e:	4628      	mov	r0, r5
 8012c70:	463b      	mov	r3, r7
 8012c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c7a:	f000 b993 	b.w	8012fa4 <_write_r>

08012c7e <__sseek>:
 8012c7e:	b510      	push	{r4, lr}
 8012c80:	460c      	mov	r4, r1
 8012c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c86:	f000 f9df 	bl	8013048 <_lseek_r>
 8012c8a:	1c43      	adds	r3, r0, #1
 8012c8c:	89a3      	ldrh	r3, [r4, #12]
 8012c8e:	bf15      	itete	ne
 8012c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c9a:	81a3      	strheq	r3, [r4, #12]
 8012c9c:	bf18      	it	ne
 8012c9e:	81a3      	strhne	r3, [r4, #12]
 8012ca0:	bd10      	pop	{r4, pc}

08012ca2 <__sclose>:
 8012ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ca6:	f000 b9ad 	b.w	8013004 <_close_r>

08012caa <strcat>:
 8012caa:	4602      	mov	r2, r0
 8012cac:	b510      	push	{r4, lr}
 8012cae:	7814      	ldrb	r4, [r2, #0]
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	3201      	adds	r2, #1
 8012cb4:	2c00      	cmp	r4, #0
 8012cb6:	d1fa      	bne.n	8012cae <strcat+0x4>
 8012cb8:	3b01      	subs	r3, #1
 8012cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012cc2:	2a00      	cmp	r2, #0
 8012cc4:	d1f9      	bne.n	8012cba <strcat+0x10>
 8012cc6:	bd10      	pop	{r4, pc}

08012cc8 <strchr>:
 8012cc8:	4603      	mov	r3, r0
 8012cca:	b2c9      	uxtb	r1, r1
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cd2:	b112      	cbz	r2, 8012cda <strchr+0x12>
 8012cd4:	428a      	cmp	r2, r1
 8012cd6:	d1f9      	bne.n	8012ccc <strchr+0x4>
 8012cd8:	4770      	bx	lr
 8012cda:	2900      	cmp	r1, #0
 8012cdc:	bf18      	it	ne
 8012cde:	2000      	movne	r0, #0
 8012ce0:	4770      	bx	lr

08012ce2 <strcpy>:
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ce8:	f803 2b01 	strb.w	r2, [r3], #1
 8012cec:	2a00      	cmp	r2, #0
 8012cee:	d1f9      	bne.n	8012ce4 <strcpy+0x2>
 8012cf0:	4770      	bx	lr

08012cf2 <strcspn>:
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	b570      	push	{r4, r5, r6, lr}
 8012cf6:	461e      	mov	r6, r3
 8012cf8:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012cfc:	b144      	cbz	r4, 8012d10 <strcspn+0x1e>
 8012cfe:	1e4a      	subs	r2, r1, #1
 8012d00:	e001      	b.n	8012d06 <strcspn+0x14>
 8012d02:	42a5      	cmp	r5, r4
 8012d04:	d004      	beq.n	8012d10 <strcspn+0x1e>
 8012d06:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012d0a:	2d00      	cmp	r5, #0
 8012d0c:	d1f9      	bne.n	8012d02 <strcspn+0x10>
 8012d0e:	e7f2      	b.n	8012cf6 <strcspn+0x4>
 8012d10:	1a30      	subs	r0, r6, r0
 8012d12:	bd70      	pop	{r4, r5, r6, pc}

08012d14 <strstr>:
 8012d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d16:	780c      	ldrb	r4, [r1, #0]
 8012d18:	b164      	cbz	r4, 8012d34 <strstr+0x20>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	781a      	ldrb	r2, [r3, #0]
 8012d1e:	4618      	mov	r0, r3
 8012d20:	1c5e      	adds	r6, r3, #1
 8012d22:	b90a      	cbnz	r2, 8012d28 <strstr+0x14>
 8012d24:	4610      	mov	r0, r2
 8012d26:	e005      	b.n	8012d34 <strstr+0x20>
 8012d28:	4294      	cmp	r4, r2
 8012d2a:	d108      	bne.n	8012d3e <strstr+0x2a>
 8012d2c:	460d      	mov	r5, r1
 8012d2e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8012d32:	b902      	cbnz	r2, 8012d36 <strstr+0x22>
 8012d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d36:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8012d3a:	4297      	cmp	r7, r2
 8012d3c:	d0f7      	beq.n	8012d2e <strstr+0x1a>
 8012d3e:	4633      	mov	r3, r6
 8012d40:	e7ec      	b.n	8012d1c <strstr+0x8>
	...

08012d44 <strtok>:
 8012d44:	4b16      	ldr	r3, [pc, #88]	; (8012da0 <strtok+0x5c>)
 8012d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4a:	681f      	ldr	r7, [r3, #0]
 8012d4c:	4605      	mov	r5, r0
 8012d4e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8012d50:	460e      	mov	r6, r1
 8012d52:	b9ec      	cbnz	r4, 8012d90 <strtok+0x4c>
 8012d54:	2050      	movs	r0, #80	; 0x50
 8012d56:	f000 f989 	bl	801306c <malloc>
 8012d5a:	4602      	mov	r2, r0
 8012d5c:	65b8      	str	r0, [r7, #88]	; 0x58
 8012d5e:	b920      	cbnz	r0, 8012d6a <strtok+0x26>
 8012d60:	2157      	movs	r1, #87	; 0x57
 8012d62:	4b10      	ldr	r3, [pc, #64]	; (8012da4 <strtok+0x60>)
 8012d64:	4810      	ldr	r0, [pc, #64]	; (8012da8 <strtok+0x64>)
 8012d66:	f000 f92f 	bl	8012fc8 <__assert_func>
 8012d6a:	e9c0 4400 	strd	r4, r4, [r0]
 8012d6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012d72:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012d76:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012d7a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012d7e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012d82:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012d86:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012d8a:	6184      	str	r4, [r0, #24]
 8012d8c:	7704      	strb	r4, [r0, #28]
 8012d8e:	6244      	str	r4, [r0, #36]	; 0x24
 8012d90:	4631      	mov	r1, r6
 8012d92:	4628      	mov	r0, r5
 8012d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d96:	2301      	movs	r3, #1
 8012d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d9c:	f000 b806 	b.w	8012dac <__strtok_r>
 8012da0:	20000174 	.word	0x20000174
 8012da4:	08015d00 	.word	0x08015d00
 8012da8:	08015d17 	.word	0x08015d17

08012dac <__strtok_r>:
 8012dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dae:	b908      	cbnz	r0, 8012db4 <__strtok_r+0x8>
 8012db0:	6810      	ldr	r0, [r2, #0]
 8012db2:	b188      	cbz	r0, 8012dd8 <__strtok_r+0x2c>
 8012db4:	4604      	mov	r4, r0
 8012db6:	460f      	mov	r7, r1
 8012db8:	4620      	mov	r0, r4
 8012dba:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012dbe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012dc2:	b91e      	cbnz	r6, 8012dcc <__strtok_r+0x20>
 8012dc4:	b965      	cbnz	r5, 8012de0 <__strtok_r+0x34>
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	6015      	str	r5, [r2, #0]
 8012dca:	e005      	b.n	8012dd8 <__strtok_r+0x2c>
 8012dcc:	42b5      	cmp	r5, r6
 8012dce:	d1f6      	bne.n	8012dbe <__strtok_r+0x12>
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d1f0      	bne.n	8012db6 <__strtok_r+0xa>
 8012dd4:	6014      	str	r4, [r2, #0]
 8012dd6:	7003      	strb	r3, [r0, #0]
 8012dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dda:	461c      	mov	r4, r3
 8012ddc:	e00c      	b.n	8012df8 <__strtok_r+0x4c>
 8012dde:	b915      	cbnz	r5, 8012de6 <__strtok_r+0x3a>
 8012de0:	460e      	mov	r6, r1
 8012de2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012de6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012dea:	42ab      	cmp	r3, r5
 8012dec:	d1f7      	bne.n	8012dde <__strtok_r+0x32>
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d0f3      	beq.n	8012dda <__strtok_r+0x2e>
 8012df2:	2300      	movs	r3, #0
 8012df4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012df8:	6014      	str	r4, [r2, #0]
 8012dfa:	e7ed      	b.n	8012dd8 <__strtok_r+0x2c>

08012dfc <_strtol_l.isra.0>:
 8012dfc:	2b01      	cmp	r3, #1
 8012dfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e02:	4686      	mov	lr, r0
 8012e04:	d001      	beq.n	8012e0a <_strtol_l.isra.0+0xe>
 8012e06:	2b24      	cmp	r3, #36	; 0x24
 8012e08:	d906      	bls.n	8012e18 <_strtol_l.isra.0+0x1c>
 8012e0a:	f7ff fe65 	bl	8012ad8 <__errno>
 8012e0e:	2316      	movs	r3, #22
 8012e10:	6003      	str	r3, [r0, #0]
 8012e12:	2000      	movs	r0, #0
 8012e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e18:	468c      	mov	ip, r1
 8012e1a:	4e3a      	ldr	r6, [pc, #232]	; (8012f04 <_strtol_l.isra.0+0x108>)
 8012e1c:	4660      	mov	r0, ip
 8012e1e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012e22:	5da5      	ldrb	r5, [r4, r6]
 8012e24:	f015 0508 	ands.w	r5, r5, #8
 8012e28:	d1f8      	bne.n	8012e1c <_strtol_l.isra.0+0x20>
 8012e2a:	2c2d      	cmp	r4, #45	; 0x2d
 8012e2c:	d133      	bne.n	8012e96 <_strtol_l.isra.0+0x9a>
 8012e2e:	f04f 0801 	mov.w	r8, #1
 8012e32:	f89c 4000 	ldrb.w	r4, [ip]
 8012e36:	f100 0c02 	add.w	ip, r0, #2
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d05d      	beq.n	8012efa <_strtol_l.isra.0+0xfe>
 8012e3e:	2b10      	cmp	r3, #16
 8012e40:	d10c      	bne.n	8012e5c <_strtol_l.isra.0+0x60>
 8012e42:	2c30      	cmp	r4, #48	; 0x30
 8012e44:	d10a      	bne.n	8012e5c <_strtol_l.isra.0+0x60>
 8012e46:	f89c 0000 	ldrb.w	r0, [ip]
 8012e4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012e4e:	2858      	cmp	r0, #88	; 0x58
 8012e50:	d14e      	bne.n	8012ef0 <_strtol_l.isra.0+0xf4>
 8012e52:	2310      	movs	r3, #16
 8012e54:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012e58:	f10c 0c02 	add.w	ip, ip, #2
 8012e5c:	2500      	movs	r5, #0
 8012e5e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8012e62:	3f01      	subs	r7, #1
 8012e64:	fbb7 f9f3 	udiv	r9, r7, r3
 8012e68:	4628      	mov	r0, r5
 8012e6a:	fb03 7a19 	mls	sl, r3, r9, r7
 8012e6e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8012e72:	2e09      	cmp	r6, #9
 8012e74:	d818      	bhi.n	8012ea8 <_strtol_l.isra.0+0xac>
 8012e76:	4634      	mov	r4, r6
 8012e78:	42a3      	cmp	r3, r4
 8012e7a:	dd24      	ble.n	8012ec6 <_strtol_l.isra.0+0xca>
 8012e7c:	2d00      	cmp	r5, #0
 8012e7e:	db1f      	blt.n	8012ec0 <_strtol_l.isra.0+0xc4>
 8012e80:	4581      	cmp	r9, r0
 8012e82:	d31d      	bcc.n	8012ec0 <_strtol_l.isra.0+0xc4>
 8012e84:	d101      	bne.n	8012e8a <_strtol_l.isra.0+0x8e>
 8012e86:	45a2      	cmp	sl, r4
 8012e88:	db1a      	blt.n	8012ec0 <_strtol_l.isra.0+0xc4>
 8012e8a:	2501      	movs	r5, #1
 8012e8c:	fb00 4003 	mla	r0, r0, r3, r4
 8012e90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012e94:	e7eb      	b.n	8012e6e <_strtol_l.isra.0+0x72>
 8012e96:	2c2b      	cmp	r4, #43	; 0x2b
 8012e98:	bf08      	it	eq
 8012e9a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8012e9e:	46a8      	mov	r8, r5
 8012ea0:	bf08      	it	eq
 8012ea2:	f100 0c02 	addeq.w	ip, r0, #2
 8012ea6:	e7c8      	b.n	8012e3a <_strtol_l.isra.0+0x3e>
 8012ea8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8012eac:	2e19      	cmp	r6, #25
 8012eae:	d801      	bhi.n	8012eb4 <_strtol_l.isra.0+0xb8>
 8012eb0:	3c37      	subs	r4, #55	; 0x37
 8012eb2:	e7e1      	b.n	8012e78 <_strtol_l.isra.0+0x7c>
 8012eb4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8012eb8:	2e19      	cmp	r6, #25
 8012eba:	d804      	bhi.n	8012ec6 <_strtol_l.isra.0+0xca>
 8012ebc:	3c57      	subs	r4, #87	; 0x57
 8012ebe:	e7db      	b.n	8012e78 <_strtol_l.isra.0+0x7c>
 8012ec0:	f04f 35ff 	mov.w	r5, #4294967295
 8012ec4:	e7e4      	b.n	8012e90 <_strtol_l.isra.0+0x94>
 8012ec6:	2d00      	cmp	r5, #0
 8012ec8:	da08      	bge.n	8012edc <_strtol_l.isra.0+0xe0>
 8012eca:	2322      	movs	r3, #34	; 0x22
 8012ecc:	4638      	mov	r0, r7
 8012ece:	f8ce 3000 	str.w	r3, [lr]
 8012ed2:	2a00      	cmp	r2, #0
 8012ed4:	d09e      	beq.n	8012e14 <_strtol_l.isra.0+0x18>
 8012ed6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8012eda:	e007      	b.n	8012eec <_strtol_l.isra.0+0xf0>
 8012edc:	f1b8 0f00 	cmp.w	r8, #0
 8012ee0:	d000      	beq.n	8012ee4 <_strtol_l.isra.0+0xe8>
 8012ee2:	4240      	negs	r0, r0
 8012ee4:	2a00      	cmp	r2, #0
 8012ee6:	d095      	beq.n	8012e14 <_strtol_l.isra.0+0x18>
 8012ee8:	2d00      	cmp	r5, #0
 8012eea:	d1f4      	bne.n	8012ed6 <_strtol_l.isra.0+0xda>
 8012eec:	6011      	str	r1, [r2, #0]
 8012eee:	e791      	b.n	8012e14 <_strtol_l.isra.0+0x18>
 8012ef0:	2430      	movs	r4, #48	; 0x30
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d1b2      	bne.n	8012e5c <_strtol_l.isra.0+0x60>
 8012ef6:	2308      	movs	r3, #8
 8012ef8:	e7b0      	b.n	8012e5c <_strtol_l.isra.0+0x60>
 8012efa:	2c30      	cmp	r4, #48	; 0x30
 8012efc:	d0a3      	beq.n	8012e46 <_strtol_l.isra.0+0x4a>
 8012efe:	230a      	movs	r3, #10
 8012f00:	e7ac      	b.n	8012e5c <_strtol_l.isra.0+0x60>
 8012f02:	bf00      	nop
 8012f04:	08015dda 	.word	0x08015dda

08012f08 <_strtol_r>:
 8012f08:	f7ff bf78 	b.w	8012dfc <_strtol_l.isra.0>

08012f0c <strtol>:
 8012f0c:	4613      	mov	r3, r2
 8012f0e:	460a      	mov	r2, r1
 8012f10:	4601      	mov	r1, r0
 8012f12:	4802      	ldr	r0, [pc, #8]	; (8012f1c <strtol+0x10>)
 8012f14:	6800      	ldr	r0, [r0, #0]
 8012f16:	f7ff bf71 	b.w	8012dfc <_strtol_l.isra.0>
 8012f1a:	bf00      	nop
 8012f1c:	20000174 	.word	0x20000174

08012f20 <__utoa>:
 8012f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f22:	b08b      	sub	sp, #44	; 0x2c
 8012f24:	4605      	mov	r5, r0
 8012f26:	460b      	mov	r3, r1
 8012f28:	466e      	mov	r6, sp
 8012f2a:	4c1d      	ldr	r4, [pc, #116]	; (8012fa0 <__utoa+0x80>)
 8012f2c:	f104 0c20 	add.w	ip, r4, #32
 8012f30:	4637      	mov	r7, r6
 8012f32:	6820      	ldr	r0, [r4, #0]
 8012f34:	6861      	ldr	r1, [r4, #4]
 8012f36:	3408      	adds	r4, #8
 8012f38:	c703      	stmia	r7!, {r0, r1}
 8012f3a:	4564      	cmp	r4, ip
 8012f3c:	463e      	mov	r6, r7
 8012f3e:	d1f7      	bne.n	8012f30 <__utoa+0x10>
 8012f40:	7921      	ldrb	r1, [r4, #4]
 8012f42:	6820      	ldr	r0, [r4, #0]
 8012f44:	7139      	strb	r1, [r7, #4]
 8012f46:	1e91      	subs	r1, r2, #2
 8012f48:	2922      	cmp	r1, #34	; 0x22
 8012f4a:	6038      	str	r0, [r7, #0]
 8012f4c:	f04f 0100 	mov.w	r1, #0
 8012f50:	d904      	bls.n	8012f5c <__utoa+0x3c>
 8012f52:	7019      	strb	r1, [r3, #0]
 8012f54:	460b      	mov	r3, r1
 8012f56:	4618      	mov	r0, r3
 8012f58:	b00b      	add	sp, #44	; 0x2c
 8012f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f5c:	1e58      	subs	r0, r3, #1
 8012f5e:	4684      	mov	ip, r0
 8012f60:	fbb5 f7f2 	udiv	r7, r5, r2
 8012f64:	fb02 5617 	mls	r6, r2, r7, r5
 8012f68:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8012f6c:	4476      	add	r6, lr
 8012f6e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8012f72:	460c      	mov	r4, r1
 8012f74:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8012f78:	462e      	mov	r6, r5
 8012f7a:	42b2      	cmp	r2, r6
 8012f7c:	463d      	mov	r5, r7
 8012f7e:	f101 0101 	add.w	r1, r1, #1
 8012f82:	d9ed      	bls.n	8012f60 <__utoa+0x40>
 8012f84:	2200      	movs	r2, #0
 8012f86:	545a      	strb	r2, [r3, r1]
 8012f88:	1919      	adds	r1, r3, r4
 8012f8a:	1aa5      	subs	r5, r4, r2
 8012f8c:	42aa      	cmp	r2, r5
 8012f8e:	dae2      	bge.n	8012f56 <__utoa+0x36>
 8012f90:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8012f94:	780e      	ldrb	r6, [r1, #0]
 8012f96:	3201      	adds	r2, #1
 8012f98:	7006      	strb	r6, [r0, #0]
 8012f9a:	f801 5901 	strb.w	r5, [r1], #-1
 8012f9e:	e7f4      	b.n	8012f8a <__utoa+0x6a>
 8012fa0:	08015d78 	.word	0x08015d78

08012fa4 <_write_r>:
 8012fa4:	b538      	push	{r3, r4, r5, lr}
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	4608      	mov	r0, r1
 8012faa:	4611      	mov	r1, r2
 8012fac:	2200      	movs	r2, #0
 8012fae:	4d05      	ldr	r5, [pc, #20]	; (8012fc4 <_write_r+0x20>)
 8012fb0:	602a      	str	r2, [r5, #0]
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	f7f3 fde8 	bl	8006b88 <_write>
 8012fb8:	1c43      	adds	r3, r0, #1
 8012fba:	d102      	bne.n	8012fc2 <_write_r+0x1e>
 8012fbc:	682b      	ldr	r3, [r5, #0]
 8012fbe:	b103      	cbz	r3, 8012fc2 <_write_r+0x1e>
 8012fc0:	6023      	str	r3, [r4, #0]
 8012fc2:	bd38      	pop	{r3, r4, r5, pc}
 8012fc4:	20004da8 	.word	0x20004da8

08012fc8 <__assert_func>:
 8012fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fca:	4614      	mov	r4, r2
 8012fcc:	461a      	mov	r2, r3
 8012fce:	4b09      	ldr	r3, [pc, #36]	; (8012ff4 <__assert_func+0x2c>)
 8012fd0:	4605      	mov	r5, r0
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	68d8      	ldr	r0, [r3, #12]
 8012fd6:	b14c      	cbz	r4, 8012fec <__assert_func+0x24>
 8012fd8:	4b07      	ldr	r3, [pc, #28]	; (8012ff8 <__assert_func+0x30>)
 8012fda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fde:	9100      	str	r1, [sp, #0]
 8012fe0:	462b      	mov	r3, r5
 8012fe2:	4906      	ldr	r1, [pc, #24]	; (8012ffc <__assert_func+0x34>)
 8012fe4:	f000 f81e 	bl	8013024 <fiprintf>
 8012fe8:	f001 fa28 	bl	801443c <abort>
 8012fec:	4b04      	ldr	r3, [pc, #16]	; (8013000 <__assert_func+0x38>)
 8012fee:	461c      	mov	r4, r3
 8012ff0:	e7f3      	b.n	8012fda <__assert_func+0x12>
 8012ff2:	bf00      	nop
 8012ff4:	20000174 	.word	0x20000174
 8012ff8:	08015d9d 	.word	0x08015d9d
 8012ffc:	08015daa 	.word	0x08015daa
 8013000:	08015dd8 	.word	0x08015dd8

08013004 <_close_r>:
 8013004:	b538      	push	{r3, r4, r5, lr}
 8013006:	2300      	movs	r3, #0
 8013008:	4d05      	ldr	r5, [pc, #20]	; (8013020 <_close_r+0x1c>)
 801300a:	4604      	mov	r4, r0
 801300c:	4608      	mov	r0, r1
 801300e:	602b      	str	r3, [r5, #0]
 8013010:	f7f3 fdd6 	bl	8006bc0 <_close>
 8013014:	1c43      	adds	r3, r0, #1
 8013016:	d102      	bne.n	801301e <_close_r+0x1a>
 8013018:	682b      	ldr	r3, [r5, #0]
 801301a:	b103      	cbz	r3, 801301e <_close_r+0x1a>
 801301c:	6023      	str	r3, [r4, #0]
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	20004da8 	.word	0x20004da8

08013024 <fiprintf>:
 8013024:	b40e      	push	{r1, r2, r3}
 8013026:	b503      	push	{r0, r1, lr}
 8013028:	4601      	mov	r1, r0
 801302a:	ab03      	add	r3, sp, #12
 801302c:	4805      	ldr	r0, [pc, #20]	; (8013044 <fiprintf+0x20>)
 801302e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013032:	6800      	ldr	r0, [r0, #0]
 8013034:	9301      	str	r3, [sp, #4]
 8013036:	f000 fc1f 	bl	8013878 <_vfiprintf_r>
 801303a:	b002      	add	sp, #8
 801303c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013040:	b003      	add	sp, #12
 8013042:	4770      	bx	lr
 8013044:	20000174 	.word	0x20000174

08013048 <_lseek_r>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	4604      	mov	r4, r0
 801304c:	4608      	mov	r0, r1
 801304e:	4611      	mov	r1, r2
 8013050:	2200      	movs	r2, #0
 8013052:	4d05      	ldr	r5, [pc, #20]	; (8013068 <_lseek_r+0x20>)
 8013054:	602a      	str	r2, [r5, #0]
 8013056:	461a      	mov	r2, r3
 8013058:	f7f3 fdd6 	bl	8006c08 <_lseek>
 801305c:	1c43      	adds	r3, r0, #1
 801305e:	d102      	bne.n	8013066 <_lseek_r+0x1e>
 8013060:	682b      	ldr	r3, [r5, #0]
 8013062:	b103      	cbz	r3, 8013066 <_lseek_r+0x1e>
 8013064:	6023      	str	r3, [r4, #0]
 8013066:	bd38      	pop	{r3, r4, r5, pc}
 8013068:	20004da8 	.word	0x20004da8

0801306c <malloc>:
 801306c:	4b02      	ldr	r3, [pc, #8]	; (8013078 <malloc+0xc>)
 801306e:	4601      	mov	r1, r0
 8013070:	6818      	ldr	r0, [r3, #0]
 8013072:	f000 b84f 	b.w	8013114 <_malloc_r>
 8013076:	bf00      	nop
 8013078:	20000174 	.word	0x20000174

0801307c <_free_r>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	4605      	mov	r5, r0
 8013080:	2900      	cmp	r1, #0
 8013082:	d043      	beq.n	801310c <_free_r+0x90>
 8013084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013088:	1f0c      	subs	r4, r1, #4
 801308a:	2b00      	cmp	r3, #0
 801308c:	bfb8      	it	lt
 801308e:	18e4      	addlt	r4, r4, r3
 8013090:	f001 fc22 	bl	80148d8 <__malloc_lock>
 8013094:	4a1e      	ldr	r2, [pc, #120]	; (8013110 <_free_r+0x94>)
 8013096:	6813      	ldr	r3, [r2, #0]
 8013098:	4610      	mov	r0, r2
 801309a:	b933      	cbnz	r3, 80130aa <_free_r+0x2e>
 801309c:	6063      	str	r3, [r4, #4]
 801309e:	6014      	str	r4, [r2, #0]
 80130a0:	4628      	mov	r0, r5
 80130a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130a6:	f001 bc1d 	b.w	80148e4 <__malloc_unlock>
 80130aa:	42a3      	cmp	r3, r4
 80130ac:	d90a      	bls.n	80130c4 <_free_r+0x48>
 80130ae:	6821      	ldr	r1, [r4, #0]
 80130b0:	1862      	adds	r2, r4, r1
 80130b2:	4293      	cmp	r3, r2
 80130b4:	bf01      	itttt	eq
 80130b6:	681a      	ldreq	r2, [r3, #0]
 80130b8:	685b      	ldreq	r3, [r3, #4]
 80130ba:	1852      	addeq	r2, r2, r1
 80130bc:	6022      	streq	r2, [r4, #0]
 80130be:	6063      	str	r3, [r4, #4]
 80130c0:	6004      	str	r4, [r0, #0]
 80130c2:	e7ed      	b.n	80130a0 <_free_r+0x24>
 80130c4:	461a      	mov	r2, r3
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	b10b      	cbz	r3, 80130ce <_free_r+0x52>
 80130ca:	42a3      	cmp	r3, r4
 80130cc:	d9fa      	bls.n	80130c4 <_free_r+0x48>
 80130ce:	6811      	ldr	r1, [r2, #0]
 80130d0:	1850      	adds	r0, r2, r1
 80130d2:	42a0      	cmp	r0, r4
 80130d4:	d10b      	bne.n	80130ee <_free_r+0x72>
 80130d6:	6820      	ldr	r0, [r4, #0]
 80130d8:	4401      	add	r1, r0
 80130da:	1850      	adds	r0, r2, r1
 80130dc:	4283      	cmp	r3, r0
 80130de:	6011      	str	r1, [r2, #0]
 80130e0:	d1de      	bne.n	80130a0 <_free_r+0x24>
 80130e2:	6818      	ldr	r0, [r3, #0]
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	4401      	add	r1, r0
 80130e8:	6011      	str	r1, [r2, #0]
 80130ea:	6053      	str	r3, [r2, #4]
 80130ec:	e7d8      	b.n	80130a0 <_free_r+0x24>
 80130ee:	d902      	bls.n	80130f6 <_free_r+0x7a>
 80130f0:	230c      	movs	r3, #12
 80130f2:	602b      	str	r3, [r5, #0]
 80130f4:	e7d4      	b.n	80130a0 <_free_r+0x24>
 80130f6:	6820      	ldr	r0, [r4, #0]
 80130f8:	1821      	adds	r1, r4, r0
 80130fa:	428b      	cmp	r3, r1
 80130fc:	bf01      	itttt	eq
 80130fe:	6819      	ldreq	r1, [r3, #0]
 8013100:	685b      	ldreq	r3, [r3, #4]
 8013102:	1809      	addeq	r1, r1, r0
 8013104:	6021      	streq	r1, [r4, #0]
 8013106:	6063      	str	r3, [r4, #4]
 8013108:	6054      	str	r4, [r2, #4]
 801310a:	e7c9      	b.n	80130a0 <_free_r+0x24>
 801310c:	bd38      	pop	{r3, r4, r5, pc}
 801310e:	bf00      	nop
 8013110:	2000020c 	.word	0x2000020c

08013114 <_malloc_r>:
 8013114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013116:	1ccd      	adds	r5, r1, #3
 8013118:	f025 0503 	bic.w	r5, r5, #3
 801311c:	3508      	adds	r5, #8
 801311e:	2d0c      	cmp	r5, #12
 8013120:	bf38      	it	cc
 8013122:	250c      	movcc	r5, #12
 8013124:	2d00      	cmp	r5, #0
 8013126:	4606      	mov	r6, r0
 8013128:	db01      	blt.n	801312e <_malloc_r+0x1a>
 801312a:	42a9      	cmp	r1, r5
 801312c:	d903      	bls.n	8013136 <_malloc_r+0x22>
 801312e:	230c      	movs	r3, #12
 8013130:	6033      	str	r3, [r6, #0]
 8013132:	2000      	movs	r0, #0
 8013134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013136:	f001 fbcf 	bl	80148d8 <__malloc_lock>
 801313a:	4921      	ldr	r1, [pc, #132]	; (80131c0 <_malloc_r+0xac>)
 801313c:	680a      	ldr	r2, [r1, #0]
 801313e:	4614      	mov	r4, r2
 8013140:	b99c      	cbnz	r4, 801316a <_malloc_r+0x56>
 8013142:	4f20      	ldr	r7, [pc, #128]	; (80131c4 <_malloc_r+0xb0>)
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	b923      	cbnz	r3, 8013152 <_malloc_r+0x3e>
 8013148:	4621      	mov	r1, r4
 801314a:	4630      	mov	r0, r6
 801314c:	f000 ffb6 	bl	80140bc <_sbrk_r>
 8013150:	6038      	str	r0, [r7, #0]
 8013152:	4629      	mov	r1, r5
 8013154:	4630      	mov	r0, r6
 8013156:	f000 ffb1 	bl	80140bc <_sbrk_r>
 801315a:	1c43      	adds	r3, r0, #1
 801315c:	d123      	bne.n	80131a6 <_malloc_r+0x92>
 801315e:	230c      	movs	r3, #12
 8013160:	4630      	mov	r0, r6
 8013162:	6033      	str	r3, [r6, #0]
 8013164:	f001 fbbe 	bl	80148e4 <__malloc_unlock>
 8013168:	e7e3      	b.n	8013132 <_malloc_r+0x1e>
 801316a:	6823      	ldr	r3, [r4, #0]
 801316c:	1b5b      	subs	r3, r3, r5
 801316e:	d417      	bmi.n	80131a0 <_malloc_r+0x8c>
 8013170:	2b0b      	cmp	r3, #11
 8013172:	d903      	bls.n	801317c <_malloc_r+0x68>
 8013174:	6023      	str	r3, [r4, #0]
 8013176:	441c      	add	r4, r3
 8013178:	6025      	str	r5, [r4, #0]
 801317a:	e004      	b.n	8013186 <_malloc_r+0x72>
 801317c:	6863      	ldr	r3, [r4, #4]
 801317e:	42a2      	cmp	r2, r4
 8013180:	bf0c      	ite	eq
 8013182:	600b      	streq	r3, [r1, #0]
 8013184:	6053      	strne	r3, [r2, #4]
 8013186:	4630      	mov	r0, r6
 8013188:	f001 fbac 	bl	80148e4 <__malloc_unlock>
 801318c:	f104 000b 	add.w	r0, r4, #11
 8013190:	1d23      	adds	r3, r4, #4
 8013192:	f020 0007 	bic.w	r0, r0, #7
 8013196:	1ac2      	subs	r2, r0, r3
 8013198:	d0cc      	beq.n	8013134 <_malloc_r+0x20>
 801319a:	1a1b      	subs	r3, r3, r0
 801319c:	50a3      	str	r3, [r4, r2]
 801319e:	e7c9      	b.n	8013134 <_malloc_r+0x20>
 80131a0:	4622      	mov	r2, r4
 80131a2:	6864      	ldr	r4, [r4, #4]
 80131a4:	e7cc      	b.n	8013140 <_malloc_r+0x2c>
 80131a6:	1cc4      	adds	r4, r0, #3
 80131a8:	f024 0403 	bic.w	r4, r4, #3
 80131ac:	42a0      	cmp	r0, r4
 80131ae:	d0e3      	beq.n	8013178 <_malloc_r+0x64>
 80131b0:	1a21      	subs	r1, r4, r0
 80131b2:	4630      	mov	r0, r6
 80131b4:	f000 ff82 	bl	80140bc <_sbrk_r>
 80131b8:	3001      	adds	r0, #1
 80131ba:	d1dd      	bne.n	8013178 <_malloc_r+0x64>
 80131bc:	e7cf      	b.n	801315e <_malloc_r+0x4a>
 80131be:	bf00      	nop
 80131c0:	2000020c 	.word	0x2000020c
 80131c4:	20000210 	.word	0x20000210

080131c8 <__ssputs_r>:
 80131c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131cc:	688e      	ldr	r6, [r1, #8]
 80131ce:	4682      	mov	sl, r0
 80131d0:	429e      	cmp	r6, r3
 80131d2:	460c      	mov	r4, r1
 80131d4:	4690      	mov	r8, r2
 80131d6:	461f      	mov	r7, r3
 80131d8:	d838      	bhi.n	801324c <__ssputs_r+0x84>
 80131da:	898a      	ldrh	r2, [r1, #12]
 80131dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80131e0:	d032      	beq.n	8013248 <__ssputs_r+0x80>
 80131e2:	6825      	ldr	r5, [r4, #0]
 80131e4:	6909      	ldr	r1, [r1, #16]
 80131e6:	3301      	adds	r3, #1
 80131e8:	eba5 0901 	sub.w	r9, r5, r1
 80131ec:	6965      	ldr	r5, [r4, #20]
 80131ee:	444b      	add	r3, r9
 80131f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80131f8:	106d      	asrs	r5, r5, #1
 80131fa:	429d      	cmp	r5, r3
 80131fc:	bf38      	it	cc
 80131fe:	461d      	movcc	r5, r3
 8013200:	0553      	lsls	r3, r2, #21
 8013202:	d531      	bpl.n	8013268 <__ssputs_r+0xa0>
 8013204:	4629      	mov	r1, r5
 8013206:	f7ff ff85 	bl	8013114 <_malloc_r>
 801320a:	4606      	mov	r6, r0
 801320c:	b950      	cbnz	r0, 8013224 <__ssputs_r+0x5c>
 801320e:	230c      	movs	r3, #12
 8013210:	f04f 30ff 	mov.w	r0, #4294967295
 8013214:	f8ca 3000 	str.w	r3, [sl]
 8013218:	89a3      	ldrh	r3, [r4, #12]
 801321a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801321e:	81a3      	strh	r3, [r4, #12]
 8013220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013224:	464a      	mov	r2, r9
 8013226:	6921      	ldr	r1, [r4, #16]
 8013228:	f7ff fc9a 	bl	8012b60 <memcpy>
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013236:	81a3      	strh	r3, [r4, #12]
 8013238:	6126      	str	r6, [r4, #16]
 801323a:	444e      	add	r6, r9
 801323c:	6026      	str	r6, [r4, #0]
 801323e:	463e      	mov	r6, r7
 8013240:	6165      	str	r5, [r4, #20]
 8013242:	eba5 0509 	sub.w	r5, r5, r9
 8013246:	60a5      	str	r5, [r4, #8]
 8013248:	42be      	cmp	r6, r7
 801324a:	d900      	bls.n	801324e <__ssputs_r+0x86>
 801324c:	463e      	mov	r6, r7
 801324e:	4632      	mov	r2, r6
 8013250:	4641      	mov	r1, r8
 8013252:	6820      	ldr	r0, [r4, #0]
 8013254:	f001 fb26 	bl	80148a4 <memmove>
 8013258:	68a3      	ldr	r3, [r4, #8]
 801325a:	6822      	ldr	r2, [r4, #0]
 801325c:	1b9b      	subs	r3, r3, r6
 801325e:	4432      	add	r2, r6
 8013260:	2000      	movs	r0, #0
 8013262:	60a3      	str	r3, [r4, #8]
 8013264:	6022      	str	r2, [r4, #0]
 8013266:	e7db      	b.n	8013220 <__ssputs_r+0x58>
 8013268:	462a      	mov	r2, r5
 801326a:	f001 fb41 	bl	80148f0 <_realloc_r>
 801326e:	4606      	mov	r6, r0
 8013270:	2800      	cmp	r0, #0
 8013272:	d1e1      	bne.n	8013238 <__ssputs_r+0x70>
 8013274:	4650      	mov	r0, sl
 8013276:	6921      	ldr	r1, [r4, #16]
 8013278:	f7ff ff00 	bl	801307c <_free_r>
 801327c:	e7c7      	b.n	801320e <__ssputs_r+0x46>
	...

08013280 <_svfiprintf_r>:
 8013280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013284:	4698      	mov	r8, r3
 8013286:	898b      	ldrh	r3, [r1, #12]
 8013288:	4607      	mov	r7, r0
 801328a:	061b      	lsls	r3, r3, #24
 801328c:	460d      	mov	r5, r1
 801328e:	4614      	mov	r4, r2
 8013290:	b09d      	sub	sp, #116	; 0x74
 8013292:	d50e      	bpl.n	80132b2 <_svfiprintf_r+0x32>
 8013294:	690b      	ldr	r3, [r1, #16]
 8013296:	b963      	cbnz	r3, 80132b2 <_svfiprintf_r+0x32>
 8013298:	2140      	movs	r1, #64	; 0x40
 801329a:	f7ff ff3b 	bl	8013114 <_malloc_r>
 801329e:	6028      	str	r0, [r5, #0]
 80132a0:	6128      	str	r0, [r5, #16]
 80132a2:	b920      	cbnz	r0, 80132ae <_svfiprintf_r+0x2e>
 80132a4:	230c      	movs	r3, #12
 80132a6:	603b      	str	r3, [r7, #0]
 80132a8:	f04f 30ff 	mov.w	r0, #4294967295
 80132ac:	e0d1      	b.n	8013452 <_svfiprintf_r+0x1d2>
 80132ae:	2340      	movs	r3, #64	; 0x40
 80132b0:	616b      	str	r3, [r5, #20]
 80132b2:	2300      	movs	r3, #0
 80132b4:	9309      	str	r3, [sp, #36]	; 0x24
 80132b6:	2320      	movs	r3, #32
 80132b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132bc:	2330      	movs	r3, #48	; 0x30
 80132be:	f04f 0901 	mov.w	r9, #1
 80132c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80132c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801346c <_svfiprintf_r+0x1ec>
 80132ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132ce:	4623      	mov	r3, r4
 80132d0:	469a      	mov	sl, r3
 80132d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132d6:	b10a      	cbz	r2, 80132dc <_svfiprintf_r+0x5c>
 80132d8:	2a25      	cmp	r2, #37	; 0x25
 80132da:	d1f9      	bne.n	80132d0 <_svfiprintf_r+0x50>
 80132dc:	ebba 0b04 	subs.w	fp, sl, r4
 80132e0:	d00b      	beq.n	80132fa <_svfiprintf_r+0x7a>
 80132e2:	465b      	mov	r3, fp
 80132e4:	4622      	mov	r2, r4
 80132e6:	4629      	mov	r1, r5
 80132e8:	4638      	mov	r0, r7
 80132ea:	f7ff ff6d 	bl	80131c8 <__ssputs_r>
 80132ee:	3001      	adds	r0, #1
 80132f0:	f000 80aa 	beq.w	8013448 <_svfiprintf_r+0x1c8>
 80132f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132f6:	445a      	add	r2, fp
 80132f8:	9209      	str	r2, [sp, #36]	; 0x24
 80132fa:	f89a 3000 	ldrb.w	r3, [sl]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f000 80a2 	beq.w	8013448 <_svfiprintf_r+0x1c8>
 8013304:	2300      	movs	r3, #0
 8013306:	f04f 32ff 	mov.w	r2, #4294967295
 801330a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801330e:	f10a 0a01 	add.w	sl, sl, #1
 8013312:	9304      	str	r3, [sp, #16]
 8013314:	9307      	str	r3, [sp, #28]
 8013316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801331a:	931a      	str	r3, [sp, #104]	; 0x68
 801331c:	4654      	mov	r4, sl
 801331e:	2205      	movs	r2, #5
 8013320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013324:	4851      	ldr	r0, [pc, #324]	; (801346c <_svfiprintf_r+0x1ec>)
 8013326:	f001 faaf 	bl	8014888 <memchr>
 801332a:	9a04      	ldr	r2, [sp, #16]
 801332c:	b9d8      	cbnz	r0, 8013366 <_svfiprintf_r+0xe6>
 801332e:	06d0      	lsls	r0, r2, #27
 8013330:	bf44      	itt	mi
 8013332:	2320      	movmi	r3, #32
 8013334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013338:	0711      	lsls	r1, r2, #28
 801333a:	bf44      	itt	mi
 801333c:	232b      	movmi	r3, #43	; 0x2b
 801333e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013342:	f89a 3000 	ldrb.w	r3, [sl]
 8013346:	2b2a      	cmp	r3, #42	; 0x2a
 8013348:	d015      	beq.n	8013376 <_svfiprintf_r+0xf6>
 801334a:	4654      	mov	r4, sl
 801334c:	2000      	movs	r0, #0
 801334e:	f04f 0c0a 	mov.w	ip, #10
 8013352:	9a07      	ldr	r2, [sp, #28]
 8013354:	4621      	mov	r1, r4
 8013356:	f811 3b01 	ldrb.w	r3, [r1], #1
 801335a:	3b30      	subs	r3, #48	; 0x30
 801335c:	2b09      	cmp	r3, #9
 801335e:	d94e      	bls.n	80133fe <_svfiprintf_r+0x17e>
 8013360:	b1b0      	cbz	r0, 8013390 <_svfiprintf_r+0x110>
 8013362:	9207      	str	r2, [sp, #28]
 8013364:	e014      	b.n	8013390 <_svfiprintf_r+0x110>
 8013366:	eba0 0308 	sub.w	r3, r0, r8
 801336a:	fa09 f303 	lsl.w	r3, r9, r3
 801336e:	4313      	orrs	r3, r2
 8013370:	46a2      	mov	sl, r4
 8013372:	9304      	str	r3, [sp, #16]
 8013374:	e7d2      	b.n	801331c <_svfiprintf_r+0x9c>
 8013376:	9b03      	ldr	r3, [sp, #12]
 8013378:	1d19      	adds	r1, r3, #4
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	9103      	str	r1, [sp, #12]
 801337e:	2b00      	cmp	r3, #0
 8013380:	bfbb      	ittet	lt
 8013382:	425b      	neglt	r3, r3
 8013384:	f042 0202 	orrlt.w	r2, r2, #2
 8013388:	9307      	strge	r3, [sp, #28]
 801338a:	9307      	strlt	r3, [sp, #28]
 801338c:	bfb8      	it	lt
 801338e:	9204      	strlt	r2, [sp, #16]
 8013390:	7823      	ldrb	r3, [r4, #0]
 8013392:	2b2e      	cmp	r3, #46	; 0x2e
 8013394:	d10c      	bne.n	80133b0 <_svfiprintf_r+0x130>
 8013396:	7863      	ldrb	r3, [r4, #1]
 8013398:	2b2a      	cmp	r3, #42	; 0x2a
 801339a:	d135      	bne.n	8013408 <_svfiprintf_r+0x188>
 801339c:	9b03      	ldr	r3, [sp, #12]
 801339e:	3402      	adds	r4, #2
 80133a0:	1d1a      	adds	r2, r3, #4
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	9203      	str	r2, [sp, #12]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	bfb8      	it	lt
 80133aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80133ae:	9305      	str	r3, [sp, #20]
 80133b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801347c <_svfiprintf_r+0x1fc>
 80133b4:	2203      	movs	r2, #3
 80133b6:	4650      	mov	r0, sl
 80133b8:	7821      	ldrb	r1, [r4, #0]
 80133ba:	f001 fa65 	bl	8014888 <memchr>
 80133be:	b140      	cbz	r0, 80133d2 <_svfiprintf_r+0x152>
 80133c0:	2340      	movs	r3, #64	; 0x40
 80133c2:	eba0 000a 	sub.w	r0, r0, sl
 80133c6:	fa03 f000 	lsl.w	r0, r3, r0
 80133ca:	9b04      	ldr	r3, [sp, #16]
 80133cc:	3401      	adds	r4, #1
 80133ce:	4303      	orrs	r3, r0
 80133d0:	9304      	str	r3, [sp, #16]
 80133d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d6:	2206      	movs	r2, #6
 80133d8:	4825      	ldr	r0, [pc, #148]	; (8013470 <_svfiprintf_r+0x1f0>)
 80133da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133de:	f001 fa53 	bl	8014888 <memchr>
 80133e2:	2800      	cmp	r0, #0
 80133e4:	d038      	beq.n	8013458 <_svfiprintf_r+0x1d8>
 80133e6:	4b23      	ldr	r3, [pc, #140]	; (8013474 <_svfiprintf_r+0x1f4>)
 80133e8:	bb1b      	cbnz	r3, 8013432 <_svfiprintf_r+0x1b2>
 80133ea:	9b03      	ldr	r3, [sp, #12]
 80133ec:	3307      	adds	r3, #7
 80133ee:	f023 0307 	bic.w	r3, r3, #7
 80133f2:	3308      	adds	r3, #8
 80133f4:	9303      	str	r3, [sp, #12]
 80133f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133f8:	4433      	add	r3, r6
 80133fa:	9309      	str	r3, [sp, #36]	; 0x24
 80133fc:	e767      	b.n	80132ce <_svfiprintf_r+0x4e>
 80133fe:	460c      	mov	r4, r1
 8013400:	2001      	movs	r0, #1
 8013402:	fb0c 3202 	mla	r2, ip, r2, r3
 8013406:	e7a5      	b.n	8013354 <_svfiprintf_r+0xd4>
 8013408:	2300      	movs	r3, #0
 801340a:	f04f 0c0a 	mov.w	ip, #10
 801340e:	4619      	mov	r1, r3
 8013410:	3401      	adds	r4, #1
 8013412:	9305      	str	r3, [sp, #20]
 8013414:	4620      	mov	r0, r4
 8013416:	f810 2b01 	ldrb.w	r2, [r0], #1
 801341a:	3a30      	subs	r2, #48	; 0x30
 801341c:	2a09      	cmp	r2, #9
 801341e:	d903      	bls.n	8013428 <_svfiprintf_r+0x1a8>
 8013420:	2b00      	cmp	r3, #0
 8013422:	d0c5      	beq.n	80133b0 <_svfiprintf_r+0x130>
 8013424:	9105      	str	r1, [sp, #20]
 8013426:	e7c3      	b.n	80133b0 <_svfiprintf_r+0x130>
 8013428:	4604      	mov	r4, r0
 801342a:	2301      	movs	r3, #1
 801342c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013430:	e7f0      	b.n	8013414 <_svfiprintf_r+0x194>
 8013432:	ab03      	add	r3, sp, #12
 8013434:	9300      	str	r3, [sp, #0]
 8013436:	462a      	mov	r2, r5
 8013438:	4638      	mov	r0, r7
 801343a:	4b0f      	ldr	r3, [pc, #60]	; (8013478 <_svfiprintf_r+0x1f8>)
 801343c:	a904      	add	r1, sp, #16
 801343e:	f3af 8000 	nop.w
 8013442:	1c42      	adds	r2, r0, #1
 8013444:	4606      	mov	r6, r0
 8013446:	d1d6      	bne.n	80133f6 <_svfiprintf_r+0x176>
 8013448:	89ab      	ldrh	r3, [r5, #12]
 801344a:	065b      	lsls	r3, r3, #25
 801344c:	f53f af2c 	bmi.w	80132a8 <_svfiprintf_r+0x28>
 8013450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013452:	b01d      	add	sp, #116	; 0x74
 8013454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013458:	ab03      	add	r3, sp, #12
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	462a      	mov	r2, r5
 801345e:	4638      	mov	r0, r7
 8013460:	4b05      	ldr	r3, [pc, #20]	; (8013478 <_svfiprintf_r+0x1f8>)
 8013462:	a904      	add	r1, sp, #16
 8013464:	f000 fba8 	bl	8013bb8 <_printf_i>
 8013468:	e7eb      	b.n	8013442 <_svfiprintf_r+0x1c2>
 801346a:	bf00      	nop
 801346c:	08015eda 	.word	0x08015eda
 8013470:	08015ee4 	.word	0x08015ee4
 8013474:	00000000 	.word	0x00000000
 8013478:	080131c9 	.word	0x080131c9
 801347c:	08015ee0 	.word	0x08015ee0

08013480 <_sungetc_r>:
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	1c4b      	adds	r3, r1, #1
 8013484:	4614      	mov	r4, r2
 8013486:	d103      	bne.n	8013490 <_sungetc_r+0x10>
 8013488:	f04f 35ff 	mov.w	r5, #4294967295
 801348c:	4628      	mov	r0, r5
 801348e:	bd38      	pop	{r3, r4, r5, pc}
 8013490:	8993      	ldrh	r3, [r2, #12]
 8013492:	b2cd      	uxtb	r5, r1
 8013494:	f023 0320 	bic.w	r3, r3, #32
 8013498:	8193      	strh	r3, [r2, #12]
 801349a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801349c:	6852      	ldr	r2, [r2, #4]
 801349e:	b18b      	cbz	r3, 80134c4 <_sungetc_r+0x44>
 80134a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80134a2:	4293      	cmp	r3, r2
 80134a4:	dd08      	ble.n	80134b8 <_sungetc_r+0x38>
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	1e5a      	subs	r2, r3, #1
 80134aa:	6022      	str	r2, [r4, #0]
 80134ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80134b0:	6863      	ldr	r3, [r4, #4]
 80134b2:	3301      	adds	r3, #1
 80134b4:	6063      	str	r3, [r4, #4]
 80134b6:	e7e9      	b.n	801348c <_sungetc_r+0xc>
 80134b8:	4621      	mov	r1, r4
 80134ba:	f000 fec7 	bl	801424c <__submore>
 80134be:	2800      	cmp	r0, #0
 80134c0:	d0f1      	beq.n	80134a6 <_sungetc_r+0x26>
 80134c2:	e7e1      	b.n	8013488 <_sungetc_r+0x8>
 80134c4:	6921      	ldr	r1, [r4, #16]
 80134c6:	6823      	ldr	r3, [r4, #0]
 80134c8:	b151      	cbz	r1, 80134e0 <_sungetc_r+0x60>
 80134ca:	4299      	cmp	r1, r3
 80134cc:	d208      	bcs.n	80134e0 <_sungetc_r+0x60>
 80134ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80134d2:	42a9      	cmp	r1, r5
 80134d4:	d104      	bne.n	80134e0 <_sungetc_r+0x60>
 80134d6:	3b01      	subs	r3, #1
 80134d8:	3201      	adds	r2, #1
 80134da:	6023      	str	r3, [r4, #0]
 80134dc:	6062      	str	r2, [r4, #4]
 80134de:	e7d5      	b.n	801348c <_sungetc_r+0xc>
 80134e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80134e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134e8:	6363      	str	r3, [r4, #52]	; 0x34
 80134ea:	2303      	movs	r3, #3
 80134ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80134ee:	4623      	mov	r3, r4
 80134f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80134f4:	6023      	str	r3, [r4, #0]
 80134f6:	2301      	movs	r3, #1
 80134f8:	e7dc      	b.n	80134b4 <_sungetc_r+0x34>

080134fa <__ssrefill_r>:
 80134fa:	b510      	push	{r4, lr}
 80134fc:	460c      	mov	r4, r1
 80134fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013500:	b169      	cbz	r1, 801351e <__ssrefill_r+0x24>
 8013502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013506:	4299      	cmp	r1, r3
 8013508:	d001      	beq.n	801350e <__ssrefill_r+0x14>
 801350a:	f7ff fdb7 	bl	801307c <_free_r>
 801350e:	2000      	movs	r0, #0
 8013510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013512:	6360      	str	r0, [r4, #52]	; 0x34
 8013514:	6063      	str	r3, [r4, #4]
 8013516:	b113      	cbz	r3, 801351e <__ssrefill_r+0x24>
 8013518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801351a:	6023      	str	r3, [r4, #0]
 801351c:	bd10      	pop	{r4, pc}
 801351e:	6923      	ldr	r3, [r4, #16]
 8013520:	f04f 30ff 	mov.w	r0, #4294967295
 8013524:	6023      	str	r3, [r4, #0]
 8013526:	2300      	movs	r3, #0
 8013528:	6063      	str	r3, [r4, #4]
 801352a:	89a3      	ldrh	r3, [r4, #12]
 801352c:	f043 0320 	orr.w	r3, r3, #32
 8013530:	81a3      	strh	r3, [r4, #12]
 8013532:	e7f3      	b.n	801351c <__ssrefill_r+0x22>

08013534 <__ssvfiscanf_r>:
 8013534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	460c      	mov	r4, r1
 801353a:	2100      	movs	r1, #0
 801353c:	4606      	mov	r6, r0
 801353e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013542:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013546:	49b3      	ldr	r1, [pc, #716]	; (8013814 <__ssvfiscanf_r+0x2e0>)
 8013548:	f10d 0804 	add.w	r8, sp, #4
 801354c:	91a0      	str	r1, [sp, #640]	; 0x280
 801354e:	49b2      	ldr	r1, [pc, #712]	; (8013818 <__ssvfiscanf_r+0x2e4>)
 8013550:	4fb2      	ldr	r7, [pc, #712]	; (801381c <__ssvfiscanf_r+0x2e8>)
 8013552:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8013820 <__ssvfiscanf_r+0x2ec>
 8013556:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801355a:	91a1      	str	r1, [sp, #644]	; 0x284
 801355c:	9300      	str	r3, [sp, #0]
 801355e:	f892 a000 	ldrb.w	sl, [r2]
 8013562:	f1ba 0f00 	cmp.w	sl, #0
 8013566:	f000 8153 	beq.w	8013810 <__ssvfiscanf_r+0x2dc>
 801356a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801356e:	1c55      	adds	r5, r2, #1
 8013570:	f013 0308 	ands.w	r3, r3, #8
 8013574:	d019      	beq.n	80135aa <__ssvfiscanf_r+0x76>
 8013576:	6863      	ldr	r3, [r4, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	dd0f      	ble.n	801359c <__ssvfiscanf_r+0x68>
 801357c:	6823      	ldr	r3, [r4, #0]
 801357e:	781a      	ldrb	r2, [r3, #0]
 8013580:	5cba      	ldrb	r2, [r7, r2]
 8013582:	0712      	lsls	r2, r2, #28
 8013584:	d401      	bmi.n	801358a <__ssvfiscanf_r+0x56>
 8013586:	462a      	mov	r2, r5
 8013588:	e7e9      	b.n	801355e <__ssvfiscanf_r+0x2a>
 801358a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801358c:	3301      	adds	r3, #1
 801358e:	3201      	adds	r2, #1
 8013590:	9245      	str	r2, [sp, #276]	; 0x114
 8013592:	6862      	ldr	r2, [r4, #4]
 8013594:	6023      	str	r3, [r4, #0]
 8013596:	3a01      	subs	r2, #1
 8013598:	6062      	str	r2, [r4, #4]
 801359a:	e7ec      	b.n	8013576 <__ssvfiscanf_r+0x42>
 801359c:	4621      	mov	r1, r4
 801359e:	4630      	mov	r0, r6
 80135a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80135a2:	4798      	blx	r3
 80135a4:	2800      	cmp	r0, #0
 80135a6:	d0e9      	beq.n	801357c <__ssvfiscanf_r+0x48>
 80135a8:	e7ed      	b.n	8013586 <__ssvfiscanf_r+0x52>
 80135aa:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80135ae:	f040 8086 	bne.w	80136be <__ssvfiscanf_r+0x18a>
 80135b2:	9341      	str	r3, [sp, #260]	; 0x104
 80135b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80135b6:	7853      	ldrb	r3, [r2, #1]
 80135b8:	2b2a      	cmp	r3, #42	; 0x2a
 80135ba:	bf04      	itt	eq
 80135bc:	2310      	moveq	r3, #16
 80135be:	1c95      	addeq	r5, r2, #2
 80135c0:	f04f 020a 	mov.w	r2, #10
 80135c4:	bf08      	it	eq
 80135c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80135c8:	46ab      	mov	fp, r5
 80135ca:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80135ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80135d2:	2b09      	cmp	r3, #9
 80135d4:	d91d      	bls.n	8013612 <__ssvfiscanf_r+0xde>
 80135d6:	2203      	movs	r2, #3
 80135d8:	4891      	ldr	r0, [pc, #580]	; (8013820 <__ssvfiscanf_r+0x2ec>)
 80135da:	f001 f955 	bl	8014888 <memchr>
 80135de:	b140      	cbz	r0, 80135f2 <__ssvfiscanf_r+0xbe>
 80135e0:	2301      	movs	r3, #1
 80135e2:	465d      	mov	r5, fp
 80135e4:	eba0 0009 	sub.w	r0, r0, r9
 80135e8:	fa03 f000 	lsl.w	r0, r3, r0
 80135ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80135ee:	4318      	orrs	r0, r3
 80135f0:	9041      	str	r0, [sp, #260]	; 0x104
 80135f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80135f6:	2b78      	cmp	r3, #120	; 0x78
 80135f8:	d806      	bhi.n	8013608 <__ssvfiscanf_r+0xd4>
 80135fa:	2b57      	cmp	r3, #87	; 0x57
 80135fc:	d810      	bhi.n	8013620 <__ssvfiscanf_r+0xec>
 80135fe:	2b25      	cmp	r3, #37	; 0x25
 8013600:	d05d      	beq.n	80136be <__ssvfiscanf_r+0x18a>
 8013602:	d857      	bhi.n	80136b4 <__ssvfiscanf_r+0x180>
 8013604:	2b00      	cmp	r3, #0
 8013606:	d075      	beq.n	80136f4 <__ssvfiscanf_r+0x1c0>
 8013608:	2303      	movs	r3, #3
 801360a:	9347      	str	r3, [sp, #284]	; 0x11c
 801360c:	230a      	movs	r3, #10
 801360e:	9342      	str	r3, [sp, #264]	; 0x108
 8013610:	e082      	b.n	8013718 <__ssvfiscanf_r+0x1e4>
 8013612:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013614:	465d      	mov	r5, fp
 8013616:	fb02 1303 	mla	r3, r2, r3, r1
 801361a:	3b30      	subs	r3, #48	; 0x30
 801361c:	9343      	str	r3, [sp, #268]	; 0x10c
 801361e:	e7d3      	b.n	80135c8 <__ssvfiscanf_r+0x94>
 8013620:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013624:	2a20      	cmp	r2, #32
 8013626:	d8ef      	bhi.n	8013608 <__ssvfiscanf_r+0xd4>
 8013628:	a101      	add	r1, pc, #4	; (adr r1, 8013630 <__ssvfiscanf_r+0xfc>)
 801362a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801362e:	bf00      	nop
 8013630:	08013703 	.word	0x08013703
 8013634:	08013609 	.word	0x08013609
 8013638:	08013609 	.word	0x08013609
 801363c:	08013761 	.word	0x08013761
 8013640:	08013609 	.word	0x08013609
 8013644:	08013609 	.word	0x08013609
 8013648:	08013609 	.word	0x08013609
 801364c:	08013609 	.word	0x08013609
 8013650:	08013609 	.word	0x08013609
 8013654:	08013609 	.word	0x08013609
 8013658:	08013609 	.word	0x08013609
 801365c:	08013777 	.word	0x08013777
 8013660:	0801374d 	.word	0x0801374d
 8013664:	080136bb 	.word	0x080136bb
 8013668:	080136bb 	.word	0x080136bb
 801366c:	080136bb 	.word	0x080136bb
 8013670:	08013609 	.word	0x08013609
 8013674:	08013751 	.word	0x08013751
 8013678:	08013609 	.word	0x08013609
 801367c:	08013609 	.word	0x08013609
 8013680:	08013609 	.word	0x08013609
 8013684:	08013609 	.word	0x08013609
 8013688:	08013787 	.word	0x08013787
 801368c:	08013759 	.word	0x08013759
 8013690:	080136fb 	.word	0x080136fb
 8013694:	08013609 	.word	0x08013609
 8013698:	08013609 	.word	0x08013609
 801369c:	08013783 	.word	0x08013783
 80136a0:	08013609 	.word	0x08013609
 80136a4:	0801374d 	.word	0x0801374d
 80136a8:	08013609 	.word	0x08013609
 80136ac:	08013609 	.word	0x08013609
 80136b0:	08013703 	.word	0x08013703
 80136b4:	3b45      	subs	r3, #69	; 0x45
 80136b6:	2b02      	cmp	r3, #2
 80136b8:	d8a6      	bhi.n	8013608 <__ssvfiscanf_r+0xd4>
 80136ba:	2305      	movs	r3, #5
 80136bc:	e02b      	b.n	8013716 <__ssvfiscanf_r+0x1e2>
 80136be:	6863      	ldr	r3, [r4, #4]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	dd0d      	ble.n	80136e0 <__ssvfiscanf_r+0x1ac>
 80136c4:	6823      	ldr	r3, [r4, #0]
 80136c6:	781a      	ldrb	r2, [r3, #0]
 80136c8:	4552      	cmp	r2, sl
 80136ca:	f040 80a1 	bne.w	8013810 <__ssvfiscanf_r+0x2dc>
 80136ce:	3301      	adds	r3, #1
 80136d0:	6862      	ldr	r2, [r4, #4]
 80136d2:	6023      	str	r3, [r4, #0]
 80136d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80136d6:	3a01      	subs	r2, #1
 80136d8:	3301      	adds	r3, #1
 80136da:	6062      	str	r2, [r4, #4]
 80136dc:	9345      	str	r3, [sp, #276]	; 0x114
 80136de:	e752      	b.n	8013586 <__ssvfiscanf_r+0x52>
 80136e0:	4621      	mov	r1, r4
 80136e2:	4630      	mov	r0, r6
 80136e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80136e6:	4798      	blx	r3
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d0eb      	beq.n	80136c4 <__ssvfiscanf_r+0x190>
 80136ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80136ee:	2800      	cmp	r0, #0
 80136f0:	f040 8084 	bne.w	80137fc <__ssvfiscanf_r+0x2c8>
 80136f4:	f04f 30ff 	mov.w	r0, #4294967295
 80136f8:	e086      	b.n	8013808 <__ssvfiscanf_r+0x2d4>
 80136fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80136fc:	f042 0220 	orr.w	r2, r2, #32
 8013700:	9241      	str	r2, [sp, #260]	; 0x104
 8013702:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013708:	9241      	str	r2, [sp, #260]	; 0x104
 801370a:	2210      	movs	r2, #16
 801370c:	2b6f      	cmp	r3, #111	; 0x6f
 801370e:	bf34      	ite	cc
 8013710:	2303      	movcc	r3, #3
 8013712:	2304      	movcs	r3, #4
 8013714:	9242      	str	r2, [sp, #264]	; 0x108
 8013716:	9347      	str	r3, [sp, #284]	; 0x11c
 8013718:	6863      	ldr	r3, [r4, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	dd41      	ble.n	80137a2 <__ssvfiscanf_r+0x26e>
 801371e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013720:	0659      	lsls	r1, r3, #25
 8013722:	d404      	bmi.n	801372e <__ssvfiscanf_r+0x1fa>
 8013724:	6823      	ldr	r3, [r4, #0]
 8013726:	781a      	ldrb	r2, [r3, #0]
 8013728:	5cba      	ldrb	r2, [r7, r2]
 801372a:	0712      	lsls	r2, r2, #28
 801372c:	d440      	bmi.n	80137b0 <__ssvfiscanf_r+0x27c>
 801372e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013730:	2b02      	cmp	r3, #2
 8013732:	dc4f      	bgt.n	80137d4 <__ssvfiscanf_r+0x2a0>
 8013734:	466b      	mov	r3, sp
 8013736:	4622      	mov	r2, r4
 8013738:	4630      	mov	r0, r6
 801373a:	a941      	add	r1, sp, #260	; 0x104
 801373c:	f000 fb62 	bl	8013e04 <_scanf_chars>
 8013740:	2801      	cmp	r0, #1
 8013742:	d065      	beq.n	8013810 <__ssvfiscanf_r+0x2dc>
 8013744:	2802      	cmp	r0, #2
 8013746:	f47f af1e 	bne.w	8013586 <__ssvfiscanf_r+0x52>
 801374a:	e7cf      	b.n	80136ec <__ssvfiscanf_r+0x1b8>
 801374c:	220a      	movs	r2, #10
 801374e:	e7dd      	b.n	801370c <__ssvfiscanf_r+0x1d8>
 8013750:	2300      	movs	r3, #0
 8013752:	9342      	str	r3, [sp, #264]	; 0x108
 8013754:	2303      	movs	r3, #3
 8013756:	e7de      	b.n	8013716 <__ssvfiscanf_r+0x1e2>
 8013758:	2308      	movs	r3, #8
 801375a:	9342      	str	r3, [sp, #264]	; 0x108
 801375c:	2304      	movs	r3, #4
 801375e:	e7da      	b.n	8013716 <__ssvfiscanf_r+0x1e2>
 8013760:	4629      	mov	r1, r5
 8013762:	4640      	mov	r0, r8
 8013764:	f000 fcba 	bl	80140dc <__sccl>
 8013768:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801376a:	4605      	mov	r5, r0
 801376c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013770:	9341      	str	r3, [sp, #260]	; 0x104
 8013772:	2301      	movs	r3, #1
 8013774:	e7cf      	b.n	8013716 <__ssvfiscanf_r+0x1e2>
 8013776:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801377c:	9341      	str	r3, [sp, #260]	; 0x104
 801377e:	2300      	movs	r3, #0
 8013780:	e7c9      	b.n	8013716 <__ssvfiscanf_r+0x1e2>
 8013782:	2302      	movs	r3, #2
 8013784:	e7c7      	b.n	8013716 <__ssvfiscanf_r+0x1e2>
 8013786:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013788:	06c3      	lsls	r3, r0, #27
 801378a:	f53f aefc 	bmi.w	8013586 <__ssvfiscanf_r+0x52>
 801378e:	9b00      	ldr	r3, [sp, #0]
 8013790:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013792:	1d19      	adds	r1, r3, #4
 8013794:	9100      	str	r1, [sp, #0]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	07c0      	lsls	r0, r0, #31
 801379a:	bf4c      	ite	mi
 801379c:	801a      	strhmi	r2, [r3, #0]
 801379e:	601a      	strpl	r2, [r3, #0]
 80137a0:	e6f1      	b.n	8013586 <__ssvfiscanf_r+0x52>
 80137a2:	4621      	mov	r1, r4
 80137a4:	4630      	mov	r0, r6
 80137a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80137a8:	4798      	blx	r3
 80137aa:	2800      	cmp	r0, #0
 80137ac:	d0b7      	beq.n	801371e <__ssvfiscanf_r+0x1ea>
 80137ae:	e79d      	b.n	80136ec <__ssvfiscanf_r+0x1b8>
 80137b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80137b2:	3201      	adds	r2, #1
 80137b4:	9245      	str	r2, [sp, #276]	; 0x114
 80137b6:	6862      	ldr	r2, [r4, #4]
 80137b8:	3a01      	subs	r2, #1
 80137ba:	2a00      	cmp	r2, #0
 80137bc:	6062      	str	r2, [r4, #4]
 80137be:	dd02      	ble.n	80137c6 <__ssvfiscanf_r+0x292>
 80137c0:	3301      	adds	r3, #1
 80137c2:	6023      	str	r3, [r4, #0]
 80137c4:	e7ae      	b.n	8013724 <__ssvfiscanf_r+0x1f0>
 80137c6:	4621      	mov	r1, r4
 80137c8:	4630      	mov	r0, r6
 80137ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80137cc:	4798      	blx	r3
 80137ce:	2800      	cmp	r0, #0
 80137d0:	d0a8      	beq.n	8013724 <__ssvfiscanf_r+0x1f0>
 80137d2:	e78b      	b.n	80136ec <__ssvfiscanf_r+0x1b8>
 80137d4:	2b04      	cmp	r3, #4
 80137d6:	dc06      	bgt.n	80137e6 <__ssvfiscanf_r+0x2b2>
 80137d8:	466b      	mov	r3, sp
 80137da:	4622      	mov	r2, r4
 80137dc:	4630      	mov	r0, r6
 80137de:	a941      	add	r1, sp, #260	; 0x104
 80137e0:	f000 fb68 	bl	8013eb4 <_scanf_i>
 80137e4:	e7ac      	b.n	8013740 <__ssvfiscanf_r+0x20c>
 80137e6:	4b0f      	ldr	r3, [pc, #60]	; (8013824 <__ssvfiscanf_r+0x2f0>)
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	f43f aecc 	beq.w	8013586 <__ssvfiscanf_r+0x52>
 80137ee:	466b      	mov	r3, sp
 80137f0:	4622      	mov	r2, r4
 80137f2:	4630      	mov	r0, r6
 80137f4:	a941      	add	r1, sp, #260	; 0x104
 80137f6:	f3af 8000 	nop.w
 80137fa:	e7a1      	b.n	8013740 <__ssvfiscanf_r+0x20c>
 80137fc:	89a3      	ldrh	r3, [r4, #12]
 80137fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013802:	bf18      	it	ne
 8013804:	f04f 30ff 	movne.w	r0, #4294967295
 8013808:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013810:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013812:	e7f9      	b.n	8013808 <__ssvfiscanf_r+0x2d4>
 8013814:	08013481 	.word	0x08013481
 8013818:	080134fb 	.word	0x080134fb
 801381c:	08015dda 	.word	0x08015dda
 8013820:	08015ee0 	.word	0x08015ee0
 8013824:	00000000 	.word	0x00000000

08013828 <__sfputc_r>:
 8013828:	6893      	ldr	r3, [r2, #8]
 801382a:	b410      	push	{r4}
 801382c:	3b01      	subs	r3, #1
 801382e:	2b00      	cmp	r3, #0
 8013830:	6093      	str	r3, [r2, #8]
 8013832:	da07      	bge.n	8013844 <__sfputc_r+0x1c>
 8013834:	6994      	ldr	r4, [r2, #24]
 8013836:	42a3      	cmp	r3, r4
 8013838:	db01      	blt.n	801383e <__sfputc_r+0x16>
 801383a:	290a      	cmp	r1, #10
 801383c:	d102      	bne.n	8013844 <__sfputc_r+0x1c>
 801383e:	bc10      	pop	{r4}
 8013840:	f000 bd3c 	b.w	80142bc <__swbuf_r>
 8013844:	6813      	ldr	r3, [r2, #0]
 8013846:	1c58      	adds	r0, r3, #1
 8013848:	6010      	str	r0, [r2, #0]
 801384a:	7019      	strb	r1, [r3, #0]
 801384c:	4608      	mov	r0, r1
 801384e:	bc10      	pop	{r4}
 8013850:	4770      	bx	lr

08013852 <__sfputs_r>:
 8013852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013854:	4606      	mov	r6, r0
 8013856:	460f      	mov	r7, r1
 8013858:	4614      	mov	r4, r2
 801385a:	18d5      	adds	r5, r2, r3
 801385c:	42ac      	cmp	r4, r5
 801385e:	d101      	bne.n	8013864 <__sfputs_r+0x12>
 8013860:	2000      	movs	r0, #0
 8013862:	e007      	b.n	8013874 <__sfputs_r+0x22>
 8013864:	463a      	mov	r2, r7
 8013866:	4630      	mov	r0, r6
 8013868:	f814 1b01 	ldrb.w	r1, [r4], #1
 801386c:	f7ff ffdc 	bl	8013828 <__sfputc_r>
 8013870:	1c43      	adds	r3, r0, #1
 8013872:	d1f3      	bne.n	801385c <__sfputs_r+0xa>
 8013874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013878 <_vfiprintf_r>:
 8013878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801387c:	460d      	mov	r5, r1
 801387e:	4614      	mov	r4, r2
 8013880:	4698      	mov	r8, r3
 8013882:	4606      	mov	r6, r0
 8013884:	b09d      	sub	sp, #116	; 0x74
 8013886:	b118      	cbz	r0, 8013890 <_vfiprintf_r+0x18>
 8013888:	6983      	ldr	r3, [r0, #24]
 801388a:	b90b      	cbnz	r3, 8013890 <_vfiprintf_r+0x18>
 801388c:	f000 fef8 	bl	8014680 <__sinit>
 8013890:	4b89      	ldr	r3, [pc, #548]	; (8013ab8 <_vfiprintf_r+0x240>)
 8013892:	429d      	cmp	r5, r3
 8013894:	d11b      	bne.n	80138ce <_vfiprintf_r+0x56>
 8013896:	6875      	ldr	r5, [r6, #4]
 8013898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801389a:	07d9      	lsls	r1, r3, #31
 801389c:	d405      	bmi.n	80138aa <_vfiprintf_r+0x32>
 801389e:	89ab      	ldrh	r3, [r5, #12]
 80138a0:	059a      	lsls	r2, r3, #22
 80138a2:	d402      	bmi.n	80138aa <_vfiprintf_r+0x32>
 80138a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138a6:	f000 ff89 	bl	80147bc <__retarget_lock_acquire_recursive>
 80138aa:	89ab      	ldrh	r3, [r5, #12]
 80138ac:	071b      	lsls	r3, r3, #28
 80138ae:	d501      	bpl.n	80138b4 <_vfiprintf_r+0x3c>
 80138b0:	692b      	ldr	r3, [r5, #16]
 80138b2:	b9eb      	cbnz	r3, 80138f0 <_vfiprintf_r+0x78>
 80138b4:	4629      	mov	r1, r5
 80138b6:	4630      	mov	r0, r6
 80138b8:	f000 fd52 	bl	8014360 <__swsetup_r>
 80138bc:	b1c0      	cbz	r0, 80138f0 <_vfiprintf_r+0x78>
 80138be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138c0:	07dc      	lsls	r4, r3, #31
 80138c2:	d50e      	bpl.n	80138e2 <_vfiprintf_r+0x6a>
 80138c4:	f04f 30ff 	mov.w	r0, #4294967295
 80138c8:	b01d      	add	sp, #116	; 0x74
 80138ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ce:	4b7b      	ldr	r3, [pc, #492]	; (8013abc <_vfiprintf_r+0x244>)
 80138d0:	429d      	cmp	r5, r3
 80138d2:	d101      	bne.n	80138d8 <_vfiprintf_r+0x60>
 80138d4:	68b5      	ldr	r5, [r6, #8]
 80138d6:	e7df      	b.n	8013898 <_vfiprintf_r+0x20>
 80138d8:	4b79      	ldr	r3, [pc, #484]	; (8013ac0 <_vfiprintf_r+0x248>)
 80138da:	429d      	cmp	r5, r3
 80138dc:	bf08      	it	eq
 80138de:	68f5      	ldreq	r5, [r6, #12]
 80138e0:	e7da      	b.n	8013898 <_vfiprintf_r+0x20>
 80138e2:	89ab      	ldrh	r3, [r5, #12]
 80138e4:	0598      	lsls	r0, r3, #22
 80138e6:	d4ed      	bmi.n	80138c4 <_vfiprintf_r+0x4c>
 80138e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138ea:	f000 ff68 	bl	80147be <__retarget_lock_release_recursive>
 80138ee:	e7e9      	b.n	80138c4 <_vfiprintf_r+0x4c>
 80138f0:	2300      	movs	r3, #0
 80138f2:	9309      	str	r3, [sp, #36]	; 0x24
 80138f4:	2320      	movs	r3, #32
 80138f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138fa:	2330      	movs	r3, #48	; 0x30
 80138fc:	f04f 0901 	mov.w	r9, #1
 8013900:	f8cd 800c 	str.w	r8, [sp, #12]
 8013904:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8013ac4 <_vfiprintf_r+0x24c>
 8013908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801390c:	4623      	mov	r3, r4
 801390e:	469a      	mov	sl, r3
 8013910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013914:	b10a      	cbz	r2, 801391a <_vfiprintf_r+0xa2>
 8013916:	2a25      	cmp	r2, #37	; 0x25
 8013918:	d1f9      	bne.n	801390e <_vfiprintf_r+0x96>
 801391a:	ebba 0b04 	subs.w	fp, sl, r4
 801391e:	d00b      	beq.n	8013938 <_vfiprintf_r+0xc0>
 8013920:	465b      	mov	r3, fp
 8013922:	4622      	mov	r2, r4
 8013924:	4629      	mov	r1, r5
 8013926:	4630      	mov	r0, r6
 8013928:	f7ff ff93 	bl	8013852 <__sfputs_r>
 801392c:	3001      	adds	r0, #1
 801392e:	f000 80aa 	beq.w	8013a86 <_vfiprintf_r+0x20e>
 8013932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013934:	445a      	add	r2, fp
 8013936:	9209      	str	r2, [sp, #36]	; 0x24
 8013938:	f89a 3000 	ldrb.w	r3, [sl]
 801393c:	2b00      	cmp	r3, #0
 801393e:	f000 80a2 	beq.w	8013a86 <_vfiprintf_r+0x20e>
 8013942:	2300      	movs	r3, #0
 8013944:	f04f 32ff 	mov.w	r2, #4294967295
 8013948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801394c:	f10a 0a01 	add.w	sl, sl, #1
 8013950:	9304      	str	r3, [sp, #16]
 8013952:	9307      	str	r3, [sp, #28]
 8013954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013958:	931a      	str	r3, [sp, #104]	; 0x68
 801395a:	4654      	mov	r4, sl
 801395c:	2205      	movs	r2, #5
 801395e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013962:	4858      	ldr	r0, [pc, #352]	; (8013ac4 <_vfiprintf_r+0x24c>)
 8013964:	f000 ff90 	bl	8014888 <memchr>
 8013968:	9a04      	ldr	r2, [sp, #16]
 801396a:	b9d8      	cbnz	r0, 80139a4 <_vfiprintf_r+0x12c>
 801396c:	06d1      	lsls	r1, r2, #27
 801396e:	bf44      	itt	mi
 8013970:	2320      	movmi	r3, #32
 8013972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013976:	0713      	lsls	r3, r2, #28
 8013978:	bf44      	itt	mi
 801397a:	232b      	movmi	r3, #43	; 0x2b
 801397c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013980:	f89a 3000 	ldrb.w	r3, [sl]
 8013984:	2b2a      	cmp	r3, #42	; 0x2a
 8013986:	d015      	beq.n	80139b4 <_vfiprintf_r+0x13c>
 8013988:	4654      	mov	r4, sl
 801398a:	2000      	movs	r0, #0
 801398c:	f04f 0c0a 	mov.w	ip, #10
 8013990:	9a07      	ldr	r2, [sp, #28]
 8013992:	4621      	mov	r1, r4
 8013994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013998:	3b30      	subs	r3, #48	; 0x30
 801399a:	2b09      	cmp	r3, #9
 801399c:	d94e      	bls.n	8013a3c <_vfiprintf_r+0x1c4>
 801399e:	b1b0      	cbz	r0, 80139ce <_vfiprintf_r+0x156>
 80139a0:	9207      	str	r2, [sp, #28]
 80139a2:	e014      	b.n	80139ce <_vfiprintf_r+0x156>
 80139a4:	eba0 0308 	sub.w	r3, r0, r8
 80139a8:	fa09 f303 	lsl.w	r3, r9, r3
 80139ac:	4313      	orrs	r3, r2
 80139ae:	46a2      	mov	sl, r4
 80139b0:	9304      	str	r3, [sp, #16]
 80139b2:	e7d2      	b.n	801395a <_vfiprintf_r+0xe2>
 80139b4:	9b03      	ldr	r3, [sp, #12]
 80139b6:	1d19      	adds	r1, r3, #4
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	9103      	str	r1, [sp, #12]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	bfbb      	ittet	lt
 80139c0:	425b      	neglt	r3, r3
 80139c2:	f042 0202 	orrlt.w	r2, r2, #2
 80139c6:	9307      	strge	r3, [sp, #28]
 80139c8:	9307      	strlt	r3, [sp, #28]
 80139ca:	bfb8      	it	lt
 80139cc:	9204      	strlt	r2, [sp, #16]
 80139ce:	7823      	ldrb	r3, [r4, #0]
 80139d0:	2b2e      	cmp	r3, #46	; 0x2e
 80139d2:	d10c      	bne.n	80139ee <_vfiprintf_r+0x176>
 80139d4:	7863      	ldrb	r3, [r4, #1]
 80139d6:	2b2a      	cmp	r3, #42	; 0x2a
 80139d8:	d135      	bne.n	8013a46 <_vfiprintf_r+0x1ce>
 80139da:	9b03      	ldr	r3, [sp, #12]
 80139dc:	3402      	adds	r4, #2
 80139de:	1d1a      	adds	r2, r3, #4
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	9203      	str	r2, [sp, #12]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	bfb8      	it	lt
 80139e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80139ec:	9305      	str	r3, [sp, #20]
 80139ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013ad4 <_vfiprintf_r+0x25c>
 80139f2:	2203      	movs	r2, #3
 80139f4:	4650      	mov	r0, sl
 80139f6:	7821      	ldrb	r1, [r4, #0]
 80139f8:	f000 ff46 	bl	8014888 <memchr>
 80139fc:	b140      	cbz	r0, 8013a10 <_vfiprintf_r+0x198>
 80139fe:	2340      	movs	r3, #64	; 0x40
 8013a00:	eba0 000a 	sub.w	r0, r0, sl
 8013a04:	fa03 f000 	lsl.w	r0, r3, r0
 8013a08:	9b04      	ldr	r3, [sp, #16]
 8013a0a:	3401      	adds	r4, #1
 8013a0c:	4303      	orrs	r3, r0
 8013a0e:	9304      	str	r3, [sp, #16]
 8013a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a14:	2206      	movs	r2, #6
 8013a16:	482c      	ldr	r0, [pc, #176]	; (8013ac8 <_vfiprintf_r+0x250>)
 8013a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a1c:	f000 ff34 	bl	8014888 <memchr>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d03f      	beq.n	8013aa4 <_vfiprintf_r+0x22c>
 8013a24:	4b29      	ldr	r3, [pc, #164]	; (8013acc <_vfiprintf_r+0x254>)
 8013a26:	bb1b      	cbnz	r3, 8013a70 <_vfiprintf_r+0x1f8>
 8013a28:	9b03      	ldr	r3, [sp, #12]
 8013a2a:	3307      	adds	r3, #7
 8013a2c:	f023 0307 	bic.w	r3, r3, #7
 8013a30:	3308      	adds	r3, #8
 8013a32:	9303      	str	r3, [sp, #12]
 8013a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a36:	443b      	add	r3, r7
 8013a38:	9309      	str	r3, [sp, #36]	; 0x24
 8013a3a:	e767      	b.n	801390c <_vfiprintf_r+0x94>
 8013a3c:	460c      	mov	r4, r1
 8013a3e:	2001      	movs	r0, #1
 8013a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a44:	e7a5      	b.n	8013992 <_vfiprintf_r+0x11a>
 8013a46:	2300      	movs	r3, #0
 8013a48:	f04f 0c0a 	mov.w	ip, #10
 8013a4c:	4619      	mov	r1, r3
 8013a4e:	3401      	adds	r4, #1
 8013a50:	9305      	str	r3, [sp, #20]
 8013a52:	4620      	mov	r0, r4
 8013a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a58:	3a30      	subs	r2, #48	; 0x30
 8013a5a:	2a09      	cmp	r2, #9
 8013a5c:	d903      	bls.n	8013a66 <_vfiprintf_r+0x1ee>
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d0c5      	beq.n	80139ee <_vfiprintf_r+0x176>
 8013a62:	9105      	str	r1, [sp, #20]
 8013a64:	e7c3      	b.n	80139ee <_vfiprintf_r+0x176>
 8013a66:	4604      	mov	r4, r0
 8013a68:	2301      	movs	r3, #1
 8013a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a6e:	e7f0      	b.n	8013a52 <_vfiprintf_r+0x1da>
 8013a70:	ab03      	add	r3, sp, #12
 8013a72:	9300      	str	r3, [sp, #0]
 8013a74:	462a      	mov	r2, r5
 8013a76:	4630      	mov	r0, r6
 8013a78:	4b15      	ldr	r3, [pc, #84]	; (8013ad0 <_vfiprintf_r+0x258>)
 8013a7a:	a904      	add	r1, sp, #16
 8013a7c:	f3af 8000 	nop.w
 8013a80:	4607      	mov	r7, r0
 8013a82:	1c78      	adds	r0, r7, #1
 8013a84:	d1d6      	bne.n	8013a34 <_vfiprintf_r+0x1bc>
 8013a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a88:	07d9      	lsls	r1, r3, #31
 8013a8a:	d405      	bmi.n	8013a98 <_vfiprintf_r+0x220>
 8013a8c:	89ab      	ldrh	r3, [r5, #12]
 8013a8e:	059a      	lsls	r2, r3, #22
 8013a90:	d402      	bmi.n	8013a98 <_vfiprintf_r+0x220>
 8013a92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a94:	f000 fe93 	bl	80147be <__retarget_lock_release_recursive>
 8013a98:	89ab      	ldrh	r3, [r5, #12]
 8013a9a:	065b      	lsls	r3, r3, #25
 8013a9c:	f53f af12 	bmi.w	80138c4 <_vfiprintf_r+0x4c>
 8013aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aa2:	e711      	b.n	80138c8 <_vfiprintf_r+0x50>
 8013aa4:	ab03      	add	r3, sp, #12
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	462a      	mov	r2, r5
 8013aaa:	4630      	mov	r0, r6
 8013aac:	4b08      	ldr	r3, [pc, #32]	; (8013ad0 <_vfiprintf_r+0x258>)
 8013aae:	a904      	add	r1, sp, #16
 8013ab0:	f000 f882 	bl	8013bb8 <_printf_i>
 8013ab4:	e7e4      	b.n	8013a80 <_vfiprintf_r+0x208>
 8013ab6:	bf00      	nop
 8013ab8:	08015f48 	.word	0x08015f48
 8013abc:	08015f68 	.word	0x08015f68
 8013ac0:	08015f28 	.word	0x08015f28
 8013ac4:	08015eda 	.word	0x08015eda
 8013ac8:	08015ee4 	.word	0x08015ee4
 8013acc:	00000000 	.word	0x00000000
 8013ad0:	08013853 	.word	0x08013853
 8013ad4:	08015ee0 	.word	0x08015ee0

08013ad8 <_printf_common>:
 8013ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013adc:	4616      	mov	r6, r2
 8013ade:	4699      	mov	r9, r3
 8013ae0:	688a      	ldr	r2, [r1, #8]
 8013ae2:	690b      	ldr	r3, [r1, #16]
 8013ae4:	4607      	mov	r7, r0
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	bfb8      	it	lt
 8013aea:	4613      	movlt	r3, r2
 8013aec:	6033      	str	r3, [r6, #0]
 8013aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013af2:	460c      	mov	r4, r1
 8013af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013af8:	b10a      	cbz	r2, 8013afe <_printf_common+0x26>
 8013afa:	3301      	adds	r3, #1
 8013afc:	6033      	str	r3, [r6, #0]
 8013afe:	6823      	ldr	r3, [r4, #0]
 8013b00:	0699      	lsls	r1, r3, #26
 8013b02:	bf42      	ittt	mi
 8013b04:	6833      	ldrmi	r3, [r6, #0]
 8013b06:	3302      	addmi	r3, #2
 8013b08:	6033      	strmi	r3, [r6, #0]
 8013b0a:	6825      	ldr	r5, [r4, #0]
 8013b0c:	f015 0506 	ands.w	r5, r5, #6
 8013b10:	d106      	bne.n	8013b20 <_printf_common+0x48>
 8013b12:	f104 0a19 	add.w	sl, r4, #25
 8013b16:	68e3      	ldr	r3, [r4, #12]
 8013b18:	6832      	ldr	r2, [r6, #0]
 8013b1a:	1a9b      	subs	r3, r3, r2
 8013b1c:	42ab      	cmp	r3, r5
 8013b1e:	dc28      	bgt.n	8013b72 <_printf_common+0x9a>
 8013b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013b24:	1e13      	subs	r3, r2, #0
 8013b26:	6822      	ldr	r2, [r4, #0]
 8013b28:	bf18      	it	ne
 8013b2a:	2301      	movne	r3, #1
 8013b2c:	0692      	lsls	r2, r2, #26
 8013b2e:	d42d      	bmi.n	8013b8c <_printf_common+0xb4>
 8013b30:	4649      	mov	r1, r9
 8013b32:	4638      	mov	r0, r7
 8013b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b38:	47c0      	blx	r8
 8013b3a:	3001      	adds	r0, #1
 8013b3c:	d020      	beq.n	8013b80 <_printf_common+0xa8>
 8013b3e:	6823      	ldr	r3, [r4, #0]
 8013b40:	68e5      	ldr	r5, [r4, #12]
 8013b42:	f003 0306 	and.w	r3, r3, #6
 8013b46:	2b04      	cmp	r3, #4
 8013b48:	bf18      	it	ne
 8013b4a:	2500      	movne	r5, #0
 8013b4c:	6832      	ldr	r2, [r6, #0]
 8013b4e:	f04f 0600 	mov.w	r6, #0
 8013b52:	68a3      	ldr	r3, [r4, #8]
 8013b54:	bf08      	it	eq
 8013b56:	1aad      	subeq	r5, r5, r2
 8013b58:	6922      	ldr	r2, [r4, #16]
 8013b5a:	bf08      	it	eq
 8013b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b60:	4293      	cmp	r3, r2
 8013b62:	bfc4      	itt	gt
 8013b64:	1a9b      	subgt	r3, r3, r2
 8013b66:	18ed      	addgt	r5, r5, r3
 8013b68:	341a      	adds	r4, #26
 8013b6a:	42b5      	cmp	r5, r6
 8013b6c:	d11a      	bne.n	8013ba4 <_printf_common+0xcc>
 8013b6e:	2000      	movs	r0, #0
 8013b70:	e008      	b.n	8013b84 <_printf_common+0xac>
 8013b72:	2301      	movs	r3, #1
 8013b74:	4652      	mov	r2, sl
 8013b76:	4649      	mov	r1, r9
 8013b78:	4638      	mov	r0, r7
 8013b7a:	47c0      	blx	r8
 8013b7c:	3001      	adds	r0, #1
 8013b7e:	d103      	bne.n	8013b88 <_printf_common+0xb0>
 8013b80:	f04f 30ff 	mov.w	r0, #4294967295
 8013b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b88:	3501      	adds	r5, #1
 8013b8a:	e7c4      	b.n	8013b16 <_printf_common+0x3e>
 8013b8c:	2030      	movs	r0, #48	; 0x30
 8013b8e:	18e1      	adds	r1, r4, r3
 8013b90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b94:	1c5a      	adds	r2, r3, #1
 8013b96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b9a:	4422      	add	r2, r4
 8013b9c:	3302      	adds	r3, #2
 8013b9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ba2:	e7c5      	b.n	8013b30 <_printf_common+0x58>
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	4622      	mov	r2, r4
 8013ba8:	4649      	mov	r1, r9
 8013baa:	4638      	mov	r0, r7
 8013bac:	47c0      	blx	r8
 8013bae:	3001      	adds	r0, #1
 8013bb0:	d0e6      	beq.n	8013b80 <_printf_common+0xa8>
 8013bb2:	3601      	adds	r6, #1
 8013bb4:	e7d9      	b.n	8013b6a <_printf_common+0x92>
	...

08013bb8 <_printf_i>:
 8013bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bbc:	460c      	mov	r4, r1
 8013bbe:	7e27      	ldrb	r7, [r4, #24]
 8013bc0:	4691      	mov	r9, r2
 8013bc2:	2f78      	cmp	r7, #120	; 0x78
 8013bc4:	4680      	mov	r8, r0
 8013bc6:	469a      	mov	sl, r3
 8013bc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013bca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bce:	d807      	bhi.n	8013be0 <_printf_i+0x28>
 8013bd0:	2f62      	cmp	r7, #98	; 0x62
 8013bd2:	d80a      	bhi.n	8013bea <_printf_i+0x32>
 8013bd4:	2f00      	cmp	r7, #0
 8013bd6:	f000 80d9 	beq.w	8013d8c <_printf_i+0x1d4>
 8013bda:	2f58      	cmp	r7, #88	; 0x58
 8013bdc:	f000 80a4 	beq.w	8013d28 <_printf_i+0x170>
 8013be0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013be8:	e03a      	b.n	8013c60 <_printf_i+0xa8>
 8013bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013bee:	2b15      	cmp	r3, #21
 8013bf0:	d8f6      	bhi.n	8013be0 <_printf_i+0x28>
 8013bf2:	a001      	add	r0, pc, #4	; (adr r0, 8013bf8 <_printf_i+0x40>)
 8013bf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013bf8:	08013c51 	.word	0x08013c51
 8013bfc:	08013c65 	.word	0x08013c65
 8013c00:	08013be1 	.word	0x08013be1
 8013c04:	08013be1 	.word	0x08013be1
 8013c08:	08013be1 	.word	0x08013be1
 8013c0c:	08013be1 	.word	0x08013be1
 8013c10:	08013c65 	.word	0x08013c65
 8013c14:	08013be1 	.word	0x08013be1
 8013c18:	08013be1 	.word	0x08013be1
 8013c1c:	08013be1 	.word	0x08013be1
 8013c20:	08013be1 	.word	0x08013be1
 8013c24:	08013d73 	.word	0x08013d73
 8013c28:	08013c95 	.word	0x08013c95
 8013c2c:	08013d55 	.word	0x08013d55
 8013c30:	08013be1 	.word	0x08013be1
 8013c34:	08013be1 	.word	0x08013be1
 8013c38:	08013d95 	.word	0x08013d95
 8013c3c:	08013be1 	.word	0x08013be1
 8013c40:	08013c95 	.word	0x08013c95
 8013c44:	08013be1 	.word	0x08013be1
 8013c48:	08013be1 	.word	0x08013be1
 8013c4c:	08013d5d 	.word	0x08013d5d
 8013c50:	680b      	ldr	r3, [r1, #0]
 8013c52:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013c56:	1d1a      	adds	r2, r3, #4
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	600a      	str	r2, [r1, #0]
 8013c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c60:	2301      	movs	r3, #1
 8013c62:	e0a4      	b.n	8013dae <_printf_i+0x1f6>
 8013c64:	6825      	ldr	r5, [r4, #0]
 8013c66:	6808      	ldr	r0, [r1, #0]
 8013c68:	062e      	lsls	r6, r5, #24
 8013c6a:	f100 0304 	add.w	r3, r0, #4
 8013c6e:	d50a      	bpl.n	8013c86 <_printf_i+0xce>
 8013c70:	6805      	ldr	r5, [r0, #0]
 8013c72:	600b      	str	r3, [r1, #0]
 8013c74:	2d00      	cmp	r5, #0
 8013c76:	da03      	bge.n	8013c80 <_printf_i+0xc8>
 8013c78:	232d      	movs	r3, #45	; 0x2d
 8013c7a:	426d      	negs	r5, r5
 8013c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c80:	230a      	movs	r3, #10
 8013c82:	485e      	ldr	r0, [pc, #376]	; (8013dfc <_printf_i+0x244>)
 8013c84:	e019      	b.n	8013cba <_printf_i+0x102>
 8013c86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013c8a:	6805      	ldr	r5, [r0, #0]
 8013c8c:	600b      	str	r3, [r1, #0]
 8013c8e:	bf18      	it	ne
 8013c90:	b22d      	sxthne	r5, r5
 8013c92:	e7ef      	b.n	8013c74 <_printf_i+0xbc>
 8013c94:	680b      	ldr	r3, [r1, #0]
 8013c96:	6825      	ldr	r5, [r4, #0]
 8013c98:	1d18      	adds	r0, r3, #4
 8013c9a:	6008      	str	r0, [r1, #0]
 8013c9c:	0628      	lsls	r0, r5, #24
 8013c9e:	d501      	bpl.n	8013ca4 <_printf_i+0xec>
 8013ca0:	681d      	ldr	r5, [r3, #0]
 8013ca2:	e002      	b.n	8013caa <_printf_i+0xf2>
 8013ca4:	0669      	lsls	r1, r5, #25
 8013ca6:	d5fb      	bpl.n	8013ca0 <_printf_i+0xe8>
 8013ca8:	881d      	ldrh	r5, [r3, #0]
 8013caa:	2f6f      	cmp	r7, #111	; 0x6f
 8013cac:	bf0c      	ite	eq
 8013cae:	2308      	moveq	r3, #8
 8013cb0:	230a      	movne	r3, #10
 8013cb2:	4852      	ldr	r0, [pc, #328]	; (8013dfc <_printf_i+0x244>)
 8013cb4:	2100      	movs	r1, #0
 8013cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013cba:	6866      	ldr	r6, [r4, #4]
 8013cbc:	2e00      	cmp	r6, #0
 8013cbe:	bfa8      	it	ge
 8013cc0:	6821      	ldrge	r1, [r4, #0]
 8013cc2:	60a6      	str	r6, [r4, #8]
 8013cc4:	bfa4      	itt	ge
 8013cc6:	f021 0104 	bicge.w	r1, r1, #4
 8013cca:	6021      	strge	r1, [r4, #0]
 8013ccc:	b90d      	cbnz	r5, 8013cd2 <_printf_i+0x11a>
 8013cce:	2e00      	cmp	r6, #0
 8013cd0:	d04d      	beq.n	8013d6e <_printf_i+0x1b6>
 8013cd2:	4616      	mov	r6, r2
 8013cd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8013cd8:	fb03 5711 	mls	r7, r3, r1, r5
 8013cdc:	5dc7      	ldrb	r7, [r0, r7]
 8013cde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013ce2:	462f      	mov	r7, r5
 8013ce4:	42bb      	cmp	r3, r7
 8013ce6:	460d      	mov	r5, r1
 8013ce8:	d9f4      	bls.n	8013cd4 <_printf_i+0x11c>
 8013cea:	2b08      	cmp	r3, #8
 8013cec:	d10b      	bne.n	8013d06 <_printf_i+0x14e>
 8013cee:	6823      	ldr	r3, [r4, #0]
 8013cf0:	07df      	lsls	r7, r3, #31
 8013cf2:	d508      	bpl.n	8013d06 <_printf_i+0x14e>
 8013cf4:	6923      	ldr	r3, [r4, #16]
 8013cf6:	6861      	ldr	r1, [r4, #4]
 8013cf8:	4299      	cmp	r1, r3
 8013cfa:	bfde      	ittt	le
 8013cfc:	2330      	movle	r3, #48	; 0x30
 8013cfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013d02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013d06:	1b92      	subs	r2, r2, r6
 8013d08:	6122      	str	r2, [r4, #16]
 8013d0a:	464b      	mov	r3, r9
 8013d0c:	4621      	mov	r1, r4
 8013d0e:	4640      	mov	r0, r8
 8013d10:	f8cd a000 	str.w	sl, [sp]
 8013d14:	aa03      	add	r2, sp, #12
 8013d16:	f7ff fedf 	bl	8013ad8 <_printf_common>
 8013d1a:	3001      	adds	r0, #1
 8013d1c:	d14c      	bne.n	8013db8 <_printf_i+0x200>
 8013d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d22:	b004      	add	sp, #16
 8013d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d28:	4834      	ldr	r0, [pc, #208]	; (8013dfc <_printf_i+0x244>)
 8013d2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013d2e:	680e      	ldr	r6, [r1, #0]
 8013d30:	6823      	ldr	r3, [r4, #0]
 8013d32:	f856 5b04 	ldr.w	r5, [r6], #4
 8013d36:	061f      	lsls	r7, r3, #24
 8013d38:	600e      	str	r6, [r1, #0]
 8013d3a:	d514      	bpl.n	8013d66 <_printf_i+0x1ae>
 8013d3c:	07d9      	lsls	r1, r3, #31
 8013d3e:	bf44      	itt	mi
 8013d40:	f043 0320 	orrmi.w	r3, r3, #32
 8013d44:	6023      	strmi	r3, [r4, #0]
 8013d46:	b91d      	cbnz	r5, 8013d50 <_printf_i+0x198>
 8013d48:	6823      	ldr	r3, [r4, #0]
 8013d4a:	f023 0320 	bic.w	r3, r3, #32
 8013d4e:	6023      	str	r3, [r4, #0]
 8013d50:	2310      	movs	r3, #16
 8013d52:	e7af      	b.n	8013cb4 <_printf_i+0xfc>
 8013d54:	6823      	ldr	r3, [r4, #0]
 8013d56:	f043 0320 	orr.w	r3, r3, #32
 8013d5a:	6023      	str	r3, [r4, #0]
 8013d5c:	2378      	movs	r3, #120	; 0x78
 8013d5e:	4828      	ldr	r0, [pc, #160]	; (8013e00 <_printf_i+0x248>)
 8013d60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d64:	e7e3      	b.n	8013d2e <_printf_i+0x176>
 8013d66:	065e      	lsls	r6, r3, #25
 8013d68:	bf48      	it	mi
 8013d6a:	b2ad      	uxthmi	r5, r5
 8013d6c:	e7e6      	b.n	8013d3c <_printf_i+0x184>
 8013d6e:	4616      	mov	r6, r2
 8013d70:	e7bb      	b.n	8013cea <_printf_i+0x132>
 8013d72:	680b      	ldr	r3, [r1, #0]
 8013d74:	6826      	ldr	r6, [r4, #0]
 8013d76:	1d1d      	adds	r5, r3, #4
 8013d78:	6960      	ldr	r0, [r4, #20]
 8013d7a:	600d      	str	r5, [r1, #0]
 8013d7c:	0635      	lsls	r5, r6, #24
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	d501      	bpl.n	8013d86 <_printf_i+0x1ce>
 8013d82:	6018      	str	r0, [r3, #0]
 8013d84:	e002      	b.n	8013d8c <_printf_i+0x1d4>
 8013d86:	0671      	lsls	r1, r6, #25
 8013d88:	d5fb      	bpl.n	8013d82 <_printf_i+0x1ca>
 8013d8a:	8018      	strh	r0, [r3, #0]
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	4616      	mov	r6, r2
 8013d90:	6123      	str	r3, [r4, #16]
 8013d92:	e7ba      	b.n	8013d0a <_printf_i+0x152>
 8013d94:	680b      	ldr	r3, [r1, #0]
 8013d96:	1d1a      	adds	r2, r3, #4
 8013d98:	600a      	str	r2, [r1, #0]
 8013d9a:	681e      	ldr	r6, [r3, #0]
 8013d9c:	2100      	movs	r1, #0
 8013d9e:	4630      	mov	r0, r6
 8013da0:	6862      	ldr	r2, [r4, #4]
 8013da2:	f000 fd71 	bl	8014888 <memchr>
 8013da6:	b108      	cbz	r0, 8013dac <_printf_i+0x1f4>
 8013da8:	1b80      	subs	r0, r0, r6
 8013daa:	6060      	str	r0, [r4, #4]
 8013dac:	6863      	ldr	r3, [r4, #4]
 8013dae:	6123      	str	r3, [r4, #16]
 8013db0:	2300      	movs	r3, #0
 8013db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013db6:	e7a8      	b.n	8013d0a <_printf_i+0x152>
 8013db8:	4632      	mov	r2, r6
 8013dba:	4649      	mov	r1, r9
 8013dbc:	4640      	mov	r0, r8
 8013dbe:	6923      	ldr	r3, [r4, #16]
 8013dc0:	47d0      	blx	sl
 8013dc2:	3001      	adds	r0, #1
 8013dc4:	d0ab      	beq.n	8013d1e <_printf_i+0x166>
 8013dc6:	6823      	ldr	r3, [r4, #0]
 8013dc8:	079b      	lsls	r3, r3, #30
 8013dca:	d413      	bmi.n	8013df4 <_printf_i+0x23c>
 8013dcc:	68e0      	ldr	r0, [r4, #12]
 8013dce:	9b03      	ldr	r3, [sp, #12]
 8013dd0:	4298      	cmp	r0, r3
 8013dd2:	bfb8      	it	lt
 8013dd4:	4618      	movlt	r0, r3
 8013dd6:	e7a4      	b.n	8013d22 <_printf_i+0x16a>
 8013dd8:	2301      	movs	r3, #1
 8013dda:	4632      	mov	r2, r6
 8013ddc:	4649      	mov	r1, r9
 8013dde:	4640      	mov	r0, r8
 8013de0:	47d0      	blx	sl
 8013de2:	3001      	adds	r0, #1
 8013de4:	d09b      	beq.n	8013d1e <_printf_i+0x166>
 8013de6:	3501      	adds	r5, #1
 8013de8:	68e3      	ldr	r3, [r4, #12]
 8013dea:	9903      	ldr	r1, [sp, #12]
 8013dec:	1a5b      	subs	r3, r3, r1
 8013dee:	42ab      	cmp	r3, r5
 8013df0:	dcf2      	bgt.n	8013dd8 <_printf_i+0x220>
 8013df2:	e7eb      	b.n	8013dcc <_printf_i+0x214>
 8013df4:	2500      	movs	r5, #0
 8013df6:	f104 0619 	add.w	r6, r4, #25
 8013dfa:	e7f5      	b.n	8013de8 <_printf_i+0x230>
 8013dfc:	08015eeb 	.word	0x08015eeb
 8013e00:	08015efc 	.word	0x08015efc

08013e04 <_scanf_chars>:
 8013e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e08:	4615      	mov	r5, r2
 8013e0a:	688a      	ldr	r2, [r1, #8]
 8013e0c:	4680      	mov	r8, r0
 8013e0e:	460c      	mov	r4, r1
 8013e10:	b932      	cbnz	r2, 8013e20 <_scanf_chars+0x1c>
 8013e12:	698a      	ldr	r2, [r1, #24]
 8013e14:	2a00      	cmp	r2, #0
 8013e16:	bf0c      	ite	eq
 8013e18:	2201      	moveq	r2, #1
 8013e1a:	f04f 32ff 	movne.w	r2, #4294967295
 8013e1e:	608a      	str	r2, [r1, #8]
 8013e20:	2700      	movs	r7, #0
 8013e22:	6822      	ldr	r2, [r4, #0]
 8013e24:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8013eb0 <_scanf_chars+0xac>
 8013e28:	06d1      	lsls	r1, r2, #27
 8013e2a:	bf5f      	itttt	pl
 8013e2c:	681a      	ldrpl	r2, [r3, #0]
 8013e2e:	1d11      	addpl	r1, r2, #4
 8013e30:	6019      	strpl	r1, [r3, #0]
 8013e32:	6816      	ldrpl	r6, [r2, #0]
 8013e34:	69a0      	ldr	r0, [r4, #24]
 8013e36:	b188      	cbz	r0, 8013e5c <_scanf_chars+0x58>
 8013e38:	2801      	cmp	r0, #1
 8013e3a:	d107      	bne.n	8013e4c <_scanf_chars+0x48>
 8013e3c:	682b      	ldr	r3, [r5, #0]
 8013e3e:	781a      	ldrb	r2, [r3, #0]
 8013e40:	6963      	ldr	r3, [r4, #20]
 8013e42:	5c9b      	ldrb	r3, [r3, r2]
 8013e44:	b953      	cbnz	r3, 8013e5c <_scanf_chars+0x58>
 8013e46:	bb27      	cbnz	r7, 8013e92 <_scanf_chars+0x8e>
 8013e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e4c:	2802      	cmp	r0, #2
 8013e4e:	d120      	bne.n	8013e92 <_scanf_chars+0x8e>
 8013e50:	682b      	ldr	r3, [r5, #0]
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013e58:	071b      	lsls	r3, r3, #28
 8013e5a:	d41a      	bmi.n	8013e92 <_scanf_chars+0x8e>
 8013e5c:	6823      	ldr	r3, [r4, #0]
 8013e5e:	3701      	adds	r7, #1
 8013e60:	06da      	lsls	r2, r3, #27
 8013e62:	bf5e      	ittt	pl
 8013e64:	682b      	ldrpl	r3, [r5, #0]
 8013e66:	781b      	ldrbpl	r3, [r3, #0]
 8013e68:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013e6c:	682a      	ldr	r2, [r5, #0]
 8013e6e:	686b      	ldr	r3, [r5, #4]
 8013e70:	3201      	adds	r2, #1
 8013e72:	602a      	str	r2, [r5, #0]
 8013e74:	68a2      	ldr	r2, [r4, #8]
 8013e76:	3b01      	subs	r3, #1
 8013e78:	3a01      	subs	r2, #1
 8013e7a:	606b      	str	r3, [r5, #4]
 8013e7c:	60a2      	str	r2, [r4, #8]
 8013e7e:	b142      	cbz	r2, 8013e92 <_scanf_chars+0x8e>
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	dcd7      	bgt.n	8013e34 <_scanf_chars+0x30>
 8013e84:	4629      	mov	r1, r5
 8013e86:	4640      	mov	r0, r8
 8013e88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013e8c:	4798      	blx	r3
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d0d0      	beq.n	8013e34 <_scanf_chars+0x30>
 8013e92:	6823      	ldr	r3, [r4, #0]
 8013e94:	f013 0310 	ands.w	r3, r3, #16
 8013e98:	d105      	bne.n	8013ea6 <_scanf_chars+0xa2>
 8013e9a:	68e2      	ldr	r2, [r4, #12]
 8013e9c:	3201      	adds	r2, #1
 8013e9e:	60e2      	str	r2, [r4, #12]
 8013ea0:	69a2      	ldr	r2, [r4, #24]
 8013ea2:	b102      	cbz	r2, 8013ea6 <_scanf_chars+0xa2>
 8013ea4:	7033      	strb	r3, [r6, #0]
 8013ea6:	6923      	ldr	r3, [r4, #16]
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	441f      	add	r7, r3
 8013eac:	6127      	str	r7, [r4, #16]
 8013eae:	e7cb      	b.n	8013e48 <_scanf_chars+0x44>
 8013eb0:	08015dda 	.word	0x08015dda

08013eb4 <_scanf_i>:
 8013eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eb8:	460c      	mov	r4, r1
 8013eba:	4698      	mov	r8, r3
 8013ebc:	4b72      	ldr	r3, [pc, #456]	; (8014088 <_scanf_i+0x1d4>)
 8013ebe:	b087      	sub	sp, #28
 8013ec0:	4682      	mov	sl, r0
 8013ec2:	4616      	mov	r6, r2
 8013ec4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013ec8:	ab03      	add	r3, sp, #12
 8013eca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013ece:	4b6f      	ldr	r3, [pc, #444]	; (801408c <_scanf_i+0x1d8>)
 8013ed0:	69a1      	ldr	r1, [r4, #24]
 8013ed2:	4a6f      	ldr	r2, [pc, #444]	; (8014090 <_scanf_i+0x1dc>)
 8013ed4:	4627      	mov	r7, r4
 8013ed6:	2903      	cmp	r1, #3
 8013ed8:	bf18      	it	ne
 8013eda:	461a      	movne	r2, r3
 8013edc:	68a3      	ldr	r3, [r4, #8]
 8013ede:	9201      	str	r2, [sp, #4]
 8013ee0:	1e5a      	subs	r2, r3, #1
 8013ee2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013ee6:	bf81      	itttt	hi
 8013ee8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013eec:	eb03 0905 	addhi.w	r9, r3, r5
 8013ef0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013ef4:	60a3      	strhi	r3, [r4, #8]
 8013ef6:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013efa:	bf98      	it	ls
 8013efc:	f04f 0900 	movls.w	r9, #0
 8013f00:	463d      	mov	r5, r7
 8013f02:	f04f 0b00 	mov.w	fp, #0
 8013f06:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013f0a:	6023      	str	r3, [r4, #0]
 8013f0c:	6831      	ldr	r1, [r6, #0]
 8013f0e:	ab03      	add	r3, sp, #12
 8013f10:	2202      	movs	r2, #2
 8013f12:	7809      	ldrb	r1, [r1, #0]
 8013f14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013f18:	f000 fcb6 	bl	8014888 <memchr>
 8013f1c:	b328      	cbz	r0, 8013f6a <_scanf_i+0xb6>
 8013f1e:	f1bb 0f01 	cmp.w	fp, #1
 8013f22:	d159      	bne.n	8013fd8 <_scanf_i+0x124>
 8013f24:	6862      	ldr	r2, [r4, #4]
 8013f26:	b92a      	cbnz	r2, 8013f34 <_scanf_i+0x80>
 8013f28:	2308      	movs	r3, #8
 8013f2a:	6822      	ldr	r2, [r4, #0]
 8013f2c:	6063      	str	r3, [r4, #4]
 8013f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013f32:	6022      	str	r2, [r4, #0]
 8013f34:	6822      	ldr	r2, [r4, #0]
 8013f36:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013f3a:	6022      	str	r2, [r4, #0]
 8013f3c:	68a2      	ldr	r2, [r4, #8]
 8013f3e:	1e51      	subs	r1, r2, #1
 8013f40:	60a1      	str	r1, [r4, #8]
 8013f42:	b192      	cbz	r2, 8013f6a <_scanf_i+0xb6>
 8013f44:	6832      	ldr	r2, [r6, #0]
 8013f46:	1c51      	adds	r1, r2, #1
 8013f48:	6031      	str	r1, [r6, #0]
 8013f4a:	7812      	ldrb	r2, [r2, #0]
 8013f4c:	f805 2b01 	strb.w	r2, [r5], #1
 8013f50:	6872      	ldr	r2, [r6, #4]
 8013f52:	3a01      	subs	r2, #1
 8013f54:	2a00      	cmp	r2, #0
 8013f56:	6072      	str	r2, [r6, #4]
 8013f58:	dc07      	bgt.n	8013f6a <_scanf_i+0xb6>
 8013f5a:	4631      	mov	r1, r6
 8013f5c:	4650      	mov	r0, sl
 8013f5e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013f62:	4790      	blx	r2
 8013f64:	2800      	cmp	r0, #0
 8013f66:	f040 8085 	bne.w	8014074 <_scanf_i+0x1c0>
 8013f6a:	f10b 0b01 	add.w	fp, fp, #1
 8013f6e:	f1bb 0f03 	cmp.w	fp, #3
 8013f72:	d1cb      	bne.n	8013f0c <_scanf_i+0x58>
 8013f74:	6863      	ldr	r3, [r4, #4]
 8013f76:	b90b      	cbnz	r3, 8013f7c <_scanf_i+0xc8>
 8013f78:	230a      	movs	r3, #10
 8013f7a:	6063      	str	r3, [r4, #4]
 8013f7c:	6863      	ldr	r3, [r4, #4]
 8013f7e:	4945      	ldr	r1, [pc, #276]	; (8014094 <_scanf_i+0x1e0>)
 8013f80:	6960      	ldr	r0, [r4, #20]
 8013f82:	1ac9      	subs	r1, r1, r3
 8013f84:	f000 f8aa 	bl	80140dc <__sccl>
 8013f88:	f04f 0b00 	mov.w	fp, #0
 8013f8c:	68a3      	ldr	r3, [r4, #8]
 8013f8e:	6822      	ldr	r2, [r4, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d03d      	beq.n	8014010 <_scanf_i+0x15c>
 8013f94:	6831      	ldr	r1, [r6, #0]
 8013f96:	6960      	ldr	r0, [r4, #20]
 8013f98:	f891 c000 	ldrb.w	ip, [r1]
 8013f9c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	d035      	beq.n	8014010 <_scanf_i+0x15c>
 8013fa4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013fa8:	d124      	bne.n	8013ff4 <_scanf_i+0x140>
 8013faa:	0510      	lsls	r0, r2, #20
 8013fac:	d522      	bpl.n	8013ff4 <_scanf_i+0x140>
 8013fae:	f10b 0b01 	add.w	fp, fp, #1
 8013fb2:	f1b9 0f00 	cmp.w	r9, #0
 8013fb6:	d003      	beq.n	8013fc0 <_scanf_i+0x10c>
 8013fb8:	3301      	adds	r3, #1
 8013fba:	f109 39ff 	add.w	r9, r9, #4294967295
 8013fbe:	60a3      	str	r3, [r4, #8]
 8013fc0:	6873      	ldr	r3, [r6, #4]
 8013fc2:	3b01      	subs	r3, #1
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	6073      	str	r3, [r6, #4]
 8013fc8:	dd1b      	ble.n	8014002 <_scanf_i+0x14e>
 8013fca:	6833      	ldr	r3, [r6, #0]
 8013fcc:	3301      	adds	r3, #1
 8013fce:	6033      	str	r3, [r6, #0]
 8013fd0:	68a3      	ldr	r3, [r4, #8]
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	60a3      	str	r3, [r4, #8]
 8013fd6:	e7d9      	b.n	8013f8c <_scanf_i+0xd8>
 8013fd8:	f1bb 0f02 	cmp.w	fp, #2
 8013fdc:	d1ae      	bne.n	8013f3c <_scanf_i+0x88>
 8013fde:	6822      	ldr	r2, [r4, #0]
 8013fe0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013fe4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013fe8:	d1bf      	bne.n	8013f6a <_scanf_i+0xb6>
 8013fea:	2310      	movs	r3, #16
 8013fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013ff0:	6063      	str	r3, [r4, #4]
 8013ff2:	e7a2      	b.n	8013f3a <_scanf_i+0x86>
 8013ff4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013ff8:	6022      	str	r2, [r4, #0]
 8013ffa:	780b      	ldrb	r3, [r1, #0]
 8013ffc:	f805 3b01 	strb.w	r3, [r5], #1
 8014000:	e7de      	b.n	8013fc0 <_scanf_i+0x10c>
 8014002:	4631      	mov	r1, r6
 8014004:	4650      	mov	r0, sl
 8014006:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801400a:	4798      	blx	r3
 801400c:	2800      	cmp	r0, #0
 801400e:	d0df      	beq.n	8013fd0 <_scanf_i+0x11c>
 8014010:	6823      	ldr	r3, [r4, #0]
 8014012:	05d9      	lsls	r1, r3, #23
 8014014:	d50d      	bpl.n	8014032 <_scanf_i+0x17e>
 8014016:	42bd      	cmp	r5, r7
 8014018:	d909      	bls.n	801402e <_scanf_i+0x17a>
 801401a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801401e:	4632      	mov	r2, r6
 8014020:	4650      	mov	r0, sl
 8014022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014026:	f105 39ff 	add.w	r9, r5, #4294967295
 801402a:	4798      	blx	r3
 801402c:	464d      	mov	r5, r9
 801402e:	42bd      	cmp	r5, r7
 8014030:	d028      	beq.n	8014084 <_scanf_i+0x1d0>
 8014032:	6822      	ldr	r2, [r4, #0]
 8014034:	f012 0210 	ands.w	r2, r2, #16
 8014038:	d113      	bne.n	8014062 <_scanf_i+0x1ae>
 801403a:	702a      	strb	r2, [r5, #0]
 801403c:	4639      	mov	r1, r7
 801403e:	6863      	ldr	r3, [r4, #4]
 8014040:	4650      	mov	r0, sl
 8014042:	9e01      	ldr	r6, [sp, #4]
 8014044:	47b0      	blx	r6
 8014046:	f8d8 3000 	ldr.w	r3, [r8]
 801404a:	6821      	ldr	r1, [r4, #0]
 801404c:	1d1a      	adds	r2, r3, #4
 801404e:	f8c8 2000 	str.w	r2, [r8]
 8014052:	f011 0f20 	tst.w	r1, #32
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	d00f      	beq.n	801407a <_scanf_i+0x1c6>
 801405a:	6018      	str	r0, [r3, #0]
 801405c:	68e3      	ldr	r3, [r4, #12]
 801405e:	3301      	adds	r3, #1
 8014060:	60e3      	str	r3, [r4, #12]
 8014062:	2000      	movs	r0, #0
 8014064:	1bed      	subs	r5, r5, r7
 8014066:	44ab      	add	fp, r5
 8014068:	6925      	ldr	r5, [r4, #16]
 801406a:	445d      	add	r5, fp
 801406c:	6125      	str	r5, [r4, #16]
 801406e:	b007      	add	sp, #28
 8014070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014074:	f04f 0b00 	mov.w	fp, #0
 8014078:	e7ca      	b.n	8014010 <_scanf_i+0x15c>
 801407a:	07ca      	lsls	r2, r1, #31
 801407c:	bf4c      	ite	mi
 801407e:	8018      	strhmi	r0, [r3, #0]
 8014080:	6018      	strpl	r0, [r3, #0]
 8014082:	e7eb      	b.n	801405c <_scanf_i+0x1a8>
 8014084:	2001      	movs	r0, #1
 8014086:	e7f2      	b.n	801406e <_scanf_i+0x1ba>
 8014088:	08015ccc 	.word	0x08015ccc
 801408c:	08014249 	.word	0x08014249
 8014090:	08012f09 	.word	0x08012f09
 8014094:	08015f26 	.word	0x08015f26

08014098 <_read_r>:
 8014098:	b538      	push	{r3, r4, r5, lr}
 801409a:	4604      	mov	r4, r0
 801409c:	4608      	mov	r0, r1
 801409e:	4611      	mov	r1, r2
 80140a0:	2200      	movs	r2, #0
 80140a2:	4d05      	ldr	r5, [pc, #20]	; (80140b8 <_read_r+0x20>)
 80140a4:	602a      	str	r2, [r5, #0]
 80140a6:	461a      	mov	r2, r3
 80140a8:	f7f2 fd51 	bl	8006b4e <_read>
 80140ac:	1c43      	adds	r3, r0, #1
 80140ae:	d102      	bne.n	80140b6 <_read_r+0x1e>
 80140b0:	682b      	ldr	r3, [r5, #0]
 80140b2:	b103      	cbz	r3, 80140b6 <_read_r+0x1e>
 80140b4:	6023      	str	r3, [r4, #0]
 80140b6:	bd38      	pop	{r3, r4, r5, pc}
 80140b8:	20004da8 	.word	0x20004da8

080140bc <_sbrk_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	2300      	movs	r3, #0
 80140c0:	4d05      	ldr	r5, [pc, #20]	; (80140d8 <_sbrk_r+0x1c>)
 80140c2:	4604      	mov	r4, r0
 80140c4:	4608      	mov	r0, r1
 80140c6:	602b      	str	r3, [r5, #0]
 80140c8:	f7f2 fdaa 	bl	8006c20 <_sbrk>
 80140cc:	1c43      	adds	r3, r0, #1
 80140ce:	d102      	bne.n	80140d6 <_sbrk_r+0x1a>
 80140d0:	682b      	ldr	r3, [r5, #0]
 80140d2:	b103      	cbz	r3, 80140d6 <_sbrk_r+0x1a>
 80140d4:	6023      	str	r3, [r4, #0]
 80140d6:	bd38      	pop	{r3, r4, r5, pc}
 80140d8:	20004da8 	.word	0x20004da8

080140dc <__sccl>:
 80140dc:	b570      	push	{r4, r5, r6, lr}
 80140de:	780b      	ldrb	r3, [r1, #0]
 80140e0:	4604      	mov	r4, r0
 80140e2:	2b5e      	cmp	r3, #94	; 0x5e
 80140e4:	bf13      	iteet	ne
 80140e6:	2200      	movne	r2, #0
 80140e8:	2201      	moveq	r2, #1
 80140ea:	784b      	ldrbeq	r3, [r1, #1]
 80140ec:	1c48      	addne	r0, r1, #1
 80140ee:	bf08      	it	eq
 80140f0:	1c88      	addeq	r0, r1, #2
 80140f2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80140f6:	1e61      	subs	r1, r4, #1
 80140f8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80140fc:	42a9      	cmp	r1, r5
 80140fe:	d1fb      	bne.n	80140f8 <__sccl+0x1c>
 8014100:	b90b      	cbnz	r3, 8014106 <__sccl+0x2a>
 8014102:	3801      	subs	r0, #1
 8014104:	bd70      	pop	{r4, r5, r6, pc}
 8014106:	f082 0101 	eor.w	r1, r2, #1
 801410a:	54e1      	strb	r1, [r4, r3]
 801410c:	1c42      	adds	r2, r0, #1
 801410e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8014112:	4610      	mov	r0, r2
 8014114:	2d2d      	cmp	r5, #45	; 0x2d
 8014116:	f102 36ff 	add.w	r6, r2, #4294967295
 801411a:	d006      	beq.n	801412a <__sccl+0x4e>
 801411c:	2d5d      	cmp	r5, #93	; 0x5d
 801411e:	d0f1      	beq.n	8014104 <__sccl+0x28>
 8014120:	b90d      	cbnz	r5, 8014126 <__sccl+0x4a>
 8014122:	4630      	mov	r0, r6
 8014124:	e7ee      	b.n	8014104 <__sccl+0x28>
 8014126:	462b      	mov	r3, r5
 8014128:	e7ef      	b.n	801410a <__sccl+0x2e>
 801412a:	7816      	ldrb	r6, [r2, #0]
 801412c:	2e5d      	cmp	r6, #93	; 0x5d
 801412e:	d0fa      	beq.n	8014126 <__sccl+0x4a>
 8014130:	42b3      	cmp	r3, r6
 8014132:	dcf8      	bgt.n	8014126 <__sccl+0x4a>
 8014134:	4618      	mov	r0, r3
 8014136:	3001      	adds	r0, #1
 8014138:	4286      	cmp	r6, r0
 801413a:	5421      	strb	r1, [r4, r0]
 801413c:	dcfb      	bgt.n	8014136 <__sccl+0x5a>
 801413e:	43d8      	mvns	r0, r3
 8014140:	4430      	add	r0, r6
 8014142:	42b3      	cmp	r3, r6
 8014144:	bfa8      	it	ge
 8014146:	2000      	movge	r0, #0
 8014148:	1c5d      	adds	r5, r3, #1
 801414a:	182b      	adds	r3, r5, r0
 801414c:	3202      	adds	r2, #2
 801414e:	e7de      	b.n	801410e <__sccl+0x32>

08014150 <_strtoul_l.isra.0>:
 8014150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014154:	468c      	mov	ip, r1
 8014156:	4686      	mov	lr, r0
 8014158:	4e3a      	ldr	r6, [pc, #232]	; (8014244 <_strtoul_l.isra.0+0xf4>)
 801415a:	4660      	mov	r0, ip
 801415c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014160:	5da5      	ldrb	r5, [r4, r6]
 8014162:	f015 0508 	ands.w	r5, r5, #8
 8014166:	d1f8      	bne.n	801415a <_strtoul_l.isra.0+0xa>
 8014168:	2c2d      	cmp	r4, #45	; 0x2d
 801416a:	d134      	bne.n	80141d6 <_strtoul_l.isra.0+0x86>
 801416c:	f04f 0801 	mov.w	r8, #1
 8014170:	f89c 4000 	ldrb.w	r4, [ip]
 8014174:	f100 0c02 	add.w	ip, r0, #2
 8014178:	2b00      	cmp	r3, #0
 801417a:	d05e      	beq.n	801423a <_strtoul_l.isra.0+0xea>
 801417c:	2b10      	cmp	r3, #16
 801417e:	d10c      	bne.n	801419a <_strtoul_l.isra.0+0x4a>
 8014180:	2c30      	cmp	r4, #48	; 0x30
 8014182:	d10a      	bne.n	801419a <_strtoul_l.isra.0+0x4a>
 8014184:	f89c 0000 	ldrb.w	r0, [ip]
 8014188:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801418c:	2858      	cmp	r0, #88	; 0x58
 801418e:	d14f      	bne.n	8014230 <_strtoul_l.isra.0+0xe0>
 8014190:	2310      	movs	r3, #16
 8014192:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014196:	f10c 0c02 	add.w	ip, ip, #2
 801419a:	f04f 37ff 	mov.w	r7, #4294967295
 801419e:	fbb7 f7f3 	udiv	r7, r7, r3
 80141a2:	2500      	movs	r5, #0
 80141a4:	fb03 f907 	mul.w	r9, r3, r7
 80141a8:	4628      	mov	r0, r5
 80141aa:	ea6f 0909 	mvn.w	r9, r9
 80141ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80141b2:	2e09      	cmp	r6, #9
 80141b4:	d818      	bhi.n	80141e8 <_strtoul_l.isra.0+0x98>
 80141b6:	4634      	mov	r4, r6
 80141b8:	42a3      	cmp	r3, r4
 80141ba:	dd24      	ble.n	8014206 <_strtoul_l.isra.0+0xb6>
 80141bc:	2d00      	cmp	r5, #0
 80141be:	db1f      	blt.n	8014200 <_strtoul_l.isra.0+0xb0>
 80141c0:	4287      	cmp	r7, r0
 80141c2:	d31d      	bcc.n	8014200 <_strtoul_l.isra.0+0xb0>
 80141c4:	d101      	bne.n	80141ca <_strtoul_l.isra.0+0x7a>
 80141c6:	45a1      	cmp	r9, r4
 80141c8:	db1a      	blt.n	8014200 <_strtoul_l.isra.0+0xb0>
 80141ca:	2501      	movs	r5, #1
 80141cc:	fb00 4003 	mla	r0, r0, r3, r4
 80141d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80141d4:	e7eb      	b.n	80141ae <_strtoul_l.isra.0+0x5e>
 80141d6:	2c2b      	cmp	r4, #43	; 0x2b
 80141d8:	bf08      	it	eq
 80141da:	f89c 4000 	ldrbeq.w	r4, [ip]
 80141de:	46a8      	mov	r8, r5
 80141e0:	bf08      	it	eq
 80141e2:	f100 0c02 	addeq.w	ip, r0, #2
 80141e6:	e7c7      	b.n	8014178 <_strtoul_l.isra.0+0x28>
 80141e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80141ec:	2e19      	cmp	r6, #25
 80141ee:	d801      	bhi.n	80141f4 <_strtoul_l.isra.0+0xa4>
 80141f0:	3c37      	subs	r4, #55	; 0x37
 80141f2:	e7e1      	b.n	80141b8 <_strtoul_l.isra.0+0x68>
 80141f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80141f8:	2e19      	cmp	r6, #25
 80141fa:	d804      	bhi.n	8014206 <_strtoul_l.isra.0+0xb6>
 80141fc:	3c57      	subs	r4, #87	; 0x57
 80141fe:	e7db      	b.n	80141b8 <_strtoul_l.isra.0+0x68>
 8014200:	f04f 35ff 	mov.w	r5, #4294967295
 8014204:	e7e4      	b.n	80141d0 <_strtoul_l.isra.0+0x80>
 8014206:	2d00      	cmp	r5, #0
 8014208:	da07      	bge.n	801421a <_strtoul_l.isra.0+0xca>
 801420a:	2322      	movs	r3, #34	; 0x22
 801420c:	f04f 30ff 	mov.w	r0, #4294967295
 8014210:	f8ce 3000 	str.w	r3, [lr]
 8014214:	b942      	cbnz	r2, 8014228 <_strtoul_l.isra.0+0xd8>
 8014216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801421a:	f1b8 0f00 	cmp.w	r8, #0
 801421e:	d000      	beq.n	8014222 <_strtoul_l.isra.0+0xd2>
 8014220:	4240      	negs	r0, r0
 8014222:	2a00      	cmp	r2, #0
 8014224:	d0f7      	beq.n	8014216 <_strtoul_l.isra.0+0xc6>
 8014226:	b10d      	cbz	r5, 801422c <_strtoul_l.isra.0+0xdc>
 8014228:	f10c 31ff 	add.w	r1, ip, #4294967295
 801422c:	6011      	str	r1, [r2, #0]
 801422e:	e7f2      	b.n	8014216 <_strtoul_l.isra.0+0xc6>
 8014230:	2430      	movs	r4, #48	; 0x30
 8014232:	2b00      	cmp	r3, #0
 8014234:	d1b1      	bne.n	801419a <_strtoul_l.isra.0+0x4a>
 8014236:	2308      	movs	r3, #8
 8014238:	e7af      	b.n	801419a <_strtoul_l.isra.0+0x4a>
 801423a:	2c30      	cmp	r4, #48	; 0x30
 801423c:	d0a2      	beq.n	8014184 <_strtoul_l.isra.0+0x34>
 801423e:	230a      	movs	r3, #10
 8014240:	e7ab      	b.n	801419a <_strtoul_l.isra.0+0x4a>
 8014242:	bf00      	nop
 8014244:	08015dda 	.word	0x08015dda

08014248 <_strtoul_r>:
 8014248:	f7ff bf82 	b.w	8014150 <_strtoul_l.isra.0>

0801424c <__submore>:
 801424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014250:	460c      	mov	r4, r1
 8014252:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014258:	4299      	cmp	r1, r3
 801425a:	d11b      	bne.n	8014294 <__submore+0x48>
 801425c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014260:	f7fe ff58 	bl	8013114 <_malloc_r>
 8014264:	b918      	cbnz	r0, 801426e <__submore+0x22>
 8014266:	f04f 30ff 	mov.w	r0, #4294967295
 801426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801426e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014272:	63a3      	str	r3, [r4, #56]	; 0x38
 8014274:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014278:	6360      	str	r0, [r4, #52]	; 0x34
 801427a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801427e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014282:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014286:	7043      	strb	r3, [r0, #1]
 8014288:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801428c:	7003      	strb	r3, [r0, #0]
 801428e:	6020      	str	r0, [r4, #0]
 8014290:	2000      	movs	r0, #0
 8014292:	e7ea      	b.n	801426a <__submore+0x1e>
 8014294:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014296:	0077      	lsls	r7, r6, #1
 8014298:	463a      	mov	r2, r7
 801429a:	f000 fb29 	bl	80148f0 <_realloc_r>
 801429e:	4605      	mov	r5, r0
 80142a0:	2800      	cmp	r0, #0
 80142a2:	d0e0      	beq.n	8014266 <__submore+0x1a>
 80142a4:	eb00 0806 	add.w	r8, r0, r6
 80142a8:	4601      	mov	r1, r0
 80142aa:	4632      	mov	r2, r6
 80142ac:	4640      	mov	r0, r8
 80142ae:	f7fe fc57 	bl	8012b60 <memcpy>
 80142b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80142b6:	f8c4 8000 	str.w	r8, [r4]
 80142ba:	e7e9      	b.n	8014290 <__submore+0x44>

080142bc <__swbuf_r>:
 80142bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142be:	460e      	mov	r6, r1
 80142c0:	4614      	mov	r4, r2
 80142c2:	4605      	mov	r5, r0
 80142c4:	b118      	cbz	r0, 80142ce <__swbuf_r+0x12>
 80142c6:	6983      	ldr	r3, [r0, #24]
 80142c8:	b90b      	cbnz	r3, 80142ce <__swbuf_r+0x12>
 80142ca:	f000 f9d9 	bl	8014680 <__sinit>
 80142ce:	4b21      	ldr	r3, [pc, #132]	; (8014354 <__swbuf_r+0x98>)
 80142d0:	429c      	cmp	r4, r3
 80142d2:	d12b      	bne.n	801432c <__swbuf_r+0x70>
 80142d4:	686c      	ldr	r4, [r5, #4]
 80142d6:	69a3      	ldr	r3, [r4, #24]
 80142d8:	60a3      	str	r3, [r4, #8]
 80142da:	89a3      	ldrh	r3, [r4, #12]
 80142dc:	071a      	lsls	r2, r3, #28
 80142de:	d52f      	bpl.n	8014340 <__swbuf_r+0x84>
 80142e0:	6923      	ldr	r3, [r4, #16]
 80142e2:	b36b      	cbz	r3, 8014340 <__swbuf_r+0x84>
 80142e4:	6923      	ldr	r3, [r4, #16]
 80142e6:	6820      	ldr	r0, [r4, #0]
 80142e8:	b2f6      	uxtb	r6, r6
 80142ea:	1ac0      	subs	r0, r0, r3
 80142ec:	6963      	ldr	r3, [r4, #20]
 80142ee:	4637      	mov	r7, r6
 80142f0:	4283      	cmp	r3, r0
 80142f2:	dc04      	bgt.n	80142fe <__swbuf_r+0x42>
 80142f4:	4621      	mov	r1, r4
 80142f6:	4628      	mov	r0, r5
 80142f8:	f000 f92e 	bl	8014558 <_fflush_r>
 80142fc:	bb30      	cbnz	r0, 801434c <__swbuf_r+0x90>
 80142fe:	68a3      	ldr	r3, [r4, #8]
 8014300:	3001      	adds	r0, #1
 8014302:	3b01      	subs	r3, #1
 8014304:	60a3      	str	r3, [r4, #8]
 8014306:	6823      	ldr	r3, [r4, #0]
 8014308:	1c5a      	adds	r2, r3, #1
 801430a:	6022      	str	r2, [r4, #0]
 801430c:	701e      	strb	r6, [r3, #0]
 801430e:	6963      	ldr	r3, [r4, #20]
 8014310:	4283      	cmp	r3, r0
 8014312:	d004      	beq.n	801431e <__swbuf_r+0x62>
 8014314:	89a3      	ldrh	r3, [r4, #12]
 8014316:	07db      	lsls	r3, r3, #31
 8014318:	d506      	bpl.n	8014328 <__swbuf_r+0x6c>
 801431a:	2e0a      	cmp	r6, #10
 801431c:	d104      	bne.n	8014328 <__swbuf_r+0x6c>
 801431e:	4621      	mov	r1, r4
 8014320:	4628      	mov	r0, r5
 8014322:	f000 f919 	bl	8014558 <_fflush_r>
 8014326:	b988      	cbnz	r0, 801434c <__swbuf_r+0x90>
 8014328:	4638      	mov	r0, r7
 801432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801432c:	4b0a      	ldr	r3, [pc, #40]	; (8014358 <__swbuf_r+0x9c>)
 801432e:	429c      	cmp	r4, r3
 8014330:	d101      	bne.n	8014336 <__swbuf_r+0x7a>
 8014332:	68ac      	ldr	r4, [r5, #8]
 8014334:	e7cf      	b.n	80142d6 <__swbuf_r+0x1a>
 8014336:	4b09      	ldr	r3, [pc, #36]	; (801435c <__swbuf_r+0xa0>)
 8014338:	429c      	cmp	r4, r3
 801433a:	bf08      	it	eq
 801433c:	68ec      	ldreq	r4, [r5, #12]
 801433e:	e7ca      	b.n	80142d6 <__swbuf_r+0x1a>
 8014340:	4621      	mov	r1, r4
 8014342:	4628      	mov	r0, r5
 8014344:	f000 f80c 	bl	8014360 <__swsetup_r>
 8014348:	2800      	cmp	r0, #0
 801434a:	d0cb      	beq.n	80142e4 <__swbuf_r+0x28>
 801434c:	f04f 37ff 	mov.w	r7, #4294967295
 8014350:	e7ea      	b.n	8014328 <__swbuf_r+0x6c>
 8014352:	bf00      	nop
 8014354:	08015f48 	.word	0x08015f48
 8014358:	08015f68 	.word	0x08015f68
 801435c:	08015f28 	.word	0x08015f28

08014360 <__swsetup_r>:
 8014360:	4b32      	ldr	r3, [pc, #200]	; (801442c <__swsetup_r+0xcc>)
 8014362:	b570      	push	{r4, r5, r6, lr}
 8014364:	681d      	ldr	r5, [r3, #0]
 8014366:	4606      	mov	r6, r0
 8014368:	460c      	mov	r4, r1
 801436a:	b125      	cbz	r5, 8014376 <__swsetup_r+0x16>
 801436c:	69ab      	ldr	r3, [r5, #24]
 801436e:	b913      	cbnz	r3, 8014376 <__swsetup_r+0x16>
 8014370:	4628      	mov	r0, r5
 8014372:	f000 f985 	bl	8014680 <__sinit>
 8014376:	4b2e      	ldr	r3, [pc, #184]	; (8014430 <__swsetup_r+0xd0>)
 8014378:	429c      	cmp	r4, r3
 801437a:	d10f      	bne.n	801439c <__swsetup_r+0x3c>
 801437c:	686c      	ldr	r4, [r5, #4]
 801437e:	89a3      	ldrh	r3, [r4, #12]
 8014380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014384:	0719      	lsls	r1, r3, #28
 8014386:	d42c      	bmi.n	80143e2 <__swsetup_r+0x82>
 8014388:	06dd      	lsls	r5, r3, #27
 801438a:	d411      	bmi.n	80143b0 <__swsetup_r+0x50>
 801438c:	2309      	movs	r3, #9
 801438e:	6033      	str	r3, [r6, #0]
 8014390:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014394:	f04f 30ff 	mov.w	r0, #4294967295
 8014398:	81a3      	strh	r3, [r4, #12]
 801439a:	e03e      	b.n	801441a <__swsetup_r+0xba>
 801439c:	4b25      	ldr	r3, [pc, #148]	; (8014434 <__swsetup_r+0xd4>)
 801439e:	429c      	cmp	r4, r3
 80143a0:	d101      	bne.n	80143a6 <__swsetup_r+0x46>
 80143a2:	68ac      	ldr	r4, [r5, #8]
 80143a4:	e7eb      	b.n	801437e <__swsetup_r+0x1e>
 80143a6:	4b24      	ldr	r3, [pc, #144]	; (8014438 <__swsetup_r+0xd8>)
 80143a8:	429c      	cmp	r4, r3
 80143aa:	bf08      	it	eq
 80143ac:	68ec      	ldreq	r4, [r5, #12]
 80143ae:	e7e6      	b.n	801437e <__swsetup_r+0x1e>
 80143b0:	0758      	lsls	r0, r3, #29
 80143b2:	d512      	bpl.n	80143da <__swsetup_r+0x7a>
 80143b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143b6:	b141      	cbz	r1, 80143ca <__swsetup_r+0x6a>
 80143b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143bc:	4299      	cmp	r1, r3
 80143be:	d002      	beq.n	80143c6 <__swsetup_r+0x66>
 80143c0:	4630      	mov	r0, r6
 80143c2:	f7fe fe5b 	bl	801307c <_free_r>
 80143c6:	2300      	movs	r3, #0
 80143c8:	6363      	str	r3, [r4, #52]	; 0x34
 80143ca:	89a3      	ldrh	r3, [r4, #12]
 80143cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80143d0:	81a3      	strh	r3, [r4, #12]
 80143d2:	2300      	movs	r3, #0
 80143d4:	6063      	str	r3, [r4, #4]
 80143d6:	6923      	ldr	r3, [r4, #16]
 80143d8:	6023      	str	r3, [r4, #0]
 80143da:	89a3      	ldrh	r3, [r4, #12]
 80143dc:	f043 0308 	orr.w	r3, r3, #8
 80143e0:	81a3      	strh	r3, [r4, #12]
 80143e2:	6923      	ldr	r3, [r4, #16]
 80143e4:	b94b      	cbnz	r3, 80143fa <__swsetup_r+0x9a>
 80143e6:	89a3      	ldrh	r3, [r4, #12]
 80143e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80143ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143f0:	d003      	beq.n	80143fa <__swsetup_r+0x9a>
 80143f2:	4621      	mov	r1, r4
 80143f4:	4630      	mov	r0, r6
 80143f6:	f000 fa07 	bl	8014808 <__smakebuf_r>
 80143fa:	89a0      	ldrh	r0, [r4, #12]
 80143fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014400:	f010 0301 	ands.w	r3, r0, #1
 8014404:	d00a      	beq.n	801441c <__swsetup_r+0xbc>
 8014406:	2300      	movs	r3, #0
 8014408:	60a3      	str	r3, [r4, #8]
 801440a:	6963      	ldr	r3, [r4, #20]
 801440c:	425b      	negs	r3, r3
 801440e:	61a3      	str	r3, [r4, #24]
 8014410:	6923      	ldr	r3, [r4, #16]
 8014412:	b943      	cbnz	r3, 8014426 <__swsetup_r+0xc6>
 8014414:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014418:	d1ba      	bne.n	8014390 <__swsetup_r+0x30>
 801441a:	bd70      	pop	{r4, r5, r6, pc}
 801441c:	0781      	lsls	r1, r0, #30
 801441e:	bf58      	it	pl
 8014420:	6963      	ldrpl	r3, [r4, #20]
 8014422:	60a3      	str	r3, [r4, #8]
 8014424:	e7f4      	b.n	8014410 <__swsetup_r+0xb0>
 8014426:	2000      	movs	r0, #0
 8014428:	e7f7      	b.n	801441a <__swsetup_r+0xba>
 801442a:	bf00      	nop
 801442c:	20000174 	.word	0x20000174
 8014430:	08015f48 	.word	0x08015f48
 8014434:	08015f68 	.word	0x08015f68
 8014438:	08015f28 	.word	0x08015f28

0801443c <abort>:
 801443c:	2006      	movs	r0, #6
 801443e:	b508      	push	{r3, lr}
 8014440:	f000 faa4 	bl	801498c <raise>
 8014444:	2001      	movs	r0, #1
 8014446:	f7f2 fb78 	bl	8006b3a <_exit>
	...

0801444c <__sflush_r>:
 801444c:	898a      	ldrh	r2, [r1, #12]
 801444e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014452:	4605      	mov	r5, r0
 8014454:	0710      	lsls	r0, r2, #28
 8014456:	460c      	mov	r4, r1
 8014458:	d458      	bmi.n	801450c <__sflush_r+0xc0>
 801445a:	684b      	ldr	r3, [r1, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	dc05      	bgt.n	801446c <__sflush_r+0x20>
 8014460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014462:	2b00      	cmp	r3, #0
 8014464:	dc02      	bgt.n	801446c <__sflush_r+0x20>
 8014466:	2000      	movs	r0, #0
 8014468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801446c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801446e:	2e00      	cmp	r6, #0
 8014470:	d0f9      	beq.n	8014466 <__sflush_r+0x1a>
 8014472:	2300      	movs	r3, #0
 8014474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014478:	682f      	ldr	r7, [r5, #0]
 801447a:	602b      	str	r3, [r5, #0]
 801447c:	d032      	beq.n	80144e4 <__sflush_r+0x98>
 801447e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014480:	89a3      	ldrh	r3, [r4, #12]
 8014482:	075a      	lsls	r2, r3, #29
 8014484:	d505      	bpl.n	8014492 <__sflush_r+0x46>
 8014486:	6863      	ldr	r3, [r4, #4]
 8014488:	1ac0      	subs	r0, r0, r3
 801448a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801448c:	b10b      	cbz	r3, 8014492 <__sflush_r+0x46>
 801448e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014490:	1ac0      	subs	r0, r0, r3
 8014492:	2300      	movs	r3, #0
 8014494:	4602      	mov	r2, r0
 8014496:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014498:	4628      	mov	r0, r5
 801449a:	6a21      	ldr	r1, [r4, #32]
 801449c:	47b0      	blx	r6
 801449e:	1c43      	adds	r3, r0, #1
 80144a0:	89a3      	ldrh	r3, [r4, #12]
 80144a2:	d106      	bne.n	80144b2 <__sflush_r+0x66>
 80144a4:	6829      	ldr	r1, [r5, #0]
 80144a6:	291d      	cmp	r1, #29
 80144a8:	d82c      	bhi.n	8014504 <__sflush_r+0xb8>
 80144aa:	4a2a      	ldr	r2, [pc, #168]	; (8014554 <__sflush_r+0x108>)
 80144ac:	40ca      	lsrs	r2, r1
 80144ae:	07d6      	lsls	r6, r2, #31
 80144b0:	d528      	bpl.n	8014504 <__sflush_r+0xb8>
 80144b2:	2200      	movs	r2, #0
 80144b4:	6062      	str	r2, [r4, #4]
 80144b6:	6922      	ldr	r2, [r4, #16]
 80144b8:	04d9      	lsls	r1, r3, #19
 80144ba:	6022      	str	r2, [r4, #0]
 80144bc:	d504      	bpl.n	80144c8 <__sflush_r+0x7c>
 80144be:	1c42      	adds	r2, r0, #1
 80144c0:	d101      	bne.n	80144c6 <__sflush_r+0x7a>
 80144c2:	682b      	ldr	r3, [r5, #0]
 80144c4:	b903      	cbnz	r3, 80144c8 <__sflush_r+0x7c>
 80144c6:	6560      	str	r0, [r4, #84]	; 0x54
 80144c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144ca:	602f      	str	r7, [r5, #0]
 80144cc:	2900      	cmp	r1, #0
 80144ce:	d0ca      	beq.n	8014466 <__sflush_r+0x1a>
 80144d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144d4:	4299      	cmp	r1, r3
 80144d6:	d002      	beq.n	80144de <__sflush_r+0x92>
 80144d8:	4628      	mov	r0, r5
 80144da:	f7fe fdcf 	bl	801307c <_free_r>
 80144de:	2000      	movs	r0, #0
 80144e0:	6360      	str	r0, [r4, #52]	; 0x34
 80144e2:	e7c1      	b.n	8014468 <__sflush_r+0x1c>
 80144e4:	6a21      	ldr	r1, [r4, #32]
 80144e6:	2301      	movs	r3, #1
 80144e8:	4628      	mov	r0, r5
 80144ea:	47b0      	blx	r6
 80144ec:	1c41      	adds	r1, r0, #1
 80144ee:	d1c7      	bne.n	8014480 <__sflush_r+0x34>
 80144f0:	682b      	ldr	r3, [r5, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d0c4      	beq.n	8014480 <__sflush_r+0x34>
 80144f6:	2b1d      	cmp	r3, #29
 80144f8:	d001      	beq.n	80144fe <__sflush_r+0xb2>
 80144fa:	2b16      	cmp	r3, #22
 80144fc:	d101      	bne.n	8014502 <__sflush_r+0xb6>
 80144fe:	602f      	str	r7, [r5, #0]
 8014500:	e7b1      	b.n	8014466 <__sflush_r+0x1a>
 8014502:	89a3      	ldrh	r3, [r4, #12]
 8014504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014508:	81a3      	strh	r3, [r4, #12]
 801450a:	e7ad      	b.n	8014468 <__sflush_r+0x1c>
 801450c:	690f      	ldr	r7, [r1, #16]
 801450e:	2f00      	cmp	r7, #0
 8014510:	d0a9      	beq.n	8014466 <__sflush_r+0x1a>
 8014512:	0793      	lsls	r3, r2, #30
 8014514:	bf18      	it	ne
 8014516:	2300      	movne	r3, #0
 8014518:	680e      	ldr	r6, [r1, #0]
 801451a:	bf08      	it	eq
 801451c:	694b      	ldreq	r3, [r1, #20]
 801451e:	eba6 0807 	sub.w	r8, r6, r7
 8014522:	600f      	str	r7, [r1, #0]
 8014524:	608b      	str	r3, [r1, #8]
 8014526:	f1b8 0f00 	cmp.w	r8, #0
 801452a:	dd9c      	ble.n	8014466 <__sflush_r+0x1a>
 801452c:	4643      	mov	r3, r8
 801452e:	463a      	mov	r2, r7
 8014530:	4628      	mov	r0, r5
 8014532:	6a21      	ldr	r1, [r4, #32]
 8014534:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014536:	47b0      	blx	r6
 8014538:	2800      	cmp	r0, #0
 801453a:	dc06      	bgt.n	801454a <__sflush_r+0xfe>
 801453c:	89a3      	ldrh	r3, [r4, #12]
 801453e:	f04f 30ff 	mov.w	r0, #4294967295
 8014542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014546:	81a3      	strh	r3, [r4, #12]
 8014548:	e78e      	b.n	8014468 <__sflush_r+0x1c>
 801454a:	4407      	add	r7, r0
 801454c:	eba8 0800 	sub.w	r8, r8, r0
 8014550:	e7e9      	b.n	8014526 <__sflush_r+0xda>
 8014552:	bf00      	nop
 8014554:	20400001 	.word	0x20400001

08014558 <_fflush_r>:
 8014558:	b538      	push	{r3, r4, r5, lr}
 801455a:	690b      	ldr	r3, [r1, #16]
 801455c:	4605      	mov	r5, r0
 801455e:	460c      	mov	r4, r1
 8014560:	b913      	cbnz	r3, 8014568 <_fflush_r+0x10>
 8014562:	2500      	movs	r5, #0
 8014564:	4628      	mov	r0, r5
 8014566:	bd38      	pop	{r3, r4, r5, pc}
 8014568:	b118      	cbz	r0, 8014572 <_fflush_r+0x1a>
 801456a:	6983      	ldr	r3, [r0, #24]
 801456c:	b90b      	cbnz	r3, 8014572 <_fflush_r+0x1a>
 801456e:	f000 f887 	bl	8014680 <__sinit>
 8014572:	4b14      	ldr	r3, [pc, #80]	; (80145c4 <_fflush_r+0x6c>)
 8014574:	429c      	cmp	r4, r3
 8014576:	d11b      	bne.n	80145b0 <_fflush_r+0x58>
 8014578:	686c      	ldr	r4, [r5, #4]
 801457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d0ef      	beq.n	8014562 <_fflush_r+0xa>
 8014582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014584:	07d0      	lsls	r0, r2, #31
 8014586:	d404      	bmi.n	8014592 <_fflush_r+0x3a>
 8014588:	0599      	lsls	r1, r3, #22
 801458a:	d402      	bmi.n	8014592 <_fflush_r+0x3a>
 801458c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801458e:	f000 f915 	bl	80147bc <__retarget_lock_acquire_recursive>
 8014592:	4628      	mov	r0, r5
 8014594:	4621      	mov	r1, r4
 8014596:	f7ff ff59 	bl	801444c <__sflush_r>
 801459a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801459c:	4605      	mov	r5, r0
 801459e:	07da      	lsls	r2, r3, #31
 80145a0:	d4e0      	bmi.n	8014564 <_fflush_r+0xc>
 80145a2:	89a3      	ldrh	r3, [r4, #12]
 80145a4:	059b      	lsls	r3, r3, #22
 80145a6:	d4dd      	bmi.n	8014564 <_fflush_r+0xc>
 80145a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145aa:	f000 f908 	bl	80147be <__retarget_lock_release_recursive>
 80145ae:	e7d9      	b.n	8014564 <_fflush_r+0xc>
 80145b0:	4b05      	ldr	r3, [pc, #20]	; (80145c8 <_fflush_r+0x70>)
 80145b2:	429c      	cmp	r4, r3
 80145b4:	d101      	bne.n	80145ba <_fflush_r+0x62>
 80145b6:	68ac      	ldr	r4, [r5, #8]
 80145b8:	e7df      	b.n	801457a <_fflush_r+0x22>
 80145ba:	4b04      	ldr	r3, [pc, #16]	; (80145cc <_fflush_r+0x74>)
 80145bc:	429c      	cmp	r4, r3
 80145be:	bf08      	it	eq
 80145c0:	68ec      	ldreq	r4, [r5, #12]
 80145c2:	e7da      	b.n	801457a <_fflush_r+0x22>
 80145c4:	08015f48 	.word	0x08015f48
 80145c8:	08015f68 	.word	0x08015f68
 80145cc:	08015f28 	.word	0x08015f28

080145d0 <std>:
 80145d0:	2300      	movs	r3, #0
 80145d2:	b510      	push	{r4, lr}
 80145d4:	4604      	mov	r4, r0
 80145d6:	e9c0 3300 	strd	r3, r3, [r0]
 80145da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145de:	6083      	str	r3, [r0, #8]
 80145e0:	8181      	strh	r1, [r0, #12]
 80145e2:	6643      	str	r3, [r0, #100]	; 0x64
 80145e4:	81c2      	strh	r2, [r0, #14]
 80145e6:	6183      	str	r3, [r0, #24]
 80145e8:	4619      	mov	r1, r3
 80145ea:	2208      	movs	r2, #8
 80145ec:	305c      	adds	r0, #92	; 0x5c
 80145ee:	f7fe fac5 	bl	8012b7c <memset>
 80145f2:	4b05      	ldr	r3, [pc, #20]	; (8014608 <std+0x38>)
 80145f4:	6224      	str	r4, [r4, #32]
 80145f6:	6263      	str	r3, [r4, #36]	; 0x24
 80145f8:	4b04      	ldr	r3, [pc, #16]	; (801460c <std+0x3c>)
 80145fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80145fc:	4b04      	ldr	r3, [pc, #16]	; (8014610 <std+0x40>)
 80145fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014600:	4b04      	ldr	r3, [pc, #16]	; (8014614 <std+0x44>)
 8014602:	6323      	str	r3, [r4, #48]	; 0x30
 8014604:	bd10      	pop	{r4, pc}
 8014606:	bf00      	nop
 8014608:	08012c21 	.word	0x08012c21
 801460c:	08012c47 	.word	0x08012c47
 8014610:	08012c7f 	.word	0x08012c7f
 8014614:	08012ca3 	.word	0x08012ca3

08014618 <_cleanup_r>:
 8014618:	4901      	ldr	r1, [pc, #4]	; (8014620 <_cleanup_r+0x8>)
 801461a:	f000 b8af 	b.w	801477c <_fwalk_reent>
 801461e:	bf00      	nop
 8014620:	08014559 	.word	0x08014559

08014624 <__sfmoreglue>:
 8014624:	b570      	push	{r4, r5, r6, lr}
 8014626:	2568      	movs	r5, #104	; 0x68
 8014628:	1e4a      	subs	r2, r1, #1
 801462a:	4355      	muls	r5, r2
 801462c:	460e      	mov	r6, r1
 801462e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014632:	f7fe fd6f 	bl	8013114 <_malloc_r>
 8014636:	4604      	mov	r4, r0
 8014638:	b140      	cbz	r0, 801464c <__sfmoreglue+0x28>
 801463a:	2100      	movs	r1, #0
 801463c:	e9c0 1600 	strd	r1, r6, [r0]
 8014640:	300c      	adds	r0, #12
 8014642:	60a0      	str	r0, [r4, #8]
 8014644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014648:	f7fe fa98 	bl	8012b7c <memset>
 801464c:	4620      	mov	r0, r4
 801464e:	bd70      	pop	{r4, r5, r6, pc}

08014650 <__sfp_lock_acquire>:
 8014650:	4801      	ldr	r0, [pc, #4]	; (8014658 <__sfp_lock_acquire+0x8>)
 8014652:	f000 b8b3 	b.w	80147bc <__retarget_lock_acquire_recursive>
 8014656:	bf00      	nop
 8014658:	20004db4 	.word	0x20004db4

0801465c <__sfp_lock_release>:
 801465c:	4801      	ldr	r0, [pc, #4]	; (8014664 <__sfp_lock_release+0x8>)
 801465e:	f000 b8ae 	b.w	80147be <__retarget_lock_release_recursive>
 8014662:	bf00      	nop
 8014664:	20004db4 	.word	0x20004db4

08014668 <__sinit_lock_acquire>:
 8014668:	4801      	ldr	r0, [pc, #4]	; (8014670 <__sinit_lock_acquire+0x8>)
 801466a:	f000 b8a7 	b.w	80147bc <__retarget_lock_acquire_recursive>
 801466e:	bf00      	nop
 8014670:	20004daf 	.word	0x20004daf

08014674 <__sinit_lock_release>:
 8014674:	4801      	ldr	r0, [pc, #4]	; (801467c <__sinit_lock_release+0x8>)
 8014676:	f000 b8a2 	b.w	80147be <__retarget_lock_release_recursive>
 801467a:	bf00      	nop
 801467c:	20004daf 	.word	0x20004daf

08014680 <__sinit>:
 8014680:	b510      	push	{r4, lr}
 8014682:	4604      	mov	r4, r0
 8014684:	f7ff fff0 	bl	8014668 <__sinit_lock_acquire>
 8014688:	69a3      	ldr	r3, [r4, #24]
 801468a:	b11b      	cbz	r3, 8014694 <__sinit+0x14>
 801468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014690:	f7ff bff0 	b.w	8014674 <__sinit_lock_release>
 8014694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014698:	6523      	str	r3, [r4, #80]	; 0x50
 801469a:	4b13      	ldr	r3, [pc, #76]	; (80146e8 <__sinit+0x68>)
 801469c:	4a13      	ldr	r2, [pc, #76]	; (80146ec <__sinit+0x6c>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80146a2:	42a3      	cmp	r3, r4
 80146a4:	bf08      	it	eq
 80146a6:	2301      	moveq	r3, #1
 80146a8:	4620      	mov	r0, r4
 80146aa:	bf08      	it	eq
 80146ac:	61a3      	streq	r3, [r4, #24]
 80146ae:	f000 f81f 	bl	80146f0 <__sfp>
 80146b2:	6060      	str	r0, [r4, #4]
 80146b4:	4620      	mov	r0, r4
 80146b6:	f000 f81b 	bl	80146f0 <__sfp>
 80146ba:	60a0      	str	r0, [r4, #8]
 80146bc:	4620      	mov	r0, r4
 80146be:	f000 f817 	bl	80146f0 <__sfp>
 80146c2:	2200      	movs	r2, #0
 80146c4:	2104      	movs	r1, #4
 80146c6:	60e0      	str	r0, [r4, #12]
 80146c8:	6860      	ldr	r0, [r4, #4]
 80146ca:	f7ff ff81 	bl	80145d0 <std>
 80146ce:	2201      	movs	r2, #1
 80146d0:	2109      	movs	r1, #9
 80146d2:	68a0      	ldr	r0, [r4, #8]
 80146d4:	f7ff ff7c 	bl	80145d0 <std>
 80146d8:	2202      	movs	r2, #2
 80146da:	2112      	movs	r1, #18
 80146dc:	68e0      	ldr	r0, [r4, #12]
 80146de:	f7ff ff77 	bl	80145d0 <std>
 80146e2:	2301      	movs	r3, #1
 80146e4:	61a3      	str	r3, [r4, #24]
 80146e6:	e7d1      	b.n	801468c <__sinit+0xc>
 80146e8:	08015cfc 	.word	0x08015cfc
 80146ec:	08014619 	.word	0x08014619

080146f0 <__sfp>:
 80146f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146f2:	4607      	mov	r7, r0
 80146f4:	f7ff ffac 	bl	8014650 <__sfp_lock_acquire>
 80146f8:	4b1e      	ldr	r3, [pc, #120]	; (8014774 <__sfp+0x84>)
 80146fa:	681e      	ldr	r6, [r3, #0]
 80146fc:	69b3      	ldr	r3, [r6, #24]
 80146fe:	b913      	cbnz	r3, 8014706 <__sfp+0x16>
 8014700:	4630      	mov	r0, r6
 8014702:	f7ff ffbd 	bl	8014680 <__sinit>
 8014706:	3648      	adds	r6, #72	; 0x48
 8014708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801470c:	3b01      	subs	r3, #1
 801470e:	d503      	bpl.n	8014718 <__sfp+0x28>
 8014710:	6833      	ldr	r3, [r6, #0]
 8014712:	b30b      	cbz	r3, 8014758 <__sfp+0x68>
 8014714:	6836      	ldr	r6, [r6, #0]
 8014716:	e7f7      	b.n	8014708 <__sfp+0x18>
 8014718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801471c:	b9d5      	cbnz	r5, 8014754 <__sfp+0x64>
 801471e:	4b16      	ldr	r3, [pc, #88]	; (8014778 <__sfp+0x88>)
 8014720:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014724:	60e3      	str	r3, [r4, #12]
 8014726:	6665      	str	r5, [r4, #100]	; 0x64
 8014728:	f000 f847 	bl	80147ba <__retarget_lock_init_recursive>
 801472c:	f7ff ff96 	bl	801465c <__sfp_lock_release>
 8014730:	2208      	movs	r2, #8
 8014732:	4629      	mov	r1, r5
 8014734:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014738:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801473c:	6025      	str	r5, [r4, #0]
 801473e:	61a5      	str	r5, [r4, #24]
 8014740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014744:	f7fe fa1a 	bl	8012b7c <memset>
 8014748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801474c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014750:	4620      	mov	r0, r4
 8014752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014754:	3468      	adds	r4, #104	; 0x68
 8014756:	e7d9      	b.n	801470c <__sfp+0x1c>
 8014758:	2104      	movs	r1, #4
 801475a:	4638      	mov	r0, r7
 801475c:	f7ff ff62 	bl	8014624 <__sfmoreglue>
 8014760:	4604      	mov	r4, r0
 8014762:	6030      	str	r0, [r6, #0]
 8014764:	2800      	cmp	r0, #0
 8014766:	d1d5      	bne.n	8014714 <__sfp+0x24>
 8014768:	f7ff ff78 	bl	801465c <__sfp_lock_release>
 801476c:	230c      	movs	r3, #12
 801476e:	603b      	str	r3, [r7, #0]
 8014770:	e7ee      	b.n	8014750 <__sfp+0x60>
 8014772:	bf00      	nop
 8014774:	08015cfc 	.word	0x08015cfc
 8014778:	ffff0001 	.word	0xffff0001

0801477c <_fwalk_reent>:
 801477c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014780:	4606      	mov	r6, r0
 8014782:	4688      	mov	r8, r1
 8014784:	2700      	movs	r7, #0
 8014786:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801478a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801478e:	f1b9 0901 	subs.w	r9, r9, #1
 8014792:	d505      	bpl.n	80147a0 <_fwalk_reent+0x24>
 8014794:	6824      	ldr	r4, [r4, #0]
 8014796:	2c00      	cmp	r4, #0
 8014798:	d1f7      	bne.n	801478a <_fwalk_reent+0xe>
 801479a:	4638      	mov	r0, r7
 801479c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147a0:	89ab      	ldrh	r3, [r5, #12]
 80147a2:	2b01      	cmp	r3, #1
 80147a4:	d907      	bls.n	80147b6 <_fwalk_reent+0x3a>
 80147a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147aa:	3301      	adds	r3, #1
 80147ac:	d003      	beq.n	80147b6 <_fwalk_reent+0x3a>
 80147ae:	4629      	mov	r1, r5
 80147b0:	4630      	mov	r0, r6
 80147b2:	47c0      	blx	r8
 80147b4:	4307      	orrs	r7, r0
 80147b6:	3568      	adds	r5, #104	; 0x68
 80147b8:	e7e9      	b.n	801478e <_fwalk_reent+0x12>

080147ba <__retarget_lock_init_recursive>:
 80147ba:	4770      	bx	lr

080147bc <__retarget_lock_acquire_recursive>:
 80147bc:	4770      	bx	lr

080147be <__retarget_lock_release_recursive>:
 80147be:	4770      	bx	lr

080147c0 <__swhatbuf_r>:
 80147c0:	b570      	push	{r4, r5, r6, lr}
 80147c2:	460e      	mov	r6, r1
 80147c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147c8:	4614      	mov	r4, r2
 80147ca:	2900      	cmp	r1, #0
 80147cc:	461d      	mov	r5, r3
 80147ce:	b096      	sub	sp, #88	; 0x58
 80147d0:	da07      	bge.n	80147e2 <__swhatbuf_r+0x22>
 80147d2:	2300      	movs	r3, #0
 80147d4:	602b      	str	r3, [r5, #0]
 80147d6:	89b3      	ldrh	r3, [r6, #12]
 80147d8:	061a      	lsls	r2, r3, #24
 80147da:	d410      	bmi.n	80147fe <__swhatbuf_r+0x3e>
 80147dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147e0:	e00e      	b.n	8014800 <__swhatbuf_r+0x40>
 80147e2:	466a      	mov	r2, sp
 80147e4:	f000 f8ee 	bl	80149c4 <_fstat_r>
 80147e8:	2800      	cmp	r0, #0
 80147ea:	dbf2      	blt.n	80147d2 <__swhatbuf_r+0x12>
 80147ec:	9a01      	ldr	r2, [sp, #4]
 80147ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80147f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80147f6:	425a      	negs	r2, r3
 80147f8:	415a      	adcs	r2, r3
 80147fa:	602a      	str	r2, [r5, #0]
 80147fc:	e7ee      	b.n	80147dc <__swhatbuf_r+0x1c>
 80147fe:	2340      	movs	r3, #64	; 0x40
 8014800:	2000      	movs	r0, #0
 8014802:	6023      	str	r3, [r4, #0]
 8014804:	b016      	add	sp, #88	; 0x58
 8014806:	bd70      	pop	{r4, r5, r6, pc}

08014808 <__smakebuf_r>:
 8014808:	898b      	ldrh	r3, [r1, #12]
 801480a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801480c:	079d      	lsls	r5, r3, #30
 801480e:	4606      	mov	r6, r0
 8014810:	460c      	mov	r4, r1
 8014812:	d507      	bpl.n	8014824 <__smakebuf_r+0x1c>
 8014814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014818:	6023      	str	r3, [r4, #0]
 801481a:	6123      	str	r3, [r4, #16]
 801481c:	2301      	movs	r3, #1
 801481e:	6163      	str	r3, [r4, #20]
 8014820:	b002      	add	sp, #8
 8014822:	bd70      	pop	{r4, r5, r6, pc}
 8014824:	466a      	mov	r2, sp
 8014826:	ab01      	add	r3, sp, #4
 8014828:	f7ff ffca 	bl	80147c0 <__swhatbuf_r>
 801482c:	9900      	ldr	r1, [sp, #0]
 801482e:	4605      	mov	r5, r0
 8014830:	4630      	mov	r0, r6
 8014832:	f7fe fc6f 	bl	8013114 <_malloc_r>
 8014836:	b948      	cbnz	r0, 801484c <__smakebuf_r+0x44>
 8014838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801483c:	059a      	lsls	r2, r3, #22
 801483e:	d4ef      	bmi.n	8014820 <__smakebuf_r+0x18>
 8014840:	f023 0303 	bic.w	r3, r3, #3
 8014844:	f043 0302 	orr.w	r3, r3, #2
 8014848:	81a3      	strh	r3, [r4, #12]
 801484a:	e7e3      	b.n	8014814 <__smakebuf_r+0xc>
 801484c:	4b0d      	ldr	r3, [pc, #52]	; (8014884 <__smakebuf_r+0x7c>)
 801484e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014850:	89a3      	ldrh	r3, [r4, #12]
 8014852:	6020      	str	r0, [r4, #0]
 8014854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014858:	81a3      	strh	r3, [r4, #12]
 801485a:	9b00      	ldr	r3, [sp, #0]
 801485c:	6120      	str	r0, [r4, #16]
 801485e:	6163      	str	r3, [r4, #20]
 8014860:	9b01      	ldr	r3, [sp, #4]
 8014862:	b15b      	cbz	r3, 801487c <__smakebuf_r+0x74>
 8014864:	4630      	mov	r0, r6
 8014866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801486a:	f000 f8bd 	bl	80149e8 <_isatty_r>
 801486e:	b128      	cbz	r0, 801487c <__smakebuf_r+0x74>
 8014870:	89a3      	ldrh	r3, [r4, #12]
 8014872:	f023 0303 	bic.w	r3, r3, #3
 8014876:	f043 0301 	orr.w	r3, r3, #1
 801487a:	81a3      	strh	r3, [r4, #12]
 801487c:	89a0      	ldrh	r0, [r4, #12]
 801487e:	4305      	orrs	r5, r0
 8014880:	81a5      	strh	r5, [r4, #12]
 8014882:	e7cd      	b.n	8014820 <__smakebuf_r+0x18>
 8014884:	08014619 	.word	0x08014619

08014888 <memchr>:
 8014888:	4603      	mov	r3, r0
 801488a:	b510      	push	{r4, lr}
 801488c:	b2c9      	uxtb	r1, r1
 801488e:	4402      	add	r2, r0
 8014890:	4293      	cmp	r3, r2
 8014892:	4618      	mov	r0, r3
 8014894:	d101      	bne.n	801489a <memchr+0x12>
 8014896:	2000      	movs	r0, #0
 8014898:	e003      	b.n	80148a2 <memchr+0x1a>
 801489a:	7804      	ldrb	r4, [r0, #0]
 801489c:	3301      	adds	r3, #1
 801489e:	428c      	cmp	r4, r1
 80148a0:	d1f6      	bne.n	8014890 <memchr+0x8>
 80148a2:	bd10      	pop	{r4, pc}

080148a4 <memmove>:
 80148a4:	4288      	cmp	r0, r1
 80148a6:	b510      	push	{r4, lr}
 80148a8:	eb01 0402 	add.w	r4, r1, r2
 80148ac:	d902      	bls.n	80148b4 <memmove+0x10>
 80148ae:	4284      	cmp	r4, r0
 80148b0:	4623      	mov	r3, r4
 80148b2:	d807      	bhi.n	80148c4 <memmove+0x20>
 80148b4:	1e43      	subs	r3, r0, #1
 80148b6:	42a1      	cmp	r1, r4
 80148b8:	d008      	beq.n	80148cc <memmove+0x28>
 80148ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80148c2:	e7f8      	b.n	80148b6 <memmove+0x12>
 80148c4:	4601      	mov	r1, r0
 80148c6:	4402      	add	r2, r0
 80148c8:	428a      	cmp	r2, r1
 80148ca:	d100      	bne.n	80148ce <memmove+0x2a>
 80148cc:	bd10      	pop	{r4, pc}
 80148ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80148d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80148d6:	e7f7      	b.n	80148c8 <memmove+0x24>

080148d8 <__malloc_lock>:
 80148d8:	4801      	ldr	r0, [pc, #4]	; (80148e0 <__malloc_lock+0x8>)
 80148da:	f7ff bf6f 	b.w	80147bc <__retarget_lock_acquire_recursive>
 80148de:	bf00      	nop
 80148e0:	20004db0 	.word	0x20004db0

080148e4 <__malloc_unlock>:
 80148e4:	4801      	ldr	r0, [pc, #4]	; (80148ec <__malloc_unlock+0x8>)
 80148e6:	f7ff bf6a 	b.w	80147be <__retarget_lock_release_recursive>
 80148ea:	bf00      	nop
 80148ec:	20004db0 	.word	0x20004db0

080148f0 <_realloc_r>:
 80148f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148f2:	4607      	mov	r7, r0
 80148f4:	4614      	mov	r4, r2
 80148f6:	460e      	mov	r6, r1
 80148f8:	b921      	cbnz	r1, 8014904 <_realloc_r+0x14>
 80148fa:	4611      	mov	r1, r2
 80148fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014900:	f7fe bc08 	b.w	8013114 <_malloc_r>
 8014904:	b922      	cbnz	r2, 8014910 <_realloc_r+0x20>
 8014906:	f7fe fbb9 	bl	801307c <_free_r>
 801490a:	4625      	mov	r5, r4
 801490c:	4628      	mov	r0, r5
 801490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014910:	f000 f87a 	bl	8014a08 <_malloc_usable_size_r>
 8014914:	42a0      	cmp	r0, r4
 8014916:	d20f      	bcs.n	8014938 <_realloc_r+0x48>
 8014918:	4621      	mov	r1, r4
 801491a:	4638      	mov	r0, r7
 801491c:	f7fe fbfa 	bl	8013114 <_malloc_r>
 8014920:	4605      	mov	r5, r0
 8014922:	2800      	cmp	r0, #0
 8014924:	d0f2      	beq.n	801490c <_realloc_r+0x1c>
 8014926:	4631      	mov	r1, r6
 8014928:	4622      	mov	r2, r4
 801492a:	f7fe f919 	bl	8012b60 <memcpy>
 801492e:	4631      	mov	r1, r6
 8014930:	4638      	mov	r0, r7
 8014932:	f7fe fba3 	bl	801307c <_free_r>
 8014936:	e7e9      	b.n	801490c <_realloc_r+0x1c>
 8014938:	4635      	mov	r5, r6
 801493a:	e7e7      	b.n	801490c <_realloc_r+0x1c>

0801493c <_raise_r>:
 801493c:	291f      	cmp	r1, #31
 801493e:	b538      	push	{r3, r4, r5, lr}
 8014940:	4604      	mov	r4, r0
 8014942:	460d      	mov	r5, r1
 8014944:	d904      	bls.n	8014950 <_raise_r+0x14>
 8014946:	2316      	movs	r3, #22
 8014948:	6003      	str	r3, [r0, #0]
 801494a:	f04f 30ff 	mov.w	r0, #4294967295
 801494e:	bd38      	pop	{r3, r4, r5, pc}
 8014950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014952:	b112      	cbz	r2, 801495a <_raise_r+0x1e>
 8014954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014958:	b94b      	cbnz	r3, 801496e <_raise_r+0x32>
 801495a:	4620      	mov	r0, r4
 801495c:	f000 f830 	bl	80149c0 <_getpid_r>
 8014960:	462a      	mov	r2, r5
 8014962:	4601      	mov	r1, r0
 8014964:	4620      	mov	r0, r4
 8014966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801496a:	f000 b817 	b.w	801499c <_kill_r>
 801496e:	2b01      	cmp	r3, #1
 8014970:	d00a      	beq.n	8014988 <_raise_r+0x4c>
 8014972:	1c59      	adds	r1, r3, #1
 8014974:	d103      	bne.n	801497e <_raise_r+0x42>
 8014976:	2316      	movs	r3, #22
 8014978:	6003      	str	r3, [r0, #0]
 801497a:	2001      	movs	r0, #1
 801497c:	e7e7      	b.n	801494e <_raise_r+0x12>
 801497e:	2400      	movs	r4, #0
 8014980:	4628      	mov	r0, r5
 8014982:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014986:	4798      	blx	r3
 8014988:	2000      	movs	r0, #0
 801498a:	e7e0      	b.n	801494e <_raise_r+0x12>

0801498c <raise>:
 801498c:	4b02      	ldr	r3, [pc, #8]	; (8014998 <raise+0xc>)
 801498e:	4601      	mov	r1, r0
 8014990:	6818      	ldr	r0, [r3, #0]
 8014992:	f7ff bfd3 	b.w	801493c <_raise_r>
 8014996:	bf00      	nop
 8014998:	20000174 	.word	0x20000174

0801499c <_kill_r>:
 801499c:	b538      	push	{r3, r4, r5, lr}
 801499e:	2300      	movs	r3, #0
 80149a0:	4d06      	ldr	r5, [pc, #24]	; (80149bc <_kill_r+0x20>)
 80149a2:	4604      	mov	r4, r0
 80149a4:	4608      	mov	r0, r1
 80149a6:	4611      	mov	r1, r2
 80149a8:	602b      	str	r3, [r5, #0]
 80149aa:	f7f2 f8b6 	bl	8006b1a <_kill>
 80149ae:	1c43      	adds	r3, r0, #1
 80149b0:	d102      	bne.n	80149b8 <_kill_r+0x1c>
 80149b2:	682b      	ldr	r3, [r5, #0]
 80149b4:	b103      	cbz	r3, 80149b8 <_kill_r+0x1c>
 80149b6:	6023      	str	r3, [r4, #0]
 80149b8:	bd38      	pop	{r3, r4, r5, pc}
 80149ba:	bf00      	nop
 80149bc:	20004da8 	.word	0x20004da8

080149c0 <_getpid_r>:
 80149c0:	f7f2 b8a4 	b.w	8006b0c <_getpid>

080149c4 <_fstat_r>:
 80149c4:	b538      	push	{r3, r4, r5, lr}
 80149c6:	2300      	movs	r3, #0
 80149c8:	4d06      	ldr	r5, [pc, #24]	; (80149e4 <_fstat_r+0x20>)
 80149ca:	4604      	mov	r4, r0
 80149cc:	4608      	mov	r0, r1
 80149ce:	4611      	mov	r1, r2
 80149d0:	602b      	str	r3, [r5, #0]
 80149d2:	f7f2 f900 	bl	8006bd6 <_fstat>
 80149d6:	1c43      	adds	r3, r0, #1
 80149d8:	d102      	bne.n	80149e0 <_fstat_r+0x1c>
 80149da:	682b      	ldr	r3, [r5, #0]
 80149dc:	b103      	cbz	r3, 80149e0 <_fstat_r+0x1c>
 80149de:	6023      	str	r3, [r4, #0]
 80149e0:	bd38      	pop	{r3, r4, r5, pc}
 80149e2:	bf00      	nop
 80149e4:	20004da8 	.word	0x20004da8

080149e8 <_isatty_r>:
 80149e8:	b538      	push	{r3, r4, r5, lr}
 80149ea:	2300      	movs	r3, #0
 80149ec:	4d05      	ldr	r5, [pc, #20]	; (8014a04 <_isatty_r+0x1c>)
 80149ee:	4604      	mov	r4, r0
 80149f0:	4608      	mov	r0, r1
 80149f2:	602b      	str	r3, [r5, #0]
 80149f4:	f7f2 f8fe 	bl	8006bf4 <_isatty>
 80149f8:	1c43      	adds	r3, r0, #1
 80149fa:	d102      	bne.n	8014a02 <_isatty_r+0x1a>
 80149fc:	682b      	ldr	r3, [r5, #0]
 80149fe:	b103      	cbz	r3, 8014a02 <_isatty_r+0x1a>
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	bd38      	pop	{r3, r4, r5, pc}
 8014a04:	20004da8 	.word	0x20004da8

08014a08 <_malloc_usable_size_r>:
 8014a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a0c:	1f18      	subs	r0, r3, #4
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	bfbc      	itt	lt
 8014a12:	580b      	ldrlt	r3, [r1, r0]
 8014a14:	18c0      	addlt	r0, r0, r3
 8014a16:	4770      	bx	lr

08014a18 <_init>:
 8014a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1a:	bf00      	nop
 8014a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a1e:	bc08      	pop	{r3}
 8014a20:	469e      	mov	lr, r3
 8014a22:	4770      	bx	lr

08014a24 <_fini>:
 8014a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a26:	bf00      	nop
 8014a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a2a:	bc08      	pop	{r3}
 8014a2c:	469e      	mov	lr, r3
 8014a2e:	4770      	bx	lr
